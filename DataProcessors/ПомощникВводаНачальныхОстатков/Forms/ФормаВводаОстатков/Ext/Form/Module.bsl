
#Область ОбщиеПеременныеМодуля

&НаКлиенте
Перем мЗаписьФормыОсуществлена;

#КонецОбласти 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПараметрыРаботыПрограммы();
	ЗаполнитьПараметрыРаботыФормы();
	
	Организация = Справочники.Организации.ОсновнаяОрганизация;
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	ЗагрузитьВводыОстатков();
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДата();
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	Настройки = Новый Структура("Запасы,ЗапасыПринятые,ЗапасыПереданные,ЗапасыВРазрезеГТД,РасчетыСПоставщиками,РасчетыСПокупателями,РасчетыСПерсоналом,ВнеоборотныеАктивы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы, Настройки.Запасы, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыПринятые, Настройки.ЗапасыПринятые, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыПереданные, Настройки.ЗапасыПереданные, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ЗапасыВРазрезеГТД, Настройки.ЗапасыВРазрезеГТД, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПоставщиками, Настройки.РасчетыСПоставщиками, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПокупателями, Настройки.РасчетыСПокупателями, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.РасчетыСПерсоналом, Настройки.РасчетыСПерсоналом, ЭтотОбъект, Ложь);
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.ВнеоборотныеАктивы, Настройки.ВнеоборотныеАктивы, ЭтотОбъект, Ложь);
	НастройкиЗагрузкиДанных = Новый ФиксированнаяСтруктура(Настройки);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ТекущийНомерСтраницы = 0;
	Если Параметры.Свойство("РазделУчета") Тогда
		Если Параметры.РазделУчета="Деньги" Тогда
			ТекущийНомерСтраницы = 1;
		ИначеЕсли Параметры.РазделУчета="Запасы" Тогда
			ТекущийНомерСтраницы = 2;
		ИначеЕсли Параметры.РазделУчета="Поставщики" Тогда
			ТекущийНомерСтраницы = 3;
		ИначеЕсли Параметры.РазделУчета="Покупатели" Тогда
			ТекущийНомерСтраницы = 3;
			Элементы.СтраницыРасчеты.ТекущаяСтраница = Элементы.СтраницаРасчетыСПокупателями;
		КонецЕсли; 
	КонецЕсли;
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПерваяСтраница = 0;
	ПоследняяСтраница = 5;
	мЗаписьФормыОсуществлена = Ложь;
	
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование	
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ИзменениеПараметровПрограммы(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменениеПараметровПрограммыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПараметровПрограммыСервер()
	
	ОбновитьПараметрыРаботыПрограммы();
	УстановитьВидимостьИДоступность("ОбновитьИнтефейс");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
					Возврат;
				КонецЕсли;
			КонецЦикла;
			Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
				Если Параметр = ТекСтрока.Контрагент Тогда
					УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПослеЗаписиБанковскогоСчета" Тогда
		ЗаполнитьДаннымиПоУмолчанию("ДенежныеСредства");
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Данные = Новый Массив();
			Если Параметр[1] = Неопределено Тогда
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				Данные.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование	
	
	Если ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		//Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Массив") Тогда
	    Для каждого СтруктураВалют Из ВыбранноеЗначение Цикл
			Валюта = СтруктураВалют.Валюта;
			СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[ТекущийИндексБанкКасса];
			НоваяСтрока = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
			НоваяСтрока.БанковскийСчетКасса = СтрокаТабличнойЧасти.БанковскийСчетКасса;
			НоваяСтрока.ВалютаДенежныхСредств = Валюта;
			Если НЕ УчетВалютныхОпераций Тогда
				ВключитьИспользованиеВалютныхОпераций();
			КонецЕсли; 
		КонецЦикла; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Кассы")
		ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.БанковскиеСчета")
		ИЛИ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Сотрудники") Тогда
		ПриДобавленииСчетаКассыПодотчетникаСервер(ВыбранноеЗначение);
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстЗавершения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мЗаписьФормыОсуществлена
		И Модифицированность Тогда
		
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		Текст = НСтр("ru='Сохранить внесенные изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		Если НЕ Отказ Тогда
			ЗаписатьИзмененияФормы();
			Оповестить("ОповещениеОбИзмененииДолга");
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытиемЗавершение()

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

#Область ДенежныеСредства

&НаКлиенте
Процедура ДекорацияДобавитьКассуНажатие(Элемент)
	
	СтруктураОткрытия = Новый Структура("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.Кассы.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииКассы(Касса, ДополнительныеДанные) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		Возврат;
	КонецЕсли; 	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДекорацияПодключитьБанкНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	ОткрытьФорму("ОбщаяФорма.ПомощникСозданияНастройкиОбменаУНФ", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДобавитьПодотчетникаНажатие(Элемент)
	
	СтруктураОткрытия = Новый Структура("РежимВыбора", Истина);
	Если ПараметрыФормы.СправочникСотрудниковПустой Тогда
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", СтруктураОткрытия, ЭтотОбъект);
	Иначе
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", СтруктураОткрытия, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область Запасы

&НаКлиенте
Процедура ВидЦенСебестоимостиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Оповещение = Новый ОписаниеОповещения("ВидЦенСебестоимостиОбработкаВыбораЗавершение", ЭтотОбъект, ВидЦенСебестоимости);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Обновить цены в таблице товаров?'"), РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенСебестоимостиОбработкаВыбораЗавершение(КодВозврата, СтароеЗначение) Экспорт
	
	Если КодВозврата=КодВозвратаДиалога.Да Тогда
		ЗаполнитьЦены(, Ложь, Ложь);
		Модифицированность = Истина;
	ИначеЕсли КодВозврата=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Истина;
	Иначе
		ВидЦенСебестоимости = СтароеЗначение;
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВидЦенПродажиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Оповещение = Новый ОписаниеОповещения("ВидЦенПродажиОбработкаВыбораЗавершение", ЭтотОбъект, ВидЦенПродажи);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Обновить цены в таблице товаров?'"), РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПродажиОбработкаВыбораЗавершение(КодВозврата, СтароеЗначение) Экспорт
	
	Если КодВозврата=КодВозвратаДиалога.Да Тогда
		ЗаполнитьЦены(Ложь);
		Модифицированность = Истина;
	ИначеЕсли КодВозврата=КодВозвратаДиалога.Нет Тогда
		Модифицированность = Истина;
	Иначе
		ВидЦенПродажи = СтароеЗначение;
	КонецЕсли; 	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ПараметрыФормы.СправочникНоменклатурыПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасы);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, Ячейка, ЗаказПокупателя";
	
	Если ВводНачальныхОстатковТовары.Запасы.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.Запасы[ВводНачальныхОстатковТовары.Запасы.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.Запасы.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасы", "СтруктурнаяЕдиница", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьИзменениеТаблицы()
	
	Если НЕ ТипЗнч(ТекущийЭлемент)=Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли; 	
	ТекущийЭлемент.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	ЗапасыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена;
	
	//Серийные номера
	РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(ВводНачальныхОстатковТовары.СерийныеНомера, СтрокаТабличнойЧасти, , ИспользоватьСерийныеНомераОстатки);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.ЦенаПродажи * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении()

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

&НаСервере
Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)

	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(ВводНачальныхОстатковТовары, АдресВоВременномХранилище, КлючСтроки);

КонецФункции

&НаСервере
Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(ВводНачальныхОстатковТовары, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗапасыПринятые

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	// Партии.
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеПартия" Тогда	
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ТоварыНаКомиссии"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ДавальческоеСырье"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Статус", ПредопределенноеЗначение("Перечисление.СтатусыПартий.ОтветственноеХранение"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПринятыеКонтрагент" Тогда 
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку") Тогда
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПринятыеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, Ячейка, Контрагент, Договор, ВидОперации, Заказ";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПринятые[ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПринятые.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПринятыеПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасыПринятые", "ВидОперации, СтруктурнаяЕдиница, Контрагент, Договор", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	
КонецПроцедуры 

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	Если (СтрокаТабличнойЧасти.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку")
		ИЛИ ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.ВидыОперацийПриходнаяНакладная.ПриемВПереработку"))
		И СтрокаТабличнойЧасти.ВидОперации<>ВыбранноеЗначение Тогда
		СтрокаТабличнойЧасти.Контрагент = Неопределено;
		СтрокаТабличнойЧасти.Договор = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		ВводНачальныхОстатковТовары.Ссылка, СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПринятые", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыФормыВыбора(ВводНачальныхОстатковТовары.Ссылка, 
		Организация, 
		СтрокаТабличнойЧасти.Контрагент,
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации,
		"ЗапасыПринятые"
	);
	
	Если ПараметрыОткрытия.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	ЗапасыПринятыеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗапасыПереданныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыПринятыеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ЦенаПродажи;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПринятыеСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаРасчетов / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыСуммаПриИзменении()

#КонецОбласти 

#Область ЗапасыПереданные

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПриАктивизацииЯчейки(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Доступность типов заказов.
	Если Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПереданныеЗаказ" Тогда
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику");
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПоставщику.ЗаказНаПереработку"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		ИначеЕсли СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию") Тогда
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу"));
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
			ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
			
		Иначе
			
			МассивОтбора = Новый Массив;
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
			МассивОтбора.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
			ДопустимыеТипы = Новый ОписаниеТипов(МассивОтбора);	
			
		КонецЕсли;
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = ДопустимыеТипы;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВводНачальныхОстатковТоварыЗапасыПереданныеКонтрагент" Тогда 
		
		Если СтрокаТабличнойЧасти.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку") Тогда
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Поставщик", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		Иначе
			
			НовыйМассив = Новый Массив();
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Покупатель", Истина);
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элемент.ТекущийЭлемент.ПараметрыВыбора = НовыеПараметры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗапасыПереданныеПриАктивизацииЯчейки()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "Контрагент, Договор, ВидОперации, Заказ";
	
	Если ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыПереданные[ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыПереданные.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыПереданныеПриИзмененииНоменклатуры(Стр);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковТоварыЗапасыПереданные", "ВидОперации, Контрагент, Договор", "Количество");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	
КонецПроцедуры // ЗапасыПереданныеПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	Если (СтрокаТабличнойЧасти.ВидОперации=ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку")
		ИЛИ ВыбранноеЗначение=ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку"))
		И СтрокаТабличнойЧасти.ВидОперации<>ВыбранноеЗначение Тогда
		СтрокаТабличнойЧасти.Контрагент = Неопределено;
		СтрокаТабличнойЧасти.Договор = Неопределено;
		СтрокаТабличнойЧасти.Заказ = Неопределено;
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Договор = ПолучитьДоговорПоУмолчанию(
		ВводНачальныхОстатковТовары.Ссылка, СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(
		СтрокаТабличнойЧасти.Контрагент, Организация, "ЗапасыПереданные", СтрокаТабличнойЧасти.ВидОперации);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
КонецПроцедуры // ЗапасыПереданныеКонтрагентПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыФормыВыбора(ВводНачальныхОстатковТовары.Ссылка, 
		Организация, 
		СтрокаТабличнойЧасти.Контрагент, 
		СтрокаТабличнойЧасти.Договор, 
		СтрокаТабличнойЧасти.ВидОперации, 
		"ЗапасыПереданные"
	);
	
	Если ПараметрыОткрытия.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбора", ПараметрыОткрытия, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	ЗапасыПереданныеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПереданныеПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика", СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.ЦенаПродажи = СтруктураДанные.ЦенаПродажи;
	СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.Количество*СтрокаТабличнойЧасти.ЦенаПродажи;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКоэффициент = 0;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ТекущийКоэффициент = 1;
	КонецЕсли;
	
	Коэффициент = 0;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Коэффициент = 1;
	КонецЕсли;
	
	Если ТекущийКоэффициент = 0 И Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения, ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	ИначеЕсли Коэффициент = 0 Тогда
		СтруктураДанные = ПолучитьДанныеЕдиницаИзмеренияПриИзменении(,ВыбранноеЗначение);
	ИначеЕсли ТекущийКоэффициент = 1 И Коэффициент = 1 Тогда
		СтруктураДанные = Новый Структура("ТекущийКоэффициент, Коэффициент", 1, 1);
	КонецЕсли;
	
	// Цена.
	Если СтруктураДанные.ТекущийКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтруктураДанные.Коэффициент / СтруктураДанные.ТекущийКоэффициент;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЕдиницаИзмеренияОбработкаВыбора()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеЦенаПродажиПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыЦенаПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры // ВводНачальныхОстатковТоварыЗапасыКоличествоПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСебестоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Себестоимость / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыПереданныеСуммаРасчетовПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
	
	// Цена.
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПродажи = СтрокаТабличнойЧасти.СуммаРасчетов / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ЗапасыВРазрезеГТД

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаРеквизитовАвтозаполнения = "СтранаПроисхождения";
	
	Если ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество()>0 Тогда 
		ДанныеДляЗаполнения = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД[ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;	
	
	Стр = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Добавить();
	Стр.Номенклатура = ВыбранноеЗначение;
	ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(Стр);
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущийЭлемент = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДКоличество;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	 
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущиеДанные;
	ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыВРазрезеГТДПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеТекущейСтроки = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекстСообщения = "";
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не заполнена страна происхождения!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
		   И ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД для отечественных товаров не ведется!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ДанныеТекущейСтроки.Номенклатура)
			И НЕ ТипНоменклатурыЗапас(ДанныеТекущейСтроки.Номенклатура)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Учет ГТД в программе ведеться только для номенклатуры с типом ""Запас"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДСтранаПроисхожденияПриИзменении(Элемент)
	
	ОчиститьНомерГТДПриИзмененииСтраны();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНомерГТДПриИзмененииСтраны()
	
	ДанныеТекущейСтроки = Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТД.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.СтранаПроисхождения)
			ИЛИ ДанныеТекущейСтроки.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ДанныеТекущейСтроки.НомерГТД = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область РасчетыСПоставщиками

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ПараметрыФормы.СправочникКонтрагентовПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Поставщик", Истина);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("Поставщик", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Добавить();
	Стр.Контрагент = ВыбранноеЗначение;
	РасчетыСПоставщикамиПриИзмененииКонтрагента(Стр);
	
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущийЭлемент = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВал;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	РасчетыСПоставщикамиПриИзмененииКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПоставщикамиПриИзмененииКонтрагента(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "РасчетыСПоставщиками");
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтруктураДанные.ВалютаРасчетов,
		ДатаОстатков
	);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);

КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСуммаВалПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговорПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходИзКассы")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.РасходСоСчета")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходИзКассы")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.РасходСоСчета")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСПокупателями

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ПараметрыФормы.СправочникКонтрагентовПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Покупатель", Истина);
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОтборФормы = Новый Структура;
		ОтборФормы.Вставить("Покупатель", Истина);
		ПараметрыОткрытия.Вставить("Отбор", ОтборФормы);
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	Стр = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Добавить();
	Стр.Контрагент = ВыбранноеЗначение;
	РасчетыСПокупателямиПриИзмененииКонтрагента(Стр);
	
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущийЭлемент = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВал;
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	РасчетыСПокупателямиПриИзмененииКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиКонтрагентПриИзменении()

&НаКлиенте
Процедура РасчетыСПокупателямиПриИзмененииКонтрагента(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(СтрокаТабличнойЧасти.Контрагент, Организация, "РасчетыСПокупателями");
	СтрокаТабличнойЧасти.Договор = СтруктураДанные.Договор;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтруктураДанные.ВалютаРасчетов,
		ДатаОстатков
	);
	
	СтрокаТабличнойЧасти.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	СтрокаТабличнойЧасти.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
	СтрокаТабличнойЧасти.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСуммаВалПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Договор,
		ДатаОстатков
	);
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговорПриИзменении()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	
КонецПроцедуры // ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПослеУдаления()

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеВКассу")
			И ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДокументПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
	 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Истина;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
		СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетыСПерсоналом

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ПараметрыФормы.СправочникСотрудниковПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом);
	ИначеЕсли НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, ПериодРегистрации, Валюта";
	
	Если ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()>0 Тогда
		ДанныеДляЗаполнения = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом[ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ДанныеДляЗаполнения.ПериодРегистрации = ДобавитьМесяц(НачалоМесяца(ДатаОстатков), -1);
		ДанныеДляЗаполнения.Валюта = ВалютаУчета;
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.Сотрудник = ВыбранноеЗначение;
	
	Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом", "СтруктурнаяЕдиница, ПериодРегистрации", "СуммаВал");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтрокаТабличнойЧасти.Валюта,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЗарплатаРасчетыСПерсоналомПериодРегистрацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЗарплатаРасчетыСПерсоналом.ТекущиеДанные;
	СтрокаТабличнойЧасти.ПериодРегистрации = НачалоМесяца(СтрокаТабличнойЧасти.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти 

#Область Эквайринг

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуЭквайринговыйТерминалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуСуммаВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.СуммаВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингуКомиссияВалПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковЭквайрингРасчетыПоЭквайрингу.ТекущиеДанные;
	
	СтруктураДанные = ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(СтрокаТабличнойЧасти.ЭквайринговыйТерминал);

	СтрокаТабличнойЧасти.Комиссия = ПересчитатьИзВалютыВВалютуУчета(СтрокаТабличнойЧасти.КомиссияВал,
																 СтруктураДанные.ВалютаДенежныхСредств,
																 ДатаОстатков);

КонецПроцедуры

#КонецОбласти

#Область Имущество

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ПараметрыФормы.СправочникИмуществаПустой И НЕ Копирование Тогда
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ВнеоборотныеАктивы.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы);
	ИначеЕсли НЕ Копирование Тогда 
		Отказ = Истина;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.ВнеоборотныеАктивы.ФормаВыбора", ПараметрыОткрытия, Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВнеоборотныеАктивы") Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаРеквизитовАвтозаполнения = "СтруктурнаяЕдиница, НаправлениеДеятельности, СчетЗатрат";
	
	Если ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()>0 Тогда
		ДанныеДляЗаполнения = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы[ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()-1];
	Иначе
		ДанныеДляЗаполнения = Новый Структура(ИменаРеквизитовАвтозаполнения);
		ДанныеДляЗаполнения.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		ДанныеДляЗаполнения.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ОсновноеНаправление");
		ДанныеДляЗаполнения.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Управленческий.АмортизацияВнеоборотныхАктивов");
	КонецЕсли; 
	
	Стр = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Добавить();
	ЗаполнитьЗначенияСвойств(Стр, ДанныеДляЗаполнения, ИменаРеквизитовАвтозаполнения);
	Стр.ВнеоборотныйАктив = ВыбранноеЗначение;
	Стр.НачислятьАмортизацию = Истина;
	ИмуществоПриИзмененииВнеоборотногоАктива(Стр);
	
	Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущаяСтрока = Стр.ПолучитьИдентификатор();
	ОпределитьТекущийЭлементТаблицы(Стр, "ВводНачальныхОстатковИмуществоВнеоборотныеАктивы", "СтруктурнаяЕдиница, СчетЗатрат", "ОбъемПродукцииРаботДляВычисленияАмортизации");
	ПодключитьОбработчикОжидания("Подключаемый_НачатьИзменениеТаблицы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыОбъемПродукцииРаботДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыСрокИспользованияДляВычисленияАмортизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Срок использования для вычисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыВнеоборотныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	ИмуществоПриИзмененииВнеоборотногоАктива(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмуществоПриИзмененииВнеоборотногоАктива(СтрокаТабличнойЧасти)
	
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	Если СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		СтрокаТабличнойЧасти.СрокИспользованияДляВычисленияАмортизации = 0;
	Иначе
		СтрокаТабличнойЧасти.ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковИмуществоВнеоборотныеАктивыТекущаяВыработкаКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковИмуществоВнеоборотныеАктивы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеВнеоборотныйАктив(СтрокаТабличнойЧасти.ВнеоборотныйАктив);
	
	Если НЕ СтруктураДанные.СпособАмортизацииПропорциональноОбъемуПродукции Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = '""Объем продукции (работ) для исчисления амортизации"" не может быть заполнен для указанного способа начисления амортизации!'"));
		СтрокаТабличнойЧасти.ТекущаяВыработкаКоличество = 0;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область Прочие

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыПослеУдаления(Элемент)
	
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	СтрокаТабличнойЧасти.Валютный = СтруктураДанные.Валютный;
	
	Если СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.Валюта = СтруктураДанные.Валюта;
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	Иначе
		СтрокаТабличнойЧасти.Валюта = Неопределено;
		СтрокаТабличнойЧасти.СуммаВал = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если СтруктураДанные.Валютный И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыВалютаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.Валюта = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СуммаВал = ПересчитатьИзВалютыУчетаВВалюту(СтрокаТабличнойЧасти.Сумма,
																	 СтрокаТабличнойЧасти.Валюта,
																	 ДатаОстатков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВалПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковПрочееПрочиеРазделы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСчетПриИзменении(СтрокаТабличнойЧасти.Счет);
	
	Если НЕ СтруктураДанные.Валютный Тогда
		СтрокаТабличнойЧасти.СуммаВал = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'У выбранного счета не установлен признак валютный!'"));
		Иначе
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите в начале счет!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНачальныхОстатковТоварыПрямыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыПрямыеЗатраты.ТекущиеДанные;
		Если ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество()>1 Тогда 
			ПоследняяСтрока = ВводНачальныхОстатковТовары.ПрямыеЗатраты[ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество()-2];
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПоследняяСтрока, "СтруктурнаяЕдиница");
		Иначе
			СтрокаТабличнойЧасти.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновноеПодразделение");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шапка

&НаКлиенте
Процедура ДатаОстатковПриИзменении(Элемент)
	
	ДатаОстатковПриИзмененииНаСервере();
	
КонецПроцедуры // ДатаОстатковПриИзменении()

&НаСервере
Процедура ДатаОстатковПриИзмененииНаСервере()
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.ВалютаДенежныхСредств,
			ДатаОстатков
		);
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.Договор,
			ДатаОстатков
		);
		
	КонецЦикла;
	
	Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
		
		ТекСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(
			ТекСтрока.СуммаВал,
			ТекСтрока.Договор,
			ДатаОстатков
		);
		
	КонецЦикла;
	
КонецПроцедуры // ДатаОстатковПриИзмененииНаСервере()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗагрузитьВводыОстатков();
	Если НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаУТОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзУТ103.Форма");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаССайтаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	ОткрытьФорму("Обработка.ЗагрузитьДанныеСайта.Форма");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаСинхронизацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	ИмяОткрываемойФормы = ?(ПараметрыРаботыКлиента.РазделениеВключено,
		"ОбщаяФорма.СинхронизацияДанныхВМоделиСервиса",
		"ОбщаяФорма.СинхронизацияДанных");
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПараметрыРаботыКлиента.РазделениеВключено Тогда
		НастроитьСинхронизациюСервер();
	КонецЕсли; 
	ОткрытьФорму(ИмяОткрываемойФормы);
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСинхронизациюСервер()
	
	Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);	
	
КонецПроцедуры

#КонецОбласти 

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_БанкКассаСуммаВалПриИзменении(Элемент)
	
	Индекс = Число(СтрЗаменить(Элемент.Имя, "СуммаВалОстатокБанкКасса", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.ВалютаДенежныхСредств,
		ДатаОстатков
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_БанкКассаВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = Число(СтрЗаменить(Элемент.Имя, "ВалютаОстатокБанкКасса", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
	
	Валюты = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("БанковскийСчетКасса", СтрокаТабличнойЧасти.БанковскийСчетКасса);
	Строки = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Валюты.Добавить(Стр.ВалютаДенежныхСредств);
	КонецЦикла; 
	
	Меню = СписокВыбораВалют(Валюты);
	Обработчик = Новый ОписаниеОповещения("БанкКассаВалютаВыбор", ЭтотОбъект, Индекс);
	ПоказатьВыборИзМеню(Обработчик, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкКассаВалютаВыбор(Элемент, Индекс) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущийИндексБанкКасса = Индекс;
		ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		Валюта = Элемент.Значение;
		СтрокаТабличнойЧасти = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства[Индекс];
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("БанковскийСчетКасса", СтрокаТабличнойЧасти.БанковскийСчетКасса);
		СтруктураОтбора.Вставить("ВалютаДенежныхСредств", Валюта);
		Если ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			Возврат;
		КонецЕсли; 
		НоваяСтрока = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
		НоваяСтрока.БанковскийСчетКасса = СтрокаТабличнойЧасти.БанковскийСчетКасса;
		НоваяСтрока.ВалютаДенежныхСредств = Валюта;
		Если НЕ УчетВалютныхОпераций Тогда
			ВключитьИспользованиеВалютныхОпераций();
		КонецЕсли; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодотчетСуммаВалПриИзменении(Элемент)
	
	Индекс = Число(СтрЗаменить(Элемент.Имя, "СуммаВалОстатокПодотчет", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
	
	СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалютуУчета(
		СтрокаТабличнойЧасти.СуммаВал,
		СтрокаТабличнойЧасти.Валюта,
		ДатаОстатков
	);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПодотчетВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Индекс = Число(СтрЗаменить(Элемент.Имя, "ВалютаОстатокПодотчет", ""));
	СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
	
	Валюты = Новый Массив;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
	Строки = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		Валюты.Добавить(Стр.Валюта);
	КонецЦикла; 
	
	Меню = СписокВыбораВалют(Валюты);
	Обработчик = Новый ОписаниеОповещения("ПодотчетВалютаВыбор", ЭтотОбъект, Индекс);
	ПоказатьВыборИзМеню(Обработчик, Меню, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетВалютаВыбор(Элемент, Индекс) Экспорт
	
	Если Элемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		ТекущийИндексБанкКасса = Индекс;
		ОткрытьФорму("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		Валюта = Элемент.Значение;
		СтрокаТабличнойЧасти = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками[Индекс];
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Сотрудник", СтрокаТабличнойЧасти.Сотрудник);
		СтруктураОтбора.Вставить("Валюта", Валюта);
		Если ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора).Количество()>0 Тогда
			Возврат;
		КонецЕсли; 
		НоваяСтрока = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Добавить();
		НоваяСтрока.Сотрудник = СтрокаТабличнойЧасти.Сотрудник;
		НоваяСтрока.Валюта = Валюта;
		Если НЕ УчетВалютныхОпераций Тогда
			ВключитьИспользованиеВалютныхОпераций();
		КонецЕсли; 
		ОбновитьЭлементыФормы();
		Если НЕ ПустаяСтрока(ИмяТекущегоЭлемента) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущегоЭлемента];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

#КонецОбласти 

#Область Навигация

&НаКлиенте
Процедура ЗаголовокШаг0Нажатие(Элемент)
	
	ТекущийНомерСтраницы = 0;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Декорация133Нажатие()

&НаКлиенте
Процедура ЗаголовокШаг1Нажатие(Элемент)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = 1;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Декорация47Нажатие()

&НаКлиенте
Процедура ЗаголовокШаг3Нажатие(Элемент)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = 3;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Декорация53Нажатие()

&НаКлиенте
Процедура ЗаголовокоШаг2Нажатие(Элемент)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = 2;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Декорация50Нажатие()

&НаКлиенте
Процедура ЗаголовокШаг4Нажатие(Элемент)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = 4;
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Декорация56Нажатие()

&НаКлиенте
Процедура ЗаголовокШаг5Нажатие(Элемент)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьИзменения();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды Далее.
//
&НаКлиенте
Процедура Далее(Команда)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийНомерСтраницы >= ПоследняяСтраница-1 Тогда
		СохранитьИзменения();
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = ?(ТекущийНомерСтраницы + 1 > ПоследняяСтраница, ПоследняяСтраница, ТекущийНомерСтраницы + 1);
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Далее()

// Процедура - обработчик команды Назад.
//
&НаКлиенте
Процедура Назад(Команда)
	
	Отказ = Ложь;
	ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийНомерСтраницы = ?(ТекущийНомерСтраницы - 1 < ПерваяСтраница, ПерваяСтраница, ТекущийНомерСтраницы - 1);
	УстановитьАктивнуюСтраницу();
	УстановитьДоступностьКнопок();
	
КонецПроцедуры // Назад()

&НаКлиенте
Процедура БольшеВозможностей(Команда)
	
	СтрокаПоиска = "";
	Если ТекущийНомерСтраницы=0 Тогда
		СтрокаПоиска = "Начальные остатки организации";
	ИначеЕсли ТекущийНомерСтраницы=1 Тогда
		СтрокаПоиска = "Начальные остатки денег";
	ИначеЕсли ТекущийНомерСтраницы=2 Тогда
		СтрокаПоиска = "Начальные остатки товаров";
	ИначеЕсли ТекущийНомерСтраницы=3 Тогда
		СтрокаПоиска = "Начальные остатки расчетов";
	ИначеЕсли ТекущийНомерСтраницы=4 Тогда
		СтрокаПоиска = "Начальные остатки прочее";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаПоиска) Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменениеПараметровПрограммы", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СтрокаПоиска", СтрокаПоиска);
		ОткрытьФорму("Обработка.НастройкаПрограммы.Форма",
			ПараметрыОткрытия,
			ЭтаФорма,
			,
			,
			,
			Оповещение);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦенуПродажиПоФормуле(Команда)
	
	ПараметрыФормулы = Новый Структура;
	ПараметрыФормулы.Вставить("Формула",				ФормулаРасчетаЦеныПродажи);
	ПараметрыФормулы.Вставить("ЭтоФормированиеЦен",		Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеДанные) Экспорт
	
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ТипЗнч(Результат)=Тип("Структура") ИЛИ НЕ Результат.Свойство("Результат") ИЛИ НЕ Результат.Результат=КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормулаРасчетаЦеныПродажи = Результат.Формула;
	ЗаполнитьПоФормуле();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормуле()
	Перем ТаблицаОперандов;
	
	НачатьТранзакцию();
	Если Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница=Элементы.СтраницаСобственныеТовары Тогда
		ИмяТаблицы = "Запасы";
		ЗаписатьИзмененияЦен(, Ложь, Ложь);
	Иначе
		Возврат;
	КонецЕсли; 
	
	ВидЦен = ВидЦенПродажи;
	
	ТаблицаФормыНоменклатуры = ВводНачальныхОстатковТовары[ИмяТаблицы].Выгрузить();
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры", ТаблицаФормыНоменклатуры);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Формула", ФормулаРасчетаЦеныПродажи);
	СоответсвиеЦен = Новый Соответствие;
	СоответсвиеЦен.Вставить(ВидЦен, Новый Массив);
	ПараметрыРасчета.Вставить("ВидыЦенКПересчету", СоответсвиеЦен);
	ПараметрыРасчета.Вставить("ПоказыватьХарактеристики", ИспользоватьХарактеристики);
	ПараметрыРасчета.Вставить("УстанавливатьХарактеристикамБезЦен", Ложь);
	ПараметрыРасчета.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	Обработки.Ценообразование.ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов);
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиНоменклатура",		Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиХарактеристика",	Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("ТекущееЗначение",			Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВключаяХарактеристики",		Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("ПересчетВыполнен",			Новый ОписаниеТипов("Булево"));
	
	Для каждого Стр Из ВводНачальныхОстатковТовары[ИмяТаблицы] Цикл
		СтрКоллекции = КоллекцияНоменклатуры.Добавить();
		СтрКоллекции.Период = ДатаОстатков;
		СтрКоллекции.ВидЦен = ВидЦен;
		СтрКоллекции.ТекущееЗначение = Стр.ЦенаПродажи;
		СтрКоллекции.КлючСвязиНоменклатура = Стр.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(СтрКоллекции, Стр, "Номенклатура,Характеристика,ЕдиницаИзмерения");
	КонецЦикла; 
	ЦенообразованиеФормулыСервер.РасчитатьДанныеКоллекции(ФормулаРасчетаЦеныПродажи, КоллекцияНоменклатуры, ТаблицаОперандов, ВидЦен, Истина, Истина);
	
	ОтменитьТранзакцию();
	
	Для каждого Стр Из КоллекцияНоменклатуры Цикл
		СтрЗапасов = ВводНачальныхОстатковТовары[ИмяТаблицы].НайтиПоИдентификатору(Стр.КлючСвязиНоменклатура);
		Если СтрЗапасов=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрЗапасов.ЦенаПродажи = Стр.Цена;
		Если ИмяТаблицы="ЗапасыПереданные" Тогда
			СтрЗапасов.СуммаРасчетов = СтрЗапасов.ЦенаПродажи*СтрЗапасов.Количество;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#Область ТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ТекШтрихкод", ТекШтрихкод));
	ПоказатьВводЗначения(Оповещение, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, ДополнительныеПараметры.ТекШтрихкод, Результат);
    
    
    Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
    КонецЕсли;

КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтаФорма);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ИмяТекущейСтраницы = Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" Тогда
		ИмяТабличнойЧасти = "ВводНачальныхОстатковТоварыЗапасы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПринятыеТовары" Тогда
		ИмяТабличнойЧасти = "ВводНачальныхОстатковТоварыЗапасыПринятые";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти);
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПолучитьВесЗавершение(Параметры) Экспорт
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область Общие

&НаСервере
Процедура ЗагрузитьВводыОстатков()
	
	// Очистка объектов на форме при изменении организации
	Если ЗначениеЗаполнено(ВводНачальныхОстатковБанкИКасса.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковБанкИКасса");
	Иначе
		ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Очистить();
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковПодотчет.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковПодотчет");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковТовары.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковТовары");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковРасчетыСКонтрагентами.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковРасчетыСКонтрагентами");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковЗарплата.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковЗарплата");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковНалоги.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковНалоги");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковЭквайринг.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковЭквайринг");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковИмущество.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковИмущество");
	КонецЕсли; 
	Если ЗначениеЗаполнено(ВводНачальныхОстатковПрочее.Ссылка) Тогда
		ЗначениеВРеквизитФормы(Документы.ВводНачальныхОстатков.СоздатьДокумент(), "ВводНачальныхОстатковПрочее");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка,
	|	ВводНачальныхОстатков.Комментарий,
	|	ВводНачальныхОстатков.РазделУчета,
	|	ВводНачальныхОстатков.Автоформирование,
	|	ВводНачальныхОстатков.Дата
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Комментарий ПОДОБНО &Комментарий
	|	И (ВводНачальныхОстатков.Организация = &Организация
	|			ИЛИ &УчетПоНесколькимОрганизациям = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Комментарий", "# Документ введен помощником ввода остатков.");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("УчетПоНесколькимОрганизациям", УчетПоНесколькимОрганизациям);
	
	ВыборкаРезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Элементы.ДатаОстатков.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаОстатков.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Пока ВыборкаРезультатЗапроса.Следующий() Цикл
		Если ВыборкаРезультатЗапроса.РазделУчета = "Денежные средства" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковБанкИКасса");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с подотчетниками" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковПодотчет");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Запасы" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковТовары");
			ЗаполнитьЦены(Ложь,, Ложь);
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с поставщиками и покупателями" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковРасчетыСКонтрагентами");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты с персоналом" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковЗарплата");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Расчеты по налогам" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковНалоги");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Эквайринг" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковЭквайринг");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Имущество" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковИмущество");
		ИначеЕсли ВыборкаРезультатЗапроса.РазделУчета = "Прочие разделы" Тогда
			ЗначениеВРеквизитФормы(ВыборкаРезультатЗапроса.Ссылка.ПолучитьОбъект(), "ВводНачальныхОстатковПрочее");
		КонецЕсли;
		ДатаОстатков = ВыборкаРезультатЗапроса.Дата;
		Элементы.ДатаОстатков.ПредупреждениеПриРедактировании = НСтр("ru = 'Дата именится также для всех остатков, введенных ранее'");
		Элементы.ДатаОстатков.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЦикла;
	
	// Заполнение дополнительных реквизитов табличной части.
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	
	ЗаполнитьДаннымиПоУмолчанию();
	ОбновитьЭлементыФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыРаботыПрограммы()
	
	УчетПоНесколькимСкладам = ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам");
	УчетВРазличныхЕдиницахИзмерения = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	ИспользоватьПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	УчетПоНесколькимОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
	И НЕ Константы.УчетПоКомпании.Получить();
	ВестиУчетРасчетовСБанкомЭквайрером = ПолучитьФункциональнуюОпцию("ВестиУчетРасчетовСБанкомЭквайрером");
	
	ВалютаУчета = Константы.ВалютаУчета.Получить();
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	ИспользоватьЭлектронныеВесы = ИспользоватьПодключаемоеОборудование И СписокЭлектронныхВесов.Количество()>0;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИмяСобытия = "")
	
	ПолучитьСтруктуруВидовОпераций();
	
	Если ИмяСобытия = "ОбновитьИнтефейс" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасы.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасы.Видимость = Истина;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.Видимость = Истина;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.Видимость = Истина;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщиками.Видимость = Истина;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.Видимость = Ложь;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателями.Видимость = Истина;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Элементы.ВводНачальныхОстатковТоварыЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыВРазрезеГТДЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПолучитьВес.Видимость = ИспользоватьЭлектронныеВесы;
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеПолучитьВес.Видимость = ИспользоватьЭлектронныеВесы;
	// Конец ПодключаемоеОборудование
	
	Элементы.Организация.Видимость = УчетПоНесколькимОрганизациям;
	Элементы.СтраницаРасчетыПоЭквайрингу.Видимость = ВестиУчетРасчетовСБанкомЭквайрером;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРаботыФормы()
	
	СтруктураПараметров = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнеоборотныеАктивы.Ссылка
	|ИЗ
	|	Справочник.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы
	|ГДЕ
	|	НЕ ВнеоборотныеАктивы.ПометкаУдаления
	|	И НЕ ВнеоборотныеАктивы.ЭтоГруппа";
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПараметров.Вставить("СправочникНоменклатурыПустой", Результат[0].Пустой());
	СтруктураПараметров.Вставить("СправочникКонтрагентовПустой", Результат[1].Пустой());
	СтруктураПараметров.Вставить("СправочникСотрудниковПустой", Результат[2].Пустой());
	СтруктураПараметров.Вставить("СправочникИмуществаПустой", Результат[3].Пустой());
	
	ВидЦенПродажи = ХранилищеСистемныхНастроек.Загрузить("ПомощникВводаНачальныхОстатков", "ВидЦенПродажи",, "");
	Если НЕ ЗначениеЗаполнено(ВидЦенПродажи) Тогда
		ВидЦенПродажи = Справочники.ВидыЦен.Оптовая;
	КонецЕсли; 
	ВидЦенСебестоимости = ХранилищеСистемныхНастроек.Загрузить("ПомощникВводаНачальныхОстатков", "ВидЦенСебестоимости",, "");
	Если НЕ ЗначениеЗаполнено(ВидЦенСебестоимости) Тогда
		ВидЦенСебестоимости = Справочники.ВидыЦен.Учетная;
	КонецЕсли;
	
	ПараметрыФормы = Новый ФиксированнаяСтруктура(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиПоУмолчанию(Раздел = "")
	
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="ДенежныеСредства" Тогда
		Если ПустаяСтрока(Раздел) Тогда
			УдалитьПустыеСтроки("ДенежныеСредства");
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДобавленныеКассыИСчета", ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Выгрузить(, "БанковскийСчетКасса").ВыгрузитьКолонку("БанковскийСчетКасса"));
		Запрос.УстановитьПараметр("УчетПоНесколькимОрганизациям", УчетПоНесколькимОрганизациям);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Кассы.Ссылка КАК БанковскийСчетКасса,
		|	ВЫБОР
		|		КОГДА Кассы.ВалютаПоУмолчанию = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ВалютаУчета.Значение
		|		ИНАЧЕ Кассы.ВалютаПоУмолчанию
		|	КОНЕЦ КАК ВалютаДенежныхСредств
		|ИЗ
		|	Справочник.Кассы КАК Кассы,
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|ГДЕ
		|	НЕ Кассы.ПометкаУдаления
		|	И НЕ Кассы.Ссылка В (&ДобавленныеКассыИСчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ТОГДА ВалютаУчета.Значение
		|		ИНАЧЕ БанковскиеСчета.ВалютаДенежныхСредств
		|	КОНЕЦ
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета,
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|ГДЕ
		|	НЕ БанковскиеСчета.ПометкаУдаления
		|	И НЕ БанковскиеСчета.Ссылка В (&ДобавленныеКассыИСчета)
		|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
		|	И (БанковскиеСчета.Владелец = &Организация
		|			ИЛИ НЕ &УчетПоНесколькимОрганизациям)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Стр = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы(ПолноеОбновление = Ложь)
	
	// Деньги
	Если ПолноеОбновление Тогда
		МассивЭлементов = Новый Массив;
		УдалитьЭлементыРекурсивно(Элементы.Шаг1Реквизиты, МассивЭлементов);
		Для каждого Элемент Из МассивЭлементов Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла; 
	КонецЕсли;
	
	ИмяТекущегоЭлемента = "";
	ШиринаЗаголовка = 0;
	Для каждого Стр Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		ШиринаЗаголовка = Макс(ШиринаЗаголовка, СтрДлина(Строка(Стр.БанковскийСчетКасса)));
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками Цикл
		ШиринаЗаголовка = Макс(ШиринаЗаголовка, СтрДлина(Строка(Стр.Сотрудник)));
	КонецЦикла;
	ШиринаЗаголовка = ?(ШиринаЗаголовка=0, 25, Окр(ШиринаЗаголовка/1.3));
	
	ВыведенныеДанные = Новый Соответствие;
	УстановленТекущийЭлемент = Ложь;
	Для каждого Стр Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
		Индекс = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Индекс(Стр);
		ИмяЭлемента = "ОстатокБанкКасса"+Формат(Индекс, "ЧН=0; ЧГ=0");
		ИмяГруппы = "Группа"+ИмяЭлемента;
		Если ВыведенныеДанные.Получить(Стр.БанковскийСчетКасса)=Неопределено Тогда
			ВыведенныеДанные.Вставить(Стр.БанковскийСчетКасса, Индекс);
		КонецЕсли; 
		Если НЕ Элементы.Найти(ИмяГруппы)=Неопределено Тогда
			Элементы["Заголовок"+ИмяЭлемента].Ширина = ШиринаЗаголовка;
			Продолжить;
		КонецЕсли;
		ИндексВставки = ВыведенныеДанные.Получить(Стр.БанковскийСчетКасса);
		ГруппаВставки = Элементы.Найти("ГруппаОстатокБанкКасса"+(ИндексВставки+1));
		Если НЕ ИндексВставки=Индекс И НЕ ГруппаВставки=Неопределено Тогда
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты, ГруппаВставки);
		Иначе
			Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты);
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Если НЕ ИндексВставки=Индекс Тогда
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ЭлементЗаголовок.Заголовок = " ";
		Иначе
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементЗаголовок.ПутьКДанным = "ВводНачальныхОстатковБанкИКасса.ДенежныеСредства["+Индекс+"].БанковскийСчетКасса";
		КонецЕсли; 
		ЭлементЗаголовок.Ширина = ШиринаЗаголовка;
		ЭлементЗаголовок.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма = Элементы.Добавить("СуммаВал"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементСумма.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементСумма.АвтоОтметкаНезаполненного = Ложь;
		ЭлементСумма.ПутьКДанным = "ВводНачальныхОстатковБанкИКасса.ДенежныеСредства["+Индекс+"].СуммаВал";
		ЭлементСумма.Ширина = 12;
		ЭлементСумма.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма.УстановитьДействие("ПриИзменении", "Подключаемый_БанкКассаСуммаВалПриИзменении");
		ЭлементВалюта = Элементы.Добавить("Валюта"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		ЭлементВалюта.Вид = ВидДекорацииФормы.Надпись;
		Если ТипЗнч(Стр.БанковскийСчетКасса)=Тип("СправочникСсылка.Кассы") Тогда
			ЭлементВалюта.Гиперссылка = Истина;
			ЭлементВалюта.УстановитьДействие("Нажатие", "Подключаемый_БанкКассаВалютаНажатие");
		КонецЕсли; 
		ЭлементВалюта.Заголовок = Строка(Стр.ВалютаДенежныхСредств);
		ЭлементВалюта.Ширина = 10;
		ЭлементВалюта.РастягиватьПоГоризонтали = Ложь;
		Если НЕ УстановленТекущийЭлемент И Элементы.Страницы.ТекущаяСтраница=Элементы.Шаг1 Тогда
			ИмяТекущегоЭлемента = ЭлементСумма.Имя;
			УстановленТекущийЭлемент = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	//Подотчет
	ВыведенныеДанные = Новый Соответствие;
	УстановленТекущийЭлемент = Ложь;
	Для каждого Стр Из ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками Цикл
		Индекс = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Индекс(Стр);
		ИмяЭлемента = "ОстатокПодотчет"+Формат(Индекс, "ЧН=0; ЧГ=0");
		ИмяГруппы = "Группа"+ИмяЭлемента;
		Если ВыведенныеДанные.Получить(Стр.Сотрудник)=Неопределено Тогда
			ВыведенныеДанные.Вставить(Стр.Сотрудник, Индекс);
		КонецЕсли; 
		Если НЕ Элементы.Найти(ИмяГруппы)=Неопределено Тогда
			Элементы["Заголовок"+ИмяЭлемента].Ширина = ШиринаЗаголовка;
			Продолжить;
		КонецЕсли;
		ИндексВставки = ВыведенныеДанные.Получить(Стр.Сотрудник);
		ГруппаВставки = Элементы.Найти("ГруппаОстатокПодотчет"+(ИндексВставки+1));
		Если НЕ ИндексВставки=Индекс И НЕ ГруппаВставки=Неопределено Тогда
			Группа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты, ГруппаВставки);
		Иначе
			Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.Шаг1Реквизиты);
		КонецЕсли; 
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Если НЕ ИндексВставки=Индекс Тогда
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидДекорацииФормы.Надпись;
			ЭлементЗаголовок.Заголовок = " ";
		Иначе
			ЭлементЗаголовок = Элементы.Добавить("Заголовок"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
			ЭлементЗаголовок.Вид = ВидПоляФормы.ПолеНадписи;
			ЭлементЗаголовок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементЗаголовок.ПутьКДанным = "ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками["+Индекс+"].Сотрудник";
		КонецЕсли; 
		ЭлементЗаголовок.Ширина = ШиринаЗаголовка;
		ЭлементЗаголовок.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма = Элементы.Добавить("СуммаВал"+ИмяЭлемента, Тип("ПолеФормы"), Группа);
		ЭлементСумма.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементСумма.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементСумма.АвтоОтметкаНезаполненного = Ложь;
		ЭлементСумма.ПутьКДанным = "ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками["+Индекс+"].СуммаВал";
		ЭлементСумма.Ширина = 12;
		ЭлементСумма.РастягиватьПоГоризонтали = Ложь;
		ЭлементСумма.УстановитьДействие("ПриИзменении", "Подключаемый_ПодотчетСуммаВалПриИзменении");
		ЭлементВалюта = Элементы.Добавить("Валюта"+ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
		ЭлементВалюта.Вид = ВидДекорацииФормы.Надпись;
		ЭлементВалюта.Гиперссылка = Истина;
		ЭлементВалюта.УстановитьДействие("Нажатие", "Подключаемый_ПодотчетВалютаНажатие");
		ЭлементВалюта.Заголовок = Строка(Стр.Валюта);
		ЭлементВалюта.Ширина = 10;
		ЭлементВалюта.РастягиватьПоГоризонтали = Ложь;
		Если НЕ УстановленТекущийЭлемент И Элементы.Страницы.ТекущаяСтраница=Элементы.Шаг1 Тогда
			ИмяТекущегоЭлемента = ЭлементСумма.Имя;
			УстановленТекущийЭлемент = Истина;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, МассивЭлементов)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьЭлементыРекурсивно(Элемент, МассивЭлементов);
		ИначеЕсли ТипЗнч(Элемент)=Тип("ПолеФормы")  Тогда
			УдалитьЭлементыРекурсивно(Элемент.КонтекстноеМеню, МассивЭлементов);
		КонецЕсли;
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения()
	
	ЗаписатьИзмененияФормы(Истина);
	Оповестить("ОповещениеОбИзмененииДолга");
	Оповестить("ВводОстатков");
	мЗаписьФормыОсуществлена = Истина;
	Закрыть(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтроки(Раздел = "")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Сумма", 0);
	СтруктураОтбора.Вставить("СуммаВал", 0);
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="ДенежныеСредства" Тогда
		Строки = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(Раздел) ИЛИ Раздел="Расчеты" Тогда
		Строки = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.НайтиСтроки(СтруктураОтбора);
		Для каждого Стр Из Строки Цикл
			ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Удалить(Стр);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текст пояснения.
//
&НаКлиенте
Процедура УстановитьТекстПояснения()
	
	Если ТекущийНомерСтраницы = 0 Тогда
		Элементы.ДекорацияПояснеиеСледующегоДействия.Заголовок = "Нажмите кнопку ""Далее"" для заполнения остатков денежных средств";
	ИначеЕсли ТекущийНомерСтраницы = 1 Тогда
		Элементы.ДекорацияПояснеиеСледующегоДействия.Заголовок = "Нажмите кнопку ""Далее"" для заполнения остатков товаров";
	ИначеЕсли ТекущийНомерСтраницы = 2 Тогда
		Элементы.ДекорацияПояснеиеСледующегоДействия.Заголовок = "Нажмите кнопку ""Далее"" для заполнения остатков по расчетам";
	ИначеЕсли ТекущийНомерСтраницы = 3 Тогда
		Элементы.ДекорацияПояснеиеСледующегоДействия.Заголовок = "Нажмите кнопку ""Далее"" для заполнения прочих остатков";
	ИначеЕсли ТекущийНомерСтраницы = 4 Тогда
		Элементы.ДекорацияПояснеиеСледующегоДействия.Заголовок = "Для завершения необходимо нажать кнопку ""Закончить""";
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекстПояснения()

// Процедура устанавливает активную страницу.
//
&НаКлиенте
Процедура УстановитьАктивнуюСтраницу()
	
	СтрокаПоиска = "Шаг" + Строка(ТекущийНомерСтраницы);
	Элементы.Страницы.ТекущаяСтраница = Элементы.Найти(СтрокаПоиска);
	
	ЭтаФорма.Заголовок = "Помощник ввода начальных остатков (Шаг " + Строка(ТекущийНомерСтраницы)+ "/" + Строка(ПоследняяСтраница) + ")";
	УстановитьТекстПояснения();
	
	УстановитьАктивнуюСтраницуСервер();
	
КонецПроцедуры // УстановитьАктивнуюСтраницу()

&НаСервере
Процедура УстановитьАктивнуюСтраницуСервер()
	
	Для ии = ПерваяСтраница По ПоследняяСтраница Цикл
		Если ии=ТекущийНомерСтраницы Тогда
			Элементы["ЗаголовокШаг"+Строка(ии)].Шрифт = Новый Шрифт(Новый Шрифт,,, Истина);
			Элементы["ОтметкаШаг"+Строка(ии)].ЦветФона = ЦветаСтиля.ЦветФонаВыбранногоЭлемента;
		Иначе
			Элементы["ЗаголовокШаг"+Строка(ии)].Шрифт = Новый Шрифт;
			Элементы["ОтметкаШаг"+Строка(ии)].ЦветФона = Новый Цвет;
		КонецЕсли; 
	КонецЦикла;
	
	Элементы.БольшеВозможностей.Видимость = ТекущийНомерСтраницы<5;
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок.
//
&НаКлиенте
Процедура УстановитьДоступностьКнопок()
	
	Элементы.Назад.Доступность = ТекущийНомерСтраницы <> ПерваяСтраница;
	
	Если ТекущийНомерСтраницы >= ПоследняяСтраница - 1 Тогда
		Элементы.Далее.Заголовок = "Закончить";
		Элементы.Далее.Картинка = БиблиотекаКартинок.Пометка;
	Иначе
		Элементы.Далее.Заголовок = "Далее";
		Элементы.Далее.Картинка = БиблиотекаКартинок.СтрелкаВправоСплошная;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопок()

&НаКлиенте
Процедура ОпределитьТекущийЭлементТаблицы(СтрокаТаблицы, ИмяТаблицы, ИменаРеквизитов, РеквизитПоУмолчанию)
	
	РеквизитыПроверки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов);
	Для каждого Реквизит Из РеквизитыПроверки Цикл
		ИмяРеквизита = СокрЛП(Реквизит);
		Если НЕ Элементы[ИмяТаблицы+ИмяРеквизита].Видимость Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ИмяРеквизита]) Тогда
			Элементы[ИмяТаблицы].ТекущийЭлемент = Элементы[ИмяТаблицы+ИмяРеквизита];
			Возврат;
		КонецЕсли; 
	КонецЦикла;
	Элементы[ИмяТаблицы].ТекущийЭлемент = Элементы[ИмяТаблицы+РеквизитПоУмолчанию];
	
КонецПроцедуры

// Процедура записывает изменения формы.
//
&НаСервере
Процедура ЗаписатьИзмененияФормы(ЗакончитьВвод = Ложь)
	
	УдалитьПустыеСтроки();
	
	Если ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество() > 0
		ИЛИ (ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество()=0 
		И НЕ ВводНачальныхОстатковБанкИКасса.Ссылка.Пустая() 
		И ВводНачальныхОстатковБанкИКасса.Проведен) Тогда
		ВводНачальныхОстатковБанкИКассаОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковБанкИКасса");
		ВводНачальныхОстатковБанкИКассаОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковБанкИКассаОбъект.Организация = Организация;
		ВводНачальныхОстатковБанкИКассаОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковБанкИКассаОбъект.РазделУчета = "Денежные средства";
		Если ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Количество() > 0 Тогда
			ВводНачальныхОстатковБанкИКассаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковБанкИКассаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковБанкИКассаОбъект, "ВводНачальныхОстатковБанкИКасса");
	КонецЕсли;
	
	Если ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество() > 0
		ИЛИ (ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество()=0 
		И НЕ ВводНачальныхОстатковПодотчет.Ссылка.Пустая() 
		И ВводНачальныхОстатковПодотчет.Проведен) Тогда
		ВводНачальныхОстатковПодотчетОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковПодотчет");
		ВводНачальныхОстатковПодотчетОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковПодотчетОбъект.Организация = Организация;
		ВводНачальныхОстатковПодотчетОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковПодотчетОбъект.РазделУчета = "Расчеты с подотчетниками";
		ВводНачальныхОстатковПодотчетОбъект.Автоформирование = Истина;
		Если ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Количество() > 0 Тогда
			ВводНачальныхОстатковПодотчетОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковПодотчетОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковПодотчетОбъект, "ВводНачальныхОстатковБанкИКасса");
	КонецЕсли;
	
	Если ВводНачальныхОстатковТовары.Запасы.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() > 0
		ИЛИ ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество() > 0
		ИЛИ (ВводНачальныхОстатковТовары.Запасы.Количество()=0
		И ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество()=0
		И ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество()=0
		И ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество()=0
		И ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество()=0
		И НЕ ВводНачальныхОстатковТовары.Ссылка.Пустая() 
		И ВводНачальныхОстатковТовары.Проведен) Тогда
		ВводНачальныхОстатковТоварыОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковТовары");
		ВводНачальныхОстатковТоварыОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковТоварыОбъект.Организация = Организация;
		ВводНачальныхОстатковТоварыОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковТоварыОбъект.РазделУчета = "Запасы";
		Если ВводНачальныхОстатковТовары.Запасы.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПринятые.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыПереданные.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Количество() > 0
			ИЛИ ВводНачальныхОстатковТовары.ПрямыеЗатраты.Количество() > 0 Тогда
			ЗаписатьИзмененияЦен();
			ВводНачальныхОстатковТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковТоварыОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковТоварыОбъект, "ВводНачальныхОстатковТовары");
	КонецЕсли;
	
	Если ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество() > 0
	 ИЛИ ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество() > 0
		ИЛИ (ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество()=0
		И ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество()=0
		И НЕ ВводНачальныхОстатковРасчетыСКонтрагентами.Ссылка.Пустая() 
		И ВводНачальныхОстатковРасчетыСКонтрагентами.Проведен) Тогда
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковРасчетыСКонтрагентами");
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Организация = Организация;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.РазделУчета = "Расчеты с поставщиками и покупателями";
		Если ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Количество() > 0
		 ИЛИ ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Количество() > 0 Тогда
			ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковРасчетыСКонтрагентамиОбъект, "ВводНачальныхОстатковРасчетыСКонтрагентами");
	КонецЕсли;
	
	Если ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество() > 0
		ИЛИ (ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество()=0
		И НЕ ВводНачальныхОстатковЗарплата.Ссылка.Пустая() 
		И ВводНачальныхОстатковЗарплата.Проведен) Тогда
		ВводНачальныхОстатковЗарплатаОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковЗарплата");
		ВводНачальныхОстатковЗарплатаОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковЗарплатаОбъект.Организация = Организация;
		ВводНачальныхОстатковЗарплатаОбъект.Автоформирование = Истина;
		ВводНачальныхОстатковЗарплатаОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковЗарплатаОбъект.РазделУчета = "Расчеты с персоналом";
		Если ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Количество() > 0 Тогда
			ВводНачальныхОстатковЗарплатаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковЗарплатаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковЗарплатаОбъект, "ВводНачальныхОстатковЗарплата");
	КонецЕсли;
	
	Если ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество() > 0
		ИЛИ (ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество()=0
		И НЕ ВводНачальныхОстатковНалоги.Ссылка.Пустая() 
		И ВводНачальныхОстатковНалоги.Проведен) Тогда
		ВводНачальныхОстатковНалогиОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковНалоги");
		ВводНачальныхОстатковНалогиОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковНалогиОбъект.Организация = Организация;
		ВводНачальныхОстатковНалогиОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковНалогиОбъект.РазделУчета = "Расчеты по налогам";
		Если ВводНачальныхОстатковНалоги.РасчетыПоНалогам.Количество() > 0 Тогда
			ВводНачальныхОстатковНалогиОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковНалогиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковНалогиОбъект, "ВводНачальныхОстатковНалоги");
	КонецЕсли;
	
	Если ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество() > 0
		ИЛИ (ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество()=0
		И НЕ ВводНачальныхОстатковЭквайринг.Ссылка.Пустая() 
		И ВводНачальныхОстатковЭквайринг.Проведен) Тогда
		ВводНачальныхОстатковЭквайрингОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковЭквайринг");
		ВводНачальныхОстатковЭквайрингОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковЭквайрингОбъект.Организация = Организация;
		ВводНачальныхОстатковЭквайрингОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковЭквайрингОбъект.РазделУчета = "Эквайринг";
		Если ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу.Количество() > 0 Тогда
			ВводНачальныхОстатковЭквайрингОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковЭквайрингОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковЭквайрингОбъект, "ВводНачальныхОстатковЭквайринг");
	КонецЕсли;
	
	Если ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество() > 0
		ИЛИ (ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество()=0
		И НЕ ВводНачальныхОстатковИмущество.Ссылка.Пустая() 
		И ВводНачальныхОстатковИмущество.Проведен) Тогда
		ВводНачальныхОстатковИмуществоОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковИмущество");
		ВводНачальныхОстатковИмуществоОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковИмуществоОбъект.Организация = Организация;
		ВводНачальныхОстатковИмуществоОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковИмуществоОбъект.РазделУчета = "Имущество";
		Если ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Количество() > 0 Тогда
			ВводНачальныхОстатковИмуществоОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковИмуществоОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковИмуществоОбъект, "ВводНачальныхОстатковИмущество");
	КонецЕсли;
	
	Если ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество() > 0
		ИЛИ (ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество()=0
		И НЕ ВводНачальныхОстатковПрочее.Ссылка.Пустая() 
		И ВводНачальныхОстатковПрочее.Проведен) Тогда
		ВводНачальныхОстатковПрочееОбъект = РеквизитФормыВЗначение("ВводНачальныхОстатковПрочее");
		ВводНачальныхОстатковПрочееОбъект.Дата = ДатаОстатков;
		ВводНачальныхОстатковПрочееОбъект.Организация = Организация;
		ВводНачальныхОстатковПрочееОбъект.Комментарий = "# Документ введен помощником ввода остатков.";
		ВводНачальныхОстатковПрочееОбъект.РазделУчета = "Прочие разделы";
		Если ВводНачальныхОстатковПрочее.ПрочиеРазделы.Количество() > 0 Тогда
			ВводНачальныхОстатковПрочееОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВводНачальныхОстатковПрочееОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли; 
		ЗначениеВРеквизитФормы(ВводНачальныхОстатковПрочееОбъект, "ВводНачальныхОстатковПрочее");
	КонецЕсли;
	
	Если ЗакончитьВвод Тогда
		Константы.ПервоначальнаяНастройкаЗаполненыНачальныеОстатки.Установить(Истина);
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
	УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
	УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы");
	ЗаполнитьПризнакВалютныйСчета();
	
	ХранилищеСистемныхНастроек.Сохранить("ПомощникВводаНачальныхОстатков", "ВидЦенПродажи", ВидЦенПродажи,, "");
	ХранилищеСистемныхНастроек.Сохранить("ПомощникВводаНачальныхОстатков", "ВидЦенСебестоимости", ВидЦенСебестоимости,, "");
	
КонецПРоцедуры // ЗаписатьИзмененияФормы()

// Процедура выполняет проверку заполненности обязательных реквизитов при переходе на следующую страницу.
//
&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
	
	ОчиститьСообщения();
	
	Если ТекущийНомерСтраницы = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(ВалютаУчета) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите валюту учета.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , , ,
				Отказ
			);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НациональнаяВалюта) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите национальную валюту.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, , , ,
				Отказ
			);
		КонецЕсли;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковБанкИКасса.ДенежныеСредства Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковБанкИКасса.ДенежныеСредства",
			ТекСтрока,
			"БанковскийСчетКасса",
			НСтр("ru = 'Укажите банковский счет или кассу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковБанкИКасса.ДенежныеСредства",
			ТекСтрока,
			"ВалютаДенежныхСредств",
			НСтр("ru = 'Укажите валюту в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 2 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.Запасы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите структурную единицу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.Запасы",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"ВидОперации",
			НСтр("ru = 'Укажите вид операции в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите поставщика в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите структурную единицу в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Партия",
			НСтр("ru = 'Укажите партию в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПринятые",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"ВидОперации",
			НСтр("ru = 'Укажите вид операции в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите покупателя в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыПереданные",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"Номенклатура",
			НСтр("ru = 'Укажите номенклатуру в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"ЕдиницаИзмерения",
			НСтр("ru = 'Укажите единицу измерения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"Количество",
			НСтр("ru = 'Укажите количество в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"СтранаПроисхождения",
			НСтр("ru = 'Укажите страну происхождения в строке %1.'"),
			Отказ);
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД",
			ТекСтрока,
			"НомерГТД",
			НСтр("ru = 'Укажите номер ГТД в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 3 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите поставщика в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Контрагент",
			НСтр("ru = 'Укажите покупателя в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Договор",
			НСтр("ru = 'Укажите договор в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Сотрудник",
			НСтр("ru = 'Укажите сотрудника в строке %1.'"),
			Отказ);
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Валюта",
			НСтр("ru = 'Укажите валюту в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"СуммаВал",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в валюте учета в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом",
			ТекСтрока,
			"ПериодРегистрации",
			НСтр("ru = 'Укажите период в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковНалоги.РасчетыПоНалогам Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковНалоги.РасчетыПоНалогам",
			ТекСтрока,
			"ВидНалога",
			НСтр("ru = 'Укажите вид налога в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковНалоги.РасчетыПоНалогам",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковЭквайринг.РасчетыПоЭквайрингу",
			ТекСтрока,
			"ЭквайринговыйТерминал",
			НСтр("ru = 'Укажите экваринговый терминал в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
	ИначеЕсли ТекущийНомерСтраницы = 4 Тогда
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"ВнеоборотныйАктив",
			НСтр("ru = 'Укажите карточку имущества в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"ТекущееСостояниеВнеоборотногоАктива",
			НСтр("ru = 'Укажите текущее состояние в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы",
			ТекСтрока,
			"СчетЗатрат",
			НСтр("ru = 'Укажите счет затрат в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары.ПрямыеЗатраты Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"СтруктурнаяЕдиница",
			НСтр("ru = 'Укажите подразделение в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"СчетЗатрат",
			НСтр("ru = 'Укажите счет затрат в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковТовары.ПрямыеЗатраты",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
		
		КонецЦикла;
		
		Для каждого ТекСтрока Из ВводНачальныхОстатковПрочее.ПрочиеРазделы Цикл
			
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"ВидДвижения",
			НСтр("ru = 'Укажите вид движения в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"Счет",
			НСтр("ru = 'Укажите счет в строке %1.'"),
			Отказ);
		
			ПроверитьКолонкуТаблицы(
			"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
			ТекСтрока,
			"Сумма",
			НСтр("ru = 'Укажите сумму в строке %1.'"),
			Отказ);
			
			Если УчетВалютныхОпераций И ТекСтрока.Валютный Тогда
				
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
				ТекСтрока,
				"Валюта",
				НСтр("ru = 'Укажите валюту в строке %1.'"),
				Отказ);
				
				ПроверитьКолонкуТаблицы(
				"ВводНачальныхОстатковПрочее.ПрочиеРазделы",
				ТекСтрока,
				"СуммаВал",
				НСтр("ru = 'Укажите валютную сумму в строке %1.'"),
				Отказ);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьКолонкуТаблицы(ИмяТаблицы, СтрокаТаблицы, Реквизит, Текст, Отказ)
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[Реквизит]) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаТаблицы.НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			ИмяТаблицы+"["+(СтрокаТаблицы.НомерСтроки-1)+"]."+Реквизит,
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ДенежныеСредстваИПодотчет

&НаСервереБезКонтекста
Функция СписокВыбораВалют(Валюты)
	
	Результат = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Валюты", Валюты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И НЕ Валюты.Ссылка В (&Валюты)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);	
	КонецЦикла; 
	Результат.Добавить(Неопределено, НСтр("ru = 'Еще валюты...'"));
	Возврат Результат;
	
КонецФункции

// Функция пересчитывает сумму из указанной валюты в валюту упр. учета.
//
// Параметры:      
//	СуммаВал  - Число                    - сумма в валюте, которую следует пересчитать.
//	Валюта    - Справочник.Ссылка.Валюты - валюта, из которой следует пересчитать.
//	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в валюте упр. учета.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыВВалютуУчета(СуммаВал, ВалютаДоговор, ДатаКурса) Экспорт
	
	Сумма = 0;
	
	Если ЗначениеЗаполнено(ВалютаДоговор) Тогда
		
		Валюта = ?(ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ВалютаДоговор.ВалютаРасчетов, ВалютаДоговор);
		
		ВалютаУчета = Константы.ВалютаУчета.Получить();
		
		СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(Валюта, ВалютаУчета, ДатаКурса);
		
		Сумма = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СуммаВал,
			СтруктураКурсовВалют.КурсНач,
			СтруктураКурсовВалют.Курс,
			СтруктураКурсовВалют.КратностьНач,
			СтруктураКурсовВалют.Кратность
		);
		
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции // ПересчитатьИзВалютыВВалютуУчета()

// Функция пересчитывает сумму из валюты упр. учета в указанную валюту
//
// Параметры:      
//	Сумма     - Число                    - сумма в валюте упр. учета.
//	Валюта    - Справочник.Ссылка.Валюты - валюта, в которую следует пересчитать.
//	ДатаКурса - Дата                     - дата курса.
//
// Возвращаемое значение: 
//  Число - сумма в указанной валюте.
//
&НаСервереБезКонтекста
Функция ПересчитатьИзВалютыУчетаВВалюту(Сумма, ВалютаДоговор, ДатаКурса) Экспорт
	
	СуммаВал = 0;
	
	Если ЗначениеЗаполнено(ВалютаДоговор) Тогда
		
		Валюта = ?(ТипЗнч(ВалютаДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), ВалютаДоговор.ВалютаРасчетов, ВалютаДоговор);
		
		ВалютаУчета = Константы.ВалютаУчета.Получить();
		
		СтруктураКурсовВалют = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ВалютаУчета, Валюта, ДатаКурса);
		
		Сумма = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			Сумма,
			СтруктураКурсовВалют.КурсНач,
			СтруктураКурсовВалют.Курс,
			СтруктураКурсовВалют.КратностьНач,
			СтруктураКурсовВалют.Кратность
		);
		
	КонецЕсли;
	
	Возврат СуммаВал;
	
КонецФункции

&НаСервере
Процедура ВключитьИспользованиеВалютныхОпераций()
	
	УчетВалютныхОпераций = Истина;
	Константы.ФункциональнаяУчетВалютныхОпераций.Установить(Истина);
	УстановитьВидимостьИДоступность("ОбновитьИнтефейс");
	
КонецПроцедуры

&НаСервере
Процедура ПриДобавленииСчетаКассыПодотчетникаСервер(ЭлементСправочника)

	Если ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.Сотрудники") Тогда
		Стр = ВводНачальныхОстатковПодотчет.РасчетыСПодотчетниками.Добавить();
		Стр.Сотрудник = ЭлементСправочника;
		Стр.Валюта = ВалютаУчета;
	Иначе
		Стр = ВводНачальныхОстатковБанкИКасса.ДенежныеСредства.Добавить();
		Стр.БанковскийСчетКасса = ЭлементСправочника;
		Если ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.Кассы") Тогда
			Стр.ВалютаДенежныхСредств = ЭлементСправочника.ВалютаПоУмолчанию;
		ИначеЕсли ТипЗнч(ЭлементСправочника)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Стр.ВалютаДенежныхСредств = ЭлементСправочника.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли; 
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти 

#Область Запасы

&НаСервере
Процедура ПолучитьСтруктуруВидовОпераций()
	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Очистить();	
	Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Очистить();	
	
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПереработкаДавальческогоСырья") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПриемЗапасовНаОтветхранение") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаОтветхранение);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаСырьяВПереработку") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаВПереработку);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ПередачаЗапасовНаОтветхранение") Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Добавить(Перечисления.ВидыОперацийРасходнаяНакладная.ПередачаНаОтветхранение);
	КонецЕсли;
	
	Элементы.СтраницаПринятыеТовары.Видимость = (Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеВидОперации.СписокВыбора.Количество()>0); 
	Элементы.СтраницаПереданныеТовары.Видимость = (Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеВидОперации.СписокВыбора.Количество()>0);
	Элементы.СтраницаТоварыВРазрезеГТД.Видимость = ПолучитьФункциональнуюОпцию("УчетГТД");
	
	Если НЕ Элементы.СтраницаПринятыеТовары.Видимость И НЕ Элементы.СтраницаПереданныеТовары.Видимость И НЕ Элементы.СтраницаТоварыВРазрезеГТД.Видимость Тогда
		Элементы.СтраницыОстаткиТоваров.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.СтраницыОстаткиТоваров.ОтображениеСтраниц=ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли; 
	
КонецПроцедуры // ПолучитьСтруктуруВидовОпераций()

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти()
	
	Если ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасы Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасы.ТекущиеДанные;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	ИначеЕсли ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПринятые.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПродажи;
	ИначеЕсли ТекущийЭлемент=Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные Тогда
		СтрокаТабличнойЧасти = Элементы.ВводНачальныхОстатковТоварыЗапасыПереданные.ТекущиеДанные;
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаПродажи;
		СтрокаТабличнойЧасти.Себестоимость = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли; 
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаСервере
Процедура ЗаписатьИзмененияЦен(ЗаписыватьСобственные = Истина, ЗаписыватьПринятые = Истина, ЗаписыватьПереданные = Истина)
	
	Если ЗаписыватьПринятые Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
			Если Стр.ЦенаПродажи>0 И ЗначениеЗаполнено(ВидЦенПродажи) Тогда
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаОстатков;
				МенеджерЗаписи.Номенклатура = Стр.Номенклатура;
				МенеджерЗаписи.Характеристика = Стр.Характеристика;
				МенеджерЗаписи.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				МенеджерЗаписи.Актуальность = Истина;
				МенеджерЗаписи.ВидЦен = ВидЦенПродажи;
				МенеджерЗаписи.Цена = Стр.ЦенаПродажи;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ЗаписыватьПереданные Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
			Если Стр.Цена>0 И ЗначениеЗаполнено(ВидЦенСебестоимости) Тогда
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаОстатков;
				МенеджерЗаписи.Номенклатура = Стр.Номенклатура;
				МенеджерЗаписи.Характеристика = Стр.Характеристика;
				МенеджерЗаписи.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				МенеджерЗаписи.Актуальность = Истина;
				МенеджерЗаписи.ВидЦен = ВидЦенСебестоимости;
				МенеджерЗаписи.Цена = Стр.Цена;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			Если Стр.ЦенаПродажи>0 И ЗначениеЗаполнено(ВидЦенПродажи) Тогда
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаОстатков;
				МенеджерЗаписи.Номенклатура = Стр.Номенклатура;
				МенеджерЗаписи.Характеристика = Стр.Характеристика;
				МенеджерЗаписи.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				МенеджерЗаписи.Актуальность = Истина;
				МенеджерЗаписи.ВидЦен = ВидЦенПродажи;
				МенеджерЗаписи.Цена = Стр.ЦенаПродажи;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 

	Если ЗаписыватьСобственные Тогда
		Для каждого Стр Из ВводНачальныхОстатковТовары.Запасы Цикл
			Если Стр.Цена>0 И ЗначениеЗаполнено(ВидЦенСебестоимости) Тогда
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаОстатков;
				МенеджерЗаписи.Номенклатура = Стр.Номенклатура;
				МенеджерЗаписи.Характеристика = Стр.Характеристика;
				МенеджерЗаписи.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				МенеджерЗаписи.Актуальность = Истина;
				МенеджерЗаписи.ВидЦен = ВидЦенСебестоимости;
				МенеджерЗаписи.Цена = Стр.Цена;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
			Если Стр.ЦенаПродажи>0 И ЗначениеЗаполнено(ВидЦенПродажи) Тогда
				МенеджерЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Период = ДатаОстатков;
				МенеджерЗаписи.Номенклатура = Стр.Номенклатура;
				МенеджерЗаписи.Характеристика = Стр.Характеристика;
				МенеджерЗаписи.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения;
				МенеджерЗаписи.Актуальность = Истина;
				МенеджерЗаписи.ВидЦен = ВидЦенПродажи;
				МенеджерЗаписи.Цена = Стр.ЦенаПродажи;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦены(ЗаполнятьЦеныУчета = Истина, ЗаполнятьЦеныПродажи = Истина, ЗаполнятьЦеныРасчетов = Истина)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ТаблицаНоменклатуры.Колонки.Добавить("ИмяТаблицы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25, ДопустимаяДлина.Переменная)));
	Для каждого Стр Из ВводНачальныхОстатковТовары.Запасы Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "Запасы";
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПринятые Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "ЗапасыПринятые";
	КонецЦикла;
	Для каждого Стр Из ВводНачальныхОстатковТовары.ЗапасыПереданные Цикл
		СтрТаблицы = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаблицы, Стр);
		СтрТаблицы.Идентификатор = Стр.ПолучитьИдентификатор();
		СтрТаблицы.ИмяТаблицы = "ЗапасыПереданные";
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("ВидЦенПродажи", ВидЦенПродажи);
	Запрос.УстановитьПараметр("ВидЦенСебестоимости", ВидЦенСебестоимости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.ИмяТаблицы
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Идентификатор,
	|	ТаблицаНоменклатуры.ИмяТаблицы,
	|	ЕСТЬNULL(ЕСТЬNULL(ЦеныПродажиПоХарактеристикам.Цена, ЦеныПродажиБезХарактеристик.Цена), 0) КАК ЦенаПродажи,
	|	ЕСТЬNULL(ЕСТЬNULL(ЦеныСебестоимостиПоХарактеристикам.Цена, ЦеныСебестоимостиБезХарактеристик.Цена), 0) КАК Цена
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенПродажи
	|					И НЕ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныПродажиПоХарактеристикам
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныПродажиПоХарактеристикам.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныПродажиПоХарактеристикам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенПродажи
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныПродажиБезХарактеристик
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныПродажиБезХарактеристик.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенСебестоимости
	|					И НЕ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныСебестоимостиПоХарактеристикам
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныСебестоимостиПоХарактеристикам.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныСебестоимостиПоХарактеристикам.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаОстатков,
	|				ВидЦен = &ВидЦенСебестоимости
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныСебестоимостиБезХарактеристик
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныСебестоимостиБезХарактеристик.Номенклатура";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИмяТаблицы="Запасы" Тогда
			Стр = ВводНачальныхОстатковТовары.Запасы.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныПродажи Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
			КонецЕсли;
			Если ЗаполнятьЦеныУчета Тогда
				Стр.Цена = Выборка.Цена;
				Стр.Сумма = Стр.Цена*Стр.Количество;
			КонецЕсли; 
		ИначеЕсли Выборка.ИмяТаблицы="ЗапасыПринятые" Тогда
			Стр = ВводНачальныхОстатковТовары.ЗапасыПринятые.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныРасчетов Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
				Стр.СуммаРасчетов = Стр.Цена*Стр.Количество;
			Иначе
				Стр.ЦенаПродажи = ?(Стр.Количество=0, 0, Стр.СуммаРасчетов/Стр.Количество);
			КонецЕсли;
		ИначеЕсли Выборка.ИмяТаблицы="ЗапасыПереданные" Тогда
			Стр = ВводНачальныхОстатковТовары.ЗапасыПереданные.НайтиПоИдентификатору(Выборка.Идентификатор);
			Если ЗаполнятьЦеныРасчетов Тогда
				Стр.ЦенаПродажи = Выборка.ЦенаПродажи;
				Стр.СуммаРасчетов = Стр.Цена*Стр.Количество;
			Иначе
				Стр.ЦенаПродажи = ?(Стр.Количество=0, 0, Стр.СуммаРасчетов/Стр.Количество);
			КонецЕсли;
			Если ЗаполнятьЦеныУчета Тогда
				Стр.Цена = Выборка.Цена;
				Стр.Себестоимость = Стр.Цена*Стр.Количество;
			Иначе
				Стр.Цена = ?(Стр.Количество=0, 0, Стр.Себестоимость/Стр.Количество);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("ТипНоменклатуры", СтруктураДанные.Номенклатура.ТипНоменклатуры);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	
	Если НЕ СтруктураДанные.Свойство("ВидЦенСебестоимости") ИЛИ НЕ СтруктураДанные.Свойство("ВидЦенПродажи") Тогда
		Возврат СтруктураДанные;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", СтруктураДанные.ДатаОстатков);
	Запрос.УстановитьПараметр("Номенклатура", СтруктураДанные.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтруктураДанные.Характеристика);
	Запрос.УстановитьПараметр("ВидЦенСебестоимости", СтруктураДанные.ВидЦенСебестоимости);
	Запрос.УстановитьПараметр("ВидЦенПродажи", СтруктураДанные.ВидЦенПродажи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦенСебестоимости
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК Цена,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА ЦеныНоменклатурыСрезПоследних.ВидЦен = &ВидЦенПродажи
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.Цена
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЦенаПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОстатков,
	|			ВидЦен В (&ВидЦенСебестоимости, &ВидЦенПродажи)
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика) КАК ЦеныНоменклатурыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураДанные.Вставить("Цена", Выборка.Цена);
		СтруктураДанные.Вставить("ЦенаПродажи", Выборка.ЦенаПродажи);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
		СтруктураДанные.Вставить("ЦенаПродажи", 0);
	КонецЕсли; 
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
// Получает набор данных с сервера для процедуры ЕдиницаИзмеренияПриИзменении.
//
Функция ПолучитьДанныеЕдиницаИзмеренияПриИзменении(ТекущаяЕдиницаИзмерения = Неопределено, ЕдиницаИзмерения = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	Если ТекущаяЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("ТекущийКоэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("ТекущийКоэффициент", ТекущаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Если ЕдиницаИзмерения = Неопределено Тогда
		СтруктураДанные.Вставить("Коэффициент", 1);
	Иначе
		СтруктураДанные.Вставить("Коэффициент", ЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеЕдиницаИзмеренияПриИзменении()

&НаСервереБезКонтекста
Функция ТипНоменклатурыЗапас(НоменклатураСсылка)
	
	Возврат НоменклатураСсылка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
	
КонецФункции

#КонецОбласти 

#Область Расчеты

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	СтруктураДанные = Новый Структура();
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(ВводНачальныхОстатковТовары.Ссылка, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ВалютаРасчетов",
		Контрагент.ДоговорПоУмолчанию.ВалютаРасчетов
	);
	
	СтруктураДанные.Вставить("ВестиРасчетыПоДоговорам", Контрагент.ВестиРасчетыПоДоговорам);
	СтруктураДанные.Вставить("ВестиРасчетыПоДокументам", Контрагент.ВестиРасчетыПоДокументам);
	СтруктураДанные.Вставить("ВестиРасчетыПоЗаказам", Контрагент.ВестиРасчетыПоЗаказам);
	СтруктураДанные.Вставить("ВестиУчетОплатыПоСчетам", Контрагент.ВестиУчетОплатыПоСчетам);
	
	УстановитьВидимостьРеквизитовТЧ(
		ИмяТабличнойЧасти,
		Контрагент.ВестиРасчетыПоДоговорам,
		Контрагент.ВестиРасчетыПоДокументам,
		Контрагент.ВестиРасчетыПоЗаказам,
		Контрагент.ВестиУчетОплатыПоСчетам
	);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ИмяТабличнойЧасти, ВидОперации = Неопределено)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	Если (ИмяТабличнойЧасти = "ЗапасыПереданные"
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые")
		И Не ЗначениеЗаполнено(ВидОперации) Тогда
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРеквизитовТЧ(ИмяТабличнойЧасти, Знач ВестиРасчетыПоДоговорам = Ложь, Знач ВестиРасчетыПоДокументам = Ложь, Знач ВестиРасчетыПоЗаказам = Ложь, Знач ВестиУчетОплатыПоСчетам = Ложь, Знач ВалютныйСчет = Ложь )
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" 
		ИЛИ ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(ВводНачальныхОстатковРасчетыСКонтрагентами[ИмяТабличнойЧасти]);
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" 
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(ВводНачальныхОстатковТовары[ИмяТабличнойЧасти]);
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда 
		ЗаполнитьПризнакВалютныйСчета();
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" 
		ИЛИ ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковРасчетыСКонтрагентами[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
				ВестиРасчетыПоДоговорам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоДокументам Тогда
				ВестиРасчетыПоДокументам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
				ВестиРасчетыПоЗаказам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиУчетОплатыПоСчетам Тогда
				ВестиУчетОплатыПоСчетам = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" 
		ИЛИ ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковТовары[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.ВестиРасчетыПоДоговорам Тогда
				ВестиРасчетыПоДоговорам = Истина;
			КонецЕсли;
			Если ТекСтрока.ВестиРасчетыПоЗаказам Тогда
				ВестиРасчетыПоЗаказам = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда
		Для каждого ТекСтрока Из ВводНачальныхОстатковПрочее[ИмяТабличнойЧасти] Цикл
			Если ТекСтрока.Валютный Тогда
				ВалютныйСчет = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Если ИмяТабличнойЧасти = "РасчетыСПоставщиками" Тогда
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиЗаказПоставщику.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПоставщикамиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "РасчетыСПокупателями" Тогда
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиДокумент.Видимость = ВестиРасчетыПоДокументам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиЗаказПокупателя.Видимость = ВестиРасчетыПоЗаказам;
		Элементы.ВводНачальныхОстатковРасчетыСКонтрагентамиРасчетыСПокупателямиСчетНаОплату.Видимость = ВестиУчетОплатыПоСчетам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПереданные" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПереданныеЗаказ.Видимость = ВестиРасчетыПоЗаказам;
	ИначеЕсли ИмяТабличнойЧасти = "ЗапасыПринятые" Тогда
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеДоговор.Видимость = ВестиРасчетыПоДоговорам;
		Элементы.ВводНачальныхОстатковТоварыЗапасыПринятыеЗаказ.Видимость = ВестиРасчетыПоЗаказам;
	ИначеЕсли ИмяТабличнойЧасти = "ПрочиеРазделы" Тогда 
		Элементы.ВводНачальныхОстатковПрочееПрочиеРазделыВалюта.Видимость = ВалютныйСчет;
		Элементы.ВводНачальныхОстатковПрочееПрочиеРазделыСуммаВал.Видимость = ВалютныйСчет;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервере
Процедура ЗаполнитьПризнакВалютныйСчета()
	
	КоллекцияДанных = ВводНачальныхОстатковПрочее.ПрочиеРазделы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.Счет КАК ПланСчетов.Управленческий) КАК Счет
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.Счет.Валютный КАК Валютный
	|ИЗ
	|	ТаблицаСчетов КАК ТаблицаСчетов";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Счет"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, "Валютный");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции(КоллекцияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	Таблица.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаКонтрагента
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДоговорам КАК ВестиРасчетыПоДоговорам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоДокументам КАК ВестиРасчетыПоДокументам,
	|	ТаблицаКонтрагента.Контрагент.ВестиРасчетыПоЗаказам КАК ВестиРасчетыПоЗаказам,
	|	ТаблицаКонтрагента.Контрагент.ВестиУчетОплатыПоСчетам КАК ВестиУчетОплатыПоСчетам
	|ИЗ
	|	ТаблицаКонтрагента КАК ТаблицаКонтрагента";
	
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки, Контрагент"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч = 0 По КоллекцияДанных.Количество() - 1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, "ВестиРасчетыПоДоговорам, ВестиРасчетыПоДокументам, ВестиРасчетыПоЗаказам, ВестиУчетОплатыПоСчетам");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоКонтрагентуВКоллекции()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации, ИмяТабличнойЧасти)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации, ИмяТабличнойЧасти);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеЭквайринговогоТерминалаПриИзменении(ЭквайринговыйТерминал)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		ЭквайринговыйТерминал.БанковскийСчетЭквайринг.ВалютаДенежныхСредств
	);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти 

#Область Прочее

&НаСервереБезКонтекста
Функция ПолучитьДанныеВнеоборотныйАктив(ВнеоборотныйАктив)
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("СпособАмортизацииПропорциональноОбъемуПродукции", ВнеоборотныйАктив.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииВнеоборотныхАктивов.ПропорциональноОбъемуПродукции);
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеСчетПриИзменении(Счет) Экспорт
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("Валютный", Счет.Валютный);
	СтруктураДанные.Вставить("Валюта", Константы.ВалютаУчета.Получить());
	
	УстановитьВидимостьРеквизитовТЧ("ПрочиеРазделы", , , , , Счет.Валютный);
	
	Возврат СтруктураДанные;
	
КонецФункции

#КонецОбласти 

#Область ПодключаемоеОборудование	

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	ИмяТекущейСтраницы = Элементы.СтраницыОстаткиТоваров.ТекущаяСтраница.Имя;
	Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" Тогда
		ИмяТабличнойЧасти = "Запасы";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПереданныеТовары" Тогда
		ИмяТабличнойЧасти = "ЗапасыПереданные";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаПринятыеТовары" Тогда
		ИмяТабличнойЧасти = "ЗапасыПринятые";
	ИначеЕсли ИмяТекущейСтраницы = "СтраницаТоварыВРазрезеГТД" Тогда
		ИмяТабличнойЧасти = "ЗапасыВРазрезеГТД";
	Иначе
		Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа", Новый Массив, Новый Массив);
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураДанные.Вставить("ВидЦенСебестоимости", ВидЦенСебестоимости);
	СтруктураДанные.Вставить("ВидЦенПродажи", ВидЦенПродажи);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры));
		Иначе
			МассивСтрокТЧ = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Партия,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.Партия,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = ВводНачальныхОстатковТовары[ИмяТабличнойЧасти].Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				Если ИмяТабличнойЧасти="Запасы" Тогда
					НоваяСтрока.Цена = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Цена;
					НоваяСтрока.ЦенаПродажи = ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЦенаПродажи;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
						НоваяСтрока.СтруктурнаяЕдиница = ПредопределенноеЗначение("Справочник.СтруктурныеЕдиницы.ОсновнойСклад");
					КонецЕсли;
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли; 
				Элементы["ВводНачальныхОстатковТовары"+ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Если ИмяТабличнойЧасти="Запасы" Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
				КонецЕсли;
				Элементы["ВводНачальныхОстатковТовары"+ИмяТабличнойЧасти].ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ИмяТекущейСтраницы = "СтраницаСобственныеТовары" И ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, ВводНачальныхОстатковТовары);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("ДатаОстатков", СтруктураДанные.ДатаОстатков);
			СтруктураДанныеНоменклатуры.Вставить("ВидЦенСебестоимости", СтруктураДанные.ВидЦенСебестоимости);
			СтруктураДанныеНоменклатуры.Вставить("ВидЦенПродажи", СтруктураДанные.ВидЦенПродажи);
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.ВводНачальныхОстатков.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтаФорма, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтаФорма,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодключенияОтключенияОборудования

// Начать подключение необходимых типов оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
&НаКлиенте
Процедура НачатьПодключениеОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", МенеджерОборудованияКлиентПереопределяемый);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОповещениеПриПодключении, Форма, ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Начать отключать оборудование по типу при закрытии формы.
//
&НаКлиенте
Процедура НачатьОтключениеОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", МенеджерОборудованияКлиентПереопределяемый); 
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасы(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.Запасы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыПереданные(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыПереданные;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыПринятые(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыПринятые;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаЗапасыВРазрезеГТД(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ЗапасыВРазрезеГТД;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПоставщиками(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПоставщиками;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПокупателями(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПокупателями;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаРасчетыСПерсоналом(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.РасчетыСПерсоналом;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаИмущество(Команда)
	
	ТекущаяНастройкаЗагрузкиДанных = НастройкиЗагрузкиДанных.ВнеоборотныеАктивы;
	ТекущаяНастройкаЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы";
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, ТекущаяНастройкаЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(ТекущаяНастройкаЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ПолноеИмяОбъектаЗаполнения = ДополнительныеПараметры.ПолноеИмяОбъектаЗаполнения;
			Если ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.Запасы" Тогда
				
				ОбработатьПодготовленныеДанныеЗапасы(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПереданные" Тогда
				
				ОбработатьПодготовленныеДанныеЗапасыПереданные(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыПринятые" Тогда
				
				ОбработатьПодготовленныеДанныеЗапасыПринятые(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ЗапасыВРазрезеГТД" Тогда
				
				ОбработатьПодготовленныеДанныеЗапасыВРазрезеГТД(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПоставщиками" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПокупателями" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.РасчетыСПерсоналом" Тогда
				
				ОбработатьПодготовленныеДанныеРасчетыСПерсоналом(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			ИначеЕсли ПолноеИмяОбъектаЗаполнения = "Документ.ВводНачальныхОстатков.ТабличнаяЧасть.ВнеоборотныеАктивы" Тогда
				
				ОбработатьПодготовленныеДанныеВнеоборотныеАктивы(РезультатЗагрузки);
				ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасы(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				НоваяСтрока.Сумма = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыПереданные(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыПереданные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "ЗапасыПереданные", НоваяСтрока.ВидОперации);
					НоваяСтрока.Договор = СтруктураДанные.Договор;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПродажи) Тогда
					НоваяСтрока.СуммаРасчетов = СтрокаТаблицы.ЦенаПродажи * СтрокаТаблицы.Количество;
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда 
					СтрокаТаблицы.ЦенаПродажи = НоваяСтрока.СуммаРасчетов / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.СуммаРасчетов = 0;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.Цена) Тогда
					НоваяСтрока.Себестоимость = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда 
					СтрокаТаблицы.Цена = НоваяСтрока.Себестоимость / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.Себестоимость = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("ЗапасыПереданные");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыПринятые(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыПринятые.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "ЗапасыПринятые", НоваяСтрока.ВидОперации);
					НоваяСтрока.Договор = СтруктураДанные.Договор;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.ЦенаПродажи) Тогда
					НоваяСтрока.СуммаРасчетов = СтрокаТаблицы.ЦенаПродажи * СтрокаТаблицы.Количество;
				ИначеЕсли СтрокаТаблицы.Количество<>0 Тогда 
					СтрокаТаблицы.ЦенаПродажи = НоваяСтрока.СуммаРасчетов / СтрокаТаблицы.Количество;
				Иначе
					НоваяСтрока.СуммаРасчетов = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("ЗапасыПринятые");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеЗапасыВРазрезеГТД(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковТовары.ЗапасыВРазрезеГТД.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПоставщиками(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПоставщиками.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "РасчетыСПоставщиками");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, ДатаОстатков);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПоставщику = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("РасчетыСПоставщиками");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПокупателями(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковРасчетыСКонтрагентами.РасчетыСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Контрагент, Договор, ПризнакАванса, СуммаВал, Сумма", );
				
				СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(НоваяСтрока.Контрагент, Организация, "РасчетыСПокупателями");
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Договор) Тогда
					
					НоваяСтрока.Договор = СтруктураДанные.Договор;
					
				КонецЕсли;
				
				НоваяСтрока.ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
				НоваяСтрока.ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
				НоваяСтрока.ВестиРасчетыПоЗаказам = СтруктураДанные.ВестиРасчетыПоЗаказам;
				НоваяСтрока.ВестиУчетОплатыПоСчетам = СтруктураДанные.ВестиУчетОплатыПоСчетам;
				
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, СтруктураДанные.ВалютаРасчетов, ДатаОстатков);
				
				Если НоваяСтрока.ВестиРасчетыПоЗаказам Тогда
					
					НоваяСтрока.ЗаказПокупателя = СтрокаТаблицы.Заказ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиРасчетыПоДокументам Тогда
					
					НоваяСтрока.Документ = СтрокаТаблицы.Документ;
					
				КонецЕсли;
				
				Если НоваяСтрока.ВестиУчетОплатыПоСчетам Тогда
					
					НоваяСтрока.СчетНаОплату = СтрокаТаблицы.Счет;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьВидимостьРеквизитовТЧ("РасчетыСПокупателями");
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеРасчетыСПерсоналом(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковЗарплата.РасчетыСПерсоналом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
					НоваяСтрока.Валюта = ВалютаУчета;
				КонецЕсли;
				НоваяСтрока.Сумма = ПересчитатьИзВалютыВВалютуУчета(НоваяСтрока.СуммаВал, НоваяСтрока.Валюта, ДатаОстатков);
				НоваяСтрока.ПериодРегистрации = НачалоМесяца(НоваяСтрока.ПериодРегистрации);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПериодРегистрации) Тогда
					НоваяСтрока.ПериодРегистрации = НачалоМесяца(ДатаОстатков);
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанныеВнеоборотныеАктивы(РезультатЗагрузки)
	
	Попытка
		
		НачатьТранзакцию();
		
		ТаблицаСопоставленияДанных = РезультатЗагрузки.ТаблицаСопоставленияДанных;
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			Если ЗагрузкаВПриложениеВозможна Тогда
				
				НоваяСтрока = ВводНачальныхОстатковИмущество.ВнеоборотныеАктивы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетЗатрат) Тогда
					НоваяСтрока.СчетЗатрат = ПланыСчетов.Управленческий.АмортизацияВнеоборотныхАктивов;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтруктурнаяЕдиница) Тогда
					НоваяСтрока.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаправлениеДеятельности) Тогда
					НоваяСтрока.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника

#КонецОбласти

#КонецОбласти
 

