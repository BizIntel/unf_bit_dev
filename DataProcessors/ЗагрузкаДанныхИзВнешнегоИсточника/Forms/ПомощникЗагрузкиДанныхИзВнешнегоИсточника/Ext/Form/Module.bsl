
#Область СлужебныеПроцедурыИФункции

//:::ОбщегоНазначения

&НаСервере
Процедура ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент)
	Перем Менеджер;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	ТабличныйДокумент = Менеджер.ПолучитьМакет(Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_mxl);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение)
	
	Если Расширение = "xlsx" Тогда
		
		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_xlsx;
		
	ИначеЕсли Расширение = "csv" Тогда
		
		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_csv;
		
	КонецЕсли;
	
	НаименованиеФайлаБезРасширения = Нстр("ru = 'ОбразецЗагрузкиДанных'");
	
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная",ТекущаяДата());
	ДанныеФайла.Вставить("Зашифрован", 					Ложь);
	ДанныеФайла.Вставить("ИмяФайла",					НаименованиеФайлаБезРасширения + "." + Расширение);
	ДанныеФайла.Вставить("Наименование",				НаименованиеФайлаБезРасширения);
	ДанныеФайла.Вставить("ОтносительныйПуть",			"LD\"); //LoadData
	ДанныеФайла.Вставить("ПодписанЭП",					Ложь);
	ДанныеФайла.Вставить("Размер",						Неопределено);
	ДанныеФайла.Вставить("Расширение",					Расширение);
	ДанныеФайла.Вставить("Редактирует",					Неопределено);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", Адрес);
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	ДанныеФайла.Вставить("ФайлРедактируется",			Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразец(Расширение)
	
	Если Расширение = "mxl" Тогда
		
		ТабличныйДокумент = Неопределено;
		ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент);
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ОбластиОбъектов = Новый СписокЗначений;
			ИдентификаторПечатнойФормы = Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
			
			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
			ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Образец подготовленных данных в формате mxl'");
			ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
			ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Образец подготовленных данных в формате mxl'");
			
			УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеФайла = Новый Структура;
		ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение);
		
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьЗаголовка()
	
	ОбластьЗаголовка = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если ОбластьЗаголовка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда // промазали, выделили колонку
		
		ОбластьЗаголовка = ТабличныйДокумент.Область("R1" + ОбластьЗаголовка.Имя);
		
	КонецЕсли;
	
	Возврат ОбластьЗаголовка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(ЭтоЗагрузкаТабличнойЧасти)
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='ОтборОшибокНет'"),	Нстр("ru ='Данные, готовые к загрузке'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(2, Нстр("ru ='ОтборОшибки'"), 	Нстр("ru ='Данные, которые загрузить невозможно'"));
		
	Иначе
		
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='Сопоставленные'"), Нстр("ru ='Данные, которые удалось сопоставить'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='БудутСозданы'"), Нстр("ru ='Данные, которым не найдено соответствие в программе'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='Несогласованные'"), Нстр("ru ='Данные, которые содержат ошибку (заполнены не полностью)'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки()
	
	Если СоздаватьЕслиНеСопоставлено Тогда
		
		ТекстЗаголовка = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, 
			Нстр("ru ='будет создано новых элементов:'"), 
			Нстр("ru ='будет создано новых записей:'"));
		
	Иначе
		
		ТекстЗаголовка = Нстр("ru ='будет пропущено строк:'");
		
	КонецЕсли;
	
	ИмяЭлемента = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, "ДекорацияНесопоставленныеСтрокиЗаголовокОбъект", "ДекорацияНесопоставленныеСтрокиЗаголовокРС");
	
	Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов()
	
	ТекстЗаголовока = ?(ОбновлятьСуществующие,
		Нстр("ru = 'из них сопоставлены и будут обновлены'"),
		Нстр("ru = 'из них сопоставлены'"));
		
	ИмяЭлемента = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, "ДекорацияСопоставленоЗаголовокОбъект", "ДекорацияСопоставленоЗаголовокРС");
	
	Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовока;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииОбщееЗначение()
	
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение")
		И ЗначениеЗаполнено(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты"
			ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
			
			Элементы.ОбщееЗначениеСправочник.Заголовок = Нстр("ru ='< '") + Строка(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) + Нстр("ru =' >'");
			
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатуры" Тогда
			
			Элементы.ОбщееЗначениеРС.Заголовок = Нстр("ru ='< '") + Строка(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) + Нстр("ru =' >'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстУсловногоОформления()
	
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИзменитьТекстУсловногоОформления(ЭтотОбъект.УсловноеОформление, Параметры.НастройкиЗагрузкиДанных);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища)
	
	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение", Ложь, Неопределено);
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		РезультатПроверки.ЗаданиеВыполнено	= Истина;
		ТабличныйДокумент					= ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнение()
	
	РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатПроверки.ЗаданиеВыполнено Тогда
		
		ИзменитьПорядковыйНомерПерехода(+1);
		
	Иначе	
		
		Если ФоновоеЗаданиеИнтервалПроверки < 15 Тогда
			
			ФоновоеЗаданиеИнтервалПроверки = ФоновоеЗаданиеИнтервалПроверки + 0.7;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ФоновоеЗаданиеИнтервалПроверки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДеревоПолейЗагрузкиДоступныхПользователю()
	Перем ДеревоПолей;
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьДеревоПолейЗагрузкиДоступныхПользователю(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных);
	АдресХраненияДереваПолей = ПоместитьВоВременноеХранилище(ДеревоПолей, ЭтаФорма.УникальныйИдентификатор);
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("АдресХраненияДереваПолей", АдресХраненияДереваПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДополнительныхРеквизитов(ДопРеквизит)
	
	Если ДопРеквизит <> Неопределено Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Получить(ДопРеквизит) = Неопределено Тогда
			
			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ДопРеквизит, Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(ДопРеквизит));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СобратьЗаголовокСтраницыПроверкаДанных()
	
	ТекстОбычный = НСтр("ru ='Если найдено %1 пустых строк, обработка следующих строк не выполняется.
							|При проверке заполнения табличного документа '");
	ТекстОбычный = СтрШаблон(ТекстОбычный, ЗагрузкаДанныхИзВнешнегоИсточника.МаксимальноеКоличествоПустыхСтрок());
	
	ТекстЖирный = НСтр("ru ='обнаружены следующие ошибки:'");
	
	Шрифт8Н = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Ложь);
	Шрифт8Ж = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Истина);
	
	МассивФорматированныхСтрок = Новый Массив;
	МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстОбычный, Шрифт8Н));
	МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЖирный, Шрифт8Ж));
	
	Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецПроцедуры

//:::СтраницаВыборФайла

&НаСервере
Процедура ОбнулитьНомераКолонокВДеревеПолей()
	
	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
	Для каждого СтрокаПервогоУровня Из ДеревоПолей.Строки Цикл
		
		СтрокаПервогоУровня.НомерКолонки = 0;
		СтрокаПервогоУровня.НомерЦвета = СтрокаПервогоУровня.НомерЦветаОригинал;
		
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл
			
			СтрокаВторогоУровня.НомерКолонки = 0;
			СтрокаВторогоУровня.НомерЦвета = СтрокаВторогоУровня.НомерЦветаОригинал;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСуществующиеУстановки()
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокументСообщения.Очистить();
	
	ОбнулитьНомераКолонокВДеревеПолей();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьЭлементовСтраницы()
	Перем ЭлементВидим;
	
	ПоказатьЗаголовокОбразцов = Ложь;
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_csv", ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_csv", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = НЕ ПустаяСтрока(ЭлементВидим);
	
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_mxl",ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_mxl", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов ИЛИ НЕ ПустаяСтрока(ЭлементВидим);
	
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_xlsx",ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_xlsx", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов ИЛИ НЕ ПустаяСтрока(ЭлементВидим);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаголовокПримеры", "Видимость", ПоказатьЗаголовокОбразцов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзФайла()
	
	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийФайлОбработкаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйСамостоятельно()
	
	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

//:::СтраницаЗагрузкаДанных

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее)
	
	Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));
	
	ИмяВременногоФайла	= ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Если ДвоичныеДанные = Неопределено Тогда
		
		Возврат;
		
	Иначе
		
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТаблицаСопоставленияДанных.Очистить();
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла",	ИмяВременногоФайла);
	ПараметрыВызоваСервера.Вставить("Расширение", 			Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент",	ТабличныйДокумент);
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	
	ИмяМетода = "ЗагрузкаДанныхИзВнешнегоИсточника.ЗагрузитьДанные";
	Описание = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузка данных из файла'");
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыВызоваСервера, Описание);
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		
	Иначе 
		
		ПерейтиДалее = Ложь;
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее)
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьКолонкиТаблицыСопоставлений(ЭтотОбъект, ТаблицаСопоставленияДанных, Параметры.НастройкиЗагрузкиДанных);
	Если Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента(), Параметры.НастройкиЗагрузкиДанных);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличныйДокумент", "Редактирование", Истина);
		
	Иначе
		
		ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее);
		
	КонецЕсли;
	
КонецПроцедуры

//:::СтраницыПроверкаДанных

&НаСервере
Процедура ДобавитьДополнительныеРеквизитыВТаблицуСопоставления(НастройкиЗагрузкиДанных)
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьДополнительныеРеквизиты(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПолученныеДанные(ПропуститьСтраницу, ЗапретитьПереходДалее)
	
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты")
		И Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
		
		ДобавитьДополнительныеРеквизитыВТаблицуСопоставления(Параметры.НастройкиЗагрузкиДанных);
		
	КонецЕсли;
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПредварительнаяОбработкаДанных(ТабличныйДокумент, ТаблицаСопоставленияДанных, Параметры.НастройкиЗагрузкиДанных, ТабличныйДокументСообщения, ПропуститьСтраницу, ЗапретитьПереходДалее);
	
КонецПроцедуры

//:::СтраницаСопоставление

&НаСервере
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы)
	Перем Менеджер;
	
	СтрокаТаблицыФормы = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтрокиФормы);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстДекорацииКоличестваСтрок()
	
	КоличествоСтрокТаблицы		= ТаблицаСопоставленияДанных.Количество();
	КоличествоСтрокБезОшибок	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	Если НЕ Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		НесопоставленоДанных = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Ложь)).Количество();
		НесогласованныеДанные = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Ложь)).Количество();
		
	КонецЕсли;
	
	НовыйЗаголовок 				= "";
	
	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Всего строк в таблице .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строк с данными, которые возможно загрузить в приложение .......... %1'");
		ЗначениеПараметра = КоличествоСтрокБезОшибок;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строки, содержащие ошибки и препятствующие загрузке данных .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы - КоличествоСтрокБезОшибок;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда 
		
		Если ОбновлятьСуществующие Тогда
			
			НовыйЗаголовок = Нстр("ru ='Данные, которые соответствуют элементам программы и будут обновлены .......... %1'");
			
		Иначе
			
			НовыйЗаголовок = Нстр("ru ='Данные, которые соответствуют элементам программы .......... %1'");
			
		КонецЕсли;
		
		ЗначениеПараметра = КоличествоСтрокТаблицы - НесопоставленоДанных;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Данные, которые не удалось сопоставить .......... %1'");
		ЗначениеПараметра = НесопоставленоДанных;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строки, которые содержат ошибку либо заполнены не полностью .......... %1'");
		ЗначениеПараметра = НесогласованныеДанные;
		
	КонецЕсли;
	
	НовыйЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НовыйЗаголовок, ЗначениеПараметра);
	Элементы.ДекорацияКоличествоСтрок.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокПоЗначениюФильтра()
	
	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Истина);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Ложь);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_СтрокаСопоставлена", Истина);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
			
			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена", Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;
			
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
			
			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена", Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;
			
		КонецЕсли;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставлениеЗагружаемыхДанных()
	Перем Менеджер;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ТаблицаСопоставленияДанных, Параметры.НастройкиЗагрузкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем Менеджер;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПриОпределенииОбразцовЗагрузкиДанных(Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПереопределитьОбразцыЗагрузкиДанных(Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	ОбновлятьСуществующие 		= Ложь;
	СоздаватьЕслиНеСопоставлено = Истина;
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", 		ОбновлятьСуществующие);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено",	СоздаватьЕслиНеСопоставлено);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СамостоятельноеЗаполнение",		Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузитьДанныеДругимСпособом", "Видимость", Параметры.НастройкиЗагрузкиДанных.ИспользоватьСовместно);
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений 
		И НЕ Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКлючевоеЗначениеРСЗаголовок", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщееЗначениеРС", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОчиститьОбщееЗначениеРС", "Видимость", Ложь);
		
	КонецЕсли;
	
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа4", "Видимость", НЕ РежимРаботы.ЭтоВебКлиент);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Группа5", "Видимость", НЕ РежимРаботы.ЭтоВебКлиент);
	
	СоздатьДеревоПолейЗагрузкиДоступныхПользователю();
	
	СобратьЗаголовокСтраницыПроверкаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти);
	
	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов();
	УстановитьТекстЗаголовкаДекорацииОбщееЗначение();
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ФильтрТаблицаСопоставленияПриИзменении(Элемент)
	
	УстановитьОтборСтрокПоЗначениюФильтра();
	УстановитьТекстДекорацииКоличестваСтрок();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЕслиНеСопоставленоПриИзменении(Элемент)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	
	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	
	ИзменитьТекстУсловногоОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриИзменении(Элемент)
	
	ИдентификаторСтрокиФормы = Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы);
	УстановитьТекстДекорацииКоличестваСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИдентификаторДополнительногоРеквизита = Поле.Имя;
	Если СтрНайти(ИдентификаторДополнительногоРеквизита, "ДополнительныйРеквизит") > 0 Тогда
		
		ДополнительныйРеквизит = Неопределено;
		Для каждого СтрокаСоответствия Из Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты Цикл
			
			Если СтрокаСоответствия.Значение = ИдентификаторДополнительногоРеквизита Тогда
				
				ДополнительныйРеквизит = СтрокаСоответствия.Ключ;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДополнительныйРеквизит <> Неопределено Тогда
			
			СтрокаТаблицыСопоставления = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ТипЗнч(СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
				ИЛИ ТипЗнч(СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
				
				ПараметрВыбораЗначенийДополнительногоРеквизита = Новый ПараметрВыбора("Отбор.Владелец", ДополнительныйРеквизит);
				
				МассивПараметровВыбора = Новый Массив;
				МассивПараметровВыбора.Добавить(ПараметрВыбораЗначенийДополнительногоРеквизита);
				
				Поле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки 
		ИЛИ Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗаголовкаКолонки", ЭтотОбъект);
			
			ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
			
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
			ПараметрыЗагрузки.Вставить("ПредставлениеПоля", ОбластьЗаголовка.Текст);
			ПараметрыЗагрузки.Вставить("ИмяПоля", ОбластьЗаголовка.ПараметрРасшифровки);
			ПараметрыЗагрузки.Вставить("ЗаголовокКолонки", ОбластьЗаголовка.Примечание.Текст);
			ПараметрыЗагрузки.Вставить("НомерКолонки", ОбластьЗаголовка.Право);
			
			ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ВыборПоля", ПараметрыЗагрузки, ЭтотОбъект, , , , ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элемент.Защита = ?(Элемент.ТекущаяОбласть.Верх > 1, Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Шаг = -1;
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноТЧ
		ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноСправочник
		ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноРегистрСведений Тогда
		
		Шаг = -2;
		
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(Шаг);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия",				"ОбработатьПодготовленныеДанные");
	РезультатЗакрытия.Вставить("ТаблицаСопоставленияДанных",	ТаблицаСопоставленияДанных);
	РезультатЗакрытия.Вставить("НастройкиЗагрузкиДанных",		Параметры.НастройкиЗагрузкиДанных);
	
	ОповеститьОВыборе(РезультатЗакрытия);
	Оповестить("ОбработатьПодготовленныеДанные", РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДругимСпособомНажатие(Элемент)
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия", "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника");
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияВыборФайлаНажатие(Элемент)
	
	ЗаполнитьТабличныйДокументИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийФайл(Команда)
	
	ЗаполнитьТабличныйДокументИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСамостоятельноеЗаполнениеНажатие(Элемент)
	
	ЗаполнитьТабличныйСамостоятельно();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаСамостоятельноеЗаполнениеНажатие(Элемент)
	
	ЗаполнитьТабличныйСамостоятельно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_csv(Команда)
	
	ОткрытьОбразец("csv");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_mxl(Команда)
	
	ОткрытьОбразец("mxl");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_xlsx(Команда)
	
	ОткрытьОбразец("xlsx");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БезОтбора(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БезОтбора");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БудутСозданы(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БудутСозданы");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_НесогласованныеДанные(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Несогласованные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибокНет(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибокНет");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибки(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибки");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_Сопоставлено(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Сопоставленные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееЗначение(Команда)
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриУстановкеОбщегоЗначения(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбщееЗначение(Команда)
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОчисткеОбщегоЗначения(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСуществующиеПриИзменении(Элемент)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	
	УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВыбратьВнешнийФайлОбработкаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		АдресВременногоХранилища= Адрес;
		ИмяВыбранногоФайла 		= ИмяФайла;
		Расширение 				= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));
		
		Если Расширение = "xlsx" 
			ИЛИ Расширение = "mxl" 
			ИЛИ Расширение = "csv" Тогда
			
			ИзменитьПорядковыйНомерПерехода(+1);
			
		Иначе
			
			ТекстПредупреждения = НСтр("ru ='Импорт данных из файлов данного типа не поддерживается.'");
			ПоказатьПредупреждение(, ТекстПредупреждения); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗаголовкаКолонки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ОбработатьВыборДополнительныхРеквизитов(Результат.ДопРеквизит);
		
		ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
		
		ОбластьЗаголовка.Текст 					= Результат.Представление;
		ОбластьЗаголовка.ПараметрРасшифровки	= Результат.Значение;
		
		Если Результат.Свойство("ОтменитьВыборВКолонке") Тогда
			
			ОбластьЗаголовка 						= ТабличныйДокумент.Область("R1C" + Результат.ОтменитьВыборВКолонке);
			ОбластьЗаголовка.Текст 					= "Не загружать";
			ОбластьЗаголовка.ПараметрРасшифровки	= "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПоставляемаяЧасть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) - Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) - Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеОбработчикиСобытийПереходов

//:::СтраницаВыборФайла

&НаКлиенте
Функция Подключаемый_СтраницаВыборФайла_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	Перем СтруктураПроверки;
	
	Если ЭтоПереходДалее = Ложь Тогда
		
		ОчиститьСуществующиеУстановки();
		
	Иначе
		
		ОпределитьВидимостьЭлементовСтраницы();
		
	КонецЕсли;
	
КонецФункции

//:::СтраницаЗагрузкаДанных

&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Истина;
	ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее);
	Если НЕ ПерейтиДалее Тогда
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", 0.1, Истина);
		
	КонецЕсли;
	
КонецФункции

//:::СтраницыПроверкаДанных

&НаКлиенте
Функция Подключаемый_СтраницыПроверкаДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Перем Ошибки;
	
	Если НЕ ЭтоПереходДалее Тогда
		
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗапретитьПереходДалее = Ложь;
	ПроверитьПолученныеДанные(ПропуститьСтраницу, ЗапретитьПереходДалее);
	
	Если ПропуститьСтраницу Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ЗапретитьПереходДалее Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаДалее1", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницыПроверкаДанных_ПриПереходеНазад(Отказ)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаДалее1", "Доступность", Истина);
	
КонецФункции

//:::СтраницаСопоставление

&НаКлиенте
Функция Подключаемый_СтраницаСопоставление_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если ЭтоПереходДалее = Истина Тогда
		
		СопоставлениеЗагружаемыхДанных();
		ПропуститьСтраницу = Истина;
		
	Иначе
		
		УстановитьОтборСтрокПоЗначениюФильтра();
		УстановитьТекстДекорацииКоличестваСтрок();
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;
		
	КонецЕсли;
	
КонецФункции

//:::СтраницаНастройкаЗагрузки

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноТЧ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ДобавитьВозможно = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	ДобавитьНевозможно = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Ложь)).Количество();
	
	Элементы.ДекорацияБудетЗагруженоКоличество.Заголовок = Строка(ДобавитьВозможно);
	Элементы.ДекорацияБудетПропущеноКоличество.Заголовок = Строка(ДобавитьНевозможно);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноСправочник_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ПолученоДанных 		= ТаблицаСопоставленияДанных.Количество();
	СогласованныеДанные	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	СопоставленоДанных	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Истина)).Количество();
	
	Элементы.ДекорацияПолученоДанныхКоличество.Заголовок = ПолученоДанных;
	Элементы.ДекорацияСопоставленоКоличествоОбъект.Заголовок = СопоставленоДанных;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоОбъект.Заголовок = СогласованныеДанные - СопоставленоДанных;
	Элементы.ДекорацияНекоректныеСтрокиКоличествоОбъекты.Заголовок = ПолученоДанных - СогласованныеДанные;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноРС_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ПолученоДанных 		= ТаблицаСопоставленияДанных.Количество();
	СогласованныеДанные	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	СопоставленоДанных	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Истина)).Количество();
	
	Элементы.ДекорацияПолученоДанныхКоличествоРС.Заголовок = ПолученоДанных;
	Элементы.ДекорацияСопоставленоКоличествоРС.Заголовок = СопоставленоДанных;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоРС.Заголовок = СогласованныеДанные - СопоставленоДанных;
	Элементы.ДекорацияНекоректныеСтрокиКоличествоРС.Заголовок = ПолученоДанных - СогласованныеДанные;
	
КонецФункции

#КонецОбласти

#Область ТаблицаПереходовПоСценарию

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаВыборФайла",				"СтраницаНавигацииНачало", , "СтраницаВыборФайла_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаЗагрузкаДанных",			"СтраницаНавигацииОжидание",,,,, Истина, "СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "СтраницыПолученныеДанные",			"СтраницаНавигацииПродолжение",,, );
	ТаблицаПереходовНоваяСтрока(4, "СтраницыПроверкаДанных",			"СтраницаНавигацииПродолжение", , "СтраницыПроверкаДанных_ПриОткрытии", , "СтраницыПроверкаДанных_ПриПереходеНазад");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаСопоставление",				"СтраницаНавигацииПродолжение", , "СтраницаСопоставление_ПриОткрытии");
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		ТаблицаПереходовНоваяСтрока(6, "СтраницаПредварительноТЧ",		"СтраницаНавигацииОкончание", , "СтраницаПредварительноТЧ_ПриОткрытии");
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
		
		ТаблицаПереходовНоваяСтрока(6, "СтраницаПредварительноСправочник",	"СтраницаНавигацииОкончание", , "СтраницаПредварительноСправочник_ПриОткрытии");
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
		
		ТаблицаПереходовНоваяСтрока(6, "СтраницаПредварительноРегистрСведений", "СтраницаНавигацииОкончание", , "СтраницаПредварительноРС_ПриОткрытии");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
