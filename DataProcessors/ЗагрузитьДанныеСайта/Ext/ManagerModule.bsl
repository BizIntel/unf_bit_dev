
#Область ПредварительнаяЗагрузка

Процедура ЗагрузитьXMLССайтаНаСервере(Параметры, СтруктураКаталогов, ОписаниеОшибки)
	
	ПакетыДанныхСписок = Новый СписокЗначений;
	ОтветСервера="";
	СтрокаЛогЗагрузкиССайтаПодробно = "";
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Подключение к сайту ...'"));
	
	АдресСайтаДляПодключения = Параметры.АдресСайта;
	Если СтрНайти(АдресСайтаДляПодключения, "http")=0 Тогда
		АдресСайтаДляПодключения = "http://"+АдресСайтаДляПодключения;
	КонецЕсли;
	АдресСайтаДляПодключения = АдресСайтаДляПодключения+"/admin/exchange/autoimport/";
	
	Параметры.Вставить("АдресСайтаДляПодключения", АдресСайтаДляПодключения);
	Параметры.Вставить("СтрокаЛогЗагрузкиССайтаПодробно", СтрокаЛогЗагрузкиССайтаПодробно);
	
	Соединение = УстановитьСоединениеССервером(Параметры, ОписаниеОшибки);
	Если Соединение=Неопределено Тогда
		ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось установить соединение'"));
		Возврат;
	КонецЕсли;
	
	Параметры.ШагиЗагрузки.Вставить(1, НСтр("ru = 'Подключение установлено.'"));
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
	
	ИмяСайта = СтрЗаменить(Параметры.АдресСайта, "Сайт ", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "http://", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "/", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, " ", "");
	
	НомерКаталога = 0;
	НомерПакета = 0;
	ПрочитаноПакетов = 0;
	КонецПередачи = Ложь;
	
	Пока НЕ КонецПередачи Цикл
		
		Пока Истина Цикл
			
			//catalog - номер каталога, по-умолчанию в Основной каталог сайта - загружается первый по порядку каталог
			ПараметрыСоединения = "/admin/exchange/autoexport/?mode=catalog&package_size="+РазмерПакетаЗагрузки()+"&package="+НомерПакета+"&catalog="+НомерКаталога;
			СтрокаСоединения = "http://" + Соединение.Сервер + ПараметрыСоединения;
			
			АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения);
			
			ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
			ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
			ЗапросHTTP.Заголовки["Content-type"]	= "application/json;charset=utf-8";
			
			ОтветHTTP = Соединение.Получить(ЗапросHTTP);
			
			Если ОтветHTTP.КодСостояния<>200 Тогда
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Ошибка! Ответ HTTP: '")+ОтветHTTP.КодСостояния);
				Возврат;
			КонецЕсли;
			
			ДанныеСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
			
			Если ДанныеСтрока = Неопределено Тогда 
				ЗаписатьОшибку(Параметры, НСтр("ru = 'Загрузка не выполнена.'"));
				Возврат;
			КонецЕсли;
			
			Если НРег(ДанныеСтрока) = "complete" Тогда 
				
				//Переход на другой каталог
				
				НомерПакета = 0;
				НомерКаталога = НомерКаталога+1;
				ПакетыДанныхСписок = Новый СписокЗначений;
				
				КонецПередачи = Истина;
				
			ИначеЕсли СтрНайти(НРег(ДанныеСтрока), "not find catalog page")<>0 Тогда
				
				//Конец передачи, выход из процедуры
				КонецПередачи = Истина;
				Прервать;
				
			Иначе
				
				НомерПакета = НомерПакета+1;
				ПрочитаноПакетов = ПрочитаноПакетов + 1;
				Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
				
				СтрокаXML = "";
				Если Лев(ДанныеСтрока, 2) = "PK" Тогда
					СтрокаXML = ОбменССайтом.РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
				Иначе
					Если Лев(ДанныеСтрока, 5) = "<?xml" Тогда
						СтрокаXML = ДанныеСтрока;
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(СтрокаXML) Тогда
					ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
					Возврат;
				КонецЕсли;
				
				ПакетыДанныхСписок.Добавить(СтрокаXML, "Пакет"+НомерКаталога+НомерПакета);
				СтруктураКаталогов.Вставить("Каталог"+НомерКаталога, Новый Структура("ПакетыДанных", ПакетыДанныхСписок));
				
				СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Прочитано объектов: '")+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
				
			КонецЕсли;
					
		КонецЦикла;
		
		Параметры.ШагиЗагрузки.Вставить(2, НСтр("ru = 'Прочитано объектов: '")+РазмерПакетаЗагрузки()*ПрочитаноПакетов);
		СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
		
	КонецЦикла; 
	
	Параметры.Вставить("ПрочитаноПакетов", ПрочитаноПакетов);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСайта(Параметры, ФоновоеЗаданиеАдресХранилища = "") Экспорт

	Параметры.Вставить("ШагиЗагрузки", Новый Соответствие);
	Параметры.Вставить("ФоновоеЗаданиеАдресХранилища", ФоновоеЗаданиеАдресХранилища);
	Параметры.Вставить("ОписаниеОшибки", "");
	Параметры.Вставить("СтрокаЛогЗагрузкиССайта", "");
	Параметры.Вставить("РазмерПакета", РазмерПакетаЗагрузки());
	Параметры.Вставить("ПрочитаноПакетов", 0);
	ОписаниеОшибки = "";
	
	СтруктураКаталогов = Новый Структура;
	ЗагрузитьXMLССайтаНаСервере(Параметры, СтруктураКаталогов, ОписаниеОшибки);
	Параметры.Вставить("СтруктураКаталогов", СтруктураКаталогов);
	
	Если ОписаниеОшибки<>"" Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("СтруктураКаталогов", СтруктураКаталогов);
	Если СтруктураКаталогов.Количество()=0 Тогда
		ЗаписатьОшибку(Параметры, НСтр("ru = 'Не удалось получить данные с сайта'"));
		Возврат;
	КонецЕсли;
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Прочитано объектов: '") + Параметры.ПрочитаноПакетов);
	
	ТипXDTO = ФабрикаXDTO.Тип("urn:1C.ru:commerceml_205", "CommerceML205a");
	Классификатор = "";
	
	Группы		= Новый Соответствие;
	Свойства	= Новый Соответствие;
	Категории	= Новый Соответствие;
	Товары		= Новый Соответствие;
	КартинкиТоваров	= Новый Соответствие;
	ШтрихкодыТоваров= Новый Соответствие;
	Предложения = Новый Соответствие;
	ТипыЦен		= Новый Соответствие;
	
	Для каждого КаталогСайта Из СтруктураКаталогов Цикл
		
		СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загрузка :'") + КаталогСайта.Ключ);

		ПакетыДанных = КаталогСайта.Значение.ПакетыДанных;
		Для каждого пакетДанных Из ПакетыДанных Цикл
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(пакетДанных.Значение);
			
			ВесьФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
			Классификатор = ВесьФайл.Классификатор;
			ИмяСайта = Классификатор.Владелец.Наименование;
			Каталог = ВесьФайл.Каталог;
			
			//Группы
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группы", Классификатор) Тогда
				спГруппы = Классификатор.Группы;
				ПрочитатьКаталогиРекурсивно(спГруппы, Группы, 1);
			КонецЕсли;
			
			//Категории
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", Классификатор.ТипыТовара) Тогда
				МассивКатегорийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.ТипыТовара.ТипТовара);
				Для каждого КатегорияXDTO Из МассивКатегорийXDTO Цикл
					Категории.Вставить(КатегорияXDTO.Наименование);
				КонецЦикла;
			КонецЕсли; 
			
			//Товары
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Товар", Каталог.Товары) Тогда
				
				МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Каталог.Товары.Товар);
				Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
					Товары.Вставить(ТоварXDTO.Наименование);
					//Картинки товаров
					Если ТипЗнч(ТоварXDTO.Картинка)=Тип("Строка") Тогда
						КартинкиТоваров.Вставить(ТоварXDTO.Наименование);
					КонецЕсли;
					Если ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Штрихкод) Тогда
						ШтрихкодыТоваров.Вставить(ТоварXDTO.Штрихкод);
					КонецЕсли;
				КонецЦикла;
				
				//Свойства
				спСвойства = Классификатор.Свойства.Свойство;
				МассивСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.Свойства.Свойство);
				Для каждого СвойствоXDTO Из МассивСвойствXDTO Цикл
					Свойства.Вставить(СвойствоXDTO.Наименование);
				КонецЦикла;
				
				//Товарные предложения
				МассивТоварныхПредложенийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.Предложения.Предложение);
				Для каждого ТоварноеПредложениеXDTO Из МассивТоваровXDTO Цикл
					Предложения.Вставить(ТоварноеПредложениеXDTO.Наименование);
				КонецЦикла;
				МассивТиповЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.ТипыЦен.ТипЦены);
				Для каждого ТипЦенXDTO Из МассивТиповЦенXDTO Цикл
					ТипыЦен.Вставить(ТипЦенXDTO.Наименование);
				КонецЦикла;
			КонецЕсли;
			
			ПрогрессОбработки = (1+ПакетыДанных.Индекс(пакетДанных)) / ПакетыДанных.Количество() * 100;
			СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Обработано объектов: '")+ПрогрессОбработки+"%");
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ШагиЗагрузки.Вставить(3, НСтр("ru = 'Обработано объектов: 100%'"));
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки);
	
	ДобавитьСтрокуЛогаПодробно(Параметры, ИмяСайта);
	ДобавитьСтрокуЛогаПодробно(Параметры, "");

	ДобавитьСтрокуЛогаПодробно(Параметры, Классификатор.Наименование);
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Иерархия товаров: '")+Группы.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Категории товаров: '")+Категории.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Товаров: '")+Товары.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Свойств товаров: '")+Свойства.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Картинок товаров: '")+КартинкиТоваров.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Штрихкодов товаров : '")+ШтрихкодыТоваров.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Типов цен : '")+ТипыЦен.Количество());
	ДобавитьСтрокуЛогаПодробно(Параметры, НСтр("ru = 'Товарных предложений : '")+Предложения.Количество());
	
	Параметры.Вставить("СтрокаЛогЗагрузкиССайта", "");
	ДобавитьСтрокуЛога(Параметры, Классификатор.Наименование);
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Товаров: '")+Товары.Количество());
	Если ТипыЦен.Количество()>0 Тогда
		Для каждого ТипЦен Из ТипыЦен Цикл
			ПервыйТипЦен = ТипЦен.Ключ;
		КонецЦикла;
		ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Тип цен: '")+ПервыйТипЦен);
	КонецЕсли;
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Товарных предложений : '")+Предложения.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Иерархия товаров: '")+Группы.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Категории товаров: '")+Категории.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Свойств товаров: '")+Свойства.Количество());
	ДобавитьСтрокуЛога(Параметры, НСтр("ru = 'Картинок товаров: '")+КартинкиТоваров.Количество());
	
	СписокГруппУпорядоченный = Новый СписокЗначений;
	Для каждого стрГруппы Из Группы Цикл
		СписокГруппУпорядоченный.Добавить(стрГруппы.Ключ, стрГруппы.Значение);
	КонецЦикла;
	СписокГруппУпорядоченный.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Иерархия товаров:'"), СписокГруппУпорядоченный, "Значение");	
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Категории товаров:'"), Категории);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Товары:'"), Товары);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Картинки товаров:'"), КартинкиТоваров);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Свойства товаров:'"), Свойства);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Картинки для товаров:'"), КартинкиТоваров);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Типы цен:'"), ТипыЦен);
	ДобавитьБлокЛогов(Параметры, НСтр("ru = 'Товарные предложения:'"), Предложения);

	Если КартинкиТоваров.Количество()>0 Тогда
		Параметры.Вставить("ЕстьКартинки", Истина);
	Иначе
		Параметры.Вставить("ЕстьКартинки", Ложь);
	КонецЕсли;
	
	Если ОписаниеОшибки<>"" Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли; 
	ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);

КонецПроцедуры

Процедура ПрочитатьКаталогиРекурсивно(спГруппы, СоответствиеГрупп, НомерПоПорядку)
	
	ГруппаXDTO = спГруппы.Группа;
	
	Если ТипЗнч(ГруппаXDTO) = Тип("ОбъектXDTO") Тогда
		
		СоответствиеГрупп.Вставить(ГруппаXDTO.Наименование, НомерПоПорядку);
		НомерПоПорядку = НомерПоПорядку+1;
		
		//Вложенные группы
		Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) Тогда
			ПрочитатьКаталогиРекурсивно(ГруппаXDTO.Группы, СоответствиеГрупп, НомерПоПорядку);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ГруппаXDTO) = Тип("СписокXDTO") Тогда
		
		Для н=0 по ГруппаXDTO.Количество()-1 Цикл
			
			группаСписка = ГруппаXDTO[н];
			
			СоответствиеГрупп.Вставить(группаСписка.Наименование, НомерПоПорядку);
			НомерПоПорядку = НомерПоПорядку+1;
			
			//Вложенные группы
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) Тогда
				ПрочитатьКаталогиРекурсивно(ГруппаXDTO.Группы, СоответствиеГрупп, НомерПоПорядку);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВБазуДанных

Процедура ПрочитатьИЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ПрочитатьДанныеСайта(Параметры, ФоновоеЗаданиеАдресХранилища);
	
	Если Параметры.ОписаниеОшибки="" Тогда
		ЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища);	
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьДанные(Параметры, ФоновоеЗаданиеАдресХранилища = "") Экспорт

	ОписаниеОшибки = "";
	ПакетыДанныхСписок = Новый СписокЗначений;
	Параметры.Вставить("ШагиЗагрузки", Новый Соответствие);	
	
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Настройка программы ...'"));
	
	//Сайт
	ИмяСайта = СтрЗаменить(Параметры.АдресСайта, "Сайт ", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "http://", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, "/", "");
	ИмяСайта = СтрЗаменить(ИмяСайта, " ", "");
	
	ДопРеквизиты = Новый Структура;
	ДопРеквизиты.Вставить("ПарольСайта", Параметры.Пароль);
	ДопРеквизиты.Вставить("ТипСайта", 4);
	ДопРеквизиты.Вставить("СайтСоздан", Истина);
	ДопРеквизиты.Вставить("URLАдминЗоны", URLАдминзоны(Параметры, ОписаниеОшибки));

	//Установим нужные ФО для работы с сайтом, запишем данные сайта
	СтруктураСайта = Новый Структура("АдресСайта, Организация, ТипСайта", ИмяСайта, Параметры.ОсновнаяОрганизация, 4);
	Об = СоздатьИлиНайтиСуществующий(СтруктураСайта, РегистрыСведений.ДанныеСайта, ДопРеквизиты);
	Константы.ФункциональнаяОпцияИспользоватьОбменССайтами.Установить(Истина);
	Константы.СайтСоздан.Установить(Истина);
	
	//Создаем узел обмена
	УзелОбмена = СоздатьУзелОбмена(Параметры, ИмяСайта, ОписаниеОшибки);
	Параметры.Вставить("УзелОбмена", УзелОбмена);
	
	Если Параметры.СоздатьКаталогТоваров Тогда
		СтруктураОтбора = Новый Структура("Наименование, ЭтоГруппа", ИмяСайта, Истина);
		СсылкаРодительскийКаталог = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.Номенклатура);
		Параметры.Вставить("КаталогЗагруженныхТоваров",СсылкаРодительскийКаталог);
	КонецЕсли;
	
	//Соединение для загрузки картинок
	Если Параметры.ЗагружатьКартинки Тогда
		АдресСайтаДляПодключения = Параметры.АдресСайта;
		Если СтрНайти(АдресСайтаДляПодключения, "http")=0 Тогда
			АдресСайтаДляПодключения = "http://"+АдресСайтаДляПодключения;
		КонецЕсли;
		АдресСайтаДляПодключения = АдресСайтаДляПодключения+"/admin/exchange/autoimport/";
		
		Параметры.Вставить("АдресСайтаДляПодключения", АдресСайтаДляПодключения);
		
		Соединение = УстановитьСоединениеССервером(Параметры);
	Иначе	
		Соединение = Неопределено;
	КонецЕсли;
	
	ПорядковыйНомерКаталога = 1;
	
	Для каждого КаталогСайта Из Параметры.СтруктураКаталогов Цикл
		КаталогСайта.Значение.Вставить("ПорядковыйНомерКаталога", ПорядковыйНомерКаталога);
		КаталогСайта.Значение.Вставить("ГруппыВерхнегоУровня", Новый Соответствие);
		
		ПакетыДанных = КаталогСайта.Значение.ПакетыДанных;
		//Загрузка данных в пакетах
		Для каждого пакетДанных Из ПакетыДанных Цикл
			
			ЗагрузитьПакет(пакетДанных, Соединение, Параметры, КаталогСайта, ОписаниеОшибки);
			
		КонецЦикла;
		
		Параметры.ШагиЗагрузки.Вставить(ПорядковыйНомерКаталога, КаталогСайта.Значение.Наименование + НСтр("ru = ' загружен'"));
		
		ПорядковыйНомерКаталога = ПорядковыйНомерКаталога+1;
	КонецЦикла;
	
	Параметры.ШагиЗагрузки.Вставить(ПорядковыйНомерКаталога, НСтр("ru = 'Загружено: 100%'"));
	СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загружено: 100%'"));
	
	//Установим вид цен и список каталогов из загруженных данных
	ОбновитьСписокКаталоговДляВыгрузкиИВидовЦенУзлаОбмена(Параметры);
	
	Если ОписаниеОшибки="" Тогда
		Параметры.Вставить("ДанныеУспешноЗагружены", Истина);
	Иначе
		Параметры.Вставить("ДанныеУспешноЗагружены", Ложь);
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	КонецЕсли; 
	ПоместитьВоВременноеХранилище(Параметры, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры	

Процедура ЗагрузитьПакет(пакетДанных, Соединение=Неопределено, Параметры, КаталогСайта, ОписаниеОшибки)

	ПакетыТекущегоКаталогаСписок = КаталогСайта.Значение.ПакетыДанных;
	ГруппыВерхнегоУровня = КаталогСайта.Значение.ГруппыВерхнегоУровня;
	СтрокаXML = пакетДанных.Значение;
	УзелОбмена = Параметры.УзелОбмена;
	
	// Получаем тип XDTO и читаем XML 	
	ТипXDTO = ФабрикаXDTO.Тип("urn:1C.ru:commerceml_205", "CommerceML205a");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ВесьФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	Классификатор = ВесьФайл.Классификатор;
	Каталог = ВесьФайл.Каталог;
	
	//Категории
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("ТипТовара", Классификатор.ТипыТовара) Тогда
		
		МассивКатегорийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.ТипыТовара.ТипТовара);
		Для каждого КатегорияXDTO Из МассивКатегорийXDTO Цикл
			ПервыйЭлемент = (КатегорияXDTO = МассивКатегорийXDTO.Получить(0));
			
			ЗагрузитьКатегорию(КатегорияXDTO, УзелОбмена, ПервыйЭлемент, ОписаниеОшибки);
		КонецЦикла;
	КонецЕсли;
	
	//Группы
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группы", Классификатор) Тогда
		спГруппы = Классификатор.Группы;
		УровеньВложенности = 0;
		
		ЗагрузитьКаталогиРекурсивно(спГруппы, Параметры.КаталогЗагруженныхТоваров, УзелОбмена, УровеньВложенности, ГруппыВерхнегоУровня);
	КонецЕсли;
	
	КаталогСайта.Значение.Вставить("Ид", Каталог.Ид);
	КаталогСайта.Значение.Вставить("СистемныйИд", Каталог.СистемныйИд);
	КаталогСайта.Значение.Вставить("Наименование", Каталог.Наименование);
	
	Параметры.ШагиЗагрузки.Вставить(Параметры.СтруктураКаталогов[КаталогСайта.Ключ].ПорядковыйНомерКаталога, НСтр("ru = 'Загрузка каталога '")+Каталог.Наименование);
	
	//Свойства
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Свойство", Классификатор.Свойства) Тогда
		
		спСвойства = Классификатор.Свойства.Свойство;
		МассивСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Классификатор.Свойства.Свойство);
		Для каждого СвойствоXDTO Из МассивСвойствXDTO Цикл
			ЗагрузитьСвойство(СвойствоXDTO, УзелОбмена);
		КонецЦикла;
	КонецЕсли; 
	
	//Каталог товаров
	ТоварыПараметры = Новый Структура;
	ТоварыПараметры.Вставить("ГруппаДляНовойНоменклатуры", Параметры.КаталогЗагруженныхТоваров);
	ТоварыПараметры.Вставить("ИспользоватьХарактеристики", Ложь);
	ТоварыПараметры.Вставить("ОбменТоварами", Ложь);
	
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Товар", Каталог.Товары) Тогда
		
		МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(Каталог.Товары.Товар);
		Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
			
			ТипНоменклатурыXDTO = "";
			ВидНоменклатурыXDTO = "";
			Если ОбменССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
				И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
				И ОбменССайтом.ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
				
				ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
				МассивЗначенийРеквизитовXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
				
				Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
					
					Если ЗначениеРеквизитаXDTO.Наименование = "ТипНоменклатуры" 
						И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
						
						ТипНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					КонецЕсли;
					
					Если ЗначениеРеквизитаXDTO.Наименование = "ВидНоменклатуры" 
						И ТипЗнч(ЗначениеРеквизитаXDTO.Значение) = Тип("Строка") Тогда
						
						ВидНоменклатурыXDTO = ЗначениеРеквизитаXDTO.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			ЭтоУслуга = НРег(ТипНоменклатурыXDTO) = "услуга";
			
			Номенклатура = ОбменССайтом.НайтиСоздатьНоменклатуру(ТоварXDTO, ЭтоУслуга, ТоварыПараметры, , ОписаниеОшибки);
			
			ЗаписатьСоответствие(ТоварXDTO, Номенклатура, УзелОбмена);
			
			ХарактеристикаНоменклатуры = ОбменССайтом.НайтиСоздатьХарактеристикуНоменклатуры(
				ТоварXDTO, 
				Ложь, 
				Номенклатура,
				ТоварыПараметры,
				ОписаниеОшибки);
			
			НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
			//Группа-родитель
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Ид", ТоварXDTO.Группы)
				И ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Группы.Ид) Тогда
				ГруппаРодитель = ОбменССайтом.СсылкаСоответствиеПоИд(ТоварXDTO.Группы.Ид, "Справочник.Номенклатура", УзелОбмена);
				Если ГруппаРодитель<>Неопределено Тогда
					НоменклатураОбъект.Родитель = ГруппаРодитель;
				КонецЕсли;
			КонецЕсли;
			
			//Категория
			Если ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.ТипТовара) Тогда
				Категория = ОбменССайтом.СсылкаСоответствиеПоИд(ТоварXDTO.ТипТовара, "Справочник.КатегорииНоменклатуры", УзелОбмена);
				Если Категория<>Неопределено Тогда
					НоменклатураОбъект.КатегорияНоменклатуры = Категория;
				КонецЕсли;
			Иначе
				НоменклатураОбъект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
			КонецЕсли;
			
			//Полное наименование
			Если ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.ПолноеНаименование) Тогда
				НоменклатураОбъект.НаименованиеПолное = ТоварXDTO.ПолноеНаименование;
			КонецЕсли;
			Если ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Описание) Тогда
				НоменклатураОбъект.Комментарий = ТоварXDTO.Описание;
			КонецЕсли;
			
			//Штрихкод
			Если ОбменССайтом.СвойствоXDTOЗаполнено(ТоварXDTO.Штрихкод) Тогда
				
				НЗштрихкоды = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				НЗштрихкоды.Номенклатура = Номенклатура;
				НЗштрихкоды.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				НЗштрихкоды.Штрихкод = ТоварXDTO.Штрихкод;
				НЗштрихкоды.Записать(Истина);
				
			КонецЕсли; 
			
			//Значения свойств
			ЗначенияСвойствXDTO = ТоварXDTO.ЗначенияСвойств.ЗначенияСвойства;
			МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ЗначенияСвойствXDTO);
			Для каждого ЗначениеСвойстваXDTO Из МассивЗначенийСвойствXDTO Цикл
				Если ОбменССайтом.СвойствоXDTOЗаполнено(ЗначениеСвойстваXDTO.Значение) Тогда
					ВладелецПВХ = ОбменССайтом.СсылкаСоответствиеПоИд(ЗначениеСвойстваXDTO.Ид, "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения", УзелОбмена);
					Если ВладелецПВХ=Неопределено Тогда
						//Для свойств, которые не были загружены
						Продолжить;
					КонецЕсли;
					
					ТипЗначенияСвойства = ТипЗнч(ВладелецПВХ.ТипЗначения.ПривестиЗначение());
					Если ТипЗначенияСвойства = Тип("Строка") Тогда
						ЗначениеСвойства = ЗначениеСвойстваXDTO.Значение;
					ИначеЕсли ТипЗначенияСвойства = Тип("Булево") Тогда
						Если ТипЗнч(ЗначениеСвойстваXDTO.Значение)=Тип("Строка") Тогда
							ЗначениеСвойства = ?(ЗначениеСвойстваXDTO.Значение="1", Истина, Ложь);
						ИначеЕсли ТипЗнч(ЗначениеСвойстваXDTO.Значение)=Тип("Число") Тогда
							ЗначениеСвойства = ?(ЗначениеСвойстваXDTO.Значение=1, Истина, Ложь);
						КонецЕсли;
					ИначеЕсли ТипЗначенияСвойства = Тип("Дата") Тогда
						ЗначениеСвойства = ПолучитьДатуВремяИзСтроки(ЗначениеСвойстваXDTO.Значение);
					ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
						ЗначениеСвойства = Число(ЗначениеСвойстваXDTO.Значение);
					Иначе	
						СтруктураОтбора = Новый Структура("Наименование, Владелец", ЗначениеСвойстваXDTO.Значение, ВладелецПВХ);
						ЗначениеСвойства = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ЗначенияСвойствОбъектов);
						
						ЗаписатьСоответствие(ЗначениеСвойстваXDTO, ЗначениеСвойства, УзелОбмена);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура("Свойство,Значение",ВладелецПВХ,ЗначениеСвойства);
					СтрокиСвойства = НоменклатураОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
					Если СтрокиСвойства.Количество()=0 Тогда
						НовСтр = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
						НовСтр.Свойство = ВладелецПВХ;
						НовСтр.Значение = ЗначениеСвойства;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//Картинка
			Если Параметры.ЕстьКартинки И Параметры.ЗагружатьКартинки И Соединение<>Неопределено И ТипЗнч(ТоварXDTO.Картинка)=Тип("Строка") Тогда
				ЗагрузитьКартинкуНаСервере(Соединение, Номенклатура, ТоварXDTO.Картинка);
			КонецЕсли;
			
			Попытка
				
				НоменклатураОбъект.Записать();
				
			Исключение
				Параметры.Вставить("Ошибка", ОписаниеОшибки());
			КонецПопытки;
			
			ПрогрессПоПакетам = (ПакетыТекущегоКаталогаСписок.Индекс(пакетДанных)) / ПакетыТекущегоКаталогаСписок.Количество() * 100;
			ПроцентТекущегоТовара = (1+МассивТоваровXDTO.Найти(ТоварXDTO)) / МассивТоваровXDTO.Количество() * 100 / ПакетыТекущегоКаталогаСписок.Количество();
			
			ПрогрессЗагрузки = Цел(ПрогрессПоПакетам + ПроцентТекущегоТовара *0.8);
			СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загружено объектов: '")+ПрогрессЗагрузки+"%");
		
		КонецЦикла;
		
	КонецЕсли; 
	
	//Типы цен
	МассивТипыЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.ТипыЦен.ТипЦены);
	Для каждого ТипЦенXDTO Из МассивТипыЦенXDTO Цикл
		Если Параметры.ЗагрузитьВидЦенССайта Тогда
			СсылкаВидЦен = ЗагрузитьТипЦен(ТипЦенXDTO, УзелОбмена);
			Параметры.Вставить("ВидЦен", СсылкаВидЦен);
		Иначе
			ЗаписатьСоответствие(ТипЦенXDTO, Параметры.ВидЦен, УзелОбмена);
		КонецЕсли;
		//Для ЮМИ загружаем только первый вид цен
		Прервать;
	КонецЦикла;
	
	ПрогрессТоваровЭтогоПакета = 100/ПакетыТекущегоКаталогаСписок.Количество()*0.8;
	
	//Цены
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Предложение", ВесьФайл.ПакетПредложений.Предложения) Тогда
		
		МассивПредложенийXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ВесьФайл.ПакетПредложений.Предложения.Предложение);
		Для каждого ПредложениеXDTO Из МассивПредложенийXDTO Цикл
			ЗагрузитьЦены(ПредложениеXDTO, Параметры);
			
			ПрогрессПоПакетам = (ПакетыТекущегоКаталогаСписок.Индекс(пакетДанных)) / ПакетыТекущегоКаталогаСписок.Количество() * 100;
			ПроцентТекущегоТовара = (1+МассивПредложенийXDTO.Найти(ПредложениеXDTO)) / МассивПредложенийXDTO.Количество() * 100 / ПакетыТекущегоКаталогаСписок.Количество();
			
			ПрогрессЗагрузки = Цел(ПрогрессПоПакетам + ПрогрессТоваровЭтогоПакета + ПроцентТекущегоТовара *0.2);
			СформироватьЛогЗагрузки(Параметры.ШагиЗагрузки, НСтр("ru = 'Загружено объектов: '")+ПрогрессЗагрузки+"%");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры	

Функция СоздатьУзелОбмена(Параметры, ИмяСайта, ОписаниеОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОбменУправлениеНебольшойФирмойСайт.Ссылка КАК ПланОбмена
	|ИЗ
	|	ПланОбмена.ОбменУправлениеНебольшойФирмойСайт КАК ОбменУправлениеНебольшойФирмойСайт
	|ГДЕ
	|	ОбменУправлениеНебольшойФирмойСайт.ИмяПользователя = &ИмяПользователя";
	
	Запрос.УстановитьПараметр("ИмяПользователя", Параметры.ИмяПользователя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ПланОбменаСайт = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.СоздатьУзел();
		ПланОбменаСайт.УстановитьНовыйКод();	
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПланОбменаСайт = Выборка.ПланОбмена.ПолучитьОбъект();
		КонецЦикла;
	КонецЕсли;
	
	ПланОбменаСайт.АдресСайта = "http://"+ИмяСайта+"/admin/exchange/autoimport/";
	
	ПланОбменаСайт.ВыгружатьКартинки			= Истина;
	ПланОбменаСайт.ВыгружатьНаСайт				= Истина;
	ПланОбменаСайт.ВыгружатьОстаткиПоСкладам	= Ложь;
	ПланОбменаСайт.ИмяПользователя				= Параметры.ИмяПользователя;
	ПланОбменаСайт.Наименование					= НСтр("ru = 'Обмен товарами и заказами с '") + ИмяСайта;
	ПланОбменаСайт.ОбменЗаказами				= Истина;
	ПланОбменаСайт.ОбменТоварами				= Истина;
	ПланОбменаСайт.ОрганизацияДляПодстановкиВЗаказы = Параметры.ОсновнаяОрганизация;
	ПланОбменаСайт.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.Наименование;
	ПланОбменаСайт.ВыполнятьПолнуюВыгрузкуПринудительно = ПланОбменаСайт.ЭтоНовый();
	ПланОбменаСайт.ОтборГруппыКатегорииНоменклатуры = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
	
	//Виды цен и каталоги выгрузки в узел обмена добавляем после чтения пакетов данных 
	
	Попытка
		
		ПланОбменаСайт.Записать();
		
		Если Параметры.Пароль<>"" Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ПланОбменаСайт.Ссылка, Параметры.Пароль);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Возврат ПланОбменаСайт.Ссылка;
		
	Исключение
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

Процедура ОбновитьСписокКаталоговДляВыгрузкиИВидовЦенУзлаОбмена(Параметры)
	
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	ТаблицаКаталогов.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка", ,
												   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаКаталогов.Колонки.Добавить("Группы",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаКаталогов.Колонки.Добавить("ИдентификаторКаталога", Новый ОписаниеТипов("Строка", ,
												   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
    ТаблицаКаталогов.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	//Каталоги должны идти в порядке загрузки с сайта, первым идет ОСНОВНОЙ каталог, это важно
	Для каждого строкаКаталога Из Параметры.СтруктураКаталогов Цикл
		
		ИмяКаталога = строкаКаталога.Значение.Наименование;
		Если строкаКаталога.Значение.Свойство("ГруппыВерхнегоУровня") Тогда
			
			СписокГрупп = Новый СписокЗначений;
			Для каждого элГруппа Из строкаКаталога.Значение.ГруппыВерхнегоУровня Цикл
				СписокГрупп.Добавить(элГруппа.Ключ);
			КонецЦикла;
			
			Если СписокГрупп.Количество()=0 Тогда
				//Пустой каталог
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		НовСтр = ТаблицаКаталогов.Добавить();
		НовСтр.Каталог = ИмяКаталога;
		НовСтр.ИдентификаторКаталога = строкаКаталога.Значение.Ид;
		
		НовСтр.Группы = СписокГрупп;
		
	КонецЦикла; 
		
	ПланОбменаСайт = Параметры.УзелОбмена.ПолучитьОбъект();
	//Список каталогов
	ПланОбменаСайт.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталогов);
	//Виды цен
	ПланОбменаСайт.ВидыЦен.Очистить();
	НовыйВидЦен = ПланОбменаСайт.ВидыЦен.Добавить();
	НовыйВидЦен.ВидЦен = Параметры.ВидЦен;
	
	Попытка
		
		ПланОбменаСайт.Записать();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция URLАдминзоны(Параметры, ОписаниеОшибки)
	
	РеквизитыАвторизации = Обработки.СоздатьСайт.ДанныеДляАвторизации();
	СтрокаСоединения = "http://gate.umi.ru/partnerapi?partner=%1&code=%2&host=%3.umi.ru&password=%4&action=get_autologin_url";
	СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСоединения,
		РеквизитыАвторизации.Получить("partner"),
		РеквизитыАвторизации.Получить("code"),
		Параметры.ИмяПользователя,
		Параметры.Пароль
		);
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
	СтруктураПодключения.Вставить("Пароль", Параметры.Пароль);
	СтруктураПодключения.Вставить("АдресЗапроса", СтрокаСоединения);
	СтруктураПодключения.Вставить("АдресСайта", РеквизитыАвторизации.Получить("АдресЗапроса"));
	
	СтруктураПодключения.Вставить("ПутьНаСервере", ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаСоединения).ПутьНаСервере);
	
	ОбменССайтом.ПолучитьНастройкиПодключения(СтруктураПодключения, ОписаниеОшибки);
	
	Соединение = ОбменССайтом.УстановитьСоединениеССервером(СтруктураПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат "";
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(СтруктураПодключения.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]= "application/json;charset=utf-8";
	
	Попытка
		ОтветHTTP = Соединение.Получить(ЗапросHTTP);
	Исключение
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния<>200 Тогда
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка! Ответ HTTP: '")+ОтветHTTP.КодСостояния);
		Возврат "";
	КонецЕсли;
	
	ОтветКакСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	
	ОтветРезультат = ПрочитатьРеквизитJSON(ОтветКакСтрока, "result");
	Если ОтветРезультат = Ложь Тогда
		Возврат Параметры.АдресСайта+"/adminzone";
	Иначе
		Возврат ОтветРезультат;
	КонецЕсли;
	
КонецФункции

Функция ПрочитатьРеквизитJSON(ДанныеСтрока, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтрока) Тогда
		возврат 0;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеСтрока);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	РеквизитЗначение = Результат.Получить(ИмяРеквизита);
	
	Возврат РеквизитЗначение;
	
КонецФункции

Процедура ЗагрузитьЦены(ПредложениеXDTO, Параметры)

	Номенклатура = ОбменССайтом.СсылкаСоответствиеПоИд(ПредложениеXDTO.Ид, "Справочник.Номенклатура", Параметры.УзелОбмена);
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"ЕдиницаИзмерения");
	
	МассивЦенXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(ПредложениеXDTO.Цены.Цена);
	Для каждого ЦенаXDTO Из МассивЦенXDTO Цикл
		Если Число(ЦенаXDTO.ЦенаЗаЕдиницу)=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидЦен = ОбменССайтом.СсылкаСоответствиеПоИд(ЦенаXDTO.ИдТипаЦены, "Справочник.ВидыЦен", Параметры.УзелОбмена);
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			ВидЦен = Параметры.ВидЦен;
		КонецЕсли;
		СтруктураОтбора = Новый Структура("ВидЦен,Номенклатура,Цена", ВидЦен,Номенклатура,ЦенаXDTO.ЦенаЗаЕдиницу);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		ДопРеквизиты.Вставить("Период", НачалоДня(ТекущаяДата()));
		ДопРеквизиты.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
		ДопРеквизиты.Вставить("Актуальность", Истина);
		
		СсылкаЗаписьЦена = СоздатьИлиНайтиСуществующий(СтруктураОтбора, РегистрыСведений.ЦеныНоменклатуры, ДопРеквизиты);
		
	КонецЦикла;
	
КонецПроцедуры	

Функция ЗагрузитьТипЦен(ТипЦенXDTO, УзелОбмена)

	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	СтруктураОтбора = Новый Структура("Наименование", ТипЦенXDTO.Наименование);	
	Если ТипЗнч(ТипЦенXDTO.Валюта)=Тип("Строка") И ЗначениеЗаполнено(ТипЦенXDTO.Валюта) Тогда
		Если ТипЦенXDTO.Валюта="RUR" ИЛИ ТипЦенXDTO.Валюта="RUB" Тогда
			ОтборПоКодуВалюты = Новый Структура("CodeSymbol", "RUB");
		Иначе
			ОтборПоКодуВалюты = Новый Структура("CodeSymbol", ТипЦенXDTO.Валюта);
		КонецЕсли;
		
		СтрокиВалют = КлассификаторТаблица.НайтиСтроки(ОтборПоКодуВалюты);
		Для каждого стрВалюта Из СтрокиВалют Цикл
			МассивКодыВалют = Новый Массив;
			МассивКодыВалют.Добавить(стрВалюта.Code);
		КонецЦикла;
		МассивВалют = РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(МассивКодыВалют);
		СтруктураОтбора.Вставить("ВалютаЦены", МассивВалют[0]);
	КонецЕсли;
	
	ДопРеквизиты = Новый Структура;
	Если ОбменССайтом.ОбъектXDTOСодержитСвойство(ТипЦенXDTO, "Налог")
		И ТипЦенXDTO.Налог.Наименование="НДС" 
		И ОбменССайтом.ОбъектXDTOСодержитСвойство(ТипЦенXDTO.Налог, "УчтеноВСумме") Тогда
	
		Если ТипЦенXDTO.Налог.УчтеноВСумме = "false" Тогда
			ДопРеквизиты.Вставить("ЦенаВключаетНДС", Ложь);
		Иначе
			ДопРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
		КонецЕсли; 
	Иначе
		ДопРеквизиты.Вставить("ЦенаВключаетНДС", Истина);
	КонецЕсли;
	ДопРеквизиты.Вставить("ПорядокОкругления", 1);
	ДопРеквизиты.Вставить("ФорматЦены", "ЧЦ=15; ЧДЦ=2");
	ДопРеквизиты.Вставить("ТипВидаЦен",Перечисления.ТипыВидовЦен.Статический);
	ДопРеквизиты.Вставить("Комментарий", НСтр("ru = 'Загружено с сайта'"));
	
	СсылкаВидЦен = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ВидыЦен, ДопРеквизиты);
	
	ЗаписатьСоответствие(ТипЦенXDTO, СсылкаВидЦен, УзелОбмена);
	
	Возврат СсылкаВидЦен;
	
КонецФункции	

Процедура ЗагрузитьКатегорию(КатегорияXDTO, УзелОбмена, ЭтоКорневаяКатегория=Ложь, ОписаниеОшибки="")

	СтруктураОтбора = Новый Структура("Наименование", КатегорияXDTO.Наименование);
	СтруктураОтбора.Вставить("Родитель", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	ДопРеквизиты = Новый Структура;
	ДопРеквизиты.Вставить("Используется", Истина);
	СсылкаНаборСвойств = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.НаборыДополнительныхРеквизитовИСведений, ДопРеквизиты);
	
	ЗаписатьСоответствие(КатегорияXDTO, СсылкаНаборСвойств, УзелОбмена);
	
	СтруктураОтбора = Новый Структура("Наименование, НаборСвойств", КатегорияXDTO.Наименование, СсылкаНаборСвойств);
	ДопРеквизиты = Новый Структура;
	ДопРеквизиты.Вставить("ТипНоменклатурыПоУмолчанию", Перечисления.ТипыНоменклатуры.Запас);
	ДопРеквизиты.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.шт);
	СсылкаКатегория = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.КатегорииНоменклатуры, ДопРеквизиты);
	
	ЗаписатьСоответствие(КатегорияXDTO, СсылкаКатегория, УзелОбмена);
	
КонецПроцедуры	
	
Процедура ЗагрузитьСвойство(СвойствоXDTO, УзелОбмена)

	ДопРеквизиты = Новый Структура;
	СтруктураОтбора = Новый Структура("Наименование", СвойствоXDTO.Наименование);
	
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Общее", СвойствоXDTO) Тогда
		Если (СвойствоXDTO.Общее = "Истина" ИЛИ СвойствоXDTO.Общее = НРег("true") ИЛИ СвойствоXDTO.Общее = Истина) Тогда
			//Общее свойство технического характера, которое загружать не нужно
			Возврат;
		Иначе
			СсылкаНаборСвойств = ОбменССайтом.СсылкаСоответствиеПоИд(СвойствоXDTO.ТипТовара, "Справочник.НаборыДополнительныхРеквизитовИСведений", УзелОбмена);
			Если СсылкаНаборСвойств=Неопределено Тогда
				//Общее свойство технического характера, которое загружать не нужно
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Если это общий набор свойств, он не будет найден по коду
		//Если это набор свойств категории, он будет найден, так как был создан при загрузке категории ранее
		СсылкаНаборСвойств = ОбменССайтом.СсылкаСоответствиеПоИд(СвойствоXDTO.ТипТовара, "Справочник.НаборыДополнительныхРеквизитовИСведений", УзелОбмена);
		Если СсылкаНаборСвойств=Неопределено Тогда
			//Общее свойство технического характера, которое загружать не нужно
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	СсылкаПВХ = СсылкаСоответствиеПоИдСайта(СвойствоXDTO.СистемныйИд, "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения", УзелОбмена);
	Если СсылкаПВХ=Неопределено Тогда
		СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
		
		//Для ПВХ добавляем к наименованию Владельца в скобках
		СтруктураОтбора.Вставить("Наименование", СвойствоXDTO.Наименование+"("+СокрЛП(СсылкаНаборСвойств.Наименование)+")");
		
		ДопРеквизиты.Вставить("Заголовок", СвойствоXDTO.Наименование);
		ДопРеквизиты.Вставить("Представление", СвойствоXDTO.Наименование);
		Если СвойствоXDTO.ТипЗначений = "Булево" Тогда
			ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Булево"));
		ИначеЕсли СвойствоXDTO.ТипЗначений = "Строка" Тогда
			ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1024, ДопустимаяДлина.Переменная)));
		ИначеЕсли СвойствоXDTO.ТипЗначений = "Число" Тогда
			ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 5, ДопустимыйЗнак.Любой)));
		ИначеЕсли СвойствоXDTO.ТипЗначений = "Дата" Тогда
			ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ИначеЕсли СвойствоXDTO.ТипЗначений = "Справочник" Тогда
			ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
		КонецЕсли;
		ДопРеквизиты.Вставить("Доступен", Истина);
		ДопРеквизиты.Вставить("Виден", Истина);
		ДопРеквизиты.Вставить("ДополнительныеЗначенияИспользуются", Истина);
		
		СсылкаПВХ = СоздатьИлиНайтиСуществующий(СтруктураОтбора, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения, ДопРеквизиты);
		ЗаписатьСоответствие(СвойствоXDTO, СсылкаПВХ, УзелОбмена);
	КонецЕсли;
	
	обНаборСвойств = СсылкаНаборСвойств.ПолучитьОбъект();
	НайденнаяСтрока = обНаборСвойств.ДополнительныеРеквизиты.Найти(СсылкаПВХ,"Свойство");
	Если НайденнаяСтрока = Неопределено Тогда
		НовСтр = обНаборСвойств.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = СсылкаПВХ;
		
		Попытка
			обНаборСвойств.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("ВариантыЗначений", СвойствоXDTO) 
		И РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Справочник", СвойствоXDTO.ВариантыЗначений) Тогда
		МассивЗначенийСвойствXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(СвойствоXDTO.ВариантыЗначений.Справочник);
		Для каждого ЗначениеСвойстваXDTO Из МассивЗначенийСвойствXDTO Цикл
			СтруктураОтбора = Новый Структура("Наименование, Владелец", ЗначениеСвойстваXDTO.Значение, СсылкаПВХ);
			ДопРеквизиты = Новый Структура;
			СсылкаЗначениеСвойства = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ЗначенияСвойствОбъектов, ДопРеквизиты);
			
			Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", ЗначениеСвойстваXDTO)
				И ОбменССайтом.СвойствоXDTOЗаполнено(ЗначениеСвойстваXDTO.СистемныйИд) Тогда
				ЗаписатьСоответствие(ЗначениеСвойстваXDTO, СсылкаЗначениеСвойства, УзелОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

Функция СсылкаСоответствиеПоИдСайта(ИдОбъекта, ТипОбъекта, УзелОбмена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовСайта.СсылкаНаОбъект КАК Ссылка
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовСайта КАК СоответствияОбъектовСайта
	|ГДЕ
	|	СоответствияОбъектовСайта.УникальныйИдентификаторСайта = &УникальныйИдентификаторСайта
	|	И СоответствияОбъектовСайта.ТипОбъекта = &ТипОбъекта
	|	И СоответствияОбъектовСайта.УзелИнформационнойБазы = &УзелОбмена
	|	И НЕ СоответствияОбъектовСайта.СсылкаНаОбъект = Неопределено";
	
	Запрос.УстановитьПараметр("УникальныйИдентификаторСайта", ИдОбъекта);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции

Процедура ЗагрузитьКаталогиРекурсивно(спГруппы, Родитель=Неопределено, УзелОбмена, УровеньВложенности, ГруппыВерхнегоУровня)
	
	МассивТоваровXDTO = ОбменССайтом.ПолучитьМассивОбъектовСпискаXDTO(спГруппы.Группа);
	Для каждого ГруппаXDTO Из МассивТоваровXDTO Цикл
		СтруктураОтбора = Новый Структура("Наименование, ЭтоГруппа", ГруппаXDTO.Наименование, Истина);
		Если ЗначениеЗаполнено(Родитель) Тогда
		    СтруктураОтбора.Вставить("Родитель", Родитель);
		КонецЕсли;
		
		СсылкаГруппа = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.Номенклатура);
		ЗаписатьСоответствие(ГруппаXDTO, СсылкаГруппа, УзелОбмена);
		
		Если УровеньВложенности=0 Тогда
			ГруппыВерхнегоУровня.Вставить(СсылкаГруппа);
		КонецЕсли;
		
		//Вложенные группы
		Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группы", ГруппаXDTO) 
			И РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Группа", ГруппаXDTO.Группы) Тогда
			ЗагрузитьКаталогиРекурсивно(ГруппаXDTO.Группы, СсылкаГруппа, УзелОбмена, 1, ГруппыВерхнегоУровня);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСоответствие(ОбъектXDTO, СсылкаИБ, УзелОбмена)
	
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Ид", ОбъектXDTO) Тогда
		ИдСайта = ОбъектXDTO.Ид;
	ИначеЕсли РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("Ид", ОбъектXDTO) Тогда
		ИдСайта = ОбъектXDTO.ИдЗначения;
	Иначе
		Возврат;
	КонецЕсли;
	Если РаботаСНоменклатуройКлиентСервер.ЕстьРеквизитОбъекта("СистемныйИд", ОбъектXDTO) Тогда
		СистемныйИд = ОбъектXDTO.СистемныйИд;
	Иначе	
		СистемныйИд = ИдСайта;
	КонецЕсли;
	
	РегМенеджер = РегистрыСведений.СоответствияОбъектовСайта.СоздатьМенеджерЗаписи();
	РегМенеджер.УникальныйИдентификаторСайта = СистемныйИд;
	РегМенеджер.УникальныйИдентификаторИнформационнойБазы = ИдСайта;
	РегМенеджер.УзелИнформационнойБазы = УзелОбмена;
	РегМенеджер.СсылкаНаОбъект = СсылкаИБ;
	
	РегМенеджер.ТипОбъекта = СсылкаИБ.Метаданные().ПолноеИмя();
	РегМенеджер.Записать();
	
КонецПроцедуры

Функция СоздатьИлиНайтиСуществующий(СтруктураОтбора, МенеджерОбъекта, ДопРеквизиты=Неопределено)
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	ИмяСтрокой = Строка(МенеджерОбъекта);
	ИмяОбъектаСтрокой = СтрЗаменить(ИмяСтрокой, "Менеджер","");
	
	Если Найти(ИмяСтрокой, "РегистрСведений") Тогда
		НЗ = МенеджерОбъекта.СоздатьМенеджерЗаписи();
		Для каждого стр Из СтруктураОтбора Цикл
			НЗ[стр.Ключ] = стр.Значение;
		КонецЦикла;
		НЗ.Прочитать();
		ЗаполнитьЗначенияСвойств(НЗ, СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(НЗ, ДопРеквизиты);
		НЗ.Записать();
	ИначеЕсли Найти(ИмяСтрокой, "Справочник") ИЛИ Найти(ИмяСтрокой, "ПланВидовХарактеристик") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ первые 1
		|	ИмяСпр.Ссылка
		|ИЗ
		|	"+ИмяОбъектаСтрокой+" КАК ИмяСпр
		|ГДЕ
		|";
		ЧислоОтбров = 0;
		Для каждого стр Из СтруктураОтбора Цикл
			Запрос.Текст = Запрос.Текст+"ИмяСпр."+стр.Ключ+" = &"+стр.Ключ;
			Запрос.УстановитьПараметр(стр.Ключ, стр.Значение);
			
			ЧислоОтбров = ЧислоОтбров+1;
			Если ЧислоОтбров < СтруктураОтбора.Количество() Тогда
				Запрос.Текст = Запрос.Текст+" И "; 
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если СтруктураОтбора.Свойство("ЭтоГруппа") Тогда
				Об = МенеджерОбъекта.СоздатьГруппу();
			Иначе
				Об = МенеджерОбъекта.СоздатьЭлемент();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Об, СтруктураОтбора);
			ЗаполнитьЗначенияСвойств(Об, ДопРеквизиты);
			
			Попытка
				Об.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			Возврат Об.Ссылка;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

Функция ЗагрузитьКартинкуНаСервере(Соединение, Номенклатура, АдресКартинки)

	//выделяем расширение из имени файла.
	ЧастиИмениФайла = СтрРазделить(АдресКартинки, ".", Ложь);
	Если ЧастиИмениФайла.Количество() > 1 Тогда
		РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
		ЧастиКаталогов = СтрРазделить(ЧастиИмениФайла[0], "/", Ложь);
		ИмяБезРасширения = ЧастиКаталогов[ЧастиКаталогов.Количество()-1];
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("."+РасширениеБезТочки);
	Соединение.Получить(Новый HTTPЗапрос(АдресКартинки), ИмяВременногоФайла);
	
	КартинкаФайл = Новый Картинка(ИмяВременногоФайла);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(КартинкаФайл.ПолучитьДвоичныеДанные());	
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ВладелецФайлов", Номенклатура);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
	
	СохраненнаяКартинка = Справочники.НоменклатураПрисоединенныеФайлы.НайтиПоНаименованию(ИмяБезРасширения, Истина, , Номенклатура);
	Если НЕ ЗначениеЗаполнено(СохраненнаяКартинка) Тогда
		ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
	Иначе	
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
		
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(СохраненнаяКартинка, ПараметрыФайла);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЛогированиеЗагрузки

Функция СформироватьЛогЗагрузки(ШагиЗагрузки, ТекущееДействие="")
	
	СтрокаЛогЗагрузкиССайта = "";
	Для каждого шаг Из ШагиЗагрузки Цикл
		СтрокаЛогЗагрузкиССайта = СтрокаЛогЗагрузкиССайта + шаг.Значение + Символы.ПС;
	КонецЦикла;
	
	СтрокаЛогЗагрузкиССайта = СтрокаЛогЗагрузкиССайта + ТекущееДействие;
	
	ДлительныеОперации.СообщитьПрогресс(Неопределено,СтрокаЛогЗагрузкиССайта);
	
КонецФункции

Процедура ДобавитьБлокЛогов(Параметры, ТекстЗаголовок, соотвЭлементы, ИмяПоля="Ключ")
	
	ДобавитьСтрокуЛогаПодробно(Параметры, "");
	Если соотвЭлементы.Количество()>0 Тогда
		ДобавитьСтрокуЛогаПодробно(Параметры, ТекстЗаголовок);
		Для каждого стр Из соотвЭлементы Цикл
			ДобавитьСтрокуЛогаПодробно(Параметры, "- "+стр[ИмяПоля]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуЛогаПодробно(Параметры, НоваяСтрока)
	
	Параметры.СтрокаЛогЗагрузкиССайтаПодробно = Параметры.СтрокаЛогЗагрузкиССайтаПодробно + НоваяСтрока + Символы.ПС;
	
КонецПроцедуры

Процедура ДобавитьСтрокуЛога(Параметры, НоваяСтрока)
	
	Параметры.СтрокаЛогЗагрузкиССайта = Параметры.СтрокаЛогЗагрузкиССайта + НоваяСтрока + Символы.ПС;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОшибку(Параметры, ОписаниеОшибки)
	
	ОбменССайтом.ДобавитьОписаниеОшибки(Параметры.ОписаниеОшибки, ОписаниеОшибки);
	Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	ПоместитьВоВременноеХранилище(Параметры, Параметры.ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

Функция РазмерПакетаЗагрузки()
	
	Возврат 10;
	
КонецФункции

Функция УстановитьСоединениеССервером(Параметры, ОписаниеОшибки="")
	
	Соединение = Неопределено;
	ОтветСервера = "";
	
	СтруктураПодключения = Новый Структура;
	СтруктураПодключения.Вставить("АдресСайта", Параметры.АдресСайтаДляПодключения);
	СтруктураПодключения.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
	СтруктураПодключения.Вставить("Пароль", Параметры.Пароль);
	
	ЕстьСоединение = УстановитьСоединение(СтруктураПодключения, Соединение, ОтветСервера, ОписаниеОшибки);
	Если НЕ ЕстьСоединение Тогда
		Параметры.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаЛогЗагрузкиССайтаПодробно = НСтр("ru = 'Соединение установлено.'") + Символы.ПС;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Возврат Соединение;
	
КонецФункции

Функция УстановитьСоединение(НастройкиПодключения, Соединение, ОтветСервера, ТекстСообщения)
	
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", Ложь);
	ОписаниеОшибки = "";
	
	Если НЕ ОбменССайтом.ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Успешно = ОбменССайтом.ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера, ОписаниеОшибки);
	Если НЕ Успешно Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
	возврат Успешно;
	
КонецФункции

Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

#КонецОбласти

