
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СписокВсехТиповЭД = БизнесСеть.ВидыДокументовСервиса();
	
	Для каждого ЭлементСписка Из СписокВсехТиповЭД Цикл
		Элементы.ОтборВидДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	НастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("БизнесСеть",
		"ВходящиеДокументы\НастройкиОтбора");
	Если ТипЗнч(НастройкиОтбора) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиОтбора);
	КонецЕсли;
	
	ОбновитьСписок(Отказ);
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД Тогда
		Элементы.СписокОрганизация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтбора = Новый Структура;
	НастройкиОтбора.Вставить("ВключитьОтборВидДокумента", ВключитьОтборВидДокумента);
	НастройкиОтбора.Вставить("ВключитьОтборКонтрагент", ВключитьОтборКонтрагент);
	НастройкиОтбора.Вставить("ОтборВидДокумента", ОтборВидДокумента);
	НастройкиОтбора.Вставить("ОтборКонтрагент", ОтборКонтрагент);
	НастройкиОтбора.Вставить("ПоказыватьЗагруженные", ПоказыватьЗагруженные);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("БизнесСеть",
		"ВходящиеДокументы\НастройкиОтбора", НастройкиОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСписокВходящихДокументов1СБизнесСеть" Тогда
		ОбновитьСписокДокументов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьВсеПриИзменении(Элемент)
	
	ОбновитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ВключитьОтборКонтрагент = ЗначениеЗаполнено(ОтборКонтрагент);
	ОбновитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборКонтрагентПриИзменении(Элемент)
	
	ОбновитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборВидДокументаПриИзменении(Элемент)
	
	ОбновитьСписокДокументов();

КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ВключитьОтборВидДокумента = ЗначениеЗаполнено(ОтборВидДокумента);
	ОбновитьСписокДокументов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВывестиЭДНаПросмотр(Элементы.Список.ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Оповещение = Новый ОписаниеОповещения("УдалитьДокументВСервисеПослеВопроса", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Выделенные документы будут удалены в сервисе 1С:Бизнес-сеть.
							  |Документы учета информационной базы не изменятся.
							  |Продолжить выполнение операции?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДанныхТипОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.СписокТипОбъекта.Очистить();
	
	Для каждого ЭлементМассива Из Элементы.Список.ТекущиеДанные.ВозможныеТипыОбъекта Цикл
		Элементы.СписокТипОбъекта.Добавить(ЭлементМассива.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииЯчейки(Элемент)
	
	ДоступностьЗагрузки = Элементы.Список.ВыделенныеСтроки.Количество() = 1;
	Если ДоступностьЗагрузки <> Элементы.КомандаЗагрузить.Доступность Тогда
		Элементы.КомандаЗагрузить.Доступность = ДоступностьЗагрузки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	Для каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ВывестиЭДНаПросмотр(Список.НайтиПоИдентификатору(ВыделеннаяСтрока), Истина);
	КонецЦикла;
	
	ОбновитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСписокДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ВывестиЭДНаПросмотр(Элементы.Список.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДокумент(Команда)
	
	Отказ = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПутьККаталогу");
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Список.НайтиПоИдентификатору(СтрокаСписка);
		
		СтруктураОбмена = Новый Структура;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.АдресХранилища) Тогда
			МассивИдентификаторовДокументов = Новый Массив;
			МассивИдентификаторовДокументов.Добавить(СтрокаДанных.Идентификатор);
			МассивДанныхДокументов = БизнесСетьВызовСервера.ПолучитьДанныеДокументаСервиса(МассивИдентификаторовДокументов, Истина, УникальныйИдентификатор);
			Если МассивДанныхДокументов = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДанных.АдресХранилища = МассивДанныхДокументов[0];
		КонецЕсли;

		СтруктураОбмена.Вставить("НаименованиеФайла", СтрокаДанных.Документ);
		СтруктураОбмена.Вставить("АдресХранилища",    СтрокаДанных.АдресХранилища);
		
		МассивСтруктур.Добавить(СтруктураОбмена);
	КонецЦикла;
	
	БыстрыйОбменВыгрузитьЭД(МассивСтруктур, СтруктураПараметров);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВывестиЭДНаПросмотр(СтрокаДанных, АвтоматическаяЗагрузка = Неопределено)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.АдресХранилища) Тогда
		МассивИдентификаторовДокументов = Новый Массив;
		МассивИдентификаторовДокументов.Добавить(СтрокаДанных.Идентификатор);
		МассивДанныхДокументов = БизнесСетьВызовСервера.ПолучитьДанныеДокументаСервиса(МассивИдентификаторовДокументов, Истина, УникальныйИдентификатор);
		Если МассивДанныхДокументов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаДанных.АдресХранилища = МассивДанныхДокументов[0];
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПолноеИмяФайла");
	ПараметрыОткрытия.Вставить("НаименованиеФайла");
	ПараметрыОткрытия.Вставить("НаправлениеЭД");
	ПараметрыОткрытия.Вставить("Контрагент");
	ПараметрыОткрытия.Вставить("ВладелецЭД");
	ПараметрыОткрытия.Вставить("АдресХранилища");
	ПараметрыОткрытия.Вставить("ФайлАрхива");
	ПараметрыОткрытия.Вставить("Информация");
	ПараметрыОткрытия.Вставить("Статус");
	ПараметрыОткрытия.Вставить("Отправитель");
	ПараметрыОткрытия.Вставить("Получатель");
	ПараметрыОткрытия.Вставить("УчастникИНН");
	ПараметрыОткрытия.Вставить("УчастникКПП");
	ПараметрыОткрытия.Вставить("Дата");
	ПараметрыОткрытия.Вставить("Участник");
	ПараметрыОткрытия.Вставить("Идентификатор");
	ПараметрыОткрытия.Вставить("КонтактноеЛицо");
	ПараметрыОткрытия.Вставить("Телефон");
	ПараметрыОткрытия.Вставить("ЭлектроннаяПочта");
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, СтрокаДанных);
	
	// Заполнение дополнительных параметров.
	ПараметрыОткрытия.Вставить("СсылкаНаДокумент", СтрокаДанных.ВладелецЭД);
	ПараметрыОткрытия.Вставить("РежимЗаполненияДокумента", ЗначениеЗаполнено(СтрокаДанных.ВладелецЭД));
	ПараметрыОткрытия.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытия.Вставить("ИдентификаторВнутренний", СтрокаДанных.ИдентификаторВнутренний);
	ПараметрыОткрытия.Вставить("Источник", СтрокаДанных.Источник);
	
	Если ЗначениеЗаполнено(АвтоматическаяЗагрузка) Тогда
		ПараметрыОткрытия.Вставить("АвтоматическаяЗагрузка", Истина);
		ПараметрыОткрытия.Вставить("СопоставлятьНоменклатуру", Истина);
	КонецЕсли;
	
	КонтекстВызова = Новый Структура("СтруктураЭД", ПараметрыОткрытия);
	ОткрытьФорму("Обработка.БизнесСеть.Форма.ПросмотрДокумента", КонтекстВызова,, ПараметрыОткрытия.ИдентификаторВнутренний);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов()
	
	Идентификатор = Неопределено;
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		Идентификатор = Элементы.Список.ТекущиеДанные.Идентификатор;
	КонецЕсли;
	
	Отказ = Ложь;
	ОчиститьСообщения();
	ОбновитьСписок(Отказ);
	
	Если Идентификатор <> Неопределено Тогда
		Массив = Список.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
		Если Массив.Количество() Тогда
			ИдентификаторСтроки = Массив[0].ПолучитьИдентификатор();
			Элементы.Список.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписок(Отказ)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	МассивОрганизаций = БизнесСетьВызовСервера.МассивПодключенныхОрганизаций();
	Если МассивОрганизаций.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Отсутствуют подключенные организации к сервису 1С:Бизнес-сеть.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Организация", МассивОрганизаций[0]);
	ПараметрыЗапроса.Вставить("МассивОрганизаций", МассивОрганизаций);
	Если ЗначениеЗаполнено(ОтборКонтрагент) И ВключитьОтборКонтрагент Тогда
		ПараметрыЗапроса.Вставить("ОтборКонтрагент", ОтборКонтрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборВидДокумента) И ВключитьОтборВидДокумента Тогда
		ПараметрыЗапроса.Вставить("ОтборВидДокумента", ОтборВидДокумента);
	КонецЕсли;
	Если НЕ ПоказыватьЗагруженные Тогда
		ПараметрыЗапроса.Вставить("ОтборТолькоНовые", Истина);
	КонецЕсли;
	
	// Получение данных из сервиса.
	Результат = Неопределено;
	БизнесСетьВызовСервера.ПолучитьВходящиеДокументы(ПараметрыЗапроса, Результат, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Список.Очистить();
	
	Если Результат.КодСостояния <> 200 ИЛИ Результат.Данные = Неопределено
		ИЛИ ТипЗнч(Результат.Данные) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементМассива Из Результат.Данные Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Документ       = ЭлементМассива.documentTitle;
		НоваяСтрока.УчастникИНН    = ЭлементМассива.sourceOrganization.Inn;
		НоваяСтрока.УчастникКПП    = ?(ЭлементМассива.sourceOrganization.Kpp = 0, "", ЭлементМассива.sourceOrganization.Kpp);
		НоваяСтрока.ОрганизацияИНН = ЭлементМассива.destinationOrganization.Inn;
		НоваяСтрока.ОрганизацияКПП = ?(ЭлементМассива.destinationOrganization.Kpp = 0, "",
										ЭлементМассива.destinationOrganization.Kpp);
		НоваяСтрока.Участник       = ЭлементМассива.sourceOrganization.title;
		НоваяСтрока.ФайлАрхива     = Истина;
		НоваяСтрока.Сумма          = ЭлементМассива.moneyAmount / 100; // Сервис хранит данные в копейках.
		НоваяСтрока.Информация     = ЭлементМассива.info;
		НоваяСтрока.Идентификатор  = ЭлементМассива.id;
		НоваяСтрока.НаправлениеЭД  = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
		НоваяСтрока.ТипОбъекта     = ?(НоваяСтрока.ВозможныеТипыОбъекта.Количество()>0,
										НоваяСтрока.ВозможныеТипыОбъекта[0].Представление, "");
		Если ЗначениеЗаполнено(ЭлементМассива.sentDate) Тогда
			НоваяСтрока.ДатаДокумента = БизнесСетьКлиентСервер.ДатаИзUnixTime(ЭлементМассива.sentDate);	
		КонецЕсли;
		НоваяСтрока.Загружен       = ?(ЭлементМассива.deliveryStatus= "SENT", Истина, Ложь);
		НоваяСтрока.ИдентификаторВнутренний = ЭлементМассива.documentGuid;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторВнутренний) Тогда
			НоваяСтрока.ИдентификаторВнутренний = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		НоваяСтрока.Источник       = ЭлементМассива;
	КонецЦикла;
	
	Список.Сортировать("ДатаДокумента");
	ЗаполнитьСсылкиТаблицы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиТаблицы()
	
	Для каждого СтрокаТаблицы Из Список Цикл
		СтрокаТаблицы.Контрагент = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты",
			СтрокаТаблицы.УчастникИНН, СтрокаТаблицы.УчастникКПП);
		СтрокаТаблицы.Организация = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации",
			СтрокаТаблицы.ОрганизацияИНН, СтрокаТаблицы.ОрганизацияКПП);
		СписокТипов = Новый СписокЗначений;
		ВидЭДСервиса = СтрокаТаблицы.Источник.DocumentDataType;
		Если НРег(Лев(ВидЭДСервиса, 3)) = "v8." Тогда
			ВидЭДСервиса = Сред(ВидЭДСервиса, 4);
		КонецЕсли;
		Если Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления.Найти(ВидЭДСервиса) <> Неопределено Тогда
			ВидДокументаСтроки = Перечисления.ВидыЭД[ВидЭДСервиса];
			ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД(ВидДокументаСтроки, СписокТипов);
			СтрокаТаблицы.ВидДокумента	= ВидДокументаСтроки;
			СтрокаТаблицы.ВозможныеТипыОбъекта = СписокТипов;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторВнутренний) И СписокТипов.Количество()>0 Тогда
				Для Счетчик = 0 По СписокТипов.Количество()-1 Цикл
					НаименованиеТипа = СписокТипов.Получить(Счетчик).Значение.Метаданные().Имя;
					ВладелецЭД = Документы[НаименованиеТипа].ПолучитьСсылку(
						Новый УникальныйИдентификатор(СтрокаТаблицы.ИдентификаторВнутренний));
					
					Если ОбщегоНазначения.СсылкаСуществует(ВладелецЭД) Тогда
						СтрокаТаблицы.ВладелецЭД = ВладелецЭД;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументВСервисеПослеВопроса(Результат, МассивСтрок) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Элементы.Список.ВыделенныеСтроки;
	КоличествоСтрок = МассивСтрок.Количество();
	ДокументыПоОрганизациям = Новый Соответствие;
	
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		СтрокаДокумента = Список.НайтиПоИдентификатору(ЭлементМассива);
		Если ДокументыПоОрганизациям[СтрокаДокумента.Организация] = Неопределено Тогда
			ДокументыПоОрганизациям.Вставить(СтрокаДокумента.Организация, Новый Структура("МассивИдентификаторов, МассивСтрок", 
				Новый Массив, Новый Массив));
		КонецЕсли;
		ДокументыПоОрганизациям[СтрокаДокумента.Организация].МассивИдентификаторов.Добавить(СтрокаДокумента.Идентификатор);
		ДокументыПоОрганизациям[СтрокаДокумента.Организация].МассивСтрок.Добавить(СтрокаДокумента);
	КонецЦикла;
	
	// Вызов метода удаления по идентификаторам документов.
	Для каждого ВыборкаПоОрганизации Из ДокументыПоОрганизациям Цикл
		МассивИдентификаторов = ВыборкаПоОрганизации.Значение.МассивИдентификаторов;
		
		Результат = Неопределено;
		Отказ = Ложь;
		БизнесСетьВызовСервера.УдалитьДокументы(ВыборкаПоОрганизации.Ключ, МассивИдентификаторов, Результат, Отказ);
		
		Если Отказ ИЛИ Результат.КодСостояния <> 200 Тогда
			Возврат;
		КонецЕсли;
		
		// Удаление строки в форме списка.
		Для каждого СтрокаДокумента Из ВыборкаПоОрганизации.Значение.МассивСтрок Цикл
			Список.Удалить(СтрокаДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоСтрок = 1 Тогда
		ТекстОповещения	= НСтр("ru = 'Документ удален.'");
		ТекстПояснения	= НСтр("ru = 'Удален входящий документ в сервисе 1С:Бизнес-сеть.'");
	Иначе
		ТекстОповещения	= НСтр("ru = 'Документы удалены (%1).'");
		ТекстОповещения = СтрШаблон(ТекстОповещения, КоличествоСтрок);
		ТекстПояснения	= НСтр("ru = 'Удалены входящие документы в сервисе 1С:Бизнес-сеть.'");
	КонецЕсли;
	ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.БизнесСеть);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйОбменВыгрузитьЭД(МассивСтруктурОбмена, СтруктураПараметров)
	
	Перем ПутьККаталогу;
	
	МассивФайлов = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(
			СтруктураОбмена.НаименованиеФайла + ".zip", СтруктураОбмена.АдресХранилища);
		МассивФайлов.Добавить(ОписаниеФайла);
	КонецЦикла;
	Если МассивФайлов.Количество() Тогда
		ПустойОбработчик = Новый ОписаниеОповещения("ПустойОбработчик", ЭлектронноеВзаимодействиеСлужебныйКлиент);
		НачатьПолучениеФайлов(ПустойОбработчик, МассивФайлов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "Список.ДатаДокумента", "ДатаДокумента");
	
	// Серый цвет для новых контрагентов.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОтправитель.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);

	// Выделение жирным незагруженных документов
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВладелецЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь));

КонецПроцедуры

#КонецОбласти
