
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.СтруктураЭД) <> Тип("Структура") 
		ИЛИ Не Параметры.СтруктураЭД.Свойство("НаправлениеЭД") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка открытия электронного документа'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.СтруктураЭД);
	ЭтоВходящийДокумент = (Параметры.СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
	ДокументИБ = Параметры.СтруктураЭД.ВладелецЭД;
	ЭтоНовыйДокумент = Не ЭтоВходящийДокумент И Не ЗначениеЗаполнено(Статус);
	Если ЭтоВходящийДокумент Тогда
		Параметры.СтруктураЭД.Свойство("Участник", ОтправительНаименование);
	КонецЕсли;
	
	Если СопоставлятьНоменклатуру = Неопределено И АвтоматическаяЗагрузка Тогда
		СопоставлятьНоменклатуру = Истина;
	КонецЕсли;
	
	ВыполнитьПросмотрЭДСервер(Параметры.СтруктураЭД, Отказ);
	Источник = Параметры.СтруктураЭД.Источник;
	
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("БизнесСеть",
		"ПросмотрДокумента\ОтключитьВыводДопДанных");
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	СкрытьДополнительныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если АвтоматическаяЗагрузка Тогда
		ЗагрузитьЭлектронныйДокумент(Отказ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Инициализация режима, состояния.
	Если ЭтоВходящийДокумент Тогда
		Шаблон = НСтр("ru = '%1 (электронный документ)'");
		Заголовок = СтрШаблон(Шаблон, Источник.documentTitle);
		РежимЗаполненияДокумента = ЗначениеЗаполнено(ДокументИБ);
		СпособЗагрузкиДокумента = ?(РежимЗаполненияДокумента, 1, 0);
	Иначе
		Если Источник = Неопределено Тогда
			Заголовок = ДокументИБ;
		Иначе
			Шаблон = НСтр("ru = '%1 (электронный документ)'");
			Заголовок = СтрШаблон(Шаблон, Источник.documentTitle);
		КонецЕсли;
		Если ВРЕГ(Статус) = "ОТПРАВЛЕН" Тогда
			Шаблон = НСтр("ru = 'отправлен %1'");
			Состояние = СтрШаблон(Шаблон, 
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.sentDate));
		ИначеЕсли ВРЕГ(Статус) = "ДОСТАВЛЕН" Тогда
			Шаблон = НСтр("ru = 'отправлен %1, доставлен %2'");
			Состояние = СтрШаблон(Шаблон, 
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.sentDate),
				БизнесСетьКлиентСервер.ДатаИзUnixTime(Источник.receivedDate));
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВходящийДокумент.Видимость = ЭтоВходящийДокумент;
	Элементы.НовыйДокумент.Видимость = ЭтоНовыйДокумент;
	Элементы.ОтправленныйДокумент.Видимость = НЕ ЭтоВходящийДокумент И НЕ ЭтоНовыйДокумент;
	
	Если ЭтоНовыйДокумент Тогда
		Элементы.Информация.Видимость = Ложь;
	КонецЕсли;

	Если Не ЭтоВходящийДокумент Тогда
		Элементы.КомандаЗагрузить.Видимость = Ложь;
		Элементы.Отправитель.Видимость = Ложь;
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("БизнесСеть",
			"ПросмотрДокумента\ОтключитьВыводДопДанных", ОтключитьВыводДопДанных);
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтправительНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("ИНН, КПП", УчастникИНН, УчастникКПП);
	БизнесСетьКлиент.ОткрытьПрофильУчастника(ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура РежимЗагрузкиПриИзменении(Элемент)
	
	РежимЗаполненияДокумента = СпособЗагрузкиДокумента = 1;
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ЗагрузитьЭлектронныйДокумент(Отказ);
	
	Если Не Отказ Тогда
		ЭтаФорма.Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	СкрытьДополнительныеДанные();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьЭлектронныйДокумент(Отказ)
	
	Если СпособЗагрузкиДокумента = 0 Тогда
		Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда
			ТекстОшибки = НСтр("ru = 'Поле ""Тип"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ТипОбъекта",, Отказ);
			Возврат;
		КонецЕсли;
	ИначеЕсли СпособЗагрузкиДокумента = 1 Тогда
		Если Не ЗначениеЗаполнено(ДокументИБ) Тогда
			ТекстОшибки = НСтр("ru = 'Поле ""Документ"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ДокументИБ",, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбновитьИнформациюОКонтрагенте(Контрагент, УчастникИНН, УчастникКПП);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			СоздатьКонтрагента(Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("АдресСтруктурыРазбораЭД",  АдресСтруктурыРазбораЭД);
	ПараметрыЗагрузки.Вставить("ВидЭД",                    ВидЭД);
	ПараметрыЗагрузки.Вставить("ДанныеФайлаРазбора",       ДанныеФайлаРазбора);
	ПараметрыЗагрузки.Вставить("ДокументИБ",               ?(РежимЗаполненияДокумента, ДокументИБ, Неопределено));
	ПараметрыЗагрузки.Вставить("Идентификатор",            Идентификатор);
	ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных",     ИмяОбъектаМетаданных);
	ПараметрыЗагрузки.Вставить("КлючУникальностиФормы",    ЭтаФорма.КлючУникальности);
	ПараметрыЗагрузки.Вставить("Контрагент",               Контрагент);
	ПараметрыЗагрузки.Вставить("РежимЗаполненияДокумента", РежимЗаполненияДокумента);
	ПараметрыЗагрузки.Вставить("ТипОбъекта",               ТипОбъекта);
	ПараметрыЗагрузки.Вставить("СопоставлятьНоменклатуру", СопоставлятьНоменклатуру);
	ПараметрыЗагрузки.Вставить("АвтоматическаяЗагрузка",   АвтоматическаяЗагрузка);
	БизнесСетьКлиент.ЗагрузитьЭлектронныйДокумент(ПараметрыЗагрузки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонтрагента(Отказ)
	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ИНН", УчастникИНН);
	РеквизитыКонтрагента.Вставить("КПП", УчастникКПП);
	РеквизитыКонтрагента.Вставить("Наименование", ОтправительНаименование);
	СтруктураРеквизитов = Новый Структура("РеквизитыКонтрагента, Контрагент", РеквизитыКонтрагента);
	
	БизнесСетьПереопределяемый.СоздатьКонтрагентаПоРеквизитам(СтруктураРеквизитов, Отказ);
	
	Если Не Отказ Тогда
		Контрагент = СтруктураРеквизитов.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОКонтрагенте(Контрагент, УчастникИНН, УчастникКПП)
	
	Контрагент = ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", УчастникИНН, УчастникКПП)
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ТипОбъекта.Видимость = Не РежимЗаполненияДокумента;
	Элементы.ДокументУчета.Видимость = РежимЗаполненияДокумента;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.Отправитель.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.Отправитель.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПросмотрЭДСервер(СтруктураЭД, Отказ)
	
	Перем ЗаполняемыйДокумент, ДеревоРазбора, СтрокаОбъекта;
	
	ФайлПросмотра = Неопределено;
	ИмяФайлаКартинок = Неопределено;
	ФайлДопДанных = Неопределено;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураЭД.АдресХранилища);
	
	Если СтруктураЭД.ФайлАрхива Тогда
		ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
		ИмяФайлаАрхива = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанные.Записать(ИмяФайлаАрхива);
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*");
		
		ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
		Попытка
			ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива ЭД'"),
			ТекстОшибки, ТекстСообщения);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаАрхива);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Возврат;
		КонецПопытки;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаАрхива);
		
		// Поиск файла просмотра PDF.
		МассивФайловПросмотра = НайтиФайлы(ПапкаДляРаспаковки, "*.pdf", Истина);
		Если МассивФайловПросмотра.Количество() > 0 Тогда
			ФайлПросмотра = МассивФайловПросмотра[0];
		КонецЕсли;
		
		// Поиск файла информации.
		МассивФайлИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
		Если МассивФайлИнформации.Количество() > 0 Тогда
			ФайлИнформации = МассивФайлИнформации[0];
		КонецЕсли;
		
		// Поиск файла карточки.
		МассивФайлКарточки = НайтиФайлы(ПапкаДляРаспаковки, "card*.xml", Истина);
		Если МассивФайлКарточки.Количество() > 0 Тогда
			ФайлКарточки = МассивФайлКарточки[0];
		КонецЕсли;
		
		// Поиск файла архива.
		МассивФайловАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.zip", Истина);
		Если МассивФайловАрхива.Количество() > 0 Тогда
			ФайлКартинок = МассивФайловАрхива[0];
			ИмяФайлаКартинок = ФайлКартинок.ПолноеИмя;
		КонецЕсли;
		
		Если ФайлКарточки = Неопределено Или ФайлИнформации = Неопределено Тогда
			ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла ""%1№"".'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			ШаблонСообщения = НСтр("ru = 'Файл ""%1"" не содержит электронных документов.'");
			ПредставлениеОшибки = СтрШаблон(ШаблонСообщения, СтруктураЭД.ИмяФайла);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Чтение ЭД.'"),
			ПредставлениеОшибки,
			ТекстСообщения);
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
			ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиВнутренний");
			СоответствиеФайлПараметры = ОбщийМодуль.ПараметрыФайловЭДО(ФайлИнформации, ФайлКарточки);
		Иначе
			ВызватьИсключение НСтр("ru = 'Отсутствует подсистема ""Обмен с контрагентами"".'");
		КонецЕсли;
		
		Для Каждого ЭлементСоответствия Из СоответствиеФайлПараметры Цикл
			
			МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствия.Ключ, Истина);
			ПапкаДляРаспаковкиФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
				
			Если МассивФайловИсточник.Количество() > 0 Тогда
				
				Если МассивФайловИсточник[0].Расширение = ".zip" Тогда
					
					ИмяФайлаАрхива = МассивФайловИсточник[0].ПолноеИмя;
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковкиФайлаЭД, "*");
					
					ЧтениеЗИП = Новый ЧтениеZIPФайла(ИмяФайлаАрхива);
					Попытка
						ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРаспаковкиФайлаЭД);
					Исключение
						ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
						Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРаспаковкиФайлаЭД) Тогда
							ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
						КонецЕсли;
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива ЭД'"),
							ТекстОшибки, ТекстСообщения);
						
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковкиФайлаЭД);
						Возврат;
					КонецПопытки;
					
					МассивФайловИсточник = НайтиФайлы(ПапкаДляРаспаковкиФайлаЭД, "*.xml", Истина);
				КонецЕсли;
				
				ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
				КопироватьФайл(МассивФайловИсточник[0].ПолноеИмя, ИмяФайла);
				
			КонецЕсли;
			
			ДопДанные = Неопределено;
			Если ЭлементСоответствия.Значение.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") Тогда
				
				ИмяФайлаДопДанных = Неопределено;
				Если ДопДанные.Свойство("ФайлДопДанных", ИмяФайлаДопДанных) И ЗначениеЗаполнено(ИмяФайлаДопДанных) Тогда
					
					МассивФайловДопДанных = НайтиФайлы(ПапкаДляРаспаковки, ИмяФайлаДопДанных, Истина);
					Если МассивФайловДопДанных.Количество() > 0 Тогда
						
						ФайлДопДанных = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
						КопироватьФайл(МассивФайловДопДанных[0].ПолноеИмя, ФайлДопДанных);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковкиФайлаЭД);
			
		КонецЦикла;
		
	Иначе
		ИмяФайла = ОбменСКонтрагентамиСлужебный.ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяФайла);
	КонецЕсли;

	СтруктураЭД.Свойство("СсылкаНаДокумент", ЗаполняемыйДокумент);
	
	СтруктураРазбора = ОбменСКонтрагентамиВнутренний.СформироватьДеревоРазбора(ИмяФайла,
		Перечисления.НаправленияЭД.Входящий, ФайлДопДанных, ИмяФайлаКартинок);
	ДвоичныеДанныеФайлаРазбора = Новый ДвоичныеДанные(ИмяФайла);
	УИД = Новый УникальныйИдентификатор;
	ДанныеФайлаРазбора = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаРазбора, УИД);
	
	ДанныеЭД = Неопределено;
	
	Если ТипЗнч(СтруктураРазбора) = Тип("Структура") Тогда
		АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбора, УИД);
		ВидЭД = СтруктураРазбора.СтрокаОбъекта.ВидЭД;
		ДанныеЭД = ОбменСКонтрагентамиВнутренний.ПечатнаяФормаЭД(СтруктураРазбора, СтруктураЭД.НаправлениеЭД, Новый Структура);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		
		Если ЭтоВходящийДокумент Тогда
			Если (НЕ ЗначениеЗаполнено(ДокументИБ) ИЛИ СпособЗагрузкиДокумента = 0) И СтруктураРазбора <> Неопределено
					И СтруктураРазбора.Свойство("ДеревоРазбора", ДеревоРазбора)
					И СтруктураРазбора.Свойство("СтрокаОбъекта", СтрокаОбъекта) Тогда
				ОшибкаЗаписи = Ложь;
				СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
				Если СтрокаДерева <> Неопределено Тогда
					Контрагент = СтрокаДерева.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
			
			ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД(ВидЭД, СписокТипов);
			
			МассивТипов = Новый Массив;
			Для Каждого ТекЗначение Из СписокТипов Цикл
				
				ТекЭлемент = Элементы.ТипОбъекта.СписокВыбора.Добавить();
				ТекЭлемент.Значение = ТекЗначение.Представление;
				
				// Если реквизит ДокументИБ еще не заполнен и зачитано первое по списку значение, то заполним имеющимися данными.
				Если НЕ ЗначениеЗаполнено(ДокументИБ) И СписокТипов.Индекс(ТекЗначение) = 0 Тогда
					ТипОбъекта = ТекЗначение.Представление;
					ДокументИБ = ТекЗначение.Значение;
					ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
				КонецЕсли;
				
				Если ВРег(ВидЭД) = ВРег("РеквизитыОрганизации") Тогда
					Если ЗначениеЗаполнено(Контрагент) Тогда
						ДокументИБ = Контрагент;
						РежимЗаполненияДокумента = Истина;
						СпособЗагрузкиДокумента = 1;
					КонецЕсли;
				КонецЕсли;
				
				// Если в структуре параметров есть ссылка на документ ИБ и его тип совпал с типом одного
				// из значений списка типов, то заполним этими данными соответствующие реквизиты формы.
				// Данное условие необходимо для корректной обработки ситуации, когда в качестве заполняемого документа,
				// выбран документ с типом не совпадающим ни с одним из доступных в списке или не совпадает с типом первого
				// элемента списка.
				
				Если ЗначениеЗаполнено(ЗаполняемыйДокумент)
					И ТипЗнч(ЗаполняемыйДокумент) = ТипЗнч(ТекЗначение.Значение) Тогда
					ТипОбъекта = ТекЗначение.Представление;
					ДокументИБ = ЗаполняемыйДокумент;
					ИмяОбъектаМетаданных = ТекЗначение.Значение.Метаданные().ПолноеИмя();
				КонецЕсли;
				
				МассивТипов.Добавить(ТипЗнч(СписокТипов[0].Значение));
				
			КонецЦикла;
			
			Элементы.ДокументУчета.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов);

		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ЗаполняемыйДокумент) Тогда
			ИмяСправочникаКонтрагенты = ИмяСправочника("Контрагенты");
			Если Не ЗначениеЗаполнено(ИмяСправочникаКонтрагенты) Тогда
				ИмяСправочникаКонтрагенты = "Контрагенты";
			КонецЕсли;
			Если ТипЗнч(ЗаполняемыйДокумент) = Тип("СправочникСсылка."+ ИмяСправочникаКонтрагенты) Тогда
				Контрагент = ЗаполняемыйДокумент;
			Иначе
				Если ЗаполняемыйДокумент.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
					Контрагент = ЗаполняемыйДокумент.Контрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		
	Иначе
		Если ФайлПросмотра <> Неопределено Тогда
			ПутьКФайлу = ФайлПросмотра.ПолноеИмя;
			РасширениеФайла = СтрЗаменить(ФайлПросмотра.Расширение, ".", "");
			ДДФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			// Передача на клиента двоичных данных файла для просмотра.
			АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(ДДФайла, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИмяСправочника(ИмяСправочника)
	
	ИмяСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(ИмяСправочника);
	Возврат ИмяСправочника;
	
КонецФункции

&НаСервере
Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска)
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура СкрытьДополнительныеДанные()
	
	ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	
	Если ОтключитьВыводДопДанных Тогда
		ИменаОбластей = "ИдентификаторДокумента, ОбластьДД, ОбластьДДСЭП, ОбластьДДБезЭП, ОбластьДДСЭП_УС, ОбластьДДСЭП_У, ОбластьДДСЭП_С";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей,
			ТипСмещенияТабличногоДокумента.БезСмещения);
		ИменаОбластей = "ДопДанныеШапки_Шапка";
		ЭлектронноеВзаимодействиеСлужебный.СкрытьОбластиТабличногоДокумента(ТабличныйДокументФормы, ИменаОбластей,
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
