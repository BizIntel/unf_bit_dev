#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииПоискаОбъектовИБ

// Функция ищет банк по БИК или корр. счету и возвращает найденное значение.
//
Функция НайтиБанкПоБикИКоррСчету(БИК, КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.Банки.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;

	Возврат НайденныйБанк;

КонецФункции // НайтиБанкПоБикИКоррСчету()

// Определяем группу, в которую будет добавлен новый контрагент.
//
Функция ОпределитьАвтоГруппуКонтрагента(ДеньгиОтКонтрагентаПоступили) Экспорт 
	
	// Попробуем найти по наименованию.
	СтрокаПоиска = ?(ДеньгиОтКонтрагентаПоступили, НСтр("ru='Покупатели'"), НСтр("ru='Поставщики'"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Родитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.Наименование = &Наименование
	|	И (НЕ Контрагенты.ПометкаУдаления)");
	
	Запрос.УстановитьПараметр("Наименование", СтрокаПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// По наименованию не нашли, тогда найдем самый часто используемый в соответствующей таблице.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗАпрос.КонтрагентРодитель
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоиска.Контрагент.Родитель КАК КонтрагентРодитель,
	|		КОЛИЧЕСТВО(ТаблицаПоиска.Контрагент.Родитель) КАК КоличествоОдинаковых
	|	ИЗ
	|		Документ.%ТАБЛИЦА_ПОИСКА% КАК ТаблицаПоиска
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПоиска.Контрагент.Родитель) КАК ВложенныйЗАпрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗАпрос.КоличествоОдинаковых УБЫВ");
	
	Запрос.Текст = 
		СтрЗаменить(
			Запрос.Текст, 
			"%ТАБЛИЦА_ПОИСКА%", 
			?(ДеньгиОтКонтрагентаПоступили, "РасходнаяНакладная", "ПриходнаяНакладная"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.КонтрагентРодитель, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции

// Функция находит договор контрагента.
//
&НаСервере
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ДоговорПоУмолчанию
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
  + ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

// Функция находит счет контрагента по номеру.
//
&НаСервере
Функция НайтиСчетКонтрагента(Контрагент, НомерСчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка,
		|	ВЫБОР
		|		КОГДА БанковскиеСчета.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Контрагент
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка(); //НСтр("ru = 'Не найден'");
	КонецЕсли;
	
КонецФункции // НайтиДоговор()

#КонецОбласти

#Область ПроцедурыСозданияИЗаполненияОбъектов

Функция ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект) Экспорт
	
	ДоговорОбъект.Наименование = СтруктураДанных.ДоговорНаименование;
	ДоговорОбъект.Владелец = СтруктураДанных.Контрагент;
	ДоговорОбъект.ВалютаРасчетов = СтруктураДанных.ДоговорВалютаРасчетов;
	ДоговорОбъект.ДатаДоговора = СтруктураДанных.ДоговорДата;
	ДоговорОбъект.НомерДоговора = СтруктураДанных.ДоговорНомер;
	ДоговорОбъект.РасчетыВУсловныхЕдиницах = СтруктураДанных.ДоговорРасчетыВУсловныхЕдиницах;
	Если СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) Тогда
		ДоговорОбъект.Организация = СтруктураДанных.Организация;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДоговорПоСтруктуреДанных(Знач СтруктураДанных, ДоговорСсылка = Неопределено) Экспорт
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураДанных.Контрагент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Попытка записи Договора не удалась по причине, т.к. не указан контрагент, для которого оформляется договор'"));
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДоговорСсылка) Тогда
			НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			
			Если СтруктураДанных.Свойство("ЗаполнятьДоговорПоУмолчанию") И СтруктураДанных.ЗаполнятьДоговорПоУмолчанию Тогда
				//Справочники.Контрагенты.ЗаполнитьДоговорПоУмолчанию(НовыйДоговор, СтруктураДанных.Контрагент);
				НовыйДоговор.Заполнить(СтруктураДанных.Контрагент);
			КонецЕсли;
		Иначе
			НовыйДоговор = ДоговорСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не (СтруктураДанных.Свойство("ЗаполнятьДоговор") И Не СтруктураДанных.ЗаполнятьДоговор) Тогда
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, НовыйДоговор);
		КонецЕсли;
		
		НовыйДоговор.Записать();
		
		Возврат НовыйДоговор.Ссылка;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Договора не удалась по причине: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных) Экспорт
	
	Попытка
		
		НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		
		НовыйСчет.НомерСчета = СтруктураДанных.Счет;
		НовыйСчет.Владелец   = СтруктураДанных.Контрагент;
		
		БИК = СтруктураДанных.БИК;
		КоррСчет = СтруктураДанных.КоррСчет;
		Наименование = СтруктураДанных.Банк;
		Город = СтруктураДанных.Город;
		
		Если Не СтруктураДанных.ПрямыеРасчеты Тогда
		
			БИКРасчетов = СтруктураДанных.БИКРасчетов;
			КоррСчетРасчетов = СтруктураДанных.КоррСчетРасчетов;
			НаименованиеРасчетов = СтруктураДанных.БанкРасчетов;
			ГородРасчетов = СтруктураДанных.ГородРасчетов;
			
			// Банк контрагента.
			Если НЕ ПустаяСтрока(Наименование) Тогда
				
				НовыйБанк = НайтиБанкПоБикИКоррСчету(БИК, КоррСчет);
				Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
					НовыйБанк = Справочники.Банки.СоздатьЭлемент();
					
					НовыйБанк.Наименование = Наименование;
					НовыйБанк.Город        = Город;
					НовыйБанк.Код          = БИК;
					НовыйБанк.КоррСчет     = КоррСчет;
					
					НовыйБанк.Записать();
				КонецЕсли;
				НовыйСчет.Банк = НовыйБанк.Ссылка;
				
			КонецЕсли;
				
			// РЦ банка контрагента.
			Если НЕ ПустаяСтрока(НаименованиеРасчетов) Тогда
				
				НовыйБанкКорр = НайтиБанкПоБикИКоррСчету(БИКРасчетов, КоррСчетРасчетов);
				Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
					НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
					
					НовыйБанкКорр.Наименование = НаименованиеРасчетов;
					НовыйБанкКорр.Город        = ГородРасчетов;
					НовыйБанкКорр.Код          = БИКРасчетов;
					НовыйБанкКорр.КоррСчет     = КоррСчетРасчетов;
					
					НовыйБанкКорр.Записать();
				КонецЕсли;
				НовыйСчет.БанкРасчетов = НовыйБанкКорр.Ссылка;
				
			КонецЕсли;
			
		Иначе
			
			// Банк контрагента.
			НовыйБанк = НайтиБанкПоБикИКоррСчету(БИК, КоррСчет);
			Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
				НовыйБанк = Справочники.Банки.СоздатьЭлемент();
				
				НовыйБанк.Наименование = Наименование;
				НовыйБанк.Город        = Город;
				НовыйБанк.Код          = БИК;
				НовыйБанк.КоррСчет     = КоррСчет;
				
				НовыйБанк.Записать();
			КонецЕсли;
			НовыйСчет.Банк = НовыйБанк.Ссылка;
			
		КонецЕсли;
		
		НовыйСчет.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ВоВсехПлатежныхПоручениях;
		НовыйСчет.ВидСчета = "Расчетный";
		НовыйСчет.ВалютаДенежныхСредств = СтруктураДанных.БанковскийСчет.ВалютаДенежныхСредств;
		СтрокаНаименования = СокрЛП(НовыйСчет.НомерСчета) + ?(ЗначениеЗаполнено(НовыйСчет.Банк), ", в " + Строка(НовыйСчет.Банк), "");
		СтрокаНаименования = Лев(СтрокаНаименования, 100);
		НовыйСчет.Наименование = СтрокаНаименования;
		
		НовыйСчет.Записать();
		
		Возврат НовыйСчет.Ссылка;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
				ОписаниеОшибки()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьКонтрагентаПоСтруктуреДанных(СтруктураДанных) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		КонтрагентНовый = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонтрагентНовый.Заполнить(СтруктураДанных);
			
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.ВидКонтрагента) Тогда
			КонтрагентНовый.ВидКонтрагента = ?(СтрДлина(СокрЛП(СтруктураДанных.ИНН)) = 12, Перечисления.ВидыКонтрагентов.ФизическоеЛицо, Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
		КонецЕсли;
		
		КонтрагентНовый.Записать();
		
		СтруктураДанных.Вставить("Контрагент", КонтрагентНовый.Ссылка);
		
		// Создадим расчетный счет.
		Если СтруктураДанных.СоздаватьРСчет Тогда
			КонтрагентНовый.БанковскийСчетПоУмолчанию = СоздатьРасчетныйСчетПоСтуктуреДанных(СтруктураДанных);
			КонтрагентНовый.ОбменДанными.Загрузка = Истина;
			КонтрагентНовый.Записать();
		КонецЕсли;
		
		// Перезаполним основной договор.
		Если СтруктураДанных.ЗаполнятьДоговор Тогда
			
			ДоговорОбъект = КонтрагентНовый.ДоговорПоУмолчанию.ПолучитьОбъект();
			ЗаполнитьДоговорПоСтруктуреДанных(СтруктураДанных, ДоговорОбъект);
			ДоговорОбъект.Записать();
			
		ИначеЕсли СтруктураДанных.Свойство("Организация") И ЗначениеЗаполнено(СтруктураДанных.Организация) И
			КонтрагентНовый.ДоговорПоУмолчанию.Организация <> СтруктураДанных.Организация Тогда
			
			ДоговорОбъект = КонтрагентНовый.ДоговорПоУмолчанию.ПолучитьОбъект();
			ДоговорОбъект.Организация = СтруктураДанных.Организация;
			ДоговорОбъект.Записать();
			
		КонецЕсли;
		
		СтруктураДанных.Вставить("БанковскийСчетПоУмолчанию", КонтрагентНовый.БанковскийСчетПоУмолчанию);
		СтруктураДанных.Вставить("Договор", КонтрагентНовый.ДоговорПоУмолчанию);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Попытка записи Контрагента не удалась по причине: %1'"),
				ОписаниеОшибки()));
				
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьИнформациюОбОтношенияхСКонтрагентомПоВидуОперации(СтруктураДанных, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		СтруктураДанных.Вставить("Покупатель", Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
		СтруктураДанных.Вставить("Поставщик", Истина);
	Иначе
		СтруктураДанных.Вставить("ПрочиеОтношения", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоНеНайденныхКонтрагентов

// Функция возвращает найденный элемент дерева.
//
&НаСервере
Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Ном = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиЭлементДерева()

// Функция добавляет и возвращает описание нового реквизита.
//
&НаСервере
Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)
	
	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
	
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции // ДобавитьОписаниеНовогоРеквизита()

// Процедура создает список не найденных контрагентов.
//
&НаСервере
Процедура СписокНеНайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов, КолвоНеНайденныхКонтрагентов, КолвоНеНайденныхРСчетов) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	Если ЗначениеЗаполнено(СтрокаДокумента[ТипКонтрагента + "ИНН"]) Тогда
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	Иначе
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + Окончание]);
	КонецЕсли;
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.ПолучитьЭлементы().Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		НовыйКонтрагент.Загружать     = Истина;
		НовыйКонтрагент.ЭтоКонтрагент = Истина;
		
		ВидОперации = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ВидОперацииСписание, СтрокаДокумента.ВидОперацииПоступление);
		НовыйКонтрагент.ВидОперации   = ВидОперации;
		
		ДобавитьОписаниеНовогоРеквизита("Юридическое название", Окончание, ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"		  , "ИНН"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"		  , "КПП"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
			НовыйКонтрагент.Значение = СтрокаДокумента.Контрагент;
		Иначе
			КолвоНеНайденныхКонтрагентов = КолвоНеНайденныхКонтрагентов + 1;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.ПолучитьРодителя();
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(НовыйКонтрагент.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка (БИК)",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка (БИК)",       "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		КонецЕсли;
		
		КолвоНеНайденныхРСчетов = КолвоНеНайденныхРСчетов + 1;
		
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных()

// Процедура создает список не найденных контрагентов.
//
&НаСервере
Процедура СписокНеНайденныхДляЗаполненияДерева(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	Если ЗначениеЗаполнено(СтрокаДокумента[ТипКонтрагента + "ИНН"]) Тогда
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	Иначе
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + Окончание]);
	КонецЕсли;
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.ПолучитьЭлементы().Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		НовыйКонтрагент.Загружать     = Истина;
		НовыйКонтрагент.ЭтоКонтрагент = Истина;
		
		ДобавитьОписаниеНовогоРеквизита("Юридическое название", Окончание, ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"		  , "ИНН"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"		  , "КПП"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.ПолучитьРодителя();
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(НовыйКонтрагент.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка",             "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТекстЗапросаПоЗаполнениюТабличнойЧастиВыгрузка(Сохранение = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.НазначениеПлатежа,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	ПлатежноеПоручение.Контрагент,
	|	ПлатежноеПоручение.ВидОперации,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ПлатежноеПоручение.ТекстПлательщика,
	|	ПлатежноеПоручение.ТекстПолучателя,
	|	ПлатежноеПоручение.ВидПеречисленияВБюджет,
	|	ПлатежноеПоручение.ИННПлательщика КАК ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика КАК КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя КАК ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя КАК КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.Организация.НаименованиеПолное КАК Организация,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииНалогов КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.БанковскийСчет КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.БанковскийСчет.Банк КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.БанковскийСчет.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.БанковскийСчет.БанкРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.Контрагент.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручение.Контрагент.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Наименование КАК КонтрагентПредставлениеСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ПлатежноеПоручение.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЕСТЬNULL(СостоянияЭД.СостояниеВерсииЭД, ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПустаяСсылка)) КАК СостояниеЭД,
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(255)) КАК ОписаниеОшибок,
	|	0 КАК Готовность,
	|	-1 КАК НомерКартинки,
	|	0 КАК НомерКартинкиДляПодвала,
	|	0 КАК СуммаДокументаВыделено,
	|	ИСТИНА КАК Выгружать
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияЭД.СсылкаНаОбъект";
	
	Если НЕ Сохранение Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Организация = &Организация
		|	И ПлатежноеПоручение.БанковскийСчет = &БанковскийСчет
		|	И ПлатежноеПоручение.Дата МЕЖДУ &НачПериода И &КонПериода
		|	И ПлатежноеПоручение.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение.Дата,
		|	Документ";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ПлатежноеПоручение.Ссылка В(&Ссылки)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВыгружаемыхПлатежныхПоручений

// Функция проверяет корректность данных для выгрузки.
//
&НаСервере
Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, Форма) Экспорт
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;
	ПеречислениеНалога          = (СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога);
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
	Плательщик = "Организация";
	Получатель = "Контрагент";
	РеквизитыПлДокЭксОсновные = "Номер,Дата,СуммаДокумента";
	РеквизитыПлДокЭксПлательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";
	РеквизитыПлДокЭксПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭксПолучатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭксПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭксБюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	СтрокаРеквизиты = "%РеквизитыПлДокЭксОсновные%,%РеквизитыПлДокЭксПлательщик%,%РеквизитыПлДокЭксПлательщикНПР%%РеквизитыПлДокЭксПолучатель%,%РеквизитыПлДокЭксПолучательНПР%";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксОсновные%", РеквизитыПлДокЭксОсновные);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщик%", РеквизитыПлДокЭксПлательщик);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПлательщикНПР%", ?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭксПлательщикНПР + ",", ""));
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучатель%", РеквизитыПлДокЭксПолучатель);
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, "%РеквизитыПлДокЭксПолучательНПР%", ?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭксПолучательНПР + ",", ""));
	
	ЭкспортНеПустые = СоздатьСоответствиеИзСтроки(СтрокаРеквизиты);
	
	Для каждого Свойство Из ЭкспортНеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента, Форма);
	КонецЕсли;
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	
КонецФункции // ПроверитьНаКорректностьИПустоеЗначениеЭкспорта()

// Процедура проверяет пустое значение данных для выгрузки.
//
&НаСервере
Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[СокрЛП(ИмяСвойства)]) Тогда
		СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 3, СтрокаЗамечание);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеЭкспорта()

// Процедура проверяет корректность номера для выгрузки.
//
&НаСервере
Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Попытка
		Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер должен оканчиваться на три цифры и не на ""000""!'"));
		КонецЕсли;
	Исключение
		ДобавитьЗамечание(СтрокаЭкспорта, 4, НСтр("ru = 'Номер должен оканчиваться на три цифры и не на ""000""!'"));
	КонецПопытки;
	
КонецПроцедуры // ПроверитьНаКорректностьНомераПриВыгрузке()

Функция ТолькоНулиВСтроке(Строка)
	
	ЗначащиеСимволы = СокрЛП(СтрЗаменить(Строка, "0", ""));
	Возврат ПустаяСтрока(ЗначащиеСимволы);
	
КонецФункции

// Функция проверяет правильность заполнения налоговых реквизитов.
//
&НаСервере
Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта, Форма)
	
	Ошибка = Новый СписокЗначений();
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя);
	П104 = СокрЛП(СтрокаЭкспорта.КодБК);
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО);
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования);
	П107 = ?(
		ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1,
		"",
		СтрокаЭкспорта.ПоказательПериода
	);
	П107 = ?(
		СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0",
		"",
		СтрокаЭкспорта.ПоказательПериода
	);
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера);
	П109 = ?(
		НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты),
		"0",
		Строка(СтрокаЭкспорта.ПоказательДаты)
	);
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа);
	УИН = СокрЛП(СтрокаЭкспорта.ИдентификаторПлатежа);
	
	Если (СтрНайти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26", П101) = 0)
	 ИЛИ (ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(
			СтрокаЭкспорта,
			3,
			НСтр("ru = 'Неверное значение поля реквизита для платежей в бюджет ""Статус составителя"" на закладке ""Бюджет"".'")
		);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	Если НЕ (УправлениеНебольшойФирмойКлиентСервер.ДопускаетсяПустойКБК(СтрокаЭкспорта.ВидПеречисленияВБюджет, СтрокаЭкспорта.КонтрагентНомерСчета, СтрокаЭкспорта.Дата)) Тогда
		Если (СтрЗаменить(П104, "0", "") = "")
			 И (СтрНайти("06, 07", П101) = 0) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Не заполнено поле ""КБК"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если ПустаяСтрока(П105)
			ИЛИ СтрЗаменить(П105, "0", "") = "" Тогда
			Если СтрокаЭкспорта.Дата >= '20140101' Тогда // ОКТМО действует в любом случае с 01.01.2014 
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКТМО"" на закладке ""Бюджет"".'")
				);
			Иначе
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'Не заполнено поле ""Код ОКАТО"" на закладке ""Бюджет"".'")
				);
			Конецесли;
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем в зависимости от статуса составителя.
	Если П101 = "08" Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Номер документа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" не следует заполнять поле ""Дата документа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") <> "" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""Тип платежа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа.
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""м"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период"" на закладке ""Бюджет"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли СтрНайти("ТР, РС, ОТ, РТ, ВУ, ПР, ПБ, ЗТ, ИН", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				Если НЕ ММ = "" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;
				Если НЕ ГГ = "" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				Если (СтрНайти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 12)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 4)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)
					 ИЛИ (ММ > 2)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (СтрНайти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)
					 ИЛИ (ГГ < 2000)
					 ИЛИ (СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
						);
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(
							СтрокаЭкспорта,
							3,
							НСтр("ru = 'Возможно, неверно указано значение в поле ""Налоговый период"" на закладке ""Бюджет"".'")
						); 
						УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(
					СтрокаЭкспорта,
					3,
					НСтр("ru = 'При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа"" на закладке ""Бюджет"".'")
				);
				УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если СтрНайти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(
						СтрокаЭкспорта,
						3,
						НСтр("ru = 'При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа"" на закладке ""Бюджет"".'")
					);
					УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрНайти("БФ, ДЕ, ПО, КТ, ИД, ИП, ТУ, БД, ИН, КП", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Основание платежа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110, "0", "") = "" Тогда
		ИначеЕсли СтрНайти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ, ШТ, ЗД", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Неверно указано значение в поле ""Тип платежа"" на закладке ""Бюджет"".'")
			);
			УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаЭкспорта.Дата >= '2016-03-28' Тогда // Дополнительные проверки по Приказу Минфина России от 23 сентября 2015 г. № 148н.
												   //  Указание ЦБ РФ от 6 ноября 2015 г. № 3844-У
		Если Лев(СтрокаЭкспорта.ИННПлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.ИННПолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3, 
				НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППлательщика, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП плательщика не должен начинаться на ""00"".'")
			);
		КонецЕсли;
		Если Лев(СтрокаЭкспорта.КПППолучателя, 2) = "00" Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'КПП получателя не должен начинаться на ""00"".'"
			));
		КонецЕсли;
		Если ЗначениеЗаполнено(СокрЛП(УИН))
			И СокрЛП(УИН) <> "0"
			И ТолькоНулиВСтроке(УИН) Тогда
			ДобавитьЗамечание(
				СтрокаЭкспорта,
				3,
				НСтр("ru = 'Все знаки уникального идентификатора начисления не могут одновременно принимать значение ""0"".'"
			));
		КонецЕсли;
	КонецЕсли;
	
	// Выводим список найденых ошибок.
	Для Ном = 0 По Ошибка.Количество() - 1 Цикл
		ТекстСообщения = Ошибка.Получить(Ном);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(Форма, ТекстСообщения);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // ПроверитьЗаполнениеНалоговыхРеквизитов()

// Процедура проверяет устанавливает готовность.
//
&НаСервере
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

// Процедура добавляет замечание.
//
&НаСервере
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры // ДобавитьЗамечание()

// Процедура добавляет строку.
//
&НаСервере
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

// Функция создает соответствие из строки.
//
&НаСервере
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

#КонецОбласти

#КонецЕсли