
#Область ПроцедурыИФункцииОбщегоНазначения

Функция ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет) Экспорт
	
	Возврат БалансовыйСчет = "20202" // "Касса кредитных организаций"
		Или БалансовыйСчет = "20208"; // "Денежные средства в банкоматах и платежных терминалах"
	
КонецФункции

Процедура ПоменятьСимволПСНаПробел(СтрокаДляОбработки)
	
	СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки, Символы.ПС, " ");
	
КонецПроцедуры

// Процедура определяет, какую информацию выводить в подвале формы, в зависимости от наличия предупреждающих знаков.
//
&НаКлиенте
Процедура УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте()
	
	Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница <> Элементы.СтраницаВсеДанныеГотовыКЗагрузке Тогда
		Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте() Тогда
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
		Иначе
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполним исходные значения.
// В дальнешем будем сохранять комбинацию выбранных пользователем значений.
// Сохранение будет выполняться только в том случае, если пользователь действительно поменял значения.
// Сохраненные значения будут использоваться для подстановки при загрузке значений.
&НаСервере
Процедура ЗаполнитьИсходныеЗначенияВСТроке(СтрокаДокумента)

	СтрокаДокумента.СтатьяДДСИсходноеЗначение = СтрокаДокумента.СтатьяДДС;
	СтрокаДокумента.ВидОперацииИсходноеЗначение = СтрокаДокумента.ВидОперации;
	СтрокаДокумента.КорреспонденцияИсходноеЗначение = СтрокаДокумента.Корреспонденция;
	СтрокаДокумента.ДоговорИсходноеЗначение = СтрокаДокумента.Договор;
	
КонецПроцедуры

// Функция возвращает Истина, если нет строк с предупреждающим знаков в колонке "НомерКартинки".
//
&НаКлиенте
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте()
	
	Для каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает Истина, если нет строк с предупреждающим знаков в колонке "НомерКартинки".
//
&НаСервере
Функция НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере()
	
	Для каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.НомерКартинки = 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений.
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
&НаКлиенте
Функция СтрокаТаблицыЗагрузкаВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из ИменаКолонок Цикл
		Структура.Вставить(Колонка, СтрокаТаблицыЗначений[Колонка]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Функция переводит вид оплаты из строкового типа в числовой.
//
&НаСервере
Функция ВидОплатыЧислом(Знач ВидОплатыИзФайла)
	
	Если ПустаяСтрока(ВидОплатыИзФайла) Тогда
		ВидОплаты = 1;
	Иначе
		Попытка
			ВидОплаты = Число(ВидОплатыИзФайла);
		Исключение
			ВидОплаты = 1;
		КонецПопытки;
	КонецЕсли;
	
	Возврат ВидОплаты;
	
КонецФункции

// Функция возвращает первые 5 символов из номера счета.
//
&НаСервере
Функция БалансовыйСчет(НомерСчета) Экспорт
	
	Возврат Лев(НомерСчета, 5);
	
КонецФункции

// Функция определяет является ли платеж комиссией банка.
//
&НаСервере
Функция ЭтоКомиссияБанка(Знач СтрокаДокумента, Знач Исходящий)
	
	СчетКонтрагентаДляПоиска = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
	ВидОплаты = ВидОплатыЧислом(СтрокаДокумента.ВидОплаты);
	Операция  = ВРег(СтрЗаменить(СтрокаДокумента.Операция, " ", ""));
	ЭтоКомиссияБанка = СтрокаДокумента.ПолучательБИК = СтрокаДокумента.ПлательщикБИК
		И (Операция = "МЕМОРИАЛЬНЫЙОРДЕР" ИЛИ Операция = "БАНКОВСКИЙОРДЕР" ИЛИ Операция = "ВНУТРЕННИЙПЕРЕВОД")
		ИЛИ ВидОплаты > 1 И ВидОплаты <> 3;
	
	// последняя проверка по корр.счету
	Если НЕ ЭтоКомиссияБанка Тогда
		БалансовыйСчет = БалансовыйСчет(СчетКонтрагентаДляПоиска);
		Если БалансовыйСчет    = "70601" // доходы (банка)
			ИЛИ БалансовыйСчет = "61301" // Доходы (банка) будущих периодов по кредитным операциям
			ИЛИ БалансовыйСчет = "61304" // Доходы (банка) будущих периодов по другим операциям
		Тогда
			ЭтоКомиссияБанка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоКомиссияБанка;
	
КонецФункции

// Функция проверяет правильность заполнения реквизитов формы.
//
&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитовФормы()
	
	РезультатПроверкиОк = Истина;
	
	// Проверка заполненности реквизитов.
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		ТекстСообщения = НСтр("ru = 'В настройках не указана кодировка (кнопка ""Еще"" - ""Настройка"")!'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "Кодировка", РезультатПроверкиОк);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		ТекстСообщения = НСтр("ru = 'В настройках не указана версия формата обмена (кнопка ""Еще"" - ""Настройка"")!'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения, , , "ВерсияФормата", РезультатПроверкиОк);
	КонецЕсли;
	
	Возврат РезультатПроверкиОк;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовФормы()

// Процедура проверяет устанавливает готовность.
//
&НаСервере
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ЗначениеЗаполнено(ТекущаяГотовность)
	   И ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяГотовность) Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры // УстановитьГотовность()

&НаСервере
Процедура УстановитьНомерКартинкиДляПодвалаНаСервере(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерКартинкиДляПодвалаНаКлиенте(ДанныеСтроки)
	
	ДанныеСтроки.НомерКартинкиДляПодвала = ?(ДанныеСтроки.НомерКартинки = -1, 0, ДанныеСтроки.НомерКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, ПоказыватьЗнакПредупреждения)
	
	//ДанныеСтроки.НомерКартинки = ?(ПоказыватьЗнакПредупреждения, 1, ?(ДанныеСтроки.НомерКартинки = 1 ИЛИ ДанныеСтроки.НомерКартинки = 5, 5, -1));
	ДанныеСтроки.НомерКартинки = ?(ПоказыватьЗнакПредупреждения, 1, -1);
	УстановитьНомерКартинкиДляПодвалаНаКлиенте(ДанныеСтроки);
	Элементы.ЗагрузкаНомерКартинкиДляПодвала.Обновить();
	
КонецПроцедуры

// Процедура добавляет замечание.
//
&НаСервере
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания, ВНачало = Ложь)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания, ВНачало);
	СтруктураДокумента.НомерКартинки = 1;
	УстановитьНомерКартинкиДляПодвалаНаСервере(СтруктураДокумента);
	
КонецПроцедуры // ДобавитьЗамечание()

// Процедура добавляет строку.
//
&НаСервере
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока, ВНачало = Ложь)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	ИначеЕсли ВНачало Тогда
		Буфер = НоваяСтрока + Символы.ПС + Буфер;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьВСтроку()

// Функция создает соответствие из строки.
//
&НаСервере
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = СтрНайти(СтрокаЧерезЗапятую, ",");
	КонецЦикла;
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции // СоздатьСоответствиеИзСтроки()

// Процедура загружает данные из файла.
//
&НаСервере
Функция ЗагрузитьДанныеИзФайла()
	
	РезультатЗагрузкиСтруктура = РеквизитФормыВЗначение("Объект").Загрузить(ИмпортЗаголовок, ТаблицаРезультата, ТаблицаПомеченныхНаУдалениеКакДубль);
	Возврат РезультатЗагрузкиСтруктура;
	
КонецФункции // ЗагрузитьДанныеИзФайла()

// Процедура устанавливает флаги.
//
&НаКлиенте
Процедура УстановитьФлаги(Таблица, Поле, ЗначениеФлага, ЗаполнятьСуммы)
	
	Для каждого Строка Из Таблица Цикл
		Строка[Поле] = ЗначениеФлага;
		Если ЗаполнятьСуммы Тогда
			ЗаполнитьСуммыВыделеныхНаКлиенте(Строка)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлаги()

// Функция получает дату из строки.
//
&НаСервере
Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	ПозицияТочки = СтрНайти(Буфер, ".");
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru = 'Неверный формат строки с датой'");
	КонецЕсли;
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
	Исключение
		Возврат НСтр("ru = 'Не удалось преобразовать строку в дату'");
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции // ПолучитьДатуИзСтроки()

// Функция определяет является ли организация плательщиком.
//
&НаСервере
Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если ВидДокумента = "ПоступлениеНаСчет" Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОрганизацияПлательщик()

// Функция находит договор контрагента.
//
&НаСервере
Функция НайтиДоговор(ВладелецДоговора, ОрганизацияДоговора = Неопределено, СписокВидовДоговора = Неопределено)
	
	СтруктураВозврат = Новый Структура("Договор, КоличествоДоговоров", НСтр("ru = 'Не найден договор по умолчанию'"), 0);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ДоговорПоУмолчанию
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра =
	"	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора"
  + ?(ОрганизацияДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора", "") 
  +	"	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
  + ?(СписокВидовДоговора <> Неопределено, "
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)", "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		СтруктураВозврат.КоличествоДоговоров = Выборка.Количество();
		
		Выборка.Следующий();
		СтруктураВозврат.Договор = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции // НайтиДоговор()

// Функция формирует соответствие загружаемых.
//
&НаСервере
Функция СформироватьСоответствиеЗагружаемых()
	
	ИмпортЗагружаемые = СоздатьСоответствиеИзСтроки(
		ВРег("Номер,Дата,Сумма,ВидПлатежа,ВидОплаты,КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,ДатаСписано,ДатаПоступило,"
		   + "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,Плательщик2,Плательщик3,Плательщик4,"
		   + "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,Получатель2,Получатель3,Получатель4,"
		   + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
		   + "НазначениеПлатежа,НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
		   + "Очередность,СрокПлатежа,УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок,Код"
		)
	);
	
	Возврат ИмпортЗагружаемые;
	
КонецФункции // СформироватьСоответствиеЗагружаемых()

// Процедура формирует соответствие непустых при загрузке.
//
&НаСервере
Процедура СформироватьСоответствияНеПустыхПриИмпорте(ИмпортНеПустые, ИмпортНеПустыеПлатежноеПоручение, ИмпортНеПустыеПлатежноеПоручениеБюджет)
	
	ИмпортНеПустыеПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН"
	);
	
	// По наличию статуса составителя определяется что платеж - налоговый.
	ИмпортНеПустыеПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
		"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН,"
	  + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,"
	  + "ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа"
	);
	
	ИмпортНеПустые = Новый Массив;
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручение);
	ИмпортНеПустые.Добавить(ИмпортНеПустыеПлатежноеПоручениеБюджет);
	
КонецПроцедуры // СформироватьСоответствияНеПустыхПриИмпорте()

// Функция получает строку импорта.
//
&НаСервере
Функция ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора)
	
	Буфер = "";
	Пока ПустаяСтрока(Буфер)
	 ИЛИ Лев(Буфер, 2) = "//" Цикл
		Если ИмпортТекущаяСтрока > ИмпортКоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
		Буфер = СокрЛП(СтрПолучитьСтроку(ИмпортТекстДляРазбора, ИмпортТекущаяСтрока));
		ИмпортТекущаяСтрока = ИмпортТекущаяСтрока + 1;
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции // ПолучитьСтрокуИмпорта()

// Функция разбирает теговую строку.
//
&НаСервере
Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРег(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции // РазобратьТеговуюСтроку()

// Функция загружает секцию документа
//
&НаСервере
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ИмпортЗагружаемые)
	
	ТекстДокумента = "";
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		Если ТекстДокумента <> "" Тогда
			ТекстДокумента = ТекстДокумента + Символы.ПС;
		КонецЕсли;
		ТекстДокумента = ТекстДокумента + СтрокаРазбора;
		
		Значение = "";
		Тег = "";
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			Если ИмпортЗагружаемые[Тег] = Истина Тогда
				СтрокаДокумента[Тег] = Значение;
			Иначе
				
				// Неправиьный реквизит заголовка.
				ТекстСообщения = НСтр(
					"ru = 'Неверный реквизит платежного документа, строка %Импорт%: %СтрокаРазбора%'"
				);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
				Возврат Ложь;
				
			КонецЕсли;
		Иначе
			
			// Неправиьный реквизит заголовка.
			ТекстСообщения = НСтр(
				"ru = 'Нарушена структура платежного документа, строка %Импорт%: %СтрокаРазбора%'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	КонецЦикла;
	СтрокаДокумента.ТекстДокумента = ТекстДокумента;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента()

// Функция загружает секции расчетного счета.
//
&НаСервере
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ТегиРасчетногоСчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
	Значение = "";
	Тег = "";
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
		Иначе
			// Неправиьный реквизит заголовка.
			ТекстСообщения = НСтр(
				"ru = 'Неверный реквизит в секции описания расчетного счета, строка %Импорт%: %СтрокаРазбора%'"
			);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаРазбора%", СтрокаРазбора);
			УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		СтрокаРазбора = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
		Значение = "";
		Тег = "";
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗагрузитьСекциюРасчСчета()

// Процедура проверяет на пустое значение при импорте.
//
&НаСервере
Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства, ИмпортНеПустые)
	
	Если ИмпортНеПустые[0][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			СтрокаЗамечание = НСтр("ru = 'Не заполнено ""%ИмяСвойства%""!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяСвойства%", ИмяСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, СтрокаЗамечание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаПустоеЗначениеИмпорта()

// Функция загружает заголовок файла обмена.
//
&НаСервере
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, ТегиЗаголовка, ИмпортЗаголовок, ИмпортТекущаяСтрока)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	Если ТегиЗаголовка[Тег] = Истина Тогда
		ИмпортЗаголовок[Тег] = Значение;
	Иначе
		
		// Неправиьный реквизит заголовка.
		ТекстСообщения = НСтр("ru = 'Неверный реквизит заголовка, строка %Импорт%: %ТекстСтрокиЗаголовка%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстСтрокиЗаголовка%", ТекстСтрокиЗаголовка);
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
		
	КонецЕсли;
	
КонецФункции // ЗагрузитьСтрокуЗаголовка()

// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
&НаСервереБезКонтекста
Функция ЕстьНеЦифрыНаСервере(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

// Функция проверяет наличие в строке только цифр.
//
// Параметры
//  СтрокаПроверки - Строка для проверки только цифр
//
// Возвращаемое значение:
//   Булево
//
&НаКлиенте
Функция ЕстьНеЦифрыНаКлиенте(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	Для Сч = 1 По Длина Цикл
		Если СтрНайти("0123456789", Сред(СтрокаПроверки, Сч, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьНеЦифры()

&НаСервереБезКонтекста
Функция ПолучитьСтатистикуПоКонтрагенту(ВариантПоиска, Контрагент, БанковскийСчетКонтрагента, БанковскийСчетОрганизации, Исходящий, ДоговорВЗаказеСчете)

	// Реализованный вариант (по шагам):
	// 1. Найдем договор, который встречается не менее чем в 50% случаев.
	// 2. Найдём для этого договора вид операции, который встречается не менее чем в 50% случаев.
	// 3. Найдём для этого вида операции статью ДДС, которая встречается не менее чем в 50% случаев.
	// 4. Найдём для этой статьи ДДС корреспондирующий счет учета, который встречается не менее чем в 50% случаев.
	// Альтернативный вариант, это найти комбинацию Договор + ВидОперации + СтатьяДДС + Корреспонденция, которая встречается не менее чем в 50% случаев.
	
	СтруктураРеквизитов = Новый Структура("Договор, ВидОперации, СтатьяДДС, Корреспонденция", 
		Неопределено, Неопределено, Неопределено, Неопределено);
		
	Если ВариантПоиска = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Документ КАК Документ,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	ИСТИНА КАК ДетальныеЗаписи,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом КАК ДатаЗагрузкиЧислом
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	КОЛИЧЕСТВО(Документ),
			|	МАКСИМУМ(ДатаЗагрузкиЧислом)
			|ПО
			|	ОБЩИЕ,
			|	Договор,
			|	ВидОперации,
			|	СтатьяДДС,
			|	Корреспонденция
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий(); // Общий итог
			
			ВыборкаДоговор = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаДоговор.Следующий() Тогда
				
				ПриоритетВГруппе = ВыборкаДоговор.Документ / ВыборкаОбщийИтог.Документ * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					
					СтруктураРеквизитов.Вставить("Договор", ВыборкаДоговор.Договор);
					
					ВыборкаВидОперации = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
					Если ВыборкаВидОперации.Следующий() Тогда
						
						ПриоритетВГруппе = ВыборкаВидОперации.Документ / ВыборкаДоговор.Документ * 100;
						Если ПриоритетВГруппе >= 50 Тогда
					
							СтруктураРеквизитов.Вставить("ВидОперации", ВыборкаВидОперации.ВидОперации);
							ВыборкаСтатьяДДС = ВыборкаВидОперации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
							Если ВыборкаСтатьяДДС.Следующий() Тогда
								
								ПриоритетВГруппе = ВыборкаСтатьяДДС.Документ / ВыборкаВидОперации.Документ * 100;
								Если ПриоритетВГруппе >= 50 Тогда
					
									СтруктураРеквизитов.Вставить("СтатьяДДС", ВыборкаСтатьяДДС.СтатьяДДС);
									ВыборкаКорреспонденция = ВыборкаСтатьяДДС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
									Если ВыборкаКорреспонденция.Следующий() Тогда
										
										ПриоритетВГруппе = ВыборкаКорреспонденция.Документ / ВыборкаСтатьяДДС.Документ * 100;
										Если ПриоритетВГруппе >= 50 Тогда
											СтруктураРеквизитов.Вставить("Корреспонденция", ВыборкаКорреспонденция.Корреспонденция);
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли ВариантПоиска = 2 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор КАК Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации КАК ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС КАК СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция КАК Корреспонденция,
			|	МАКСИМУМ(ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ДатаЗагрузкиЧислом) КАК ДатаЗагрузкиЧислом,
			|	СУММА(1) КАК КоличествоЗаписей
			|ИЗ
			|	РегистрСведений.ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка КАК ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка
			|ГДЕ
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Контрагент = &Контрагент
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетОрганизации = &БанковскийСчетОрганизации
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.БанковскийСчетКонтрагента = &БанковскийСчетКонтрагента
			|	И ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Исходящий = &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор = &ДоговорВЗаказеСчете)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.ВидОперации,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.СтатьяДДС,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Договор,
			|	ИсторияЗначенийРеквизитовПриЗагрузкеИзКлиентаБанка.Корреспонденция
			|
			|УПОРЯДОЧИТЬ ПО
			|	КоличествоЗаписей УБЫВ,
			|	ДатаЗагрузкиЧислом УБЫВ
			|ИТОГИ
			|	СУММА(КоличествоЗаписей)
			|ПО
			|	ОБЩИЕ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", БанковскийСчетОрганизации);
		Запрос.УстановитьПараметр("Исходящий", Исходящий);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ВыборкаОбщийИтог.Следующий();		// Общий итог
			
			// Вставить обработку выборки ВыборкаОбщийИтог
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ПриоритетВГруппе = ВыборкаДетальныеЗаписи.КоличествоЗаписей / ВыборкаОбщийИтог.КоличествоЗаписей * 100;
				Если ПриоритетВГруппе >= 50 Тогда
					ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции // ПолучитьСтатистикуПоКонтрагенту()

&НаСервере
Функция ОпределитьПлатежноеПоручение(СтрокаДокумента)
	
	НашлиПП = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручение,
		|	ПлатежноеПоручение.Номер КАК Номер,
		|	ПлатежноеПоручение.Дата,
		|	ПлатежноеПоручение.ДокументОснование,
		|	ПлатежноеПоручение.ДокументОснование.Договор КАК Договор,
		|	ПлатежноеПоручение.ВидОперации
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	ПлатежноеПоручение.СуммаДокумента = &СуммаДокумента
		|	И ПлатежноеПоручение.Дата <= &ДатаОкончания
		|	И НЕ ПлатежноеПоручение.Оплачено
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления
		|	И ПлатежноеПоручение.Контрагент = &Контрагент
		|	И ПлатежноеПоручение.Номер ПОДОБНО ""%"" + &НомерДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлатежноеПоручение УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
	
		
	//ДатаНачала = НачалоДня(СтрокаДокумента.ДатаДок) - 7 * 24 * 60 * 60;
	ДатаОкончания = КонецДня(СтрокаДокумента.ДатаДок);
		
	//Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
	Запрос.УстановитьПараметр("СуммаДокумента", СтрокаДокумента.СуммаДокумента);
	Запрос.УстановитьПараметр("НомерДок", СтрокаДокумента.НомерДок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПП = РезультатЗапроса.Выбрать();
	
	ДокументНайденныйПоНомеру = Неопределено;
	ДокументОснованиеПП = Неопределено;
	ДоговорДокОснПП = Неопределено;
	ВидОперацииПП = Неопределено;
	
	Пока ВыборкаПП.Следующий() Цикл
		
		// Сценарий, когда дата документа > 2011.01.01.
		НомерДляПоиска = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаПП.Номер, Истина, Истина);
		ДатаДляПоиска = ВыборкаПП.Дата;
		
		Если НомерДляПоиска = СокрЛП(СтрокаДокумента.НомерДок) Тогда
			
			ДокументНайденныйПоНомеру = ВыборкаПП.ПлатежноеПоручение;
			ДокументОснованиеПП = ВыборкаПП.ДокументОснование;
			ДоговорДокОснПП = ВыборкаПП.Договор;
			ВидОперацииПП = ВыборкаПП.ВидОперации;
			
			НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
			
			Если Год(ДатаДляПоиска) = Год(СтрокаДокумента.ДатаДок) Тогда // Поищем год.
				
				СтрокаДокумента.ПлатежноеПоручение = ВыборкаПП.ПлатежноеПоручение;
				НашлиПП = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиПП И ДокументНайденныйПоНомеру <> Неопределено Тогда
		СтрокаДокумента.ПлатежноеПоручение = ДокументНайденныйПоНомеру;
		НашлиПП = Истина;
	КонецЕсли;
	
	СтруктураВозврат = Новый Структура("НашлиПП, ДокументОснованиеПП, Договор, ВидОперацииПП", НашлиПП, ДокументОснованиеПП, ДоговорДокОснПП, ВидОперацииПП);
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Функция ищет документы расчетов, по которым не оплаченная сумма = сумме документа, которая указана в файле загрузки.
// Если сумма совпадает, то выполняется поиск номера заказа (счета) и года в назначении платежа.
// Если номер и год найдены, то заказ подставляется в поле "Заказ".
//
&НаСервере
Функция ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, ДоговорВЗаказеСчете = Неопределено)
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		И СтрокаДокумента.Контрагент.ВестиРасчетыПоДокументам
		Тогда
		
		// Для сценария, когда заполнен заказ, в результат запроса не попадают те документы, в которых заказ заполнен и он не равен заказу в параметре &Заказ.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток = &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток = &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РасчетыСПокупателямиОстатки.Документ КАК ДокументРасчетов,
			|	РасчетыСПокупателямиОстатки.СуммаОстаток,
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток,
			|	РасчетыСПокупателямиОстатки.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	РасчетыСПокупателямиОстатки.Заказ,
			|	РасчетыСПокупателямиОстатки.Договор,
			|	РасчетыСПокупателямиОстатки.Документ.Номер КАК Номер,
			|	РасчетыСПокупателямиОстатки.Документ.Дата КАК Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Приоритет
			|ИЗ
			|	РегистрНакопления.РасчетыСПокупателями.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПокупателямиОстатки
			|ГДЕ
			|	РасчетыСПокупателямиОстатки.СуммаВалОстаток > &Сумма
			|	И НЕ &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПокупателямиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
			|			ИЛИ РасчетыСПокупателямиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РасчетыСПоставщикамиОстатки.Документ,
			|	РасчетыСПоставщикамиОстатки.СуммаОстаток,
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток,
			|	РасчетыСПоставщикамиОстатки.Документ.НомерВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Документ.ДатаВходящегоДокумента,
			|	РасчетыСПоставщикамиОстатки.Заказ,
			|	РасчетыСПоставщикамиОстатки.Договор,
			|	РасчетыСПоставщикамиОстатки.Документ.Номер,
			|	РасчетыСПоставщикамиОстатки.Документ.Дата,
			|	ВЫБОР
			|		КОГДА &ЗаказЗаполнен
			|				И РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|			,
			|			Организация = &Организация
			|				И Документ.Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОстатки
			|ГДЕ
			|	РасчетыСПоставщикамиОстатки.СуммаВалОстаток > &Сумма
			|	И &Исходящий
			|	И (НЕ &ОтборПоДоговору
			|			ИЛИ РасчетыСПоставщикамиОстатки.Договор = &ДоговорВЗаказеСчете)
			|	И (НЕ &ЗаказЗаполнен
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = &Заказ
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = NULL
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
			|			ИЛИ РасчетыСПоставщикамиОстатки.Заказ = НЕОПРЕДЕЛЕНО)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет,
			|	ДокументРасчетов УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
		Запрос.УстановитьПараметр("Заказ", СтрокаДокумента.Заказ);
		Запрос.УстановитьПараметр("ЗаказЗаполнен", ЗначениеЗаполнено(СтрокаДокумента.Заказ));
		Запрос.УстановитьПараметр("ДоговорВЗаказеСчете", ДоговорВЗаказеСчете);
		Запрос.УстановитьПараметр("ОтборПоДоговору", ЗначениеЗаполнено(ДоговорВЗаказеСчете));
		
		//СтруктураКурсВалюта = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаДокумента.ДатаДок, Новый Структура("Валюта", БанковскийСчетВалюта));
		//Запрос.УстановитьПараметр("КурсОплаты", ?(СтруктураКурсВалюта.Курс = 0, 1, СтруктураКурсВалюта.Курс));
		//Запрос.УстановитьПараметр("КратностьОплаты", ?(СтруктураКурсВалюта.Кратность = 0, 1, СтруктураКурсВалюта.Кратность));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			ДокументНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаДокументовРасчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаДокументовРасчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаДокументовРасчетов.Дата;
				КонецЕсли;
				
				Если //СтрНайти(СтрокаДокумента.НазначениеПлатежа, ВыборкаДокументовРасчетов.Номер) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 ИЛИ
					(ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
					
					ДокументНайденныйПоНомеру = ВыборкаДокументовРасчетов.ДокументРасчетов;
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
						СтрокаДокумента.ПризнакАванса = Ложь;
						
						ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
						
						Возврат ДоговорВДокументе;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ДокументНайденныйПоНомеру <> Неопределено Тогда
				СтрокаДокумента.ДокументРасчетов = ДокументНайденныйПоНомеру;
				СтрокаДокумента.ПризнакАванса = Ложь;
				
				ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
				
				Возврат ДоговорВДокументе;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счёт.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		РезультатЗапроса = МассивРезультатов[1];
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДокументовРасчетов = РезультатЗапроса.Выбрать();
			Если ВыборкаДокументовРасчетов.Количество() = 1 Тогда
				ВыборкаДокументовРасчетов.Следующий();
				
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументовРасчетов.Номер, Истина, Истина);
				Если ЗначениеЗаполнено(ВыборкаДокументовРасчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаДокументовРасчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) ИЛИ
					(ЗначениеЗаполнено(СтрокаДокумента.Заказ) И ВыборкаДокументовРасчетов.Приоритет = 1) Тогда
				
					СтрокаДокумента.ДокументРасчетов = ВыборкаДокументовРасчетов.ДокументРасчетов;
					СтрокаДокумента.ПризнакАванса = Ложь;
					
					ДоговорВДокументе = ВыборкаДокументовРасчетов.Договор;
					
					Возврат ДоговорВДокументе;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

// Функция ищет заказы (счета), по которым не оплаченная сумма = сумме документа, которая указана в файле загрузки.
// Если сумма совпадает, то выполняется поиск номера заказа (счета) и года в назначении платежа.
// Если номер и год найдены, то заказ подставляется в поле "Заказ".
//
&НаСервере
Функция ОпределитьЗаказИСчетНаСервере(СтрокаДокумента)
	
	НашлиЗаказ = Ложь;
	НашлиСчет = Ложь;
	
	ДоговорЗаказа = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ДоговорСчета = ДоговорЗаказа;
	
	Если (ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
		И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
		//И (СтрокаДокумента.Контрагент.ВестиРасчетыПоЗаказам ИЛИ СтрокаДокумента.Контрагент.ВестиУчетОплатыПоСчетам) 
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот = &Сумма
			|	И ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату КАК Документ,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот КАК СуммаДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот + ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК Оплачено,
			|	ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот КАК НеОплачено,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Дата КАК Дата,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Номер КАК Номер,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
			|	ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|			,
			|			,
			|			,
			|			Организация = &Организация
			|				И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|ГДЕ
			|	ВЫБОР
			|			КОГДА ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.ЗаказПоставщику)
			|					ИЛИ ТИПЗНАЧЕНИЯ(ОплатаСчетовИЗаказовОбороты.СчетНаОплату) = ТИП(Документ.СчетНаОплатуПоставщика)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ = &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ОплатаСчетовИЗаказовОбороты.СуммаОборот - ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот - ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот) * ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Курс * &КратностьОплаты / ОплатаСчетовИЗаказовОбороты.СчетНаОплату.Кратность * &КурсОплаты > &Сумма
			|		КОНЕЦ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПокупателя.Ссылка,
			|	ЗаказПокупателя.СуммаДокумента,
			|	ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) + ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0),
			|	ЗаказПокупателя.Дата,
			|	ЗаказПокупателя.Номер,
			|	"""",
			|	"""",
			|	ЗаказПокупателя.Договор
			|ИЗ
			|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОплатаСчетовИЗаказов.Обороты(
			|				,
			|				,
			|				,
			|				Организация = &Организация
			|					И СчетНаОплату.Контрагент = &Контрагент) КАК ОплатаСчетовИЗаказовОбороты
			|		ПО (ОплатаСчетовИЗаказовОбороты.СчетНаОплату = ЗаказПокупателя.Ссылка)
			|			И (ОплатаСчетовИЗаказовОбороты.СуммаОборот = 0)
			|ГДЕ
			|	ЗаказПокупателя.Проведен
			|	И ЗаказПокупателя.Контрагент = &Контрагент
			|	И НЕ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
			|	И НЕ &Исходящий
			|	И ВЫБОР
			|			КОГДА ЕСТЬNULL(ЗаказПокупателя.Кратность, 0) = 0
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ (ЗаказПокупателя.СуммаДокумента - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаАвансаОборот, 0) - ЕСТЬNULL(ОплатаСчетовИЗаказовОбороты.СуммаОплатыОборот, 0)) * ЗаказПокупателя.Курс * &КратностьОплаты / (ЗаказПокупателя.Кратность * &КурсОплаты) > &Сумма
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Документ УБЫВ
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("Контрагент", СтрокаДокумента.Контрагент);
		Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
		Запрос.УстановитьПараметр("Сумма", СтрокаДокумента.СуммаДокумента);
		Запрос.УстановитьПараметр("Исходящий", СтрокаДокумента.Исходящий);
	
		СтруктураКурсВалюта = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтрокаДокумента.ДатаДок, Новый Структура("Валюта", БанковскийСчетВалюта));
		Запрос.УстановитьПараметр("КурсОплаты", ?(СтруктураКурсВалюта.Курс = 0, 1, СтруктураКурсВалюта.Курс));
		Запрос.УстановитьПараметр("КратностьОплаты", ?(СтруктураКурсВалюта.Кратность = 0, 1, СтруктураКурсВалюта.Кратность));
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Сначала обработаем документы, которые точно совпадают по сумме.
		РезультатЗапроса = МассивРезультатов[0];
		Если Не РезультатЗапроса.Пустой() Тогда
		
			ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
			
			// Поищем номер в основании платежа.
			// Нужно учесть номер и год документа, а также вид документа и флаги учета взаиморасчетов, которые установлены в договоре.
			
			ДоговорЗаказаНайденныйПоНомеру = Неопределено;
			ДоговорСчетаНайденныйПоНомеру = Неопределено;
			ЗаказНайденныйПоНомеру = Неопределено;
			СчетНайденныйПоНомеру = Неопределено;
			
			Пока ВыборкаЗаказовИСчетов.Следующий() Цикл
				// Сценарий, когда дата документа > 2011.01.01.
				НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
					(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
					ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
					НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
				Иначе
					НомерДляПоиска = НомерНаПечать;
				КонецЕсли;
				
				Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
					(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
					ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента) Тогда
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.ДатаВходящегоДокумента;
				Иначе
					ДатаДляПоиска = ВыборкаЗаказовИСчетов.Дата;
				КонецЕсли;
				
				Если //СтрНайти(СтрокаДокумента.НазначениеПлатежа, ВыборкаЗаказовИСчетов.Номер) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0 Тогда
					
					НомерГода = СтрЗаменить(Год(ДатаДляПоиска), Символы.НПП, "");
					
					Если СтрНайти(СтрокаДокумента.НазначениеПлатежа, НомерГода) > 0 Тогда // Поищем год.
						
						Если Не НашлиЗаказ И
							//СтрокаДокумента.Контрагент.ВестиРасчетыПоЗаказам И // Такую проверку лучше не делать, т.к. можно заказ использовать
							// для заполнения информации об основании.
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						ИначеЕсли Не НашлиСчет И
							//СтрокаДокумента.Контрагент.ВестиУчетОплатыПоСчетам И // Такую проверку лучше не делать, т.к. если счета есть, то
							// будет нагляднее, если будем их выводить.
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						Если НашлиЗаказ И НашлиСчет Тогда
							Прервать;
						КонецЕсли;
						
					Иначе
						
						Если (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
							ЗаказНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						ИначеЕсли (ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплату")) ИЛИ
							(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")) Тогда
							СчетНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчетаНайденныйПоНомеру = ВыборкаЗаказовИСчетов.Договор;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НашлиЗаказ И Не НашлиСчет Тогда
				Если ЗаказНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.Заказ = ЗаказНайденныйПоНомеру;
					ДоговорЗаказа = ДоговорЗаказаНайденныйПоНомеру;
					НашлиЗаказ = Истина;
				ИначеЕсли СчетНайденныйПоНомеру <> Неопределено Тогда
					СтрокаДокумента.СчетНаОплату = СчетНайденныйПоНомеру;
					ДоговорСчета = ДоговорСчетаНайденныйПоНомеру;
					НашлиСчет = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Во вторую очередь обработаем ситуацию, когда с клиентом оформлен только один не оплаченный заказ или счёт.
		// Если сумма этого документа > суммы платежа, то выберем этот документ.
		// Документ будет выбран, если в назначении нет информации о заказе или счете.
		Если Не НашлиЗаказ И Не НашлиСчет Тогда
			
			РезультатЗапроса = МассивРезультатов[1];
			Если Не РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаказовИСчетов = РезультатЗапроса.Выбрать();
				Если ВыборкаЗаказовИСчетов.Количество() = 1 Тогда
					ВыборкаЗаказовИСчетов.Следующий();
					
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаЗаказовИСчетов.Номер, Истина, Истина);
					Если ((ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику")) ИЛИ
						(ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"))) И
						ЗначениеЗаполнено(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента) Тогда
						НомерДляПоиска = СокрЛП(ВыборкаЗаказовИСчетов.НомерВходящегоДокумента);
					Иначе
						НомерДляПоиска = НомерНаПечать;
					КонецЕсли;
					
					//СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Заказ'")) = 0 И
					//СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Счет'")) = 0 Тогда
					Если (СтрНайти(СтрокаДокумента.НазначениеПлатежа, "№"+НомерДляПоиска) > 0 ИЛИ
					СтрНайти(СтрокаДокумента.НазначениеПлатежа, " "+НомерДляПоиска) > 0) Тогда
					
						Если ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ
							ТипЗнч(ВыборкаЗаказовИСчетов.Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
							СтрокаДокумента.Заказ = ВыборкаЗаказовИСчетов.Документ;
							ДоговорЗаказа = ВыборкаЗаказовИСчетов.Договор;
							НашлиЗаказ = Истина;
						Иначе // Это счет на оплату или счет на оплату от поставщика.
							СтрокаДокумента.СчетНаОплату = ВыборкаЗаказовИСчетов.Документ;
							ДоговорСчета = ВыборкаЗаказовИСчетов.Договор;
							НашлиСчет = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиСчет И НЕ НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.Заказ) Тогда
		
		Если (СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
			ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику"))
			ИЛИ
			(НЕ СтрокаДокумента.Исходящий И ТипЗнч(СтрокаДокумента.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплату") И
			ТипЗнч(СтрокаДокумента.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя"))
			Тогда
			
			СтрокаДокумента.Заказ = СтрокаДокумента.СчетНаОплату.ДокументОснование;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НашлиСчет И НашлиЗаказ И НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетНаОплату) Тогда
		
		Если ТипЗнч(СтрокаДокумента.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплату.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплату КАК СчетНаОплату
			|ГДЕ
			|	СчетНаОплату.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплату.ПометкаУдаления";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетНаОплатуПоставщика.Ссылка КАК СчетНаОплату
			|ИЗ
			|	Документ.СчетНаОплатуПоставщика КАК СчетНаОплатуПоставщика
			|ГДЕ
			|	СчетНаОплатуПоставщика.ДокументОснование = &ДокументОснование
			|	И НЕ СчетНаОплатуПоставщика.ПометкаУдаления";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДокументОснование", СтрокаДокумента.Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 1
			И Выборка.Следующий() Тогда
			
			СтрокаДокумента.СчетНаОплату = Выборка.СчетНаОплату;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НашлиЗаказ Тогда
		Возврат ДоговорЗаказа;
	ИначеЕсли НашлиСчет Тогда
		Возврат ДоговорСчета;
	Иначе
		Возврат ДоговорЗаказа;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента)
	
	СтруктураЗначенийИзСоответствия = Новый Структура("СоответствиеНайдено, ВидОперацииПоступленияНаСчет, ВидОперацииРасходаСоСчета, СтатьяДДС, Корреспонденция", Ложь);
	
	Если ИскатьВСправочникеСоответствий Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииПоступленияНаСчет,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.ВидОперацииРасходаСоСчета,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.СтатьяДДС,
			|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Корреспонденция,
			|	ВЫРАЗИТЬ(СоответствияНазначенийПлатежаИРеквизитовПлатежа.ФразаДляПоискаВНазначенииПлатежа КАК СТРОКА(1024)) КАК Фраза
			|ИЗ
			|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
			|ГДЕ
			|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СтрНайти(ВРег(СтрокаДокумента.НазначениеПлатежа), ВРег(Выборка.Фраза)) > 0 Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураЗначенийИзСоответствия, Выборка);
				СтруктураЗначенийИзСоответствия.СоответствиеНайдено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураЗначенийИзСоответствия;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия)
		
	Если (СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета.Пустая()) ИЛИ
		(Не СтрокаДокумента.Исходящий И Не СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет.Пустая()) Тогда
		
		Если Не СтруктураЗначенийИзСоответствия.СтатьяДДС.Пустая() Тогда
			СтрокаДокумента.СтатьяДДС = СтруктураЗначенийИзСоответствия.СтатьяДДС;
		КонецЕсли;
		Если Не СтруктураЗначенийИзСоответствия.Корреспонденция.Пустая() Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
		Возврат ?(СтрокаДокумента.Исходящий, СтруктураЗначенийИзСоответствия.ВидОперацииРасходаСоСчета, СтруктураЗначенийИзСоответствия.ВидОперацииПоступленияНаСчет);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия)
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Результат = ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
		
	ЕстьКлючевоеСлово = СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЕТ'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'ЗАКАЗ'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'СЧЁТ'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'НАКЛ'")) > 0;
		
	ЕстьСловаОРасчетномОбслуживании = СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р/О'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетное обслуживание'"))) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчетные услуги'"))) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётные услуги'"))) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\О'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), НСтр("ru = 'Р\У'")) > 0 ИЛИ
		СтрНайти(ВРЕГ(СтрокаДокумента.НазначениеПлатежа), ВРег(НСтр("ru = 'Расчётное обслуживание'"))) > 0;
		
	ЕслиСловоВозврат = СтрНайти(СтрокаДокумента.НазначениеПлатежа, НСтр("ru = 'Возврат'")) > 0;
		
	Если Не ЕстьКлючевоеСлово Или ЕстьСловаОРасчетномОбслуживании ИЛИ ЕслиСловоВозврат Тогда
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Проверьте операцию!'");
		ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
		ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации = Истина;
		
	Иначе
		
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
		
	КонецЕсли;
	
	Если СтрокаДокумента.Исходящий Тогда
		Возврат Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	Иначе
		Возврат Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя;
	КонецЕсли;
	
КонецФункции

// Процедура распознает данные в строке документа.
//
&НаСервере
Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок, ПослеЗагрузкиВыписокВ1С = Ложь)
	
	СтруктураЗначенийИзСоответствия = ПолучитьДанныеИзСоответствияНазначенияПлатежа(СтрокаДокумента);
	
	ПустаяДата = Дата("00010101");
	
	//СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С;
	
	// Установим номера картинок.
	СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
	СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = -1;
	СтрокаДокумента.ДоговорНеНайденКартинка = -1;
	
	// 1) Определим вид платежа – входящий или исходящий.
	ПлатежноеПоручение = ВРег(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	Исходящий = (СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета);
	
	СтрокаДокумента.Исходящий = Исходящий;
	
	// 2) Определим вид документа в программе.
	ВидДокумента = ?(Исходящий, "РасходСоСчета", "ПоступлениеНаСчет");
	ИмяДокумента = ?(Исходящий, "Расход со счета", "Поступление на счет");
	
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	РеквизитСчета = ?(Исходящий, "БанковскийСчет", "СчетКонтрагента");
	
	// 10) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если ПустаяСтрока(Буфер) Тогда
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана!'");
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	ИначеЕсли Не ЕстьНеЦифрыНаСервере(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		Сумма = Число(Буфер);
		Если Сумма < 0 Тогда
			Сумма = - Сумма;
		КонецЕсли;
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
			СтрокаДокумента.СуммаСписаноСМинусом = -Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = -1;
	Иначе
		СтрокаДокумента.НеВерныйФорматСуммыКартинка = 0;
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
		ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
		Если Исходящий Тогда
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано = Истина;
		Иначе
			ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// 3) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа.
	ДатаДок = ПустаяДата;
	
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.ДатаПоступило);
	Иначе
		Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СтрокаДокумента.ДатаДок = Результат;
		НомерДляПоискаДок = СтрокаДокумента.Номер;
		РеквизитДаты = "ДатаВходящегоДокумента";
		РеквизитНомера = "НомерВходящегоДокумента";
		ВсеРеквизитыПоискаЕсть = Истина;
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	СтрокаДокумента.НесколькоДокументовКартинка = -1;
	
	АнализироватьИсторию = Ложь;
	ДокументНайден = Ложь;
	Если ВсеРеквизитыПоискаЕсть Тогда
		
		// При наличии нескольких предпочтение отдается первому, с совпадающим
		// номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.ВидОперации,
		|	ПлатежныеДокументы.Статья,
		|	ПлатежныеДокументы.СчетКонтрагента,
		|	ПлатежныеДокументы.Контрагент,
		|	ПлатежныеДокументы.Контрагент.ИНН КАК КонтрагентИНН,
		|	ПлатежныеДокументы.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ПлатежныеДокументы.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы." + РеквизитНомера + " КАК Номер,
		|	ПлатежныеДокументы." + РеквизитДаты + " КАК Дата,
		|	ПлатежныеДокументы.Дата КАК ДатаДок,
		|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
		|	ПлатежныеДокументы.Организация,
		|	ПлатежныеДокументы.Корреспонденция,
		|	ПлатежныеДокументы.Касса,
		|	ПлатежныеДокументы.СуммаДокумента КАК Сумма,
		|	ТипЗначения(ПлатежныеДокументы.Ссылка) КАК ВидДокумента,
		|	ПлатежныеДокументы.ДокументОснование КАК ПлатежноеПоручение,
		|	ПлатежныеДокументы.БанковскаяОперация КАК БанковскаяОперация
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		//|	Документ.ПоступлениеНаСчет КАК ПлатежныеДокументы
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы." + РеквизитДаты + ", ДЕНЬ)= &ДатаДок
		|	И ПлатежныеДокументы.БанковскийСчет = &БанковскийСчет
		|	И ПлатежныеДокументы.Организация = &Организация";
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Объект.Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить();
		ВыборкаДокументов = Результат.Выбрать();
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		СтрокаСТаблицейДокументов = ТаблицаТаблицДокументов.Добавить();
		СтрокаСТаблицейДокументов.НомерСтрокиВТаблицеИмпорта = СтрокаДокумента.Владелец().Индекс(СтрокаДокумента);
		
		Пока ВыборкаДокументов.Следующий() Цикл
															// Так не очень корректно, т.к. нумерация за расчетное обслуживание может быть одна, а по фактическим операциям другая.
			ВыборкаНомер = СокрЛП(ВыборкаДокументов.Номер); // Прав(СокрЛП(ВыборкаДокументов.Номер), ДлинаНомера);
			Если ВыборкаНомер = НомерДляПоискаДок
				И (НЕ ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) ИЛИ ВыборкаДокументов.НомерСчета = СчетДляПоискаДок
					//ИЛИ (ВыборкаДокументов.ВидОперации = ВидОперацииВзносНаличных И ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)))
					//ИЛИ (ВыборкаДокументов.ВидОперации = ВидОперацииСписаниеНаличных И ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)))
				)
				Тогда
				
				БудетОбрабатыватьсяПриЗагрузке = Ложь;
				
				ДокументПодходит = Истина;
				Если КоличествоДок = 0 Тогда
					
					Если СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И НЕ ВыборкаДокументов.Проведен Тогда
						
						ДокументПодходит = Ложь;
						
					// У документа может быть нужный номер и дата, но он может быть не тот, что нужен.
					// Из банка иногда приходит файл, в котором у документов разного вида будут одинаковые номера, например,
					// у банковского ордера и платежного поручения.
					ИначеЕсли СтрокаДокумента.СуммаДокумента <> ВыборкаДокументов.Сумма И
						(СокрЛП(ВРег(СтрокаДокумента.Операция)) <> СокрЛП(ВРег(ВыборкаДокументов.БанковскаяОперация)) И
						ЗначениеЗаполнено(СтрокаДокумента.Операция) И ЗначениеЗаполнено(ВыборкаДокументов.БанковскаяОперация))
						Тогда
						
						ДокументПодходит = Ложь;
						
						// На случай, если банковскую операцию заполняли в документе вручную, проверим другие реквизиты.
						//Если СтрокаДокумента.СуммаДокумента = ВыборкаДокументов.Сумма Тогда
						//	Если ЗначениеЗаполнено(ВыборкаДокументов.КонтрагентИНН) И ВыборкаДокументов.КонтрагентИНН <> "0" ИЛИ
						//		ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) Тогда
						//		
						//		Если ОрганизацияПлательщик(ВидДокумента) Тогда
						//			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
						//			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
						//			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
						//			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
						//				ИмяКонтрагента = СтрокаДокумента.Получатель1;
						//			Иначе
						//				ИмяКонтрагента = СтрокаДокумента.Получатель;
						//			КонецЕсли;
						//		Иначе
						//			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
						//			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
						//			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
						//			Если СтрокаДокумента.Плательщик1 <> "" Тогда
						//				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
						//			Иначе
						//				ИмяКонтрагента = СтрокаДокумента.Плательщик;
						//			КонецЕсли;
						//		КонецЕсли;
						//		
						//		Если (ЗначениеЗаполнено(ВыборкаДокументов.КонтрагентИНН) И ВыборкаДокументов.КонтрагентИНН = ИННКонтрагента) ИЛИ
						//			(ЗначениеЗаполнено(ВыборкаДокументов.НомерСчета) И ВыборкаДокументов.НомерСчета = СчетКонтрагента) ИЛИ
						//			(ЗначениеЗаполнено(ВыборкаДокументов.КонтрагентНаименованиеПолное) И ВРег(ВыборкаДокументов.КонтрагентНаименованиеПолное) = ВРег(ИмяКонтрагента)) ИЛИ
						//			(ЗначениеЗаполнено(ВыборкаДокументов.КонтрагентНаименование) И ВРег(ВыборкаДокументов.КонтрагентНаименование) = ВРег(ИмяКонтрагента))
						//			Тогда
						//			ДокументПодходит = Истина;
						//		КонецЕсли;
						//		
						//	КонецЕсли;
						//КонецЕсли;
						
					КонецЕсли;
					
					Если ДокументПодходит Тогда
						
						СтрокаДокумента.Документ = ВыборкаДокументов.Ссылка;
						Если ПослеЗагрузкиВыписокВ1С Тогда
							СтрокаДокумента.ДокументНайден = ""+ВыборкаДокументов.Ссылка;
						Иначе
							СтрокаДокумента.ДокументНайден = ?(СтрокаДокумента.Исходящий, НСтр("ru = 'Найден '"), НСтр("ru = 'Найдено '"))+ВыборкаДокументов.Ссылка;
						КонецЕсли;
						СтрокаДокумента.Проведен = ВыборкаДокументов.Проведен;
						СтрокаДокумента.НомерДок = ВыборкаДокументов.Номер;
						СтрокаДокумента.ДатаДок = ВыборкаДокументов.Дата;
						СтрокаДокумента.ВидОперации = ВыборкаДокументов.ВидОперации;
						СтрокаДокумента.СтатьяДДС = ВыборкаДокументов.Статья; 
						СтрокаДокумента.СчетКонтрагента = ВыборкаДокументов.СчетКонтрагента;
						Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
							Тогда
							
							//СтрокаДокумента.Контрагент = НСтр("ru = 'Наша организация ('") + ВыборкаДокументов.Организация + ")";
							
						ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными
							ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
							Тогда
							
							//СтрокаДокумента.Контрагент = НСтр("ru = 'Наша организация ('") + ВыборкаДокументов.Организация + ")";
							СтрокаДокумента.Касса = ВыборкаДокументов.Касса;
							
						Иначе
							СтрокаДокумента.Контрагент = ВыборкаДокументов.Контрагент;
						КонецЕсли;
						СтрокаДокумента.Корреспонденция = ВыборкаДокументов.Корреспонденция;
						БудетОбрабатыватьсяПриЗагрузке = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				Если ДокументПодходит Тогда
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
				
				// Поместим данные о документа в служебную таблицу.
				СтрокаНайденныеДокументы = СтрокаСТаблицейДокументов.ТаблицаНайденныхДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНайденныеДокументы, ВыборкаДокументов);
				СтрокаНайденныеДокументы.БудетОбрабатыватьсяПриЗагрузке = БудетОбрабатыватьсяПриЗагрузке;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДок > 1 Тогда
			
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%КоличествоДок%) соответствующих документов!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%КоличествоДок%", КоличествоДок);
			
			Если Не ПослеЗагрузкиВыписокВ1С Тогда
				СтрокаДокумента.ДокументНайден = СтрокаДокумента.ДокументНайден + НСтр("ru = '. И еще %КоличествоДок% док.'");
				СтрокаДокумента.ДокументНайден = СтрЗаменить(СтрокаДокумента.ДокументНайден, "%КоличествоДок%", КоличествоДок-1);
			КонецЕсли;
			
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент = Истина;
			СтрокаДокумента.НесколькоДокументовКартинка = 0;
			
		КонецЕсли;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
			Если Документ.РасшифровкаПлатежа.Количество() = 1 Тогда
				СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].Договор;
				СтрокаДокумента.ПризнакАванса = Документ.РасшифровкаПлатежа[0].ПризнакАванса;
				СтрокаДокумента.Заказ = Документ.РасшифровкаПлатежа[0].Заказ;
				СтрокаДокумента.ДокументРасчетов = Документ.РасшифровкаПлатежа[0].СчетНаОплату;
				СтрокаДокумента.СчетНаОплату = Документ.РасшифровкаПлатежа[0].Документ;
				Если ТипЗнч(Документ.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СтрокаДокумента.ПлатежноеПоручение = Документ.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			АнализироватьИсторию = Истина;
		КонецЕсли;
		
	Иначе // Попробуем собрать статистику использования данных по выбранному контрагенту.
		
		АнализироватьИсторию = Истина;
	КонецЕсли;
	
	#Область ВидОперации
	// 4) Определяем вид операции документа.
	ЭтоПереводМеждуСчетами = Ложь;
	ЭтоСнятиеИлиВзносНаличных = Ложь;
	ЭтоКомиссия = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		НеСоздаватьНовыхЭлементов = Ложь;
		
		Если Исходящий Тогда
			Если ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя) И СокрП(СтрокаДокумента.СтатусСоставителя) <> "0" Тогда // перечисление налога 
				Если СтрокаДокумента.СтатусСоставителя = "06" ИЛИ СтрокаДокумента.СтатусСоставителя = "08" 
				 ИЛИ ((Число(СтрокаДокумента.СтатусСоставителя) >= 16) И (Число(СтрокаДокумента.СтатусСоставителя) <= 20)) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
				КонецЕсли;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПолучательСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоПереводМеждуСчетами = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПолучательСчет)) Тогда
				
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
				ЭтоСнятиеИлиВзносНаличных = Истина;
				НеСоздаватьНовыхЭлементов = Истина;
				
			ИначеЕсли ЭтоКомиссияБанка(СтрокаДокумента, Исходящий) Тогда
				ЭтоКомиссия = Истина;
				ВидОперацииДокумента = Перечисления.ВидыОперацийРасходСоСчета.Прочее;
				СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			Иначе // оплата поставщику
				
				ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
				
			КонецЕсли;
		ИначеЕсли Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаДокумента.ПлательщикСчет).Владелец = Объект.БанковскийСчет.Владелец Тогда // перевод на другой счет
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоПереводМеждуСчетами = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		ИначеЕсли ЭтоСчетКассыКредитнойОрганизации(БалансовыйСчет(СтрокаДокумента.ПлательщикСчет)) Тогда
			
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
			СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
			ЭтоСнятиеИлиВзносНаличных = Истина;
			НеСоздаватьНовыхЭлементов = Истина;
			
		Иначе
			
			ВидОперацииДокумента = ПроверитьВидОперации(СтрокаДокумента, ПараметрыВыделенияКолонок, СтруктураЗначенийИзСоответствия);
			
		КонецЕсли;
		
		Если НеСоздаватьНовыхЭлементов Тогда
			СтрокаДокумента.ДействиеСКонтрагентом = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСоСчетомКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
			СтрокаДокумента.ДействиеСДоговором = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		СтрокаДокумента.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	#КонецОбласти
	
	// 5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.БанковскийСчет) Тогда
		СтрокаДокумента.БанковскийСчет = Объект.БанковскийСчет;
	КонецЕсли;
	
	#Область БанковскийСчет
	// 6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если ОрганизацияПлательщик(ВидДокумента) Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
		
		ЗапросПоискаСчета.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
		|	БанковскиеСчета.Владелец.КПП КАК ВладелецКПП,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
		|	Выбор Когда БанковскиеСчета.Банк.Код = &БИКБанка Тогда 1 Иначе 2 Конец КАК ПриоритетБИК,
		//|	Выбор Когда БанковскиеСчета.Владелец.КПП = &КППКонтрагента Тогда 1 Иначе 2 Конец КАК ПриоритетКПП,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА БанковскиеСчета.Владелец.КПП = ""0""
		|					ТОГДА """"
		|				ИНАЧЕ БанковскиеСчета.Владелец.КПП
		|			КОНЕЦ = &КППКонтрагента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПриоритетКПП,
		|	Выбор Когда БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента Тогда 1 Иначе 2 Конец КАК ПриоритетИНН,
		|	Выбор Когда (БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента) 
		|		ИЛИ (Выразить(БанковскиеСчета.Владелец.НаименованиеПолное КАК Строка(1024)) = &ИмяКонтрагента) Тогда 1 Иначе 2 Конец КАК ПриоритетНаименования
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты 
		//|	" + ?(НЕ ПустаяСтрока(ИННКонтрагента), "И БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента", "") + "
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетИНН,
		|	ПриоритетБИК,
		|	ПриоритетНаименования,
		|	ПриоритетКПП";
		
		Если ЭтоПереводМеждуСчетами Тогда
			ЗапросПоискаСчета.Текст = СтрЗаменить(ЗапросПоискаСчета.Текст,
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.Контрагенты",
				"БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации");
		КонецЕсли;
		
		РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
		ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		// Нужно обработать следующую ситуацию.
		// У контрагента изменился ИНН, но номер счета остался прежним.
		// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли контрагента с нужным ИНН.
		
		КонтрагентНеНайден = Истина;
		Если ВыборкаПоиска.Следующий() Тогда
			ПроверкаБИКа = Ложь;
			
			// Если в файле указан ИНН контрагента, но мы его не нашли.
			Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
				
				СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
				Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
				Иначе
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
				КонецЕсли;
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				
			Иначе
				
				КонтрагентНеНайден = Ложь;
				
				СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
				Контрагент = ВыборкаПоиска.Владелец;
				СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
				
				// Не совпадает БИК в базе и в выписке.
				Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
					// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
					// но с одинаковым номером.
					ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					
					СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
					ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
				КонецЕсли;
				
				// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если КонтрагентНеНайден Тогда
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			//СтрокаДокумента.НомерКартинки = 1;
			//УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
		КонецЕсли;
		
		// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
		// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
		Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			КоличествоЭлементовВВыборке = 0;
			ВыборкаПоиска.Сбросить();
			Пока ВыборкаПоиска.Следующий() Цикл
				Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента Тогда
					КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
		КонецЕсли;
		
		
		Если КоличествоЭлементовВВыборке > 1 //И 
			// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о нескольких РС.
			//ВыборкаПоиска.ПриоритетНаименования = 2 
			Тогда
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов! Проверьте контрагента и р/счет!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
			КонецЕсли;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область КассаОрганизации
	// Определим кассу орагазинации для операций снятия наличных и взноса наличных на счет организации.
	Если ЭтоСнятиеИлиВзносНаличных И СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область Контрагент
	
	// 7) Определим контрагента.
	ДанныеКонтрагентаПолучены = Ложь;
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка,
			|	Контрагенты.ИНН,
			|	Контрагенты.Наименование,
			|	Контрагенты.НаименованиеПолное,
			|	ВЫБОР
			|		КОГДА Контрагенты.КПП = ""0""
			|			ТОГДА """"
			|		ИНАЧЕ Контрагенты.КПП
			|	КОНЕЦ КАК КПП,
			|	ВЫБОР
			|		КОГДА ВЫБОР
			|				КОГДА Контрагенты.КПП = ""0""
			|					ТОГДА """"
			|				ИНАЧЕ Контрагенты.КПП
			|			КОНЕЦ = &КППКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетКПП,
			|	ВЫБОР
			|		КОГДА Контрагенты.ИНН = &КонтрагентИНН
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетИНН,
			|	ВЫБОР
			|		КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|				ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК ПриоритетНаименования
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	(Контрагенты.ИНН = &КонтрагентИНН
			|			ИЛИ ВЫБОР
			|				КОГДА Контрагенты.Наименование = &ИмяКонтрагента
			|						ИЛИ (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1024))) = &ИмяКонтрагента
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПриоритетИНН,
			|	ПриоритетНаименования,
			|	ПриоритетКПП");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
			ЗапросПоискаКонтрагента.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
			
			//ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выбрать();
			
			Если ВыборкаПоиска.Следующий() Тогда
				СтрокаДокумента.Контрагент = ВыборкаПоиска.Ссылка;
				
				ИННКонтрагентаВБазе = ВыборкаПоиска.ИНН;
				КППКонтрагентаВБазе = ВыборкаПоиска.КПП;
				
				НаименованиеПолноеКонтрагентаВБазе = ВыборкаПоиска.НаименованиеПолное;
				
				ДанныеКонтрагентаПолучены = Истина;
				
				Если ПустаяСтрока(ВыборкаПоиска.ИНН) Тогда
					СтрокаЗамечание = НСтр("ru = 'У контрагента не заполнен ИНН!'");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
					ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			//Если НайденныеКонтрагенты.Количество() > 1 Тогда
			Если ВыборкаПоиска.Количество() > 1 Тогда
				СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) контрагентов с одинаковым ИНН!'");
				//СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", НайденныеКонтрагенты.Количество());
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", ВыборкаПоиска.Количество());
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			ИначеЕсли ВыборкаПоиска.Количество() = 0 Тогда
				СтрокаЗамечание = НСтр("ru = 'Не найден контрагент (%ИмяКонтрагента%, ИНН %ИННКонтрагента%)!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ИННКонтрагента%", ИННКонтрагента);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание, Истина);
				СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, ИНН %ИННКонтрагента%)!'");
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
				СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИННКонтрагента%", ИННКонтрагента);
				СтрокаДокумента.Контрагент = СтрокаКонтрагент; // БЫЛО РАНЬШЕ - СтрокаСчетКонтрагента;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
			КонецЕсли;
			
		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не указан ИНН контрагента! '"), Истина);
			СтрокаКонтрагент = НСтр("ru = 'Не найден (%ИмяКонтрагента%, не указан ИНН)!'");
			СтрокаКонтрагент = СтрЗаменить(СтрокаКонтрагент, "%ИмяКонтрагента%", ИмяКонтрагента);
			СтрокаДокумента.Контрагент = СтрокаКонтрагент;
			ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	
	
	// Проверим совпадают ли данные контрагента в выписке с данными в информационной базе.
	// Если не совпадают, то будем выводить восклицательный знак.
	Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ДанныеКонтрагентаПолучены И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			ИННКонтрагентаВБазе = СтрокаДокумента.Контрагент.ИНН;
			КППКонтрагентаВБазе = СтрокаДокумента.Контрагент.КПП;
			Если СокрЛП(КППКонтрагентаВБазе) = "0" Тогда
				КППКонтрагентаВБазе = "";
			КонецЕсли;
			НаименованиеПолноеКонтрагентаВБазе = СтрокаДокумента.Контрагент.НаименованиеПолное;
		КонецЕсли;
		Если ИмяКонтрагента = Неопределено Тогда
			Если ОрганизацияПлательщик(ВидДокумента) Тогда
				ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
				КППКонтрагента = СтрокаДокумента.ПолучательКПП;
				Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
					ИмяКонтрагента = СтрокаДокумента.Получатель1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Получатель;
				КонецЕсли;
			Иначе
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
				Если СтрокаДокумента.Плательщик1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Плательщик1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Плательщик;
				КонецЕсли;
			КонецЕсли;
			
			Если СокрЛП(КППКонтрагента) = "0" Тогда
				КППКонтрагента = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) И СтрокаДокумента.КонтрагентНеНайденКартинка = -1 Тогда
			Если ИННКонтрагентаВБазе <> ИННКонтрагента
				ИЛИ КППКонтрагентаВБазе <> КППКонтрагента
				ИЛИ ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
				
				СтрокаПроверки = "";
				КолвоРеквизитовДляПроверки = 0;
				Если ИННКонтрагентаВБазе <> ИННКонтрагента Тогда
					СтрокаПроверки = НСтр("ru = 'ИНН, '");
					КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
				КонецЕсли;
				Если КППКонтрагентаВБазе <> КППКонтрагента Тогда
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'КПП, '");
					КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
				КонецЕсли;
				Если ВРег(СокрЛП(НаименованиеПолноеКонтрагентаВБазе)) <> ВРег(СокрЛП(ИмяКонтрагента)) Тогда
					СтрокаПроверки = СтрокаПроверки + НСтр("ru = 'юридическое название, '");
					КолвоРеквизитовДляПроверки = КолвоРеквизитовДляПроверки + 1;
				КонецЕсли;
				СтрокаПроверки = Лев(СтрокаПроверки, СтрДлина(СтрокаПроверки) - 2);
				
				Если КолвоРеквизитовДляПроверки = 2 Тогда
					СтрокаПроверки = СтрЗаменить(СтрокаПроверки, ", ", НСтр("ru = ' и '"));
				КонецЕсли;
				
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
				Если КолвоРеквизитовДляПроверки = 1 Тогда
					СтрокаЗамечание = НСтр("ru = 'Проверьте %СтрокаПроверки% контрагента!'");
				Иначе
					СтрокаЗамечание = НСтр("ru = 'Проверьте реквизиты контрагента: %СтрокаПроверки%!'");
				КонецЕсли;
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СтрокаПроверки%", СтрокаПроверки);
				ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
				ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Для новых контрагентов не будем выводить информацию о том, что не найден РС или договор.
		СтрокаДокумента.ОписаниеОшибок = УдалитьДанныеИзОписанияОшибкиНаСервере(НСтр("ru = 'Не найден счет контрагента'"), СтрокаДокумента.ОписаниеОшибок, СтрокаДокумента);
	КонецЕсли;
	
	#КонецОбласти
	
	// 14) Поищем платежное поручение, заказ покупателя и счет на оплату.
	//     Ищем только точное совпадение суммы, вхождение номера и года.
	Если Не ДокументНайден Тогда
		// Поищем платежное поручение и заполним все по нему, если найдем.
		НашлиПП = Ложь;
		
		Если Объект.АвтоматическиПодставлятьДокументы Тогда
			Если Исходящий Тогда
				СтруктураВозвратаПП = ОпределитьПлатежноеПоручение(СтрокаДокумента);
				НашлиПП = СтруктураВозвратаПП.НашлиПП;
			КонецЕсли;
			
			// Поищем заказ или счет на оплату. Если найдем, то договор возьмем оттуда.
			ДоговорВЗаказеСчете = ОпределитьЗаказИСчетНаСервере(СтрокаДокумента);
			// Поищем расчётный документ. Если договор уже определили, то документы ищем с отбором по договору.
			// Более приоритетны расчётные документы, которые связаны с найденным заказом.
			Если ЗначениеЗаполнено(ДоговорВЗаказеСчете) Тогда
				ОпределитьДокументРасчетовНаСервере(СтрокаДокумента, ДоговорВЗаказеСчете);
			Иначе
				ДоговорВЗаказеСчете = ОпределитьДокументРасчетовНаСервере(СтрокаДокумента);
			КонецЕсли;
			
			Если Не НашлиПП И Не ДоговорВЗаказеСчете.Пустая() Тогда
				СтрокаДокумента.Договор = ДоговорВЗаказеСчете;
			// Возьмем из ПП заказа-основание, а из заказа-основания договор, если они еще не определены.
			ИначеЕсли НашлиПП И Не ЗначениеЗаполнено(СтрокаДокумента.Заказ) И
				ТипЗнч(СтруктураВозвратаПП.ДокументОснованиеПП) = Тип("ДокументСсылка.ЗаказПоставщику") И
				ЗначениеЗаполнено(СтруктураВозвратаПП.ДокументОснованиеПП) Тогда
			
				СтрокаДокумента.Заказ = СтруктураВозвратаПП.ДокументОснованиеПП;
				
				// Если найден расчетный документ и в нем указан другой заказ поставщику, то очистим информацию о расчетном документе.
				
				Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) И ЗначениеЗаполнено(СтруктураВозвратаПП.Договор) Тогда
					СтрокаДокумента.Договор = СтруктураВозвратаПП.Договор;
				КонецЕсли;
				
			// Попробуем определить вид операции по данным в ПП.
			ИначеЕсли НашлиПП И СтруктураВозвратаПП.ВидОперацииПП <> Неопределено Тогда
				
				Если СтруктураВозвратаПП.ВидОперацииПП = Перечисления.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога И
					СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
					
					СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ДоговорВЗаказеСчете = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним договор, вид операции, статью ДДС и корреспонденцию по данным из предыдущих документов (загрузок).
		Если Объект.АнализироватьИсториюВыбораЗначенийРеквизитов И 
			АнализироватьИсторию И 
			(ТипЗнч(СтрокаДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты")) 
			И ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
			
			ВыполнитьАнализИсторииНаСервере(СтрокаДокумента, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Исходящий = (СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета);
	Если Исходящий Тогда
		СтрокаДокумента.ВидОперацииСписание = СтрокаДокумента.ВидОперации;
	Иначе
		СтрокаДокумента.ВидОперацииПоступление = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	// 8) Определим договор контрагента
	Если СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги
	И СтрокаДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги
	И НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
	    СтруктураДанныхПоискаДоговора = НайтиДоговор(СтрокаДокумента.Контрагент, Объект.Организация);
		СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'")) > 0 Тогда
			СтруктураДанныхПоискаДоговора = НайтиДоговор(СтрокаДокумента.Контрагент);
			СтрокаДокумента.Договор = СтруктураДанныхПоискаДоговора.Договор;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") И
				ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
				
				Если ТипЗнч(СтрокаДокумента.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					СтрокаЗамечания = НСтр("ru = 'Организация в договоре отличается от организации счета! '");
					ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
				КонецЕсли;
				
				ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
				СтрокаДокумента.ДоговорНеНайденКартинка = 0;
				
			КонецЕсли;
		КонецЕсли;
		// Если контрагент новый и будет создан новый, то не будем сообщать, что не найден договор и РС.
		Если СтрНайти(СтрокаДокумента.Договор, НСтр("ru = 'Не найден'")) > 0 И ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка") Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru = 'Не найден договор контрагента! '"));
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
		Если СтруктураДанныхПоискаДоговора.КоличествоДоговоров > 1 Тогда
			СтрокаЗамечания = НСтр("ru = 'У контрагента несколько договоров (%КоличествоДоговоров%)! '");
			СтрокаЗамечания = СтрЗаменить(СтрокаЗамечания, "%КоличествоДоговоров%", СтруктураДанныхПоискаДоговора.КоличествоДоговоров);
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечания);
			ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор = Истина;
			СтрокаДокумента.ДоговорНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	// 9) Определим Статью ДДС по умолчанию.
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		ЗаполнитьСтатьюДДСИСвязанныеЭлементыПоСтруктуреСоответствий(СтрокаДокумента, СтруктураЗначенийИзСоответствия);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		
		Если ЭтоКомиссия Тогда
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.Налоги ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных ИЛИ
			СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет
			Тогда
			
			СтрокаДокумента.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
			
		ИначеЕсли Исходящий Тогда
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСИсходящий;
		Иначе
			СтрокаДокумента.СтатьяДДС = Объект.СтатьяДДСВходящий;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
			СтрокаДокумента.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперации(СтрокаДокумента.ВидОперации, СтрокаДокумента.СтатьяДДС);
		КонецЕсли;
		
	КонецЕсли;
	
	// 11) Определим очередность платежа.
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифрыНаСервере(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 12) Определим ПоказательДатыДок (для Платежного поручения исхожящего при
	// перечислении налогов).
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// 13) ДатаСписано и ДатаПоступило, ДатаПроведения.
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	// Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСтрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для Сч = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + Сч]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + Сч];
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураЗначенийИзСоответствия.СоответствиеНайдено Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Корреспонденция) Тогда
			СтрокаДокумента.Корреспонденция = СтруктураЗначенийИзСоответствия.Корреспонденция;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДокумента.КонтрагентИсходный = СтрокаДокумента.Контрагент;
	Если //ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета")
		//И ТипЗнч(СтрокаДокумента.СчетКонтрагента.Владелец) = Тип("СправочникСсылка.Организации")
		(СтрокаДокумента.ВидОперации = ВидОперацииПереводНаДругойСчет ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииПереводСДругогоСчета
		ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииВзносНаличных)
		И СтрНайти(""+СтрокаДокумента.Контрагент, НСтр("ru = 'Наша организация ('")) = 0 Тогда
		//СтрокаДокумента.Контрагент = НСтр("ru = 'Наша организация ('") + СтрокаДокумента.Контрагент + ")";
	КонецЕсли;
	
	Если СтрокаДокумента.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ СтрокаДокумента.ВидОперации = ВидОперацииВзносНаличных Тогда
		СтрокаДокумента.СчетКонтрагента = "";
	КонецЕсли;
	
	СтрокаДокумента.СчетКонтрагентаИсходный = СтрокаДокумента.СчетКонтрагента;
	
КонецПроцедуры // РаспознатьДанныеВСтрокеДокумента()

&НаСервереБезКонтекста
Функция ЕстьЗаписиВСправочникеСоответствий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствияНазначенийПлатежаИРеквизитовПлатежа.Ссылка
		|ИЗ
		|	Справочник.СоответствияНазначенийПлатежаИРеквизитовПлатежа КАК СоответствияНазначенийПлатежаИРеквизитовПлатежа
		|ГДЕ
		|	НЕ СоответствияНазначенийПлатежаИРеквизитовПлатежа.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервере
Функция ПолучитьВыборкуПоНомеруСчета(НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.ВалютаДенежныхСредств.Наименование КАК Валюта,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДС,
	|	БанковскиеСчета.ВалютаДенежныхСредств.СимвольноеПредставление КАК ВалютаСимвольноеПредставление
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Организации)
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура заполняет документы на импорт.
//
&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора, ПослеЗагрузкиВыписокВ1С = Ложь)
	
	// Проверим, есть ли данные в справочнике "СоответствияНазначенийПлатежаИРеквизитовПлатежа".
	ИскатьВСправочникеСоответствий = ЕстьЗаписиВСправочникеСоответствий();
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	// Подготавливаем структуры обработки данных.
	ДокументыКИмпорту = Объект.Загрузка.Выгрузить();
	ИмпортЗагружаемые = СформироватьСоответствиеЗагружаемых();
	ИмпортНеПустые = Неопределено;
	ИмпортНеПустыеПлатежноеПоручение = Неопределено;
	ИмпортНеПустыеПлатежноеПоручениеБюджет = Неопределено;
	
	РасчетныеСчетаКИмпорту = Объект.ИмпортРасчетныеСчета.Выгрузить();
	
	СформироватьСоответствияНеПустыхПриИмпорте(
		ИмпортНеПустые,
		ИмпортНеПустыеПлатежноеПоручение,
		ИмпортНеПустыеПлатежноеПоручениеБюджет
	);
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(
		ВРег("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет")
	);
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(
		ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	СтруктураЗаголовок = Новый Структура(
		ВРег("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца")
	);
	ИмпортЗаголовок = СтруктураЗаголовок;
	ИмпортПризнакОбмена = Ложь;
	НайденКонецФайла = Ложь;
	ИмпортВидыДокументов = Новый Массив;
	РасчетныеСчетаКИмпорту.Очистить();
	ДокументыКИмпорту.Очистить();
	ТаблицаТаблицДокументов.Очистить();
	
	// Заполняем первичные структуры данных.
	ИмпортКоличествоСтрок = СтрЧислоСтрок(ИмпортТекстДляРазбора);
	ИмпортТекущаяСтрока = 1;
	
	НашлиБанковскийСчет = Ложь;
	ВШапкеУказанСчет = Ложь;
	ВывелиСообщениеОБанковскоСчете = Ложь;
	
	Пока ИмпортТекущаяСтрока <= ИмпортКоличествоСтрок Цикл
		Стр = ПолучитьСтрокуИмпорта(ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора);
		
		// СЕКЦИЯДОКУМЕНТ.
		Если Лев(ВРег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыКИмпорту.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ИмпортЗагружаемые) Тогда
					Возврат "";
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта, строка %Импорт%: %Стр%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Стр%", Стр);
				Возврат ТекстСообщения;
			КонецЕсли;
		
		// СЕКЦИЯРАСЧСЧЕТ.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = РасчетныеСчетаКИмпорту.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов, ИмпортТекущаяСтрока, ИмпортКоличествоСтрок, ИмпортТекстДляРазбора, ТегиРасчетногоСчета) Тогда
				ТекстСообщения = НСтр("ru = 'Нарушена структура файла импорта в секции описания расчетного счета! Строка: %Импорт%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Импорт%", (ИмпортТекущаяСтрока - 1));
				Возврат ТекстСообщения;
			КонецЕсли;
			
			Если НЕ ВШапкеУказанСчет Тогда
				
				// Установим в качестве счета шапки первый счет из секции "СЕКЦИЯРАСЧСЧЕТ".
				Выборка = ПолучитьВыборкуПоНомеруСчета(СокрЛП(СтрокаРССчетов.РасчСчет));
				Если Выборка.Следующий() Тогда
					
					НайденныйБанковскийСчет = Выборка.Ссылка;
					Если НЕ ЕстьОтборПоБанковскомуСчету ИЛИ НайденныйБанковскийСчет = Объект.БанковскийСчет Тогда
						
						НашлиБанковскийСчет = Истина;
						
						Объект.Организация = Выборка.Владелец;
						Объект.БанковскийСчет = НайденныйБанковскийСчет;
						
						//Если НЕ НастройкиПолучены ИЛИ НастройкиОбщиеПолучены Тогда
							ЗагрузитьНастройкиФормыДляСчета();
						//КонецЕсли;
						
						БанковскийСчетНомер = Выборка.НомерСчета;
						БанковскийСчетВалюта = Выборка.ВалютаДС;
						ЭтаФорма.Заголовок = "Загрузка выписок по счету: " + НайденныйБанковскийСчет.Наименование;
						
						Если ПустаяСтрока(Выборка.ВалютаСимвольноеПредставление) Тогда
							ПредставлениеВалютыДС = Лев(СокрЛП(Выборка.Валюта), 3);
						Иначе
							ПредставлениеВалютыДС = СокрЛП(Выборка.ВалютаСимвольноеПредставление);
						КонецЕсли;
						
						Элементы.ЗагрузкаСуммаСписано.Заголовок = "Списано, "+ПредставлениеВалютыДС;
						Элементы.ЗагрузкаСуммаПоступило.Заголовок = "Поступило, "+ПредставлениеВалютыДС;
						Элементы.ГруппаПоступилоИСписано.Заголовок = "Сумма, "+ПредставлениеВалютыДС;
						Элементы.ЗагрузкаСуммаСписаноСМинусом.Заголовок = "Списано, "+ПредставлениеВалютыДС;
						
						Если Не ВывелиСообщениеОБанковскоСчете Тогда
							
							Если ЕстьОтборПоБанковскомуСчету Тогда
								// В этом случае банковский счет задан однозначно и сообщать о том, что он будет использован не нужно.
								
								//ТекстСообщенияОСчетеВШапке = НСтр("ru = 'В заголовке файла не указан банковский счет. Есть строка ""РасчСчет="", но после символа ""="" нет номера счета или строки ""РасчСчет="" нет совсем.
								//	|Будет использован банковский счет %ОбъектБанковскийСчет%!!!
								//	|Для проверки можете использовать гиперссылку ""Посмотреть содержимое файла"" в правом нижнем углу.'");
								//	
								//ТекстСообщенияОСчетеВШапке = СтрЗаменить(ТекстСообщенияОСчетеВШапке, "%ОбъектБанковскийСчет%", ""+Объект.БанковскийСчет);
							Иначе
								ТекстСообщенияОСчетеВШапке = НСтр("ru = 'В заголовке файла не указан банковский счет. Есть строка ""РасчСчет="", но после символа ""="" нет номера счета или строки ""РасчСчет="" нет совсем.
									|Будет использован банковский счет из первой секции ""СЕКЦИЯРАСЧСЧЕТ""!!!
									|Для проверки можете использовать гиперссылку ""Посмотреть содержимое файла"" в правом нижнем углу.'");
									
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = ТекстСообщенияОСчетеВШапке;
								Сообщение.Сообщить();
							КонецЕсли;
								
							ВывелиСообщениеОБанковскоСчете = Истина;
							ВШапкеУказанСчет = Истина;
						КонецЕсли;
						
					ИначеЕсли ЕстьОтборПоБанковскомуСчету Тогда
						
						//ТекстСообщения = НСтр("ru = 'В заголовке файла не указан банковский счет. В файле есть строка ""РасчСчет="", но после символа ""="" нет номера счета.'");
						//Возврат ТекстСообщения;
						
					КонецЕсли;
					
				Иначе
					
					//ТекстСообщения = НСтр("ru = 'В заголовке файла не указан банковский счет. В файле есть строка ""РасчСчет="", но после символа ""="" нет номера счета.'");
					//Возврат ТекстСообщения;
					
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчет Тогда
				РасчетныеСчетаКИмпорту.Удалить(СтрокаРССчетов);
			КонецЕсли;
			
		// РАСЧСЧЕТ.
		ИначеЕсли Лев(ВРег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" и ЗначениеЗаполнено(Значение) Тогда
				
				ВШапкеУказанСчет = Истина;
				
				Выборка = ПолучитьВыборкуПоНомеруСчета(Значение);
				Если Выборка.Следующий() Тогда
					НайденныйБанковскийСчет = Выборка.Ссылка;
					Если НЕ ЕстьОтборПоБанковскомуСчету И ЗначениеЗаполнено(Объект.БанковскийСчет)
					   И НайденныйБанковскийСчет <> Объект.БанковскийСчет Тогда
					   
					   Если Объект.БанковскийСчет.НомерСчета = Значение Тогда
							ТекстСообщения = НСтр("ru = 'В базе есть несколько банковский счетов организаций с одинаковым номером!'");
						Иначе
							ТекстСообщения = НСтр("ru = 'В заголовке файла указан счет (%Значение%) отличный от указанного!'");
						КонецЕсли;
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Значение);
						
						Возврат ТекстСообщения;
						
					ИначеЕсли НЕ ЕстьОтборПоБанковскомуСчету ИЛИ НайденныйБанковскийСчет = Объект.БанковскийСчет Тогда
						
						НашлиБанковскийСчет = Истина;
						
						Объект.Организация = Выборка.Владелец;
						Объект.БанковскийСчет = НайденныйБанковскийСчет;
						
						//Если НЕ НастройкиПолучены ИЛИ НастройкиОбщиеПолучены Тогда
							ЗагрузитьНастройкиФормыДляСчета();
						//КонецЕсли;
						
						БанковскийСчетНомер = Выборка.НомерСчета;
						БанковскийСчетВалюта = Выборка.ВалютаДС;
						ЭтаФорма.Заголовок = "Загрузка выписок по счету: " + НайденныйБанковскийСчет.Наименование;
						
						Если ПустаяСтрока(Выборка.ВалютаСимвольноеПредставление) Тогда
							ПредставлениеВалютыДС = Лев(СокрЛП(Выборка.Валюта), 3);
						Иначе
							ПредставлениеВалютыДС = СокрЛП(Выборка.ВалютаСимвольноеПредставление);
						КонецЕсли;
						
						Элементы.ЗагрузкаСуммаСписано.Заголовок = "Списано, "+ПредставлениеВалютыДС;
						Элементы.ЗагрузкаСуммаПоступило.Заголовок = "Поступило, "+ПредставлениеВалютыДС;
						Элементы.ГруппаПоступилоИСписано.Заголовок = "Сумма, "+ПредставлениеВалютыДС;
						Элементы.ЗагрузкаСуммаСписаноСМинусом.Заголовок = "Списано, "+ПредставлениеВалютыДС;
						
					ИначеЕсли ЕстьОтборПоБанковскомуСчету Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					СтрокаРССчетов = РасчетныеСчетаКИмпорту.Найти(Значение, "РасчСчет");
					Если СтрокаРССчетов = Неопределено Тогда
						СтрокаРССчетов = РасчетныеСчетаКИмпорту.Добавить();
						СтрокаРССчетов.РасчСчет = Значение;
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'В заголовке файла указан счет, не принадлежащий организации: %Значение%!'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Значение);
					Возврат ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		
		// ДОКУМЕНТ.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			ИмпортВидыДокументов.Добавить(Значение);
		
		// КОНЕЦФАЙЛА.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ ИмпортПризнакОбмена Тогда
				ТекстСообщения = НСтр("ru = 'В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				Возврат ТекстСообщения;
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
			
			ПараметрыВыделенияКолонок = Новый Структура("ВыделитьКолонкуДокумент, ВыделитьКолонкуСуммаСписано, ВыделитьКолонкуСуммаПоступило, 
				|ВыделитьКолонкуКонтрагент, ВыделитьКолонкуДоговор, ВыделитьКолонкуРСКонтрагента, ВыделитьКолонкуВидОперации", 
				Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
				
			// Последовательно обрабатываем каждую загруженную строку.
			Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
				
				// Распознаем реквизиты.
				// Если в файле находятся выписка пл. документов по нескольким счетам, то
				// распознаем и отображаем только те которые выгружены по указанному
				// банковскому счету.
				Если СтрокаДокумента.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета
				 ИЛИ СтрокаДокумента.ПолучательСчет = Объект.БанковскийСчет.НомерСчета Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, ПараметрыВыделенияКолонок, ПослеЗагрузкиВыписокВ1С);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.LineNumber = НомерСтроки;
					
					// Для каждого реквизита (= колонка) надо проверить на пустое значение.
					Для каждого КолонкаИмпорта Из ДокументыКИмпорту.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(
							СтрокаДокумента,
							КолонкаИмпорта.Имя,
							КолонкаИмпорта.Заголовок,
							ИмпортНеПустые
						);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
					 ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
						
						// Добавляем реквизиты в табличную часть для дальнейшего использования.
						Обработки.КлиентБанк.СписокНенайденных(СтрокаДокумента, Объект.БанковскийСчет, ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
						
					КонецЕсли;
					
				Иначе
					
					// Остальные помечаем для последующего удаления.
					СтрокаДокумента.LineNumber = 0;
					
				КонецЕсли;
			КонецЦикла;
			
			// Добавим картинку в шапку колонок.
			Элементы.ЗагрузкаГруппаДокумент.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуДокумент, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			Элементы.ГруппаПоступилоИСписано.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаСписано ИЛИ ПараметрыВыделенияКолонок.ВыделитьКолонкуСуммаПоступило,
				БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			Элементы.ЗагрузкаКонтрагент.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуКонтрагент, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			Элементы.ЗагрузкаГруппаСчетКонтрагента.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуРСКонтрагента, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			Элементы.ЗагрузкаДоговор.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуДоговор, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			Элементы.ЗагрузкаГруппаВидОперации.КартинкаШапки = ?(ПараметрыВыделенияКолонок.ВыделитьКолонкуВидОперации, БиблиотекаКартинок.ВниманиеВВидеТреугольника, Новый Картинка);
			
			// Удалим ненужные строки из таблицы.
			Количество = ДокументыКИмпорту.Количество() - 1;
			Для Сч = 0 по Количество Цикл
				Если ДокументыКИмпорту[Количество - Сч].LineNumber = 0 Тогда
					ДокументыКИмпорту.Удалить(Количество - Сч);
				КонецЕсли;
			КонецЦикла;
		
		// 1CCLIENTBANKEXCHANGE.
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			ИмпортПризнакОбмена = Истина;
		ИначеЕсли Не ПустаяСтрока(Стр) Тогда
			ЗагрузитьСтрокуЗаголовка(
				Стр,
				ТегиЗаголовка,
				ИмпортЗаголовок,
				ИмпортТекущаяСтрока
			);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОтборПоБанковскомуСчету И НЕ НашлиБанковскийСчет Тогда
		
		ТекстСообщения = НСтр("ru = 'В заголовке файла не найден указанный банковский счет (%Значение%)!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", "" + Объект.БанковскийСчет);
		Возврат ТекстСообщения;
		
	КонецЕсли;
	
	Если НЕ НайденКонецФайла Тогда
		РасчетныеСчетаКИмпорту.Очистить();
		ДокументыКИмпорту.Очистить();
		ТаблицаТаблицДокументов.Очистить();
		ТекстСообщения = НСтр("ru = 'Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
	КонецЕсли;
	
	ЕстьОтмеченныеСтроки = Ложь;
	ПоказыватьКартинкуСПредупреждением = Ложь;
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Не ЗначениеЗаполнено(СтрокаДокумента.Документ); //Истина; //ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
		// Если в выписке будут данные сразу по 2-м счетам (и по тому, с которого переводят, и по тому, на который переводят), то
		// будут дубли строк при загрузке.
		// Различие в фале только в полях ДатаПоступило и ДатаСписано.
		Если СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаПоступило) Тогда
				
				СтрокаДокумента.Загружать = Ложь;
				
				СтрокаЗамечание = НСтр("ru = 'Это данные по другому счету: %1%!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%1%", СтрокаДокумента.ПлательщикСчет);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				
			КонецЕсли;
		ИначеЕсли СтрокаДокумента.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДатаСписано) Тогда
				
				СтрокаДокумента.Загружать = Ложь;
				
				СтрокаЗамечание = НСтр("ru = 'Это данные по другому счету %1%!'");
				СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%1%", СтрокаДокумента.ПолучательСчет);
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДокумента.НазначениеПлатежа = СокрЛП(СтрокаДокумента.НазначениеПлатежа);
		СтрокаДокумента.НомерКартинки = ?(ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок), -1, 1);
		УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
			СтрокаДокумента.ПризнакАванса = Не ЗначениеЗаполнено(СтрокаДокумента.ДокументРасчетов);
		КонецЕсли;
		ЗаполнитьСуммыВыделеныхНаСервере(СтрокаДокумента);
		
		Если ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок) Тогда
			СтрокаДокумента.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаСервере(СтрокаДокумента);
		Иначе
			СтрокаДокумента.ОписаниеОшибокПодТЧ = СтрокаДокумента.ОписаниеОшибок;
		КонецЕсли;
		ПоменятьСимволПСНаПробел(СтрокаДокумента.ОписаниеОшибокПодТЧ);
		
		Если СтрокаДокумента.Документ = Неопределено Тогда
			СтрокаДокумента.ДокументНеЗагружен = ?(СтрокаДокумента.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
				//+?(СтрокаДокумента.Исходящий, " расход", "о поступление");
		КонецЕсли;
		
		ПоказыватьКартинкуСПредупреждением = ?(ПоказыватьКартинкуСПредупреждением, ПоказыватьКартинкуСПредупреждением, Не ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок));
		
		// Заполним исходные значения.
		// В дальнешем будем сохранять комбинацию выбранных пользователем значений.
		// Сохранение будет выполняться только в том случае, если пользователь действительно поменял значения.
		// Сохраненные значения будут использоваться для подстановки при загрузке значений.
		ЗаполнитьИсходныеЗначенияВСТроке(СтрокаДокумента);
		
		Если СтрокаДокумента.Загружать Тогда
			ЕстьОтмеченныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями.Видимость = НЕ ПрямойОбменСБанками И ПоказыватьКартинкуСПредупреждением;
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями1.Видимость = ПрямойОбменСБанками И ПоказыватьКартинкуСПредупреждением;
	//Элементы.ЗагрузкаНомерКартинки.Видимость = ПоказыватьКартинкуСПредупреждением;
	
	Объект.Загрузка.Очистить();
	Объект.Загрузка.Загрузить(ДокументыКИмпорту);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	
	Объект.ИмпортРасчетныеСчета.Очистить();
	Объект.ИмпортРасчетныеСчета.Загрузить(РасчетныеСчетаКИмпорту);
	
	УстановитьСтраницуПодвалаНаСервере(ЕстьОтмеченныеСтроки);
	НастроитьВидимостьЭлементовНаСервере(Истина);
	
	Если ПослеЗагрузкиВыписокВ1С Тогда
		ОбновитьИнформациюОбОстаткахНаСчете();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьДокументыНаИмпорт()

// Функция читает электронную выписку банка и возвращает ее содержимое в текстовом формате.
//
&НаСервере
Функция ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлектроннаяВыписка, СтекОповещений)
	
	АдресФайла = Неопределено; // адрес временного хранилища
	РасчетныеСчета = Новый Массив;
	ОрганизацияЛокальная = Неопределено;
	
	ОбменСБанкамиСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭлектроннаяВыписка, АдресФайла, РасчетныеСчета, ОрганизацияЛокальная);
	
	Если АдресФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Объект.Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	Попытка
		ПотокЧтения.Прочитать(ИмяВременногоФайла, Кодир);
	Исключение
		ТекстСообщения = НСтр("ru = 'Файл не прочитан.'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru = 'В файле нет данных!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) <> "1CClientBankExchange" Тогда
		ТекстСообщения = НСтр("ru = 'Указанный файл не является файлом обмена или неверно указана кодировка!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции // ПрочитатьЭлектроннуюВыпискуБанка()

&НаКлиенте
Процедура ПрочитатьЭлектронныеВыпискиБанка()
	
	СтекОповещений = Новый Массив;
	ТекстПредупреждения = "";
	
	ИмпортТекстДляРазбора = "";
	Для каждого ЭлементСписка Из ВыпискиБанка Цикл
		ТекстВыписки = ПрочитатьЭлектроннуюВыпискуБанкаНаСервере(ЭлементСписка.Значение, СтекОповещений);
		ИмпортТекстДляРазбора = ИмпортТекстДляРазбора + Символы.ПС + ТекстВыписки;
	КонецЦикла;
	
	Если ИмпортТекстДляРазбора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтрокаСообщения = ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора);
	Если ЗначениеЗаполнено(СтрокаСообщения) Тогда
		ТекстПредупреждения = ТекстПредупреждения + ?(ЗначениеЗаполнено(ТекстПредупреждения), Символы.ПС, "") + СтрокаСообщения;
	КонецЕсли;
	
	Для каждого Сообщение Из СтекОповещений Цикл
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, Сообщение.Текст);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// Функция читает данные из файла.
//
&НаКлиенте
Процедура ПрочитатьДанныеИзФайла()
	
	Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
		
		Если ВыпискиБанка.Количество() = 0 Тогда
			УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма,
				Нстр("ru = 'Для получения электронной выписки банка нажмите кнопку ""Запросить выписку""'")
				,, "ЭлектроннаяВыпискаБанка");
			Возврат;
		Иначе
			ПрочитатьЭлектронныеВыпискиБанка();
		КонецЕсли;
		
	Иначе
		
		ИмпортТекстДляРазбора = ОбработанныйТекст;
		
		Если ИмпортТекстДляРазбора = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Файл загрузки не содержит данных!'");
			УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма, ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ТекстПредупреждения = ЗаполнитьДокументыНаИмпорт(ИмпортТекстДляРазбора);
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьДанныеИзФайла()

&НаСервере
Процедура УправлениеФормойНаСервере()

	ЕстьОшибки = Ложь; // Могут быть ошибки из-за не верного формата суммы и когда не найдены контрагент, РС или договор...
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ОписаниеОшибок) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Для обмена через файлы.
	Элементы.ЗагрузкаОбновить.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ЗагрузкаОтметитьВсе.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ЗагрузкаСнятьОтметкуУВсех.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями.Видимость = НЕ ПрямойОбменСБанками И ЕстьОшибки;
	Элементы.ГруппаСортировка.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ГруппаДействия.Видимость = НЕ ПрямойОбменСБанками;
	Элементы.ГруппаПоиск.Видимость = НЕ ПрямойОбменСБанками;
	
	// Для прямого обмена с банком.
	Элементы.ЗагрузкаОбновить1.Видимость = ПрямойОбменСБанками;
	Элементы.ЗагрузкаОтметитьВсе1.Видимость = ПрямойОбменСБанками;
	Элементы.ЗагрузкаСнятьОтметкуУВсех1.Видимость = ПрямойОбменСБанками;
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями1.Видимость = ПрямойОбменСБанками И ЕстьОшибки;
	//Элементы.ЗагрузкаНомерКартинки.Видимость = ЕстьОшибки;
	Элементы.ГруппаСортировка1.Видимость = ПрямойОбменСБанками;
	Элементы.ГруппаДействия1.Видимость = ПрямойОбменСБанками;
	Элементы.ГруппаПоиск1.Видимость = ПрямойОбменСБанками;
	
	Элементы.ГруппаЗапросВыписки.Видимость = ПрямойОбменСБанками;
	Элементы.ЭлектроннаяВыпискаБанка.Видимость = ПрямойОбменСБанками;
	Элементы.ГруппаОписаниеЗагрузкиВыпискиЧерезЭД.Видимость = ПрямойОбменСБанками;

	// Команды, которые зависят от наличия или отсутствия ошибок.
	Элементы.ФормаУбратьПредупреждающийЗнакВТекущейКолонке2.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВоВсехКолонках2.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВТекущейКолонке.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВоВсехКолонках.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВТекущейКолонке1.Видимость = ЕстьОшибки;
	Элементы.ФормаУбратьПредупреждающийЗнакВоВсехКолонках1.Видимость = ЕстьОшибки;
	Элементы.ЗагрузкаКонтекстноеМенюУбратьПредупреждающийЗнакВТекущейКолонке.Видимость = ЕстьОшибки;
	Элементы.ЗагрузкаКонтекстноеМенюУбратьПредупреждающийЗнакВоВсехКолонках.Видимость = ЕстьОшибки;
	
КонецПроцедуры // УправлениеФормойНаСервере()

&НаКлиенте
Функция ПериодЗаполнен()
	
	ПериодЗаполнен = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата начала периода'")
			,, "Объект.НачПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Не заполнена дата окончания периода'")
			,, "Объект.КонПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Возврат ПериодЗаполнен;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Предопределенные значения
	ВидОперацииВзносНаличных = Перечисления.ВидыОперацийПоступлениеНаСчет.ВзносНаличными;
	ВидОперацииСписаниеНаличных = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных;
	ВидОперацииПереводСДругогоСчета = Перечисления.ВидыОперацийПоступлениеНаСчет.ПереводСДругогоСчета;
	ВидОперацииПереводНаДругойСчет = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет;
	
	ДействиеНеСоздаватьНовогоКонтрагента = Перечисления.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента;
	// Конец Предопределенные значения
	
	// Заполним список колонок таблицы Загрузка (
	ЗагрузкаТЗ = Объект.Загрузка.Выгрузить();
	МассивКолонок = Новый Массив;
	Для Каждого Колонка Из ЗагрузкаТЗ.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ИменаКолонок = Новый ФиксированныйМассив(МассивКолонок);
	// )
	
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	Если Параметры.Свойство("Организация") Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.Свойство("БанковскийСчетОрганизации")
	   И ЗначениеЗаполнено(Параметры.БанковскийСчетОрганизации) Тогда
		Объект.БанковскийСчет = Параметры.БанковскийСчетОрганизации;
		ЭтаФорма.Заголовок = "Загрузка выписок по счету: " + Параметры.БанковскийСчетОрганизации.Наименование;
		НастройкиОбщиеПолучены = Ложь;
		ЕстьОтборПоБанковскомуСчету = Истина;
	Иначе
		НастройкиОбщиеПолучены = Истина;
		ЕстьОтборПоБанковскомуСчету = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПутьДоФайла") Тогда
		Объект.ФайлЗагрузки = Параметры.ПутьДоФайла;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиПолучены") Тогда
		НастройкиПолучены = Параметры.НастройкиПолучены;
	Иначе
		НастройкиПолучены = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СтатьяДДСВходящий") Тогда
		Объект.СтатьяДДСВходящий = Параметры.СтатьяДДСВходящий;
	КонецЕсли;
	
	Если Параметры.Свойство("СтатьяДДСИсходящий") Тогда
		Объект.СтатьяДДСИсходящий = Параметры.СтатьяДДСИсходящий;
	КонецЕсли;
	
	Если Параметры.Свойство("ПроводитьЗагружаемые") Тогда
		Объект.ПроводитьЗагружаемые = Параметры.ПроводитьЗагружаемые;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаполнятьДолгиАвтоматически") Тогда
		Объект.ЗаполнятьДолгиАвтоматически = Параметры.ЗаполнятьДолгиАвтоматически;
	КонецЕсли;
	
	Если Параметры.Свойство("АнализироватьИсториюВыбораЗначенийРеквизитов") Тогда
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Параметры.АнализироватьИсториюВыбораЗначенийРеквизитов;
	Иначе
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоматическиПодставлятьДокументы") Тогда
		Объект.АвтоматическиПодставлятьДокументы = Параметры.АвтоматическиПодставлятьДокументы;
	Иначе
		Объект.АвтоматическиПодставлятьДокументы = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("НеУдалятьДокументыКоторыхНетВВыписке") Тогда
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Параметры.НеУдалятьДокументыКоторыхНетВВыписке;
	Иначе
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Ложь
	КонецЕсли;
	
	Если Параметры.Свойство("КонтролироватьБезопасностьОбменаСБанком") Тогда
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметры.КонтролироватьБезопасностьОбменаСБанком;
	Иначе
		Объект.КонтролироватьБезопасностьОбменаСБанком = Истина
	КонецЕсли;
	
	Если Параметры.Свойство("Программа") Тогда
		Объект.Программа = Параметры.Программа;
	КонецЕсли;
	
	Если Параметры.Свойство("Кодировка") Тогда
		Объект.Кодировка = Параметры.Кодировка;
	КонецЕсли;

	Если Параметры.Свойство("ВерсияФормата") Тогда
		Объект.ВерсияФормата = Параметры.ВерсияФормата;
	КонецЕсли;
	
	Если Параметры.Свойство("ГруппаДоступа") И ЗначениеЗаполнено(Параметры.ГруппаДоступа) Тогда
		Объект.ГруппаДоступа = Параметры.ГруппаДоступа;
	Иначе
		Объект.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		Объект.НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		Объект.КонПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
		Объект.Кодировка = "Авто";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
		Объект.ВерсияФормата = "1.02";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДСВходящий) Тогда
		Объект.СтатьяДДСВходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяДДСИсходящий) Тогда
		Объект.СтатьяДДСИсходящий = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	КонецЕсли;
	
	ЕстьФайлЗагрузки = Ложь;
	Если Параметры.Свойство("ЗагрузитьИзИстории") Тогда
		МенеджерЗаписи = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписи.Период = Параметры.Период;
		МенеджерЗаписи.Организация = Параметры.Организация;
		МенеджерЗаписи.БанковскийСчет = Параметры.БанковскийСчет;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ФайлЗагрузки = МенеджерЗаписи.ИсходныйФайл.Получить();
			ЕстьФайлЗагрузки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресФайлаКОбработке") Тогда
		ФайлЗагрузки = ПолучитьИзВременногоХранилища(Параметры.АдресФайлаКОбработке);
		Если ТипЗнч(ФайлЗагрузки) = Тип("ДвоичныеДанные") Тогда
			Попытка
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
				ФайлЗагрузки.Записать(ИмяВременногоФайла);
				
				ФайлЗагрузки = КлиентБанкВызовСервера.ПолучитьТекстФайла(ИмяВременногоФайла, Объект.Кодировка);
				
				УдалитьФайлы(ИмяВременногоФайла);
				
			Исключение
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с банком.Временный файл'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось сохранение временного файла на диск по причине: %1'"),
						ОписаниеОшибки()));
						
				Возврат;
				
			КонецПопытки;
		КонецЕсли;
		ЕстьФайлЗагрузки = Истина;
	КонецЕсли;
	
	Если ЕстьФайлЗагрузки Тогда
		ФайлЗагрузки = СтрЗаменить(СтрЗаменить(ФайлЗагрузки, "ё","е"), "Ё", "Е");
		ПотокЧтения.УстановитьТекст(ФайлЗагрузки);
		ОбработанныйТекст = ФайлЗагрузки;
		ТекстПредупреждения = ЗаполнитьДокументыНаИмпорт(ФайлЗагрузки);
	КонецЕсли;
	
	Если Параметры.Свойство("СоглашениеПрямогоОбменаСБанками") Тогда
		СоглашениеПрямогоОбменаСБанками = Параметры.СоглашениеПрямогоОбменаСБанками;
		Если ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) Тогда
			ТекстШаблона = НСтр("ru = 'С %1 действует соглашение о прямом обмене: банковская выписка будет загружена в 1С:Управление небольшой фирмой напрямую из банка'");
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстШаблона, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоглашениеПрямогоОбменаСБанками, "Банк"));
			СообщениеПрямогоОбмена = ТекстНадписи;
		КонецЕсли;
	КонецЕсли;
	
	ПрямойОбменСБанками = ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками);
	Если ПрямойОбменСБанками Тогда
		УстановитьСтраницуПодвалаНаСервере();
	КонецЕсли;
	
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка")
		И ЗначениеЗаполнено(Параметры.ЭлектроннаяВыпискаБанка)
		И ТипЗнч(Параметры.ЭлектроннаяВыпискаБанка) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		СообщениеБанка = Параметры.ЭлектроннаяВыпискаБанка;
		ВыпискиБанка.Добавить(СообщениеБанка);
		ДатаСообщения = СообщениеБанка.ДатаСообщения;
		Если ЗначениеЗаполнено(ДатаСообщения) Тогда
			Объект.НачПериода = ДатаСообщения;
			Объект.КонПериода = ДатаСообщения;
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
		Иначе
			ЭлектроннаяВыпискаБанка = СокрЛП(СообщениеБанка.Представление);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	ПодсчитатьКонтрагентов();
	
	// Остатки на счете
	ОстатокНач = ДвиженияДенежныхСредствВызовСервера.ПолучитьОстатокНаСчете(Объект.БанковскийСчет, Объект.Организация);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	
	ПослеЗагрузкиВыписокВ1С = Ложь;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Добавляет в коллекцию оформляемых полей компоновки данных новое поле
//
// Параметры:
//	КоллекцияОформляемыхПолей 	- коллекция оформляемых полей КД
//	ИмяПоля						- Строка - имя поля
//
// Возвращаемое значение:
//	ОформляемоеПолеКомпоновкиДанных - созданное поле
//
// Пример:
// 	Форма.УсловноеОформление.Элементы[0].Поля
//
Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля) Экспорт
	
	ПолеЭлемента 		= КоллекцияОформляемыхПолей.Элементы.Добавить();
	ПолеЭлемента.Поле 	= Новый ПолеКомпоновкиДанных(ИмяПоля);

	Возврат ПолеЭлемента;
	
КонецФункции

// Добавляет в коллекцию отбора новую группу указанного типа.
//
// Параметры:
//	КоллекцияЭлементовОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных 
//	ТипГруппы - ГруппаЭлементовОтбораКомпоновкиДанных - ГруппаИ или ГруппаИли
//
// Возвращаемое значение:
//	ГруппаЭлементовОтбораКомпоновкиДанных - добавленная группа
//
Функция ДобавитьГруппуОтбора(КоллекцияЭлементовОтбора, ТипГруппы) Экспорт

	ГруппаЭлементовОтбора			 = КоллекцияЭлементовОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппы;
	
	Возврат ГруппаЭлементовОтбора;

КонецФункции

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
		Отказ = Истина;
	КонецЕсли;
	
	ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.Контрагенты", ,);
	Элементы.ЗагрузкаКонтрагент.ОграничениеТипа = ДопустимыеТипы;
	
	ДопустимыеТипы = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов", ,);
	Элементы.ЗагрузкаДоговор.ОграничениеТипа = ДопустимыеТипы;
	
	Оповещение = Новый ОписаниеОповещения("НачатьПодключениеРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, Новый Структура("РеквизитФормы", "ФайлЗагрузки"));
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура НачатьПодключениеРасширенияРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма.РасширениеРаботыСФайламиПодключено = Подключено;
	Если ЭтаФорма.РасширениеРаботыСФайламиПодключено Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
			Объект.ФайлЗагрузки = "c:\kl_to_1c.txt";
		КонецЕсли;
	Иначе
		Объект.ФайлЗагрузки = "";
	КонецЕсли;
	
	Если НЕ Подключено Тогда
		//Элементы.ЗагрузкаОбновить.Видимость = Ложь; // Работа выполняется с текстом, а не с файлами.
	КонецЕсли;
	
	Если ВыпискиБанка.Количество() > 0 Тогда
		ПрочитатьДанныеИзФайла();
		Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКомандныхПанелей

// Процедура - обработчик команды ЗагрузкаОтметитьВсе.
//
&НаКлиенте
Процедура ЗагрузкаОтметитьВсеВыполнить(Команда)
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Истина, Истина);
	УстановитьСтраницуПодвалаНаКлиенте(Истина);
	
КонецПроцедуры // ЗагрузкаОтметитьВсеВыполнить()

// Процедура - обработчик команды ЗагрузкаСнятьОтметкуУВсех.
//
&НаКлиенте
Процедура ЗагрузкаСнятьОтметкуУВсехВыполнить(Команда)
	
	УстановитьФлаги(Объект.Загрузка, "Загружать", Ложь, Истина);
	Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	
КонецПроцедуры // ЗагрузкаСнятьОтметкуУВсехВыполнить()

// Процедура - обработчик команды НеНайденныеРеквизитыЗагрузкаОтметитьВсе.
//
&НаКлиенте
Процедура НеНайденныеРеквизитыЗагрузкаОтметитьВсе(Команда)
	
	УстановитьФлаги(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Загружать", Истина, Ложь);
	
КонецПроцедуры // НеНайденныеРеквизитыЗагрузкаОтметитьВсе()

// Процедура - обработчик команды НеНайденныеРеквизитыСнятьОтметкуУВсех.
//
&НаКлиенте
Процедура НеНайденныеРеквизитыСнятьОтметкуУВсех(Команда)
	
	УстановитьФлаги(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Загружать", Ложь, Ложь);
	
КонецПроцедуры // НеНайденныеРеквизитыСнятьОтметкуУВсех()

// Процедура - обработчик команды ЗагрузкаОбновить.
//
&НаКлиенте
Процедура ЗагрузкаОбновитьВыполнить(Команда)
	
	ПослеЗагрузкиВыписокВ1С = Ложь;
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	//ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//Элементы.Группа6.ТекущаяСтраница = Элементы.Группа7;
	
	Состояние(
		НСтр("ru='Выполняется чтение файла выписки...'"),
		,
		НСтр("ru='Пожалуйста, подождите'"),
		БиблиотекаКартинок.ЗагрузкаДанных32
	);
	
	ПрочитатьДанныеИзФайла();
	
	Если Объект.Загрузка.Количество() = 0 Тогда
		//ПоказатьПредупреждение(Неопределено, НСтр("ru='В файле нет данных о платежах или их не удалось прочитать'"));
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(ЭтаФорма,
				НСтр("ru='В файле нет данных о платежах или их не удалось прочитать'")
				,, "ЭлектроннаяВыпискаБанка");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаОбновитьВыполнить()

&НаСервере
Процедура НастроитьВидимостьЭлементовНаСервере(ПолноеОбновлениеСтраницыПодвала = Ложь) Экспорт
	
	ЕстьОшибки = Ложь; // Могут быть ошибки из-за не верного формата суммы и когда не найдены контрагент, РС или договор...
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ОписаниеОшибок) Тогда
			ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//КоличествоНеНайденныхКонтрагентов = ТаблицаКонтрагентов.ПолучитьЭлементы().Количество();
	Элементы.НеНайденныеРеквизиты.Видимость = (КоличествоНеНайденныхКонтрагентов > 0);
	//Элементы.Загрузить.Заголовок = ?(КоличествоНеНайденныхКонтрагентов > 0, "Загрузить только выписку в 1С (не создавать контрагентов)", "Загрузить выписку в 1С");
	//Элементы.ТаблицаКонтрагентовСоздатьКонтрагентов.Видимость = (КоличествоНеНайденныхКонтрагентов > 0);
	//Элементы.Загрузить.КнопкаПоУмолчанию = Не Элементы.ТаблицаКонтрагентовСоздатьКонтрагентов.Видимость;
	//Элементы.Загрузить.Шрифт = Новый Шрифт(Элементы.Загрузить.Шрифт,,, Элементы.Загрузить.КнопкаПоУмолчанию);
	//Элементы.ТаблицаКонтрагентовСоздатьКонтрагентов.КнопкаПоУмолчанию = Элементы.ТаблицаКонтрагентовСоздатьКонтрагентов.Видимость;
	//Элементы.Группа3.ОтображатьЗаголовок = (КоличествоНеНайденныхКонтрагентов > 0);
	Если КоличествоНеНайденныхКонтрагентов = 0 И КоличествоНеНайденныхРСчетов = 0 Тогда
		Элементы.ДекорацияНеНайденныеРеквизиты.Гиперссылка = Ложь;
		Элементы.ДекорацияНеНайденныеРеквизиты.Заголовок = "Новых контрагентов: 0. Р/счетов: 0";
		//Элементы.ДекорацияНеНайденныеРеквизиты.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияНеНайденныеРеквизиты.Гиперссылка = Истина;
		Элементы.ДекорацияНеНайденныеРеквизиты.Заголовок = "Новых контрагентов: "+КоличествоНеНайденныхКонтрагентов+".  Р/счетов: "+КоличествоНеНайденныхРСчетов;
		//Элементы.ДекорацияНеНайденныеРеквизиты.Видимость = Истина;
	КонецЕсли;
	Элементы.ЗагрузкаСнятьОтметкуУВсехСтрокСПредупреждениями.Видимость = НЕ ПрямойОбменСБанками И ЕстьОшибки;
	
	УстановитьСтраницуПодвалаНаСервере(, ПолноеОбновлениеСтраницыПодвала);
	
КонецПроцедуры

// Процедура - обработчик команды Загрузить.
//
&НаКлиенте
Процедура ЗагрузитьВыполнить(Команда)
	
	ПослеЗагрузкиВыписокВ1С = Истина;
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Загрузка.Количество() > 0 Тогда
		
		ЕстьОтмеченныеСтроки = Ложь;
		Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
			Если ТекущаяСтрока.Загружать Тогда
				ЕстьОтмеченныеСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьОтмеченныеСтроки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не отмечено ни одной строки! Выписки не будут загружены. Нужно установить отметку в загружаемых строках и нажать кнопку еще раз.'");
			Сообщение.Поле = "Объект.Загрузка[0].Загружать";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ТаблицаРезультата.Очистить();
		
		Состояние(
			НСтр("ru='Выполняется загрузка выписки из файла в 1С...'"),
			,
			НСтр("ru='Пожалуйста, подождите'"),
			БиблиотекаКартинок.ЗагрузкаДанных32
		);
		
		СтруктураДанныхЗагрузки = ЗагрузитьВыполнитьНаСервере();
		
		Если СтруктураДанныхЗагрузки.Свойство("ТекстПредупреждения") И НЕ ПустаяСтрока(СтруктураДанныхЗагрузки.ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(Неопределено, СтруктураДанныхЗагрузки.ТекстПредупреждения);
		КонецЕсли;
		
		ПараметрыЗавершения = Новый Структура("ЕстьПредупржедения, ОбработаноСтрок, ВсегоСтрок, СообщенияПользователю", 
			СтруктураДанныхЗагрузки.ЕстьПредупржедения, СтруктураДанныхЗагрузки.ОбработаноСтрок, СтруктураДанныхЗагрузки.ВсегоСтрок, СтруктураДанныхЗагрузки.СообщенияПользователю);
		
		#Если ВебКлиент Тогда
			
			ЛеваяЧастьПредупреждения = "Загрузка платежных документов завершена";
			ПраваяЧастьПредупреждения = НСтр("ru = 'Обработано строк: '")+ПараметрыЗавершения.ОбработаноСтрок+НСтр("ru = '. Всего строк: '")+ПараметрыЗавершения.ВсегоСтрок+".";
			ТекстПредупреждения = ЛеваяЧастьПредупреждения + Символы.ПС + Символы.ПС + ПраваяЧастьПредупреждения;
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			
			РезультатЗавершения = Неопределено; // Новый Структура("ПоказатьПротокол", Истина);
			ЗагрузкаПлатежныхДокументовЗавершение(РезультатЗавершения, ПараметрыЗавершения);
			
		#Иначе
			
			ОписаниеОповещенияЗагрузкиПлатежныхДокументов = Новый ОписаниеОповещения("ЗагрузкаПлатежныхДокументовЗавершение", ЭтотОбъект, ПараметрыЗавершения);
			ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаЗагрузкаДокументовЗавершена",
				ПараметрыЗавершения,
				,,,,ОписаниеОповещенияЗагрузкиПлатежныхДокументов, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
		#КонецЕсли
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Список документов для загрузки пуст.'"));
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьВыполнить()

&НаСервере
Функция ЗагрузитьВыполнитьНаСервере()
	
	СтруктураДанныхЗагрузки = ЗагрузитьДанныеИзФайла();
		
	//Если РасширениеРаботыСФайламиПодключено Тогда // Работа выполняется с текстом, а не с файлами.
		
		ТекстПредупреждения = ЗаполнитьДокументыНаИмпорт(ПотокЧтения.ПолучитьТекст(), Истина); // Обновление таблицы.
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			СтруктураДанныхЗагрузки.Вставить("ТекстПредупреждения", ТекстПредупреждения);
		КонецЕсли;
		
	//КонецЕсли;
	
	ВывестиТаблицуРезультата();
	ЗаписатьПротокол();
	
	Возврат СтруктураДанныхЗагрузки;
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОбОстаткахНаСчете()
	
	ОстатокНач = ДвиженияДенежныхСредствВызовСервера.ПолучитьОстатокНаСчете(Объект.БанковскийСчет, Объект.Организация);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПлатежныхДокументовЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если ТипЗнч(РезультатЗавершения) = Тип("Структура") Тогда
		Элементы.ЗакрытьПротокол.КнопкаПоУмолчанию = Истина;
		Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаПротокол;
	ИначеЕсли ПараметрыЗавершения.ЕстьПредупржедения Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаЗагрузкаЗавершенаСПредупреждениями;
	Иначе
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаЗагрузкаЗавершенаБезПредупреждений;
	КонецЕсли;
	
	// Обход очистки сообщений ползователю.
	ОчиститьСообщения();
	Для Каждого Сообщение Из ПараметрыЗавершения.СообщенияПользователю Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Если Объект.ПроводитьЗагружаемые Тогда
		Оповестить("ОповещениеОбИзмененииДолга");
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	ОповеститьОбИзменении(Тип("ДокументСсылка.РасходСоСчета"));
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуРезультата()
	
	// вывод в макет
	
	СтруктураПараметров = Новый Структура(
		"НазваниеОрганизации, ОписаниеПериода, ДатаСеанса",
		Объект.Организация,
		ПредставлениеПериода(Объект.НачПериода, КонецДня(Объект.КонПериода)),
		ТекущаяДатаСеанса());
	
	РезультатЗагрузки.Очистить();
	
	Макет = Обработки.КлиентБанк.ПолучитьМакет("ПротоколЗагрузки");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовка.Параметры.Заполнить(СтруктураПараметров);
	
	РезультатЗагрузки.Вывести(ОбластьЗаголовка);
	
	ОбластьНовогоПерваяСтрока = Макет.ПолучитьОбласть("СозданНовый");
	ОбластьНеЗагружалсяПерваяСтрока = Макет.ПолучитьОбласть("НеЗагружался");
	ОбластьОтредактированПерваяСтрока = Макет.ПолучитьОбласть("Отредактирован");
	
	ОбластьНовогоВтораяСтрока = Макет.ПолучитьОбласть("СозданНовыйВтораяСтрока");
	ОбластьНеЗагружалсяВтораяСтрока = Макет.ПолучитьОбласть("НеЗагружалсяВтораяСтрока");
	ОбластьОтредактированВтораяСтрока = Макет.ПолучитьОбласть("ОтредактированВтораяСтрока");
	
	НомерПП = 1;
	ДокументВПротоколе = Неопределено;
	
	Для Каждого СтрокаПротокола Из ТаблицаРезультата Цикл
		
		Область = Неопределено;
		
		Если СтрокаПротокола.Документ <> ДокументВПротоколе Тогда
			ДокументВПротоколе = СтрокаПротокола.Документ;
			ОбластьНового = ОбластьНовогоПерваяСтрока;
			ОбластьОтредактирован = ОбластьОтредактированПерваяСтрока;
			ОбластьНеЗагружался = ОбластьНеЗагружалсяПерваяСтрока;
			ЗаполнятьНомерПП = Истина;
			ВтораяЧастьОбластиКомментария = "";
		Иначе
			ОбластьНового = ОбластьНовогоВтораяСтрока;
			ОбластьОтредактирован = ОбластьОтредактированВтораяСтрока;
			ОбластьНеЗагружался = ОбластьНеЗагружалсяВтораяСтрока;
			ЗаполнятьНомерПП = Ложь;
			ВтораяЧастьОбластиКомментария = "ВтораяСтрока";
		КонецЕсли;
		
		Если СтрокаПротокола.СозданНовый Тогда
			Область = ОбластьНового;
			ОбластьКомментария = "СозданНовый"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "СозданНовый"+ВтораяЧастьОбластиКомментария+"Действия";
		ИначеЕсли СтрокаПротокола.Записывался Тогда
			Область = ОбластьОтредактирован;
			ОбластьКомментария = "Отредактирован"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "Отредактирован"+ВтораяЧастьОбластиКомментария+"Действия";
		Иначе
			Область = ОбластьНеЗагружался;
			ОбластьКомментария = "НеЗагружался"+ВтораяЧастьОбластиКомментария+"Комментарий";
			ОбластьДействия = "НеЗагружался"+ВтораяЧастьОбластиКомментария+"Действия";
		КонецЕсли;
		
		Если СтрокаПротокола.Важность = 1 Тогда
			Область.Область(ОбластьКомментария).ЦветФона = WebЦвета.Желтый;
			Область.Область(ОбластьДействия).ЦветФона = WebЦвета.Желтый;
		КонецЕсли;
		
		Область.Параметры.Заполнить(СтрокаПротокола);
		Если ЗаполнятьНомерПП Тогда
			Область.Параметры["НомерПП"] = НомерПП;
			НомерПП = НомерПП + 1;
		КонецЕсли;
		РезультатЗагрузки.Вывести(Область);
		
	КонецЦикла;
	
	Если ТаблицаПомеченныхНаУдалениеКакДубль.Количество() > 0 Тогда
		
		ОбластьЗаголовка = Макет.ПолучитьОбласть("ШапкаДубли");
		ОбластьЗаголовка.Параметры.Заполнить(СтруктураПараметров);
		
		РезультатЗагрузки.Вывести(ОбластьЗаголовка);
		
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаДубли");
		
		НомерПП = 1;
		
		Для Каждого СтрокаПротокола Из ТаблицаПомеченныхНаУдалениеКакДубль Цикл
			
			Область = ОбластьСтроки;
			
			Область.Параметры.Заполнить(СтрокаПротокола);
			Область.Параметры["НомерПП"] = НомерПП;
			НомерПП = НомерПП + 1;
			
			Если Не СтрокаПротокола.ОперацияВыполнена Тогда
				Область.Параметры.Комментарий = НСтр("ru = 'Не получилось отменить проведение!'");
			КонецЕсли;
			
			РезультатЗагрузки.Вывести(Область);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПротокол()
	
	Запись = РегистрыСведений.ИсторияРаботыСКлиентомБанка.СоздатьМенеджерЗаписи();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Организация = Объект.Организация;
	Запись.БанковскийСчет = Объект.БанковскийСчет;
	Запись.КоличествоДокументовВВыписке = Объект.Загрузка.Количество();
	Запись.Загрузка = Истина;
	Запись.Кодировка = Объект.Кодировка;
	
	Запись.ИсходныйФайл = 
		Новый ХранилищеЗначения(
			ОбработанныйТекст,
			Новый СжатиеДанных(5));
	
	Запись.ПротоколЗагрузки =
		Новый ХранилищеЗначения(
			РезультатЗагрузки,
			Новый СжатиеДанных(5));
	
	Запись.Записать();
	
КонецПроцедуры

// Процедура - обработчик команды СоздатьКонтрагентов.
//
&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	СоздатьНовогоКонтрагента();
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры // СоздатьКонтрагентов()

&НаКлиенте
Процедура ЗапроситьЭлектроннуюВыпискуБанка(Команда)
	
	Если НЕ ЗначениеЗаполнено(СоглашениеПрямогоОбменаСБанками) ИЛИ НЕ ПериодЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСБанкамиКлиент.ПолучитьВыпискуБанка(
		СоглашениеПрямогоОбменаСБанками, Объект.НачПериода, Объект.КонПериода, ЭтотОбъект, ПолучитьНомерСчета(Объект.БанковскийСчет));
	
	УстановитьСтраницуПодвалаНаКлиенте();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСсылкиНаЭлектронныеВыписки(НачалоПериода, КонецПериода)
	
	ШаблонСтроки = НСтр("ru = 'Выписка банка за период с %1 по %2'");
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки,
		Формат(НачалоПериода, "ДФ=dd.MM.yyyy"), Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	
КонецФункции // СсылкаНаЭлектронныеВыписки()

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяВыпискаБанкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыпискиБанка.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыпискиБанка", ВыпискиБанка);
		ПараметрыФормы.Вставить("НачалоПериода", Объект.НачПериода);
		ПараметрыФормы.Вставить("КонецПериода", Объект.КонПериода);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаСпискаВыписок", ПараметрыФормы);
		
	ИначеЕсли ВыпискиБанка.Количество() = 1 Тогда
		
		ПараметрыФормы = Новый Структура("СообщениеОбмена", ВыпискиБанка[0].Значение);
		ОткрытьФорму("Документ.СообщениеОбменСБанками.Форма.ЭлектронныйДокумент", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийФормы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
Функция ПодготовитьОднуСтрокуТекстаПредупреждения(ОписаниеОшибок, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях = Неопределено)
	
	ПодготовленноеОписаниеОшибок = ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден контрагент'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСКонтрагентом.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСКонтрагентом+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.КонтрагентНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 2. Определим, что делать со счетом контрагента.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден счет'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + 
			?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), НСтр("ru = ' Будет создан новый при загрузке в 1С.'"), " "+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 3. Определим, что делать с договором.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Не найден договор'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ?(ДанныеСтроки.ДействиеСоСчетомКонтрагента.Пустая(), 
			НСтр("ru = 'Не найден основной договор. Будет создан новый при загрузке в 1С и установлен основным.'"), 
			НСтр("ru = 'Не найден договор контрагента. '")+ДанныеСтроки.ДействиеСоСчетомКонтрагента+".");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ДоговорНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 4. Определим, что делать с видом операции.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Проверьте операцию'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В назначении не найдены данные о счете, накладной или заказе.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.ВидОперацииНеНайденКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 5.1. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Укажите сумму вручную'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Сумма в файле содержит недопустимые символы.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	// 5.2. Определим, что делать с суммой.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'Сумма не указана'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' В файле из банка не указана сумма операции.'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НеВерныйФорматСуммыКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = Ложь;
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 6. Определим, что делать с дублями документов.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'соответствующих документов'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Дубли документов будут помечены на удаление!!!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 7. Определим, что делать, если есть контрагенты с одинаковым ИНН.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'контрагентов с одинаковым ИНН!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = (ДанныеСтроки.НесколькоДокументовКартинка = 0);
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	// 8. Определим, что делать, если банковские счета с одинаковым номером.
	ТекС = СтрНайти(ОписаниеОшибок, НСтр("ru = 'одинаковых банковских счетов!'"));
	Если ТекС > 0 Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = ' Проверьте контрагента и его банковский счет!'");
		
		Если Не ПоказыватьЗнакПредупреждения Тогда
			ПоказыватьЗнакПредупреждения = Истина;
		КонецЕсли;
		
		ТолькоИнформацияОДублях = (ТолькоИнформацияОДублях = Неопределено ИЛИ ТолькоИнформацияОДублях = Истина);
		
		Возврат ПодготовленноеОписаниеОшибок;
	КонецЕсли;
	
	ПоказыватьЗнакПредупреждения = Истина;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьТекстПредупреждения(ДанныеСтроки, ПоказыватьЗнакПредупреждения = Ложь)
	
	ТолькоИнформацияОДублях = Неопределено;
	
	ПодготовленноеОписаниеОшибок = НСтр("ru = 'В текущей строке: '")+ Символы.ПС + Символы.ПС;
	
	Если НЕ ДанныеСтроки.Загружать Тогда
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + НСтр("ru = '<Флаг загрузки снят. Строка не будет загружена>'") + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ОписаниеОшибок = ДанныеСтроки.ОписаниеОшибок;
	
	// 1. Определим, что делать с контрагентом.
	ОбрабатываемыйТекст = ОписаниеОшибок;
	
	ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	Пока ТекС > 0 Цикл
		ОбрабатываемаяСтрока = Лев(ОбрабатываемыйТекст, ТекС - 1);
		ОбрабатываемыйТекст = Сред(ОбрабатываемыйТекст, ТекС + 1);
		
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемаяСтрока, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС + Символы.ПС;
		
		ТекС = СтрНайти(ОбрабатываемыйТекст, Символы.ПС);
	КонецЦикла;
	
	Если Не ПустаяСтрока(ОбрабатываемыйТекст) Тогда
		ОбрабатываемаяСтрока = ПодготовитьОднуСтрокуТекстаПредупреждения(ОбрабатываемыйТекст, ПоказыватьЗнакПредупреждения, ДанныеСтроки, ТолькоИнформацияОДублях);
		ПодготовленноеОписаниеОшибок = ПодготовленноеОписаниеОшибок + ОбрабатываемаяСтрока + Символы.ПС;
	КонецЕсли;
	
	Если ТолькоИнформацияОДублях = Истина Тогда
		ПоказыватьЗнакПредупреждения = Ложь;
	КонецЕсли;
	
	Возврат ПодготовленноеОписаниеОшибок;
	
КонецФункции

// Процедура - обработчик события Выбор табличной части Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗагрузкаЗагружать" Тогда
		
		СтандартнаяОбработка = Ложь;
		Элементы.Загрузка.ТекущиеДанные.Загружать = НЕ (Элементы.Загрузка.ТекущиеДанные.Загружать);
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНомерКартинки" Тогда 
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "Определить");
		
		//Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		//	ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
		//	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		//Иначе
		//	ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ТекущаяСтрока));
		//КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНазначениеПлатежа" Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено,Элементы.Загрузка.ТекущиеДанные.НазначениеПлатежа);
		
	ИначеЕсли Поле.Имя = "ЗагрузкаКонтрагент" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРедактированияКонтрагентов(Элементы.Загрузка.ТекущиеДанные, "ДействияСКонтрагентом");
		
	ИначеЕсли Поле.Имя = "ЗагрузкаСчетКонтрагента" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "ДействияСоСчетомКонтрагента");
		
	ИначеЕсли Поле.Имя = "ЗагрузкаДоговор" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
		ОткрытьФормуРедактированияКонтрагентов(ТекущаяСтрока, "ДействияСДоговором");
		
	ИначеЕсли ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.Документ)
		И ((Поле.Имя = "ЗагрузкаДокумент") ИЛИ (Поле.Имя = "ЗагрузкаДокументНайден")) Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		Если ДанныеСтроки.НесколькоДокументовКартинка = 0 ИЛИ СтрНайти(ДанныеСтроки.ДокументНайден, НСтр("ru = 'И еще'")) > 0 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФормуРедактированияКонтрагентов(ДанныеСтроки, "ДействияСоСпискомНайденныхДокументов");
		Иначе
			ОткрытьФорму("Документ." + ДанныеСтроки.ВидДокумента + ".ФормаОбъекта",
				Новый Структура("Ключ", ДанныеСтроки.Документ),
				ДанныеСтроки.Документ
			);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ЗагрузкаНеВерныйФорматСуммыКартинка" Тогда
		
		ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.Сумма) Тогда
			ПоказатьВводЧисла(Новый ОписаниеОповещения("ПоказатьВводСуммыДокументаЗавершение", ЭтотОбъект, ТекущиеДанные.ПолучитьИдентификатор()),
				ТекущиеДанные.СуммаДокумента, 
				?(ПустаяСтрока(ТекущиеДанные.Сумма), 
				НСтр("ru = 'Введите нужное число!'"), 
				СтрЗаменить(НСтр("ru = 'Введите нужное число (%1)!'"), "%1", СокрЛП(ТекущиеДанные.Сумма)))
				, 15, 2);
		Иначе
			СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ТекущиеДанные);
			СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
			ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
				,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
			
	ИначеЕсли (Поле.Имя = "ЗагрузкаСуммаДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаПоступило"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписано"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписаноСМинусом") Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		НеВерныйФорматСуммы = ЕстьНеЦифрыНаКлиенте(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтроки.Сумма, ".", ""), "-", ""), ",", ""))
			И ЗначениеЗаполнено(ДанныеСтроки.Сумма);
		Если НеВерныйФорматСуммы Тогда
			ПоказатьВводЧисла(Новый ОписаниеОповещения("ПоказатьВводСуммыДокументаЗавершение", ЭтотОбъект, ДанныеСтроки.ПолучитьИдентификатор()),
				ДанныеСтроки.СуммаДокумента, 
				?(ПустаяСтрока(ДанныеСтроки.Сумма), 
				НСтр("ru = 'Введите нужное число!'"), 
				СтрЗаменить(НСтр("ru = 'Введите нужное число (%1)!'"), "%1", СокрЛП(ДанныеСтроки.Сумма)))
				, 15, 2);
		Иначе
			СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ДанныеСтроки);
			СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
			ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
				,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ЗагрузкаИмяДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаДатаДок"
		ИЛИ Поле.Имя = "ЗагрузкаНомерДок"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаДокумента"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаПоступило"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписано"
		ИЛИ Поле.Имя = "ЗагрузкаСуммаСписаноСМинусом"
		ИЛИ Поле.Имя = "ЗагрузкаДокументНеЗагружен"
		ИЛИ Поле.Имя = "ЗагрузкаНомерСтроки") Тогда
		
		ДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
		СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(ДанныеСтроки);
		СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
		ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
			,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузкаВыбор()

// Процедура создает нового контрагента.
//
&НаСервере
Процедура СоздатьНовогоКонтрагента()
	
	Для каждого Элемент Из ТаблицаКонтрагентов.ПолучитьЭлементы() Цикл
		
		Если Элемент.Загружать Тогда
			РеквизитФормыВЗначение("Объект").СоздатьКонтрагента(Элемент).Пустая();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьНовогоКонтрагента()

// Процедура проверяет выбарн ли контрагент. Если не выбран, то пользователь увидет сообщение об ошибке.
//
&НаКлиенте
Функция ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, СтрокаСНазваниемДокумента)
	
	Если ТипЗнч(ТекущаяСтрокаТабличнойЧасти.Контрагент) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'Контрагент не идентифицирован, выбор %1 не возможен.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаСНазваниемДокумента);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции //ПроверитьВозможностьВыбораДокумента()

&НаСервереБезКонтекста
Функция ПолучитьРеквизитКонтрагента(Контрагент, Реквизит)
	
	Возврат Контрагент[Реквизит];
	
КонецФункции

// Процедура проверяет настройки расчетов в карточке контрагента. Если нужный флаг не установлен, 
// то пользователь увидит сообщение об ошибке.
//
&НаКлиенте
Функция ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, СтрокаСНазваниемДокумента, ИмяРеквизита)
	
	Если Не ПолучитьРеквизитКонтрагента(ТекущаяСтрокаТабличнойЧасти.Контрагент, ИмяРеквизита) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстСообщения = НСтр("ru = 'С контрагент не ведется учет расчетов по %1. Выбор документа не требуется.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаСНазваниемДокумента);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции //ПроверитьВозможностьВыбораДокумента()

// Процедура - обработчик события НачалоВыбора для поля Заказ списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'заказа'"));
	СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'заказам'"), "ВестиРасчетыПоЗаказам");
	
КонецПроцедуры //ЗагрузкаЗаказНачалоВыбора()

// Процедура - обработчик события НачалоВыбора для поля СчетНаОплату списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаСчетНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'счета на оплату'"));
	СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'счетам на оплату'"), "ВестиУчетОплатыПоСчетам");
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора для поля ДокументРасчетов списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаДокументРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'документа расчетов'"));
	СтандартнаяОбработка = ПроверитьНастройкиРасчетов(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'документам расчетов'"), "ВестиРасчетыПоДокументам");
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора для поля ПлатежноеПоручение списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаПлатежноеПоручениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрокаТабличнойЧасти = Элементы.Загрузка.ТекущиеДанные;
	СтандартнаяОбработка = ПроверитьВозможностьВыбораДокумента(ТекущаяСтрокаТабличнойЧасти, НСтр("ru = 'платежного поручения'"));
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении списка Загрузка.
//
&НаКлиенте
Процедура ЗагрузкаЗагружатьПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Загрузка.ТекущиеДанные;
	ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока);
	
	УстановитьСтраницуПодвалаНаКлиенте(ТекСтрока.Загружать);
	
КонецПроцедуры // ЗагрузкаЗагружатьПриИзменении()

&НаКлиенте
Процедура УстановитьСтраницуПодвалаНаКлиенте(ЕстьСтрокаДляЗагрузки = Ложь)
	
	Если Не ЕстьСтрокаДляЗагрузки Тогда
		ЕстьОтмеченные = ЕстьОтмеченныеСтрокиНаКлиенте();
	Иначе
		ЕстьОтмеченные = Истина;
	КонецЕсли;
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница <> Элементы.СтраницаВсеДанныеГотовыКЗагрузке Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаКлиенте() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		Иначе
			//Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПодвалаНаСервере(ЕстьСтрокаДляЗагрузки = Ложь, ПолноеОбновлениеСтраницыПодвала = Ложь)
	
	Если Объект.Загрузка.Количество() = 0 Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаСписокДляЗагрузкиПуст;
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьСтрокаДляЗагрузки Тогда
		ЕстьОтмеченные = ЕстьОтмеченныеСтрокиНаСервере();
	Иначе
		ЕстьОтмеченные = Истина;
	КонецЕсли;
	
	Если Не ЕстьОтмеченные Тогда
		Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок;
	Иначе
		Если Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение ИЛИ
			Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаНетОтмеченныхСтрок ИЛИ
			ПолноеОбновлениеСтраницыПодвала Тогда
			Если НужноПоказатьСтраницуВсеДанныеГотовыКЗагрузкеНаСерврере() Тогда
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаВсеДанныеГотовыКЗагрузке;
			Иначе
				Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
			КонецЕсли;
		Иначе
			//Элементы.СтраницыНадписиПодТаблицей.ТекущаяСтраница = Элементы.СтраницаПредупреждающееСообщение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОтмеченныеСтрокиНаКлиенте()
	
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.Загружать Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОтмеченныеСтрокиНаСервере()
	
	Для Каждого ТекущаяСтрока Из Объект.Загрузка Цикл
		Если ТекущаяСтрока.Загружать Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполнение суммы отмеченныых.
//
&НаКлиенте
Процедура ЗаполнитьСуммыВыделеныхНаКлиенте(ТекСтрока)
	
	ТекСтрока.СуммаПоступилоВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаПоступило, 0);
	ТекСтрока.СуммаСписаноВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаСписано, 0);
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаДокумента, 0);
	ОстатокКон = ОстатокНач + Объект.Загрузка.Итог("СуммаПоступилоВыделено") - Объект.Загрузка.Итог("СуммаСписаноВыделено");
	ТекСтрока.ДокументНеЗагружен = ?(ТекСтрока.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
	
КонецПроцедуры

// Заполнение суммы отмеченныых.
//
&НаСервере
Процедура ЗаполнитьСуммыВыделеныхНаСервере(ТекСтрока)
	
	ТекСтрока.СуммаПоступилоВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаПоступило, 0);
	ТекСтрока.СуммаСписаноВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаСписано, 0);
	ТекСтрока.СуммаДокументаВыделено = ?(ТекСтрока.Загружать, ТекСтрока.СуммаДокумента, 0);
	ТекСтрока.ДокументНеЗагружен = ?(ТекСтрока.Загружать, НСтр("ru='Будет загружен'"), НСтр("ru='Не будет загружен'"))
	
КонецПроцедуры

// Процедура - обработчик команды "Настройка".
//
&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыОткрытияФормы.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	ПараметрыОткрытияФормы.Вставить("Программа", Объект.Программа);
	ПараметрыОткрытияФормы.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	ПараметрыОткрытияФормы.Вставить("ЗаполнятьДолгиАвтоматически", Объект.ЗаполнятьДолгиАвтоматически);
	ПараметрыОткрытияФормы.Вставить("СоглашениеПрямогоОбменаСБанками", СоглашениеПрямогоОбменаСБанками);
	ПараметрыОткрытияФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОткрытияФормы.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	ПараметрыОткрытияФормы.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	ПараметрыОткрытияФормы.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	ПараметрыОткрытияФормы.Вставить("ФормаЗагрузка", Истина);
	ПараметрыОткрытияФормы.Вставить("ЗагруженыНастройкиСчета", ЗагруженыНастройкиСчета);
	ПараметрыОткрытияФормы.Вставить("БанковскийСчетНомер", БанковскийСчетНомер);
	Если Не ПрямойОбменСБанками Тогда
		ПараметрыОткрытияФормы.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	КонецЕсли;
	ПараметрыОткрытияФормы.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	ПараметрыОткрытияФормы.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	ПараметрыОткрытияФормы.Вставить("ГруппаДоступа", Объект.ГруппаДоступа);
	ПараметрыОткрытияФормы.Вставить("НастройкиОбщиеПолучены", НастройкиОбщиеПолучены);
	ПараметрыОткрытияФормы.Вставить("КонтролироватьБезопасностьОбменаСБанком", Объект.КонтролироватьБезопасностьОбменаСБанком);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройка",
		ПараметрыОткрытияФормы
	);
	
КонецПроцедуры // Настройка()

&НаСервере
Процедура ЗагрузитьНастройкиФормыДляСчета()
	
	Настройки = Неопределено;
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ?(ЗначениеЗаполнено(Объект.БанковскийСчет), ПолучитьНавигационнуюСсылку(Объект.БанковскийСчет), "БанковскийСчетНеУказан"), "ВыгрузкаВСбербанк");
	Если Настройки = Неопределено Тогда
		Настройки = ХранилищеСистемныхНастроек.Загрузить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/БанковскийСчетНеУказан", "ВыгрузкаВСбербанк");
		ЗагруженыНастройкиСчета = Ложь;
	Иначе
		ЗагруженыНастройкиСчета = Истина;
	КонецЕсли;
	
	Если Настройки <> Неопределено Тогда
		
		Объект.ФайлВыгрузки = Настройки.Получить("ФайлВыгрузки");
		Объект.ФайлЗагрузки = Настройки.Получить("ФайлЗагрузки");
		Объект.Программа = Настройки.Получить("Программа");
		Объект.СтатьяДДСИсходящий = Настройки.Получить("СтатьяДДСИсходящий");
		Объект.СтатьяДДСВходящий = Настройки.Получить("СтатьяДДСВходящий");
		Объект.ПроводитьЗагружаемые = Настройки.Получить("ПроводитьЗагружаемые");
		Если Настройки.Получить("ЗаполнятьДолгиАвтоматически") = Неопределено Тогда
			Объект.ЗаполнятьДолгиАвтоматически = Истина;
		Иначе
			Объект.ЗаполнятьДолгиАвтоматически = Настройки.Получить("ЗаполнятьДолгиАвтоматически");
		КонецЕсли;
		Объект.Кодировка = Настройки.Получить("Кодировка");
		Если НЕ ЗначениеЗаполнено(Объект.Кодировка) Тогда
			Объект.Кодировка = "Авто";
		КонецЕсли;
		Объект.ВерсияФормата = Настройки.Получить("ВерсияФормата");
		Если НЕ ЗначениеЗаполнено(Объект.ВерсияФормата) Тогда
			Объект.ВерсияФормата = "1.02";
		КонецЕсли;
		Если Настройки.Получить("АвтоматическиПодставлятьДокументы") = Неопределено Тогда
			Объект.АвтоматическиПодставлятьДокументы = Истина;
		Иначе
			Объект.АвтоматическиПодставлятьДокументы = Настройки.Получить("АвтоматическиПодставлятьДокументы");
		КонецЕсли;
		Если Настройки.Получить("НеУдалятьДокументыКоторыхНетВВыписке") = Неопределено Тогда
			Объект.НеУдалятьДокументыКоторыхНетВВыписке = Ложь;
		Иначе
			Объект.НеУдалятьДокументыКоторыхНетВВыписке = Настройки.Получить("НеУдалятьДокументыКоторыхНетВВыписке");
		КонецЕсли;
		Если Настройки.Получить("АнализироватьИсториюВыбораЗначенийРеквизитов") = Неопределено Тогда
			Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Истина;
		Иначе
			Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Настройки.Получить("АнализироватьИсториюВыбораЗначенийРеквизитов");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Настройки.Получить("ГруппаДоступа")) Тогда
			Объект.ГруппаДоступа = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяГруппаДоступаКонтрагентов");
		Иначе
			Объект.ГруппаДоступа = Настройки.Получить("ГруппаДоступа");
		КонецЕсли;
		Если Настройки.Получить("КонтролироватьБезопасностьОбменаСБанком") = Неопределено Тогда
			Объект.КонтролироватьБезопасностьОбменаСБанком = Истина;
		Иначе
			Объект.КонтролироватьБезопасностьОбменаСБанком = Настройки.Получить("КонтролироватьБезопасностьОбменаСБанком");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиФормы()

// Процедура - обработка оповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроек" + УникальныйИдентификатор Тогда
		Объект.Кодировка = Параметр.Кодировка;
		Объект.Программа = Параметр.Программа;
		Объект.ВерсияФормата = Параметр.ВерсияФормата;
		Объект.ПроводитьЗагружаемые = Параметр.ПроводитьЗагружаемые;
		Объект.ЗаполнятьДолгиАвтоматически = Параметр.ЗаполнятьДолгиАвтоматически;
		Объект.АнализироватьИсториюВыбораЗначенийРеквизитов = Параметр.АнализироватьИсториюВыбораЗначенийРеквизитов;
		Объект.АвтоматическиПодставлятьДокументы = Параметр.АвтоматическиПодставлятьДокументы;
		Если Не ПрямойОбменСБанками Тогда
			Объект.ФайлЗагрузки = Параметр.ФайлЗагрузки;
		КонецЕсли;
		Объект.СтатьяДДСВходящий = Параметр.СтатьяДДСВходящий;
		Объект.СтатьяДДСИсходящий = Параметр.СтатьяДДСИсходящий;
		Объект.ГруппаДоступа = Параметр.ГруппаДоступа;
		Объект.НеУдалятьДокументыКоторыхНетВВыписке = Параметр.НеУдалятьДокументыКоторыхНетВВыписке;
		Объект.КонтролироватьБезопасностьОбменаСБанком = Параметр.КонтролироватьБезопасностьОбменаСБанком;
		
		СохранитьНастройкиФормы();
	ИначеЕсли ИмяСобытия = "БылиСозданыКонтрагенты" Тогда
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура сохраняет настройки формы.
//
&НаСервере
Процедура СохранитьНастройкиФормы()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("ФайлЗагрузки", Объект.ФайлЗагрузки);
	Настройки.Вставить("ФайлВыгрузки", Объект.ФайлВыгрузки);
	Настройки.Вставить("Программа", Объект.Программа);
	Настройки.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	Настройки.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	Настройки.Вставить("ПроводитьЗагружаемые", Объект.ПроводитьЗагружаемые);
	Настройки.Вставить("ЗаполнятьДолгиАвтоматически", Объект.ЗаполнятьДолгиАвтоматически);
	Настройки.Вставить("Кодировка", Объект.Кодировка);
	Настройки.Вставить("ВерсияФормата", Объект.ВерсияФормата);
	Настройки.Вставить("АвтоматическиПодставлятьДокументы", Объект.АвтоматическиПодставлятьДокументы);
	Настройки.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", Объект.НеУдалятьДокументыКоторыхНетВВыписке);
	Настройки.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", Объект.АнализироватьИсториюВыбораЗначенийРеквизитов);
	Настройки.Вставить("ГруппаДоступа", Объект.ГруппаДоступа);
	Настройки.Вставить("КонтролироватьБезопасностьОбменаСБанком", Объект.КонтролироватьБезопасностьОбменаСБанком);
	
	ХранилищеСистемныхНастроек.Сохранить("Обработка.КлиентБанк.Форма.ОсновнаяФорма/" + ?(ЗначениеЗаполнено(Объект.БанковскийСчет), ПолучитьНавигационнуюСсылку(Объект.БанковскийСчет), "БанковскийСчетНеУказан"), "ВыгрузкаВСбербанк", Настройки);
	
КонецПроцедуры // СохранитьНастройкиФормы()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВыпискиБанка.Очистить();
	Если ЗначениеЗаполнено(СообщениеПрямогоОбмена) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
			
			ВыпискиБанка.Добавить(ВыбранноеЗначение);
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
			
			Для Каждого Выписка Из ВыбранноеЗначение Цикл
				ВыпискиБанка.Добавить(Выписка);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВыпискиБанка.Количество() > 0 Тогда
			
			ПрочитатьДанныеИзФайла();
			
			Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
			ЭлектроннаяВыпискаБанка = ТекстСсылкиНаЭлектронныеВыписки(Объект.НачПериода, Объект.КонПериода);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("БылиСозданыКонтрагенты") Тогда
		
		ПрочитатьДанныеИзФайла();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Разобрать

&НаКлиенте
Процедура ИсторияЗагрузкиИВыгрузки(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура("ОтборТолькоЗагрузкаВ1С, ОтборТолькоВыгрузкаИз1С", Истина, Ложь);
	ОткрытьФорму("РегистрСведений.ИсторияРаботыСКлиентомБанка.ФормаСписка", ПараметрыОткрытияФормы);
	
КонецПроцедуры

// Процедура заполняет документы на импорт.
//
&НаСервере
Функция ОбновитьТаблицуКонтрагентов(НастроитьВидимостьЭлементов = Истина)
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	КоличествоНеНайденныхКонтрагентов = 0;
	КоличествоНеНайденныхРСчетов = 0;
	
	Для каждого СтрокаДокумента Из Объект.Загрузка Цикл
		
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		 ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
			
			// Добавляем реквизиты в табличную часть для дальнейшего использования.
			Обработки.КлиентБанк.СписокНенайденных(СтрокаДокумента, Объект.БанковскийСчет, ТаблицаКонтрагентов, КоличествоНеНайденныхКонтрагентов, КоличествоНеНайденныхРСчетов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастроитьВидимостьЭлементов Тогда
		НастроитьВидимостьЭлементовНаСервере();
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаКонтрагентов", Тип("ДеревоЗначений")), УникальныйИдентификатор);
	
КонецФункции // ЗаполнитьДокументыНаИмпорт()

&НаКлиенте
Процедура ДекорацияНеНайденныеРеквизитыНажатие(Элемент)
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Получаем исходные данные.
	АдресДереваКонтрагентов = ОбновитьТаблицуКонтрагентов();
		
	ПараметрыФормыПросмотраФайла = Новый Структура("АдресДереваКонтрагентов, Заголовок, ГруппаДоступа", АдресДереваКонтрагентов, Элемент.Заголовок, Объект.ГруппаДоступа);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНеНайденныхКонтрагентов", ПараметрыФормыПросмотраФайла, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидОперацииВыделенныхСтрок(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияНазначенияМножественная();
	Иначе
		ОткрытьФормуРедактированияНазначения(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНазначения(ДанныеСтроки)
	
	ТекущиеДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияНазначения", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеНазначения", 
		Новый Структура("Исходящий, ВидОперации, СтатьяРасходов, НазначениеПлатежа",
			ДанныеСтроки.Исходящий, 
			ДанныеСтроки.ВидОперации, 
			, 
			ДанныеСтроки.НазначениеПлатежа),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияНазначения(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.ВидОперации = Результат.ВидОперации;
	
	Если ДанныеСтроки.Исходящий Тогда
		ДанныеСтроки.ВидОперацииСписание = ДанныеСтроки.ВидОперации;
	Иначе
		ДанныеСтроки.ВидОперацииПоступление = ДанныеСтроки.ВидОперации;
	КонецЕсли;
	
	ДанныеСтроки.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ДанныеСтроки.ВидОперации, ДанныеСтроки.СтатьяДДС);
	
	ДанныеСтроки.ВидОперацииНеНайденКартинка = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНазначенияМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	ВидОперацииИсходящих = Неопределено;
	ВидОперацииВходящих = Неопределено;
	СтатьяРасходов = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если ВидОперацииИсходящих <> СтрокаДанных.ВидОперации
				И КоличествоИсходящих = 0 Тогда
				ВидОперацииИсходящих = СтрокаДанных.ВидОперации;
				//СтатьяРасходов = СтрокаДанных.СтатьяДДС;
			ИначеЕсли ВидОперацииИсходящих <> СтрокаДанных.ВидОперации Тогда 
				ВидОперацииИсходящих = Неопределено;
				СтатьяРасходов = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
			КонецЕсли;
			
			КоличествоИсходящих = КоличествоИсходящих + 1;
			
		Иначе
			
			Если ВидОперацииВходящих <> СтрокаДанных.ВидОперации
				И КоличествоВходящих = 0 Тогда
				ВидОперацииВходящих = СтрокаДанных.ВидОперации;
			ИначеЕсли ВидОперацииВходящих <> СтрокаДанных.ВидОперации Тогда
				ВидОперацииВходящих = Неопределено;
			КонецЕсли;
			
			КоличествоВходящих = КоличествоВходящих + 1;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.ВидОперации;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.ВидОперации;
		КонецЕсли;
		
	КонецЦикла;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияНазначенияМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеНазначения", 
		Новый Структура("Множественный,ВидОперацииИсходящих,ВидОперацииВходящих,КоличествоИсходящих,КоличествоВходящих,СтатьяРасходов",
			Истина,
			ВидОперацииИсходящих,
			ВидОперацииВходящих,
			КоличествоИсходящих,
			КоличествоВходящих,
			СтатьяРасходов),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияНазначенияМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперации = Результат.ВидОперацииИсходящих;
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.ВидОперации;
		Иначе
			СтрокаДанных.ВидОперации = Результат.ВидОперацииВходящих;
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.ВидОперации;
		КонецЕсли;
		
		СтрокаДанных.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(СтрокаДанных.ВидОперации, СтрокаДанных.СтатьяДДС);
		СтрокаДанных.ВидОперацииНеНайденКартинка = -1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТекущийПлатеж(Команда)
	
	Если Элементы.Загрузка.ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите платеж (строку), который хотите загрузить";
		Сообщение.Поле = "Объект.Загрузка";
		Сообщение.Сообщить();
	Иначе
		ЗагрузитьТекущийПлатежНаСервере(Элементы.Загрузка.ТекущиеДанные.НомерСтроки);
		
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры

// Процедура загружает данные из файла.
//
&НаСервере
Процедура ЗагрузитьТекущийПлатежНаСервере(НомерСтроки)
	
	ТаблицаРезультата.Очистить();
	
	РеквизитФормыВЗначение("Объект").ЗагрузитьОднуСтроку(ИмпортЗаголовок, НомерСтроки-1, ТаблицаРезультата);
	
	ВывестиТаблицуРезультата();
	ЗаписатьПротокол();
	
КонецПРоцедуры // ЗагрузитьДанныеИзФайла()

&НаСервере
Функция ПолучитьСтатьюДДСПоВидуОперации(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПокупателя Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеНаСчет.ОтПоставщика Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику Тогда
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
		Иначе
			Возврат Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВидОперации, СтатьяДДС)
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеНаСчет") Тогда
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДСПоступления(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	Иначе
		Возврат ДвиженияДенежныхСредствВызовСервера.ПолучитьНовоеЗначениеСтатьиДДССписания(ВидОперации, СтатьяДДС, Объект.СтатьяДДСВходящий, Объект.СтатьяДДСИсходящий);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СнятьОтметкуУВсехСтрокСПредупреждениями(Команда)
	
	ЕстьСтрокаДляЗагрузки = Ложь;
	Для каждого Строка Из Объект.Загрузка Цикл
		Если Строка.Загружать И Не (Строка.НомерКартинки = -1) Тогда
			Строка.Загружать = Ложь;
			ЗаполнитьСуммыВыделеныхНаКлиенте(Строка);
		ИначеЕсли Строка.Загружать Тогда
			ЕстьСтрокаДляЗагрузки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтраницуПодвалаНаКлиенте(ЕстьСтрокаДляЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если НЕ ПроверитьЗаполнениеРеквизитовФормы() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормыПросмотраФайла = Новый Структура("ТекстФайла, Кодировка", ОбработанныйТекст, Объект.Кодировка);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаФайла", ПараметрыФормыПросмотраФайла, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекстУкажитеСуммуВручную(ДанныеСтроки)

	Буфер = СокрЛП(СтрЗаменить(ДанныеСтроки.Сумма, " ", ""));
	Если ЗначениеЗаполнено(Буфер) Тогда
		СтрокаЗамечание = НСтр("ru = 'Укажите сумму вручную (%Буфер%)!'");
		СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Буфер%", Буфер);
	Иначе
		СтрокаЗамечание = НСтр("ru = 'Сумма не указана!'");
	КонецЕсли;
	
	Возврат СтрокаЗамечание;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки, ПодробноеСообщение = Ложь)
	
	Если ПодробноеСообщение Тогда
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"В других строках есть не найденные элементы или суммы не верного формата."
				+Символы.ПС+"Проверьте значения в колонках, где в заголовке стоит предупреждающий знак.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"Проверьте значения в других строках, где есть предупреждающий знак.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", НСтр("ru = ' (был загружен ранее)'"));
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", "");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстДокументГотовКЗагрузкеНаСервере(ДанныеСтроки, ПодробноеСообщение = Ложь)
	
	Если ПодробноеСообщение Тогда
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"В других строках есть не найденные элементы или суммы не верного формата."
				+Символы.ПС+"Проверьте значения в колонках, где в заголовке стоит предупреждающий знак.'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Текущий документ готов к загрузке%1!"
				+Символы.ПС+"Проверьте значения в других строках, где есть предупреждающий знак.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", НСтр("ru = ' (был загружен ранее)'"));
	Иначе
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", "");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Функция УдалитьДанныеИзОписанияОшибкиНаКлиенте(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)

	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочкиИСкобки = СтрНайти(ДанныеСправаОтТекстаУдаления, ").");
		КонецЕсли;
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(НовоеОписаниеОшибок) Тогда
		НовоеОписаниеОшибок = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки);
		УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, Ложь);
	КонецЕсли;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
	Возврат НовоеОписаниеОшибок;

КонецФункции // УдалитьИзОписанияОшибки()

&НаСервере
Функция УдалитьДанныеИзОписанияОшибкиНаСервере(ТекстУдаления, Знач ОписаниеОшибок, ДанныеСтроки)

	НовоеОписаниеОшибок = "";
	
	СимволТекстаУдаления = СтрНайти(ОписаниеОшибок, ТекстУдаления);
	Если СимволТекстаУдаления = 0 Тогда
		НовоеОписаниеОшибок = ОписаниеОшибок;
	Иначе
		НовоеОписаниеОшибок = Лев(ОписаниеОшибок, СимволТекстаУдаления - 1);
		
		ДанныеСправаОтТекстаУдаления = Сред(ОписаниеОшибок, СимволТекстаУдаления + 1);
		СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
		Если СимволТочки = 0 Тогда
			СимволТочкиИСкобки = СтрНайти(ДанныеСправаОтТекстаУдаления, ").");
		КонецЕсли;
		Если СимволТочки = 0 Тогда
			СимволТочки = СтрНайти(ДанныеСправаОтТекстаУдаления, ".");
		КонецЕсли;
		Если СимволТочки <> 0 Тогда
			НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволТочки + 1);
		Иначе
			СимволВосклицательногоЗнака = СтрНайти(ДанныеСправаОтТекстаУдаления, "!");
			Если СимволВосклицательногоЗнака <> 0 Тогда
				НовоеОписаниеОшибок = НовоеОписаниеОшибок + Сред(ДанныеСправаОтТекстаУдаления, СимволВосклицательногоЗнака + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Если ПустаяСтрока(НовоеОписаниеОшибок) Тогда
	//	НовоеОписаниеОшибок = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки);
	//	УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, Ложь);
	//КонецЕсли;
	//
	//УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
	Возврат НовоеОписаниеОшибок;

КонецФункции // УдалитьИзОписанияОшибки()

//&НаКлиенте
//Процедура ВыполнитьАнализИстории(ДанныеСтроки)
//
//	СтруктураРеквизитов = ПолучитьСтатистикуПоКонтрагенту(1, ДанныеСтроки.Контрагент, ДанныеСтроки.СчетКонтрагента, Объект.БанковскийСчет, ДанныеСтроки.Исходящий, Неопределено);
//	
//	Если СтруктураРеквизитов.Договор <> Неопределено Тогда
//		ДанныеСтроки.Договор = СтруктураРеквизитов.Договор;
//		ДанныеСтроки.ДоговорИсходноеЗначение = СтруктураРеквизитов.Договор;
//	КонецЕсли;
//	Если СтруктураРеквизитов.ВидОперации <> Неопределено Тогда
//		ДанныеСтроки.ВидОперации = СтруктураРеквизитов.ВидОперации;
//		ДанныеСтроки.ВидОперацииНеНайденКартинка = 0;
//		ДанныеСтроки.ОписаниеОшибок = СтрЗаменить(НСтр("ru = 'Проверьте операцию!'"), "", "");
//		ДанныеСтроки.ВидОперацииИсходноеЗначение = СтруктураРеквизитов.ВидОперации;
//	КонецЕсли;
//	Если СтруктураРеквизитов.СтатьяДДС <> Неопределено Тогда
//		ДанныеСтроки.СтатьяДДС = СтруктураРеквизитов.СтатьяДДС;
//		ДанныеСтроки.СтатьяДДСИсходноеЗначение = СтруктураРеквизитов.СтатьяДДС;
//	КонецЕсли;
//	Если СтруктураРеквизитов.Корреспонденция <> Неопределено Тогда
//		ДанныеСтроки.Корреспонденция = СтруктураРеквизитов.Корреспонденция;
//		ДанныеСтроки.КорреспонденцияИсходноеЗначение = СтруктураРеквизитов.Корреспонденция;
//	КонецЕсли;
//
//КонецПроцедуры

&НаСервере
Процедура ВыполнитьАнализИсторииНаСервере(ДанныеСтроки, ДоговорВЗаказеСчете, ПараметрыВыделенияКолонок)

	СтруктураРеквизитов = ПолучитьСтатистикуПоКонтрагенту(1, ДанныеСтроки.Контрагент, ДанныеСтроки.СчетКонтрагента, Объект.БанковскийСчет, ДанныеСтроки.Исходящий, ДоговорВЗаказеСчете);
	
	Если СтруктураРеквизитов.Договор <> Неопределено Тогда
		ДанныеСтроки.Договор = СтруктураРеквизитов.Договор;
	КонецЕсли;
	Если СтруктураРеквизитов.ВидОперации <> Неопределено Тогда
		ДанныеСтроки.ВидОперации = СтруктураРеквизитов.ВидОперации;
	КонецЕсли;
	Если СтруктураРеквизитов.СтатьяДДС <> Неопределено Тогда
		ДанныеСтроки.СтатьяДДС = СтруктураРеквизитов.СтатьяДДС;
	КонецЕсли;
	Если СтруктураРеквизитов.Корреспонденция <> Неопределено Тогда
		ДанныеСтроки.Корреспонденция = СтруктураРеквизитов.Корреспонденция;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированиеКонтрагента(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	
	// Контрагент, договор и р/счет.
	Если (ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.Контрагенты")) И ЗначениеЗаполнено(Результат.Контрагент) Тогда
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.Контрагент = Результат.Контрагент;
		ДанныеСтроки.КонтрагентНайден = Истина;
		Если Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.СоздатьНовогоПриЗагрузкеВыпискиВ1С") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		ИначеЕсли Результат.ДействиеСконтрагентом = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента") Тогда
			ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		КонецЕсли;
		//ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден контрагент'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
		
		// Р/счет.
		Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
			ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
			//ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("Не найден счет контрагента'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
		КонецЕсли;
		
		// Договор.
		Если ЗначениеЗаполнено(Результат.Договор) Тогда
			ДанныеСтроки.Договор = Результат.Договор;
			Если ТипЗнч(ДанныеСтроки.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				//ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("Не найден договор'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
			КонецЕсли;
		КонецЕсли;
		
		// Другие реквизиты.
		Если Объект.АнализироватьИсториюВыбораЗначенийРеквизитов Тогда
			//ВыполнитьАнализИстории(ДанныеСтроки);
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
			Наименование = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.Получатель1, ДанныеСтроки.Плательщик1);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.Контрагент = ДанныеСтроки.Контрагент;
					Строка.КонтрагентНайден = Истина;
					//ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден контрагент'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
					
					// Договор.
					Если ЗначениеЗаполнено(Результат.Договор) Тогда
						Строка.Договор = Результат.Договор;
						Если ТипЗнч(Строка.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
							//Строка.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден договор'"), Строка.ОписаниеОшибокПодТЧ, Строка);
						КонецЕсли;
					КонецЕсли;
					
					// Р/счет.
					Если ЗначениеЗаполнено(Результат.БанковскийСчетПоУмолчанию) Тогда
						Строка.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
						//Строка.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден счет контрагента'"), Строка.ОписаниеОшибокПодТЧ, Строка);
					КонецЕсли;
					
					// Другие реквизиты.
					Если Объект.АнализироватьИсториюВыбораЗначенийРеквизитов Тогда
						//ВыполнитьАнализИстории(ДанныеСтроки);
					КонецЕсли;
					
					// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
					// убираем все предупреждения, но только когда сумма <> 0.
					Если Строка.СуммаДокумента = 0 Тогда
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(Строка);
					Иначе
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Строка);
					КонецЕсли;
					ПоменятьСимволПСНаПробел(Строка.ОписаниеОшибокПодТЧ);
					
					ПоказыватьЗнакПредупреждения = Ложь;
					ПодготовитьТекстПредупреждения(Строка, ПоказыватьЗнакПредупреждения);
					УстановитьНомерКартинкиНаКлиенте(Строка, ПоказыватьЗнакПредупреждения);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		ДанныеСтроки.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
		ДанныеСтроки.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
		ДанныеСтроки.ДействиеСДоговором = Результат.ДействиеСДоговором;
		
		ДанныеСтроки.КонтрагентНеНайденКартинка = -1;
		ДанныеСтроки.СчетКонтрагентаНеНайденКартинка = -1;
		ДанныеСтроки.ДоговорНеНайденКартинка = -1;
		
		// Р/счет.
		Если Результат.ЭтоПеремещение Тогда
			Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
				ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
				ДанныеСтроки.Касса = Неопределено;
			Иначе
				ДанныеСтроки.СчетКонтрагента = Неопределено;
				ДанныеСтроки.Касса = Результат.Касса;
			КонецЕсли;
			
			НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
			ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
			ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
		КонецЕсли;
		
		// Обработаем строки, где контрагент с таким же ИНН
		Если Результат.ПрименятьДляВсехСтрок Тогда // применяется для всех строк
			ИНН          = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
			КПП          = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
			Наименование = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.Получатель1, ДанныеСтроки.Плательщик1);
			Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
			
			Для Каждого Строка Из Объект.Загрузка Цикл
				Если ДанныеСтроки <> Строка И ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН) И
					Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет) Тогда
					
					Строка.КонтрагентНеНайденКартинка = -1;
					Строка.СчетКонтрагентаНеНайденКартинка = -1;
					Строка.ДоговорНеНайденКартинка = -1;
					
					Строка.ДействиеСконтрагентом = Результат.ДействиеСконтрагентом;
					Строка.ДействиеСоСчетомКонтрагента = Результат.ДействиеСоСчетомКонтрагента;
					Строка.ДействиеСДоговором = Результат.ДействиеСДоговором;
					
					// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
					// убираем все предупреждения, но только когда сумма <> 0.
					Если Строка.СуммаДокумента = 0 Тогда
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(Строка);
					Иначе
						Строка.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Строка);
					КонецЕсли;
					ПоменятьСимволПСНаПробел(Строка.ОписаниеОшибокПодТЧ);
					
					ПоказыватьЗнакПредупреждения = Ложь;
					ПодготовитьТекстПредупреждения(Строка, ПоказыватьЗнакПредупреждения);
					УстановитьНомерКартинкиНаКлиенте(Строка, ПоказыватьЗнакПредупреждения);
					
					// Р/счет.
					Если Результат.ЭтоПеремещение Тогда
						Если НЕ Результат.ЭтоПеремещениеНуженВыборКассы Тогда
							ДанныеСтроки.СчетКонтрагента = Результат.БанковскийСчетПоУмолчанию;
							ДанныеСтроки.Касса = Неопределено;
						Иначе
							ДанныеСтроки.СчетКонтрагента = Неопределено;
							ДанныеСтроки.Касса = Результат.Касса;
						КонецЕсли;
						
						НеСоздаватьНовогоКонтрагента = ПредопределенноеЗначение("Перечисление.ДействияСКонтрагентомПриЗагрузкеИзКлиентБанка.НеСоздаватьНовогоКонтрагента");
						ДанныеСтроки.ДействиеСконтрагентом = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСоСчетомКонтрагента = НеСоздаватьНовогоКонтрагента;
						ДанныеСтроки.ДействиеСДоговором = НеСоздаватьНовогоКонтрагента;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	// Сумма документа.
	Если Результат.Свойство("СуммаДокумента") Тогда
		Если Результат.СуммаДокумента > 0 Тогда
			ДанныеСтроки.СуммаДокумента = Результат.СуммаДокумента;
			ПриИзмененииСуммыДокумента(ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
	// Вид операции.
	Если ДанныеСтроки.ВидОперации <> Результат.ВидОперации ИЛИ ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		УстановитьВидОперации(ДанныеСтроки, Результат.ВидОперации);
	КонецЕсли;
	
	// Документы.
	Если ДанныеСтроки.НесколькоДокументовКартинка = 0 Тогда
		ДанныеСтроки.НесколькоДокументовКартинка = -1;
	КонецЕсли;
	
	// Статья ДДС и Корреспонденция.
	ДанныеСтроки.СтатьяДДС = Результат.СтатьяДДС;
	ДанныеСтроки.Корреспонденция = Результат.Корреспонденция;
	
	ПоказыватьЗнакПредупреждения = Ложь;
	
	// Если пользователь нажал в окне действий с ключевыми реквизитами кнопку "ОК", то мы
	// убираем все предупреждения, но только когда сумма <> 0.
	Если ДанныеСтроки.СуммаДокумента = 0 Тогда
		ДанныеСтроки.ОписаниеОшибокПодТЧ = ПолучитьТекстУкажитеСуммуВручную(ДанныеСтроки);
		ПоказыватьЗнакПредупреждения = Истина;
	Иначе
		ДанныеСтроки.ОписаниеОшибокПодТЧ = ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(ДанныеСтроки);
	КонецЕсли;
	ПоменятьСимволПСНаПробел(ДанныеСтроки.ОписаниеОшибокПодТЧ);
	
	УстановитьНомерКартинкиНаКлиенте(ДанныеСтроки, ПоказыватьЗнакПредупреждения);
	
	Если Не ПоказыватьЗнакПредупреждения Тогда
		УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	КонецЕсли;
	
	Если Результат.ОбновитьТаблицуКонтрагентовПослеЗакрытияФормы Тогда
		ОбновитьТаблицуКонтрагентов();
	КонецЕсли;
	
	Элементы.ЗагрузкаНомерКартинкиДляПодвала.Обновить();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанныхРасчетногоСчета(СтрокаДокумента, БанковскийСчет)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	
	ТипКонтрагента = ?(СтрокаДокумента.ПлательщикСчет = БанковскийСчетНомер, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	СтруктураДанныхСтроки.Вставить("СЧЕТ", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
	СтруктураДанныхСтроки.Вставить("ПрямыеРасчеты", ПрямыеРасчеты);
	
	Если ПрямыеРасчеты Тогда
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИК", СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	Иначе
		
		СтруктураДанныхСтроки.Вставить("Банк", СтрокаДокумента[ТипКонтрагента + "3"]);
		СтруктураДанныхСтроки.Вставить("Город", СтрокаДокумента[ТипКонтрагента + "4"]);
		СтруктураДанныхСтроки.Вставить("БИК", ""); // В менеджере будем банк искать по корр. счету.
		СтруктураДанныхСтроки.Вставить("КоррСчет", СтрокаДокумента[ТипКонтрагента + "РАСЧСЧЕТ"]);
		
		СтруктураДанныхСтроки.Вставить("БанкРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК1"]);
		СтруктураДанныхСтроки.Вставить("ГородРасчетов", СтрокаДокумента[ТипКонтрагента + "БАНК2"]);
		СтруктураДанныхСтроки.Вставить("БИКРасчетов",  СтрокаДокумента[ТипКонтрагента + "БИК"]);
		СтруктураДанныхСтроки.Вставить("КоррСчетРасчетов", СтрокаДокумента[ТипКонтрагента + "КОРСЧЕТ"]);
		
	КонецЕсли;
	
	СтруктураДанныхСтроки.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	СтруктураДанныхСтроки.Вставить("СчетКонтрагента", СтрокаДокумента.СчетКонтрагента);
	СтруктураДанныхСтроки.Вставить("СчетБИК", ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательБИК, СтрокаДокумента.ПлательщикБИК));
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанныхДоговора(СтрокаДокумента)
	
	СтруктураДанныхСтроки = Новый Структура;
	
	СтруктураДанныхСтроки.Вставить("ДоговорНомер", СтрокаДокумента.ДоговорНомер);
	СтруктураДанныхСтроки.Вставить("ДоговорДата", СтрокаДокумента.ДоговорДата);
	СтруктураДанныхСтроки.Вставить("ДоговорВалютаРасчетов", СтрокаДокумента.ДоговорВалютаРасчетов);
	СтруктураДанныхСтроки.Вставить("ДоговорРасчетыВУсловныхЕдиницах", СтрокаДокумента.ДоговорРасчетыВУсловныхЕдиницах);
	СтруктураДанныхСтроки.Вставить("ДоговорНаименованиеЛеваяЧасть", СтрокаДокумента.ДоговорНаименованиеЛеваяЧасть);
	СтруктураДанныхСтроки.Вставить("Договор", СтрокаДокумента.Договор);
	СтруктураДанныхСтроки.Вставить("ДатаДок", СтрокаДокумента.ДатаДок);
	
	Возврат СтруктураДанныхСтроки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияКонтрагентов(ДанныеСтроки, ИмяЗакладкиНаФорме)
	
	ИНН = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательИНН, ДанныеСтроки.ПлательщикИНН);
	КПП = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательКПП, ДанныеСтроки.ПлательщикКПП);
	Счет = ?(ДанныеСтроки.Исходящий, ДанныеСтроки.ПолучательСчет, ДанныеСтроки.ПлательщикСчет);
	Если ДанныеСтроки.Исходящий Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Получатель1) Тогда
			Наименование = ДанныеСтроки.Получатель1;
		Иначе
			Наименование = ДанныеСтроки.Получатель;
		КОнецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСтроки.Плательщик1) Тогда
			Наименование = ДанныеСтроки.Плательщик1;
		Иначе
			Наименование = ДанныеСтроки.Плательщик;
		КОнецЕсли;
	КонецЕсли;
	
	СтруктураДанныхРасчетногоСчета = ПолучитьСтруктуруДанныхРасчетногоСчета(ДанныеСтроки, Объект.БанковскийСчет);
	СтруктураДанныхДоговора = ПолучитьСтруктуруДанныхДоговора(ДанныеСтроки);
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированиеКонтрагента", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураДанныхРасчетногоСчета", СтруктураДанныхРасчетногоСчета);
	СтруктураПараметров.Вставить("СтруктураДанныхДоговора", СтруктураДанныхДоговора);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", ДанныеСтроки.Контрагент);
	СтруктураПараметров.Вставить("Договор", ДанныеСтроки.Договор);
	СтруктураПараметров.Вставить("Наименование", Наименование);
	СтруктураПараметров.Вставить("ИНН", ИНН);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("НаименованиеПолное", Наименование);
	
	// Количество строк с одинаковым ИНН и номером счета.
	МассивСтрок = КонтрагентыКоличество.НайтиСтроки(Новый Структура("ИНН, Счет", ИНН, Счет));
	Если МассивСтрок.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("КоличествоСтрокКонтрагента", МассивСтрок[0].КоличествоСтрок);
	Иначе
		СтруктураПараметров.Вставить("КоличествоСтрокКонтрагента", 0);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДеньгиОтКонтрагентаПоступили", ДанныеСтроки.СуммаПоступило <> 0);
	СтруктураПараметров.Вставить("ДействиеСКонтрагентом", ДанныеСтроки.ДействиеСКонтрагентом);
	СтруктураПараметров.Вставить("ДействиеСоСчетомКонтрагента", ДанныеСтроки.ДействиеСоСчетомКонтрагента);
	СтруктураПараметров.Вставить("ДействиеСДоговором", ДанныеСтроки.ДействиеСДоговором);
	СтруктураПараметров.Вставить("ИмяЗакладкиНаФорме", ИмяЗакладкиНаФорме);
	СтруктураПараметров.Вставить("ДатаДок", ДанныеСтроки.ДатаДок);
	СтруктураПараметров.Вставить("ВидОперации", ДанныеСтроки.ВидОперации);
	СтруктураПараметров.Вставить("СтатьяДДС", ДанныеСтроки.СтатьяДДС);
	СтруктураПараметров.Вставить("Корреспонденция", ДанныеСтроки.Корреспонденция);
	СтруктураПараметров.Вставить("НазначениеПлатежа", ДанныеСтроки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Исходящий", ДанныеСтроки.Исходящий);
	НеВерныйФорматСуммы = ЕстьНеЦифрыНаКлиенте(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДанныеСтроки.Сумма, ".", ""), "-", ""), ",", ""));
	СтруктураПараметров.Вставить("НеВерныйФорматСуммы", НеВерныйФорматСуммы);
	СтруктураПараметров.Вставить("Сумма", ДанныеСтроки.Сумма);
	СтруктураПараметров.Вставить("СуммаДокумента", ДанныеСтроки.СуммаДокумента);
	// Картинки (
	СтруктураПараметров.Вставить("НеВерныйФорматСуммыКартинка", ДанныеСтроки.НеВерныйФорматСуммыКартинка);
	СтруктураПараметров.Вставить("ВидОперацииНеНайденКартинка", ДанныеСтроки.ВидОперацииНеНайденКартинка);
	СтруктураПараметров.Вставить("НесколькоДокументовКартинка", ДанныеСтроки.НесколькоДокументовКартинка);
	СтруктураПараметров.Вставить("КонтрагентНеНайденКартинка", ДанныеСтроки.КонтрагентНеНайденКартинка);
	СтруктураПараметров.Вставить("СчетКонтрагентаНеНайденКартинка", ДанныеСтроки.СчетКонтрагентаНеНайденКартинка);
	СтруктураПараметров.Вставить("ДоговорНеНайденКартинка", ДанныеСтроки.ДоговорНеНайденКартинка);
	// )
	// Найдено несколько документов (
	МСтрок = ТаблицаТаблицДокументов.НайтиСтроки(Новый Структура("НомерСтрокиВТаблицеИмпорта", ДанныеСтроки.НомерСтроки - 1));
	Если МСтрок.Количество() > 0 Тогда
		СтруктураПараметров.Вставить("ТаблицаДокументов", МСтрок[0].ТаблицаНайденныхДокументов);
	Иначе
		СтруктураПараметров.Вставить("ТаблицаДокументов", Неопределено);
	КонецЕсли;
	СтруктураПараметров.Вставить("ЕстьНесколькоДокументов", ?(СтрНайти(ДанныеСтроки.ДокументНайден, НСтр("ru = 'И еще'")) > 0 ИЛИ ДанныеСтроки.НесколькоДокументовКартинка = 0, Истина, Ложь));
	СтруктураПараметров.Вставить("Документ", ДанныеСтроки.Документ);
	Если Не ПустаяСтрока(ДанныеСтроки.ОписаниеОшибок) Тогда
		СтруктураПараметров.Вставить("ОписаниеОшибок", ПодготовитьТекстПредупреждения(ДанныеСтроки));
		Если ДанныеСтроки.НомерКартинки = -1 Тогда
			СтруктураПараметров.Вставить("СтраницаОшибокТекущая", Истина);
		КонецЕсли;
	КонецЕсли;
	// )
	СтруктураПараметров.Вставить("СтатьяДДСВходящий", Объект.СтатьяДДСВходящий);
	СтруктураПараметров.Вставить("СтатьяДДСИсходящий", Объект.СтатьяДДСИсходящий);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеКонтрагентаДоговора",
		СтруктураПараметров,
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПодсчитатьКонтрагентов()
	
	КонтрагентыКоличествоВрем = Новый ТаблицаЗначений;
	КонтрагентыКоличествоВрем.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	КонтрагентыКоличествоВрем.Колонки.Добавить("Счет", Новый ОписаниеТипов("Строка"));
	КонтрагентыКоличествоВрем.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из Объект.Загрузка Цикл
		
		ИНН = ?(Строка.Исходящий, Строка.ПолучательИНН, Строка.ПлательщикИНН);
		Счет = ?(Строка.Исходящий, Строка.ПолучательСчет, Строка.ПлательщикСчет);
		
		НоваяСтрока = КонтрагентыКоличествоВрем.Добавить();
		НоваяСтрока.ИНН = ИНН;
		НоваяСтрока.Счет = Счет;
		НоваяСтрока.КоличествоСтрок = 1;
		
	КонецЦикла;
	
	КонтрагентыКоличествоВрем.Свернуть("ИНН, Счет", "КоличествоСтрок");
	
	КонтрагентыКоличество.Загрузить(КонтрагентыКоличествоВрем);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПриАктивизацииСтроки(Элемент)
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
			ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Иначе
			ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКонтрагентНеНайденКартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ПоказатьПредупреждение(Неопределено,Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок);
	Иначе
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьПоТекущейКолонке(Команда)
	
	ИмяЭлемента =СтрЗаменить(Элементы.Загрузка.ТекущийЭлемент.Имя, "Загрузка", "");
	Объект.Загрузка.Сортировать(ИмяЭлемента+" Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьПоТекущейКолонкеПоУбыванию(Команда)
	
	ИмяЭлемента =СтрЗаменить(Элементы.Загрузка.ТекущийЭлемент.Имя, "Загрузка", "");
	Объект.Загрузка.Сортировать(ИмяЭлемента+" Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьВОтдельномОкне(Команда)
	
	СтруктураСтроки = СтрокаТаблицыЗагрузкаВСтруктуру(Элементы.Загрузка.ТекущиеДанные);
	СтруктураСтроки.Вставить("БанковскийСчетВалюта", БанковскийСчетВалюта);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаПросмотраСтроки", Новый Структура("ДанныеСтроки", СтруктураСтроки), ЭтаФорма, УникальныйИдентификатор,
		,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуВПомощнике(Команда)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОткрытьФормуРедактированияКонтрагентов(ТекущиеДанные, "ДействияСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация5Нажатие(Элемент)
	
	ОткрытьФайл(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	
	ИсторияЗагрузкиИВыгрузки(Неопределено);
	
КонецПроцедуры

#Область РедактированиеСтатьиДДС

&НаКлиенте
Процедура ИзменитьСтатьюДДСВВыделенныхСтроках(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияСтатьиДДСМножественная();
	Иначе
		ОткрытьФормуРедактированияСтатьиДДС(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтатьиДДС(ДанныеСтроки)
	
	ТекущиеДанныеСтроки = Элементы.Загрузка.ТекущиеДанные;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСтатьиДДС", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеСтатьиДДС", 
		Новый Структура("Исходящий, ВидОперации, СтатьяРасходов, НазначениеПлатежа, СтатьяДДС",
			ДанныеСтроки.Исходящий, 
			ДанныеСтроки.ВидОперации, 
			, 
			ДанныеСтроки.НазначениеПлатежа,
			ДанныеСтроки.СтатьяДДС),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСтатьиДДС(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.СтатьяДДС = Результат.СтатьяДДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтатьиДДСМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	СтатьяДДСВходящих = Неопределено;
	СтатьяДДСИсходящих = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если СтатьяДДСИсходящих <> СтрокаДанных.СтатьяДДС
				И КоличествоИсходящих = 0 Тогда
				СтатьяДДСИсходящих = СтрокаДанных.СтатьяДДС;
				//СтатьяРасходов = СтрокаДанных.СтатьяДДС;
			ИначеЕсли СтатьяДДСИсходящих <> СтрокаДанных.СтатьяДДС Тогда 
				СтатьяДДСИсходящих = Неопределено;
				СтатьяРасходов = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
			КонецЕсли;
			
			КоличествоИсходящих = КоличествоИсходящих + 1;
			
		Иначе
			
			Если СтатьяДДСВходящих <> СтрокаДанных.СтатьяДДС
				И КоличествоВходящих = 0 Тогда
				СтатьяДДСВходящих = СтрокаДанных.СтатьяДДС;
			ИначеЕсли СтатьяДДСВходящих <> СтрокаДанных.СтатьяДДС Тогда
				СтатьяДДСВходящих = Неопределено;
			КонецЕсли;
			
			КоличествоВходящих = КоличествоВходящих + 1;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.СтатьяДДС;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.СтатьяДДС;
		КонецЕсли;
		
	КонецЦикла;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСтатьиДДСМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеСтатьиДДС", 
		Новый Структура("Множественный,СтатьяДДСИсходящих,СтатьяДДСВходящих,КоличествоИсходящих,КоличествоВходящих",
			Истина,
			СтатьяДДСИсходящих,
			СтатьяДДСВходящих,
			КоличествоИсходящих,
			КоличествоВходящих),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСтатьиДДСМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.СтатьяДДС = Результат.СтатьяДДСИсходящих;
		Иначе
			СтрокаДанных.СтатьяДДС = Результат.СтатьяДДСВходящих;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеКорреспонденции

&НаКлиенте
Процедура ИзменитьСчетКорреспонденцииВВыделенныхСтроках(Команда)
	
	Если Элементы.Загрузка.ВыделенныеСтроки.Количество() > 1 Тогда
		ОткрытьФормуРедактированияСчетаКорреспонденцииМножественная();
	Иначе
		ОткрытьФормуРедактированияСчетаКорреспонденции(Элементы.Загрузка.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетаКорреспонденции(ДанныеСтроки)
	
	Если ДанныеСтроки.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") И
		ДанныеСтроки.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Корреспонденцию нужно устанавливать только для операции ""Прочее"".'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСчетаКорреспонденции", ЭтотОбъект, Новый Структура("ДанныеСтроки", ДанныеСтроки));
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеКорреспонденции", 
		Новый Структура("Исходящий, ВидОперации, СтатьяРасходов, НазначениеПлатежа, Корреспонденция",
			ДанныеСтроки.Исходящий, 
			ДанныеСтроки.ВидОперации, 
			, 
			ДанныеСтроки.НазначениеПлатежа,
			ДанныеСтроки.Корреспонденция),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСчетаКорреспонденции(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Параметры.ДанныеСтроки;
	ДанныеСтроки.Корреспонденция = Результат.Корреспонденция;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСчетаКорреспонденцииМножественная()
	
	КоличествоИсходящих = 0;
	КоличествоВходящих = 0;
	КорреспонденцияВходящих = Неопределено;
	КорреспонденцияИсходящих = Неопределено;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий Тогда
			
			Если КорреспонденцияИсходящих <> СтрокаДанных.Корреспонденция
				И КоличествоИсходящих = 0 Тогда
				КорреспонденцияИсходящих = СтрокаДанных.Корреспонденция;
				//СтатьяРасходов = СтрокаДанных.Корреспонденция;
			ИначеЕсли КорреспонденцияИсходящих <> СтрокаДанных.Корреспонденция Тогда 
				КорреспонденцияИсходящих = Неопределено;
				СтатьяРасходов = ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка");
			КонецЕсли;
			
			Если СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
				КоличествоИсходящих = КоличествоИсходящих + 1;
			КонецЕсли;
			
		Иначе
			
			Если КорреспонденцияВходящих <> СтрокаДанных.Корреспонденция
				И КоличествоВходящих = 0 Тогда
				КорреспонденцияВходящих = СтрокаДанных.Корреспонденция;
			ИначеЕсли КорреспонденцияВходящих <> СтрокаДанных.Корреспонденция Тогда
				КорреспонденцияВходящих = Неопределено;
			КонецЕсли;
			
			Если СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") Тогда
				КоличествоВходящих = КоличествоВходящих + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДанных.Исходящий Тогда
			СтрокаДанных.ВидОперацииСписание = СтрокаДанных.Корреспонденция;
		Иначе
			СтрокаДанных.ВидОперацииПоступление = СтрокаДанных.Корреспонденция;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоВходящих = 0 И КоличествоИсходящих = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Корреспонденцию нужно устанавливать только для операции ""Прочее"".'"));
		Возврат;
	КонецЕсли;
	
	оп = Новый ОписаниеОповещения("ОповещениеРедактированияСчетаКорреспонденцииМножественная", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.РедактированиеКорреспонденции", 
		Новый Структура("Множественный,КорреспонденцияИсходящих,КорреспонденцияВходящих,КоличествоИсходящих,КоличествоВходящих",
			Истина,
			КорреспонденцияИсходящих,
			КорреспонденцияВходящих,
			КоличествоИсходящих,
			КоличествоВходящих),
		,
		,
		,
		,
		оп,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРедактированияСчетаКорреспонденцииМножественная(Результат, Параметры) Экспорт
	
	Если Результат  = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		
		Если СтрокаДанных.Исходящий И
			СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
			СтрокаДанных.Корреспонденция = Результат.КорреспонденцияИсходящих;
		ИначеЕсли СтрокаДанных.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.Прочее") Тогда
			СтрокаДанных.Корреспонденция = Результат.КорреспонденцияВходящих;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузкаСчетКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ТекущиеДанные.СчетКонтрагента) Тогда
			ТекущиеДанные.СчетКонтрагентаНеНайденКартинка = -1;
			ТекущиеДанные.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Не найден счет контрагента'"), ТекущиеДанные.ОписаниеОшибокПодТЧ, ТекущиеДанные);
			ПоменятьСимволПСНаПробел(ТекущиеДанные.ОписаниеОшибокПодТЧ);
		//ИначеЕсли ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета") И Не ЗначениеЗаполнено(ТекущиеДанные.СчетКонтрагента) Тогда
		//	ТекущиеДанные.СчетКонтрагентаНеНайденКартинка = 0;
		//	ТекущиеДанные.СчетКонтрагента = ТекущиеДанные.СчетКонтрагентаСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаСчетКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СчетКонтрагентаНеНайденКартинка = 0;
		ТекущиеДанные.СчетКонтрагента = ТекущиеДанные.СчетКонтрагентаСтрока;
		
		НомерСчетаКонтрагента = СтрЗаменить(ТекущиеДанные.СчетКонтрагентаСтрока, ").", "");
		НомерСимволаОткрывающейСкобки = СтрНайти(НомерСчетаКонтрагента, "(");
		НомерСчетаКонтрагента = Сред(НомерСчетаКонтрагента, НомерСимволаОткрывающейСкобки+1);
		СтрокаДляВыводаПодТЧ = НСтр("ru = 'Не найден счет контрагента ("+НомерСчетаКонтрагента+").'");
		
		Если ПустаяСтрока(ТекущиеДанные.ОписаниеОшибокПодТЧ) Тогда
			ТекущиеДанные.ОписаниеОшибокПодТЧ = СтрокаДляВыводаПодТЧ;
		Иначе
			ТекущиеДанные.ОписаниеОшибокПодТЧ = ТекущиеДанные.ОписаниеОшибокПодТЧ + ?(СтрНайти(ТекущиеДанные.ОписаниеОшибокПодТЧ, СтрокаДляВыводаПодТЧ) = 0, СтрокаДляВыводаПодТЧ, "");
		КонецЕсли;
		ПоменятьСимволПСНаПробел(ТекущиеДанные.ОписаниеОшибокПодТЧ);
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УбратьПредупреждающийЗнакВоВсехКолонках(Команда)
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		СтрокаДанных.НомерКартинки = -1;
		УстановитьНомерКартинкиДляПодвалаНаКлиенте(СтрокаДанных);
		СтрокаДанных.КонтрагентНеНайденКартинка = -1;
		СтрокаДанных.СчетКонтрагентаНеНайденКартинка = -1;
		СтрокаДанных.ДоговорНеНайденКартинка = -1;
		СтрокаДанных.ВидОперацииНеНайденКартинка = -1;
		СтрокаДанных.НеВерныйФорматСуммыКартинка = -1;
		СтрокаДанных.НесколькоДокументовКартинка = -1;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьПредупреждающийЗнакВТекущейКолонке(Команда)
	
	Попытка
		ИмяКолонки = Элементы.Загрузка.ТекущийЭлемент.Имя;
	Исключение
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите в таблице ячейку с предупреждающим знаком'"), 30);
		Возврат;
	КонецПопытки;
	
	УдалятьПредупреждение = "";
	Если ИмяКолонки = "ЗагрузкаНомерКартинки" Тогда
		ИмяКолонки = "НомерКартинки";
	ИначеЕсли ИмяКолонки = "ЗагрузкаКонтрагентНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаКонтрагент" Тогда
		ИмяКолонки = "КонтрагентНеНайденКартинка";
		//УдалятьПредупреждение = НСтр("ru = 'Не найден контрагент'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаВидОперацииНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаВидОперацииПоступление" ИЛИ 
		ИмяКолонки = "ЗагрузкаВидОперацииСписание" ИЛИ ИмяКолонки = "ЗагрузкаВидОперации" Тогда
		ИмяКолонки = "ВидОперацииНеНайденКартинка";
		УдалятьПредупреждение = НСтр("ru = 'Проверьте операцию'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаДоговорНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаДоговор" Тогда
		ИмяКолонки = "ДоговорНеНайденКартинка";
		//УдалятьПредупреждение = НСтр("ru = 'Не найден договор'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаСчетКонтрагентаНеНайденКартинка" ИЛИ ИмяКолонки = "ЗагрузкаСчетКонтрагента" Тогда
		ИмяКолонки = "СчетКонтрагентаНеНайденКартинка";
		//УдалятьПредупреждение = НСтр("ru = 'Не найден счет'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаНеВерныйФорматСуммыКартинка" Тогда
		ИмяКолонки = "НеВерныйФорматСуммыКартинка";
		//УдалятьПредупреждение = НСтр("ru = 'Укажите сумму вручную'");
	ИначеЕсли ИмяКолонки = "ЗагрузкаНесколькоДокументовКартинка" ИЛИ ИмяКолонки = "ЗагрузкаДокументНайден" Тогда
		ИмяКолонки = "НесколькоДокументовКартинка";
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Действие доступно для колонок с предупреждающим знаком'"), 30);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Элементы.Загрузка.ВыделенныеСтроки Цикл
		
		СтрокаДанных = Объект.Загрузка.НайтиПоИдентификатору(Строка);
		СтрокаДанных[ИмяКолонки] = -1;
		
		Если НЕ ПустаяСтрока(УдалятьПредупреждение) Тогда
			СтрокаДанных.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(УдалятьПредупреждение, СтрокаДанных.ОписаниеОшибокПодТЧ, СтрокаДанных);
			ПоменятьСимволПСНаПробел(СтрокаДанных.ОписаниеОшибокПодТЧ);
		КонецЕсли;
		
		Если ИмяКолонки <> "НомерКартинки" Тогда
			ПоказыватьЗнакПредупреждения = Ложь;
			ПодготовитьТекстПредупреждения(СтрокаДанных, ПоказыватьЗнакПредупреждения);
			УстановитьНомерКартинкиНаКлиенте(СтрокаДанных, ПоказыватьЗнакПредупреждения);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации(ДанныеСтроки, ВыбранноеЗначение)

	ВидОперацииПредыдущееЗначение = ДанныеСтроки.ВидОперации;
	
	ДанныеСтроки.ВидОперации = ВыбранноеЗначение;
	Если ДанныеСтроки.Исходящий Тогда
		ДанныеСтроки.ВидОперацииСписание = ВыбранноеЗначение;
	Иначе
		ДанныеСтроки.ВидОперацииПоступление = ВыбранноеЗначение;
	КонецЕсли;
	Если ДанныеСтроки.ВидОперацииНеНайденКартинка = 0 Тогда
		ДанныеСтроки.ВидОперацииНеНайденКартинка = -1;
	КонецЕсли;
	ДанныеСтроки.СтатьяДДС = ПолучитьСтатьюДДСПоВидуОперацииПриИзменении(ВыбранноеЗначение, ДанныеСтроки.СтатьяДДС);
	ДанныеСтроки.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(НСтр("ru = 'Проверьте операцию'"), ДанныеСтроки.ОписаниеОшибокПодТЧ, ДанныеСтроки);
	ПоменятьСимволПСНаПробел(ДанныеСтроки.ОписаниеОшибокПодТЧ);
	
	Если ДанныеСтроки.ВидОперации = ВидОперацииПереводНаДругойСчет ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииПереводСДругогоСчета Тогда
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		//ДанныеСтроки.Контрагент = НСтр("ru = 'Наша организация ('") + Объект.Организация + ")";
		ЗаполнитьСчетОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ДанныеСтроки.ВидОперации = ВидОперацииСписаниеНаличных ИЛИ ДанныеСтроки.ВидОперации = ВидОперацииВзносНаличных Тогда
		
		//ДанныеСтроки.ДействиеСКонтрагентом = ДействиеНеСоздаватьНовогоКонтрагента;
		//ДанныеСтроки.ДействиеСоСчетомКонтрагента = ДействиеНеСоздаватьНовогоКонтрагента;
		//ДанныеСтроки.ДействиеСДоговором = ДействиеНеСоздаватьНовогоКонтрагента;
		
		Если НЕ (ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
			ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных) Тогда
			ДанныеСтроки.СчетКонтрагентаИсходный = ДанныеСтроки.СчетКонтрагента;
		КонецЕсли;
		
		Если ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета Тогда
			ДанныеСтроки.СчетКонтрагента = ""; //ДанныеСтроки.СчетКонтрагентаИсходный;
			//ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		Иначе
			ДанныеСтроки.СчетКонтрагента = "";
		КонецЕсли;
		//ДанныеСтроки.Контрагент = НСтр("ru = 'Наша организация ('") + Объект.Организация + ")";
		ЗаполнитьКассуОрганизации(ДанныеСтроки.ПолучитьИдентификатор());
		
	ИначеЕсли ВидОперацииПредыдущееЗначение = ВидОперацииПереводНаДругойСчет ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииПереводСДругогоСчета
		ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииСписаниеНаличных ИЛИ ВидОперацииПредыдущееЗначение = ВидОперацииВзносНаличных Тогда
		
		ДанныеСтроки.СчетКонтрагента = ДанныеСтроки.СчетКонтрагентаИсходный;
		ДанныеСтроки.Контрагент = ДанныеСтроки.КонтрагентИсходный;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетОрганизации(ИдентификаторСтроки)
	
	ВыделитьКолонкуРСКонтрагента = Ложь;
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ
		(ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчета")
		И ТипЗнч(СтрокаДокумента.СчетКонтрагента.Владелец) = Тип("СправочникСсылка.Контрагенты"))
		Тогда
		ЗапросПоискаСчета = Новый Запрос;
		Если СтрокаДокумента.ВидОперации = ВидОперацииПереводНаДругойСчет Тогда
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если ЗначениеЗаполнено(СтрокаДокумента.Получатель1) Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПолучательБИК;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
		Иначе
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			БИКСчета = СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
		Если СокрЛП(КППКонтрагента) = "0" Тогда
			КППКонтрагента = "";
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("КППКонтрагента", КППКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("ИмяКонтрагента", ИмяКонтрагента);
		ЗапросПоискаСчета.УстановитьПараметр("БИКБанка", БИКСчета);
		
		ЗапросПоискаСчета.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Владелец.ИНН КАК ВладелецИНН,
		|	БанковскиеСчета.Владелец.КПП КАК ВладелецКПП,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета,
		|	БанковскиеСчета.Банк.Код КАК БИК_из_Базы,
		|	Выбор Когда БанковскиеСчета.Банк.Код = &БИКБанка Тогда 1 Иначе 2 Конец КАК ПриоритетБИК,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА БанковскиеСчета.Владелец.КПП = ""0""
		|					ТОГДА """"
		|				ИНАЧЕ БанковскиеСчета.Владелец.КПП
		|			КОНЕЦ = &КППКонтрагента
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПриоритетКПП,
		|	Выбор Когда БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента Тогда 1 Иначе 2 Конец КАК ПриоритетИНН,
		|	Выбор Когда (БанковскиеСчета.Владелец.Наименование = &ИмяКонтрагента) 
		|		ИЛИ (Выразить(БанковскиеСчета.Владелец.НаименованиеПолное КАК Строка(1024)) = &ИмяКонтрагента) Тогда 1 Иначе 2 Конец КАК ПриоритетНаименования
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации 
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриоритетИНН,
		|	ПриоритетБИК,
		|	ПриоритетНаименования,
		|	ПриоритетКПП";
		
		РезультатЗапросаПоБС = ЗапросПоискаСчета.Выполнить();
		ВыборкаПоиска = РезультатЗапросаПоБС.Выбрать();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
		// Нужно обработать следующую ситуацию.
		// У контрагента изменился ИНН, но номер счета остался прежним.
		// Будем в этом случае выдавать предупреждающее сообщение и предлагать создать нового контрагента, если не нашли контрагента с нужным ИНН.
		
		КонтрагентНеНайден = Истина;
		Если ВыборкаПоиска.Следующий() Тогда
			ПроверкаБИКа = Ложь;
			
			// Если в файле указан ИНН контрагента, но мы его не нашли.
			Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 И ВыборкаПоиска.ПриоритетНаименования = 2 Тогда
				
				СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
				Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
				Иначе
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
				КонецЕсли;
				ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
				СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
				ВыделитьКолонкуРСКонтрагента = Истина;
				СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
				СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				
			Иначе
				
				КонтрагентНеНайден = Ложь;
				
				СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
				Контрагент = ВыборкаПоиска.Владелец;
				СтрокаДокумента.КонтрагентНеНайденКартинка = -1;
				
				// Не совпадает БИК в базе и в выписке.
				Если (ВыборкаПоиска.ПриоритетБИК = 2) Тогда
					// Проверим БИК банка. Может не совпадать. Например у разных контрагентов есть разные счета в разных банках,
					// но с одинаковым номером.
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					
					СтрокаЗамечание = НСтр("ru = 'БИК банка счета контрагента в базе (%БИК_из_Базы%) не совпадает с БИК банка в выписке (%БИК_в_Выписке%).'");
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_из_Базы%", ?(ЗначениеЗаполнено(ВыборкаПоиска.БИК_из_Базы), ВыборкаПоиска.БИК_из_Базы, НСтр("ru = '<пустой>'")));
					СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%БИК_в_Выписке%", ?(ЗначениеЗаполнено(БИКСчета), БИКСчета, НСтр("ru = '<пустой>'")));
					ДобавитьЗамечание(СтрокаДокумента, 4, СтрокаЗамечание);
				КонецЕсли;
				
				// Не совпадает ИНН (в частности, когда ИНН не заполнен в ИБ.
				Если НЕ ПустаяСтрока(ИННКонтрагента) И ВыборкаПоиска.ПриоритетИНН = 2 Тогда
					СтрокаЗамечание = НСтр("ru = 'Банковский счет найден у контрагента с другим ИНН (%ВладелецИНН%)!'");
					Если ЗначениеЗаполнено(ВыборкаПоиска.ВладелецИНН) Тогда
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", ВыборкаПоиска.ВладелецИНН);
					Иначе
						СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%ВладелецИНН%", НСтр("ru = '<Не заполнен>'"));
					КонецЕсли;
					ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
					СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаЗамечание;
					ВыделитьКолонкуРСКонтрагента = Истина;
					СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
					СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если КонтрагентНеНайден Тогда
			СтрокаЗамечание = НСтр("ru = 'Не найден счет контрагента (%СчетКонтрагента%)!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%СчетКонтрагента%", СчетКонтрагента);
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтрокаЗамечание);
			//СтрокаДокумента.НомерКартинки = 1;
			//УстановитьНомерКартинкиДляПодвалаНаСервере(СтрокаДокумента);
			
			СтрокаСчетКонтрагента = НСтр("ru = 'Не найден (%СчетКонтрагента%).'");
			СтрокаСчетКонтрагента = СтрЗаменить(СтрокаСчетКонтрагента, "%СчетКонтрагента%", СчетКонтрагента);
			СтрокаДокумента.СчетКонтрагента = СтрокаСчетКонтрагента;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
		КонецЕсли;
		
		// Если ИНН не указан, то в выборку попадут все контрагенты, у которых есть счет с нужным номером.
		// Если ИНН указан, то нужно сообщать только количестве счетов у контрагентов с ИНН как в выписке из банка.
		Если НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			КоличествоЭлементовВВыборке = 0;
			ВыборкаПоиска.Сбросить();
			Пока ВыборкаПоиска.Следующий() Цикл
				Если ВыборкаПоиска.ВладелецИНН = ИННКонтрагента Тогда
					КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			КоличествоЭлементовВВыборке = ВыборкаПоиска.Количество();
		КонецЕсли;
		
		
		Если КоличествоЭлементовВВыборке > 1 //И 
			// Если ИНН и наименование контрагента совпадают с теми, что указаны в выписке, то не будем выдавать сообщения о нескольких РС.
			//ВыборкаПоиска.ПриоритетНаименования = 2 
			Тогда
			СтрокаЗамечание = НСтр("ru = 'В информационной базе найдено несколько (%Количество%) одинаковых банковских счетов! Проверьте контрагента и р/счет!'");
			СтрокаЗамечание = СтрЗаменить(СтрокаЗамечание, "%Количество%", КоличествоЭлементовВВыборке);
			ДобавитьЗамечание(СтрокаДокумента, 1, СтрокаЗамечание);
			Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
				СтрокаДокумента.СчетКонтрагента = СтрокаЗамечание;
			КонецЕсли;
			СтрокаДокумента.СчетКонтрагентаСтрока = СтрокаСчетКонтрагента;
			ВыделитьКолонкуРСКонтрагента = Истина;
			СтрокаДокумента.СчетКонтрагентаНеНайденКартинка = 0;
			СтрокаДокумента.КонтрагентНеНайденКартинка = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыделитьКолонкуРСКонтрагента Тогда
		Элементы.ЗагрузкаГруппаСчетКонтрагента.КартинкаШапки = БиблиотекаКартинок.ВниманиеВВидеТреугольника;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассуОрганизации(ИдентификаторСтроки)
	
	СтрокаДокумента = Объект.Загрузка.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Определим кассу орагазинации для операций снятия наличных и взноса наличных на счет организации.
	Если СтрокаДокумента.Касса.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Кассы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы
			|ГДЕ
			|	НЕ Кассы.ПометкаУдаления
			|ИТОГИ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
			|ПО
			|	ОБЩИЕ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ВыборкаОбщийИтог.Следующий();		// Общий итог
		
		Если ВыборкаОбщийИтог.Ссылка = 1 Тогда
			
			ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			СтрокаДокумента.Касса = ВыборкаДетальныеЗаписи.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Загрузка.ТекущиеДанные.Исходящий Тогда
		ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ПолучитьСписокВидовОперацийРасходДСБанк();
	Иначе
		ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ПолучитьСписокВидовОперацийПоступленияДСБанк();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьВидОперации(ТекущиеДанные, ВыбранноеЗначение);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыДокумента(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Исходящий Тогда
		ТекущаяСтрока.СуммаСписано = ТекущаяСтрока.СуммаДокумента;
		ТекущаяСтрока.СуммаСписаноСМинусом = -ТекущаяСтрока.СуммаДокумента;
	Иначе
		ТекущаяСтрока.СуммаПоступило = ТекущаяСтрока.СуммаДокумента;
	КонецЕсли;
	ТекущаяСтрока.НеВерныйФорматСуммыКартинка = -1;
	Если ТекущаяСтрока.Готовность > 3 Тогда
		ТекущаяСтрока.Готовность = 3;
	КонецЕсли;
	
	УдалятьПредупреждение = НСтр("ru = 'Укажите сумму вручную'");
	ТекущаяСтрока.ОписаниеОшибокПодТЧ = УдалитьДанныеИзОписанияОшибкиНаКлиенте(УдалятьПредупреждение, ТекущаяСтрока.ОписаниеОшибокПодТЧ, ТекущаяСтрока);
	ПоменятьСимволПСНаПробел(ТекущаяСтрока.ОписаниеОшибокПодТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводСуммыДокументаЗавершение(РезультатЗавершения, ПараметрыЗавершения) Экспорт
	
	Если Не РезультатЗавершения = Неопределено И РезультатЗавершения > 0 Тогда
	
		ТекущаяСтрока = Объект.Загрузка.НайтиПоИдентификатору(ПараметрыЗавершения);
		ТекущаяСтрока.СуммаДокумента = РезультатЗавершения;
		
		ПриИзмененииСуммыДокумента(ТекущаяСтрока);
		
		ПоказыватьЗнакПредупреждения = Ложь;
		ПодготовитьТекстПредупреждения(ТекущаяСтрока, ПоказыватьЗнакПредупреждения);
		УстановитьНомерКартинкиНаКлиенте(ТекущаяСтрока, ПоказыватьЗнакПредупреждения);
		
		УстановитьВидимостьЭлементовСПредупреждающимиЗнакамиНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПротокол(Команда)
	
	Элементы.Загрузить.КнопкаПоУмолчанию = Истина;
	Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаЗагрузка;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация13Нажатие(Элемент)
	
	Элементы.ЗакрытьПротокол.КнопкаПоУмолчанию = Истина;
	Элементы.СтраницыЗагрузкаИПротокол.ТекущаяСтраница = Элементы.СтраницаПротокол;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаКорреспонденцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыВыбора = Новый Структура("Отбор", ПолучитьСтруктуруПараметровВыбора(Элементы.Загрузка.ТекущиеДанные.Исходящий));
	ОткрытьФорму("ПланСчетов.Управленческий.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ЗагрузкаКорреспонденцияНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровВыбора(Исходящий)
	
	СтруктураПараметровВыбора = Новый Структура;
	Если Исходящий Тогда
		ПараметрыВыбора = Метаданные.Документы.РасходСоСчета.Реквизиты.Корреспонденция.ПараметрыВыбора;
	Иначе
		ПараметрыВыбора = Метаданные.Документы.ПоступлениеНаСчет.Реквизиты.Корреспонденция.ПараметрыВыбора;
	КонецЕсли;
	
	Для каждого ТекущийПараметрВыбора Из ПараметрыВыбора Цикл
		Если ТекущийПараметрВыбора.Имя = "Отбор.ТипСчета" Тогда
			СтруктураПараметровВыбора.Вставить("ТипСчета", ТекущийПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметровВыбора;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаКорреспонденцияНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Загрузка.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Корреспонденция = ВыбранноеЗначение;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНомерКартинкиДляПодвалаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Загрузка.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаНомерКартинкиДляПодвалаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Загрузка.ТекущиеДанные.ОписаниеОшибок) Тогда
		ТекстПредупреждения = ПодготовитьТекстПредупреждения(Элементы.Загрузка.ТекущиеДанные);
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		ПоказатьПредупреждение(Неопределено, ПолучитьТекстДокументГотовКЗагрузкеНаКлиенте(Элементы.Загрузка.ТекущиеДанные, Истина));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПлатежноеПоручениеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
	Если НЕ ТекущаяСтрока.ПлатежноеПоручение.Пустая() И ТекущаяСтрока.Исходящий Тогда
		НовыйВидОперации = ЗагрузкаПлатежноеПоручениеПриИзмененииНаСервере(ТекущаяСтрока.ПлатежноеПоручение);
		Если НовыйВидОперации <> Неопределено Тогда
			УстановитьВидОперации(ТекущаяСтрока, НовыйВидОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузкаПлатежноеПоручениеПриИзмененииНаСервере(ПлатежноеПоручение)
	
	Если ПлатежноеПоручение.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПлатежноеПоручение.ПеречислениеНалога") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Налоги");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузкаДокументРасчетовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Загрузка.ТекущиеДанные;
	ТекущаяСтрока.ПризнакАванса = НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДокументРасчетов);
	
КонецПроцедуры

#КонецОбласти