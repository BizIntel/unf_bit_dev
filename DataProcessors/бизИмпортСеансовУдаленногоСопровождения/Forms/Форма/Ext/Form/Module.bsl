
&НаКлиенте
Процедура ПодобратьФайл(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Текст = "Файл выгрузки TeamViewer";
	Фильтр = НСтр(Текст)+"(*.сsv)|*.csv";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл выгрузки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		//СформироватьТаблицу(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ТекстДокумента = ТекстовыйДокумент.ПолучитьТекст();
		СформироватьТаблицу(ТекстДокумента);

	Иначе
		Текст = "ru = ""Файл не выбран!""; en = ""File(s) not selected!""";
		ПоказатьПредупреждение(,НСтр(Текст));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицу(ТекстДокумента)
	ВременныйФайл = ПолучитьИмяВременногоФайла("csv");
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстДокумента);
	ТекстовыйДокумент.Записать(ВременныйФайл);
	
	ТаблицаВыгрузки = ПолучитьТаблицуВыгрузки(ВременныйФайл);
	СтруктураДанных = СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Объект.НоменклатураУдаленногоСопровождения, Объект.Дата);	
   	ЦенаУдаленногоСопровождения = ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных);
	Объект.Цена = ЦенаУдаленногоСопровождения/60;
	
	

Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	// Текст запроса для построения временной таблицы
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабВыгрузки.Пользователь,
	               |	ТабВыгрузки.Компьютер,
	               |	ТабВыгрузки.ИД,
	               |	ТабВыгрузки.Группа,
	               |	ТабВыгрузки.Пуск,
	               |	ТабВыгрузки.Окончание,
	               |	ТабВыгрузки.Продолжительность,
	               |	ТабВыгрузки.Расчет,
	               |	ТабВыгрузки.Примечание
	               |ПОМЕСТИТЬ ВТДанные
	               |ИЗ
	               |	&Данные КАК ТабВыгрузки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДанные.Пользователь,
	               |	ВТДанные.Компьютер КАК Компьютер,
	               |	ВТДанные.ИД КАК ID,
	               |	ВТДанные.Группа,
	               |	ВТДанные.Пуск КАК НачалоСеанса,
	               |	ВТДанные.Окончание КАК ОкончаниеСеанса,
	               |	ВТДанные.Продолжительность КАК ПродолжительностьВсего,
	               |	ВЫБОР
	               |		КОГДА ВТДанные.Расчет = ЗНАЧЕНИЕ(Перечисление.BizСтатусыСоединенияTeamViewer.СчетВыставлен)
	               |			ТОГДА ВТДанные.Продолжительность
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ПродолжительностьКОплате,
	               |	ВЫБОР
	               |		КОГДА ВТДанные.Расчет = ЗНАЧЕНИЕ(Перечисление.BizСтатусыСоединенияTeamViewer.СчетВыставлен)
	               |			ТОГДА ВТДанные.Продолжительность * &ЦенаУдаленногоСопровождения
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Сумма,
	               |	ВТДанные.Расчет КАК СтатусСоединения,
	               |	ВТДанные.Примечание КАК Комментарий,
	               |	BizПользователиВTeamViewer.Владелец КАК Исполнитель,
	               |	ВЫБОР
	               |		КОГДА СоединенияTeamViewer.ID ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоНеУникальнаяЗапись,
	               |	BizIDКонтрагентовTeamViewer.Владелец КАК Контрагент
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BizПользователиВTeamViewer КАК BizПользователиВTeamViewer
	               |		ПО ВТДанные.Пользователь = BizПользователиВTeamViewer.Наименование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоединенияTeamViewer КАК СоединенияTeamViewer
	               |		ПО ВТДанные.ИД = СоединенияTeamViewer.ID
	               |			И ВТДанные.Пуск = СоединенияTeamViewer.НачалоСеанса
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BizIDКонтрагентовTeamViewer КАК BizIDКонтрагентовTeamViewer
	               |		ПО ВТДанные.ИД = BizIDКонтрагентовTeamViewer.Наименование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	BizIDКонтрагентовTeamViewer.Владелец КАК Контрагент
	               |ИЗ
	               |	ВТДанные КАК ВТДанные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.BizIDКонтрагентовTeamViewer КАК BizIDКонтрагентовTeamViewer
	               |		ПО ВТДанные.ИД = BizIDКонтрагентовTeamViewer.Наименование";
	Запрос.УстановитьПараметр("Данные",	ТаблицаВыгрузки);
	//Запрос.УстановитьПараметр("СсылкаНаТекДок",	Объект.Ссылка);
	Запрос.УстановитьПараметр("ЦенаУдаленногоСопровождения", ЦенаУдаленногоСопровождения);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	Выборка = ПакетЗапросов[1].Выбрать();
	ВыборкаКонтрагентов =  ПакетЗапросов[2].Выгрузить();
	ДеревоКонтрагентов = Объект.ФильтрыСеансов;
	КоллекцияСтрок = ДеревоКонтрагентов.ПолучитьЭлементы();
	КоллекцияСтрок.Очистить();
		
	Для каждого Строка Из ВыборкаКонтрагентов Цикл
		КоллекцияПодстрок = КоллекцияСтрок.Добавить();
		КоллекцияПодстрок.Контрагент = ?(Строка.Контрагент=NULL, "Соответствий не найдено", Строка.Контрагент);
	КонецЦикла;
	
		//Мне очень очень стыдно!
	Объект.СписокСоединенийУС.Очистить();
	Пока Выборка.Следующий() Цикл
		
		ЭтоНеУникальнаяЗапись = Выборка.ЭтоНеУникальнаяЗапись;
		
		Если ЭтоНеУникальнаяЗапись Тогда
			Объект.СписокСоединенийУС.Очистить();
			Сообщить("В Файле содержатся неуникальные записи!, Sorry");
			Возврат;
		КонецЕсли;
		
		СтрокаТЧСоединения 	= Объект.СписокСоединенийУС.Добавить();
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда
        	СтрокаТЧСоединения.Контрагент = Выборка.Контрагент;	
		КонецЕсли;
		
		СтрокаТЧСоединения.Компьютер = Выборка.Компьютер;
		СтрокаТЧСоединения.ID 		 = Выборка.ID;
		СтрокаТЧСоединения.НачалоСеанса = Выборка.НачалоСеанса;
		СтрокаТЧСоединения.ОкончаниеСеанса 	= Выборка.ОкончаниеСеанса;
		СтрокаТЧСоединения.СтатусСоединения = Выборка.СтатусСоединения;
		СтрокаТЧСоединения.ПродолжительностьВсего 	= Выборка.ПродолжительностьВсего;
				
		//////////////////////
		//Опредилить в составе поля примечание (комментарий) литералы ВР! и БО! 
		//В случае если искомые литералы присутствуют в составе комментариев тогда пересчитать показатель ПродолжительностьКОплате
		//Если же нет то взять показатель из результата запроса
		
		ПодстрокаВР = "ВР!";
		ПодстрокаБО = "БО!";
		Примечание = Выборка.Комментарий;
		
		Если Найти(Примечание,ПодстрокаВР)Тогда 
			МассивСтрок = СтрЗаменить(Примечание,"!",Символы.ПС);
			
			Попытка
				
				СтрокаТЧСоединения.ПродолжительностьКОплате = Число(СокрЛП(СтрПолучитьСтроку(МассивСтрок,2)));
				
			Исключение
				Сообщить ("Обнаружены проблемы по ID" + Выборка.ID+", Пользователь:" + Выборка.Пользователь + ", "  + Примечание);
			КонецПопытки;
			
		ИначеЕсли Найти(Примечание,ПодстрокаБО) Тогда	
			СтрокаТЧСоединения.ПродолжительностьКОплате = 0;
			
		Иначе СтрокаТЧСоединения.ПродолжительностьКОплате = Выборка.ПродолжительностьКОплате;
		КонецЕсли;
		
		//////////////////////
		
					СтрокаТЧСоединения.Сумма 		= СтрокаТЧСоединения.ПродолжительностьКОплате * ЦенаУдаленногоСопровождения/60;
				
		//РаспределитьСкидкуПоСеансамУдаленногоСопровождения();
		
		
		СтрокаТЧСоединения.Комментарий 	= Выборка.Комментарий;
		СтрокаТЧСоединения.Исполнитель 	= Выборка.Исполнитель;
		
		
	КонецЦикла;


КонецПроцедуры


&НаСервереБезКонтекста
Функция  ПолучитьТаблицуВыгрузки(ПутьКФайлу)

	ВыгрузкаTW = Новый ЧтениеТекста(ПутьКФайлу);
	Стр = ВыгрузкаTW.ПрочитатьСтроку();
	Стр = ВыгрузкаTW.ПрочитатьСтроку();//Пропустим легенду
	ТаблицаВыгрузки = Новый ТаблицаЗначений; 
	ТаблицаВыгрузки.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Компьютер", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("ИД", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаВыгрузки.Колонки.Добавить("Пуск", Новый ОписаниеТипов("ДАТА"));
	ТаблицаВыгрузки.Колонки.Добавить("Окончание", Новый ОписаниеТипов("ДАТА"));
	ТаблицаВыгрузки.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("ЧИСЛО"));
	ТаблицаВыгрузки.Колонки.Добавить("Расчет", Новый ОписаниеТипов("ПеречислениеСсылка.BizСтатусыСоединенияTeamViewer"));
	ТаблицаВыгрузки.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500)));

	Пока Стр <> Неопределено Цикл
		
		Стр = СтрЗаменить(Стр, Символ(34) + Символ(34), Символ(34)); //Символ(34) = " 
		
		СтрТаблицыВыгрузки = ТаблицаВыгрузки.Добавить();
		
		ПозицияРазделителя = Найти(Стр,";");                          
		Пользователь = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблицыВыгрузки.Пользователь = Пользователь;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Компьютер = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблицыВыгрузки.Компьютер = Компьютер;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		ИД = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблицыВыгрузки.ИД = ИД;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Группа = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблицыВыгрузки.Группа = Группа;
        ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Пуск = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Попытка
			СтрТаблицыВыгрузки.Пуск = СтрокуВДату(Пуск);
		Исключение
			Сообщить("Преобразование к дате");
		КонецПопытки;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Окончание = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Попытка
			СтрТаблицыВыгрузки.Окончание = СтрокуВДату(Окончание);
		Исключение
			Сообщить("Преобразование к дате");
		КонецПопытки;
		ПозицияРазделителя = 0;
		
		ПозицияРазделителя = Найти(Стр,";");
		Продолжительность = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		СтрТаблицыВыгрузки.Продолжительность = Число(Продолжительность);
		ПозицияРазделителя = 0;

		//Пропустим сумму выплаты 
		ПозицияРазделителя = Найти(Стр,";");
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		ПозицияРазделителя = 0;
				
		//Пропустим валюту взаиморасчетов (ненужна)
		ПозицияРазделителя = Найти(Стр,";");
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		ПозицияРазделителя = 0;
		
		
		ПозицияРазделителя = Найти(Стр,";");
		Расчет = Сред(Стр, 2, ПозицияРазделителя - 3);
		Стр = Прав(Стр, СтрДлина(Стр) - ПозицияРазделителя);
		Если Расчет = "Расчет" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.Расчет;
		ИначеЕсли Расчет = "Счёт выставлен" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.СчетВыставлен;
		ИначеЕсли Расчет = "Не выставлять счёт" Тогда
			Расчет = Перечисления.BizСтатусыСоединенияTeamViewer.НеВыставлять;
		Иначе
			Сообщить("Ошибка структуры файла CSV");
		КонецЕсли;
		СтрТаблицыВыгрузки.Расчет = Расчет;
		ПозицияРазделителя = 0;
		
		Примечание = Сред(Стр, 2, СтрДлина(Стр) - 2);
		СтрТаблицыВыгрузки.Примечание = Примечание;
		Стр = ВыгрузкаTW.ПрочитатьСтроку();
	КонецЦикла;	
	ВыгрузкаTW.Закрыть();
	Возврат ТаблицаВыгрузки;
	
КонецФункции // ПолучитьТаблицуВыгрузки()

//2013-11-20 15:12                
//1234567890123456
&НаСервереБезКонтекста
Функция  СтрокуВДату(Строка)

	ГОД 	= Число(Сред(Строка, 1, 4));
	МЕСЯЦ 	= Число(Сред(Строка, 6, 2));
    ДЕНЬ 	= Число(Сред(Строка, 9, 2));
	ЧАС 	= Число(Сред(Строка, 12, 2));
	МИНУТА 	= Число(Сред(Строка, 15, 2));
	Возврат Дата(ГОД, МЕСЯЦ, ДЕНЬ, ЧАС, МИНУТА, 0);
	
КонецФункции // СтрокуВДату()

&НаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Номенклатура, ДатаДок)
	
    СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаОбработки",	ДатаДок);
	СтруктураДанных.Вставить("Номенклатура", 	Номенклатура);
	СтруктураДанных.Вставить("Характеристика",	Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	СтруктураДанных.Вставить("ВидЦен", 			Справочники.ВидыЦен.Оптовая);	
	СтруктураДанных.Вставить("ВалютаДокумента", Константы.НациональнаяВалюта.Получить());
	СтруктураДанных.Вставить("Коэффициент", 1);
	
	Возврат СтруктураДанных;

КонецФункции // СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных)

	Возврат УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанных);	

КонецФункции // ПолучитьЦенуУслугиУдаленногоСопровождения()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.НоменклатураУдаленногоСопровождения = Справочники.Номенклатура.НайтиПоКоду("99999999999");
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();	
	КонецЕсли;
										
	//СписокАктовУС.Параметры.УстановитьЗначениеПараметра("ДатаНачала",НачалоМесяца(Объект.Дата));
	//СписокАктовУС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания", КонецМесяца(Объект.Дата));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаДляСпискаАктовУС()

КонецФункции // ПолучитьТекстЗапросаДляСпискаАктовУС()


&НаКлиенте
Процедура НоменклатураУдаленногоСопровожденияПриИзменении(Элемент)
	СтруктураДанных = СформироватьСтруктуруДанныхДляПолученияЦеныНоменклатуры(Объект.НоменклатураУдаленногоСопровождения, Объект.Дата);
	ЦенаУдаленногоСопровождения = ПолучитьЦенуУслугиУдаленногоСопровождения(СтруктураДанных);
	
	Если ОБъект.Цена <> ЦенаУдаленногоСопровождения Тогда
		Объект.Цена = ЦенаУдаленногоСопровождения/60;
		//ПересчитатьСуммыВТЧСоединения();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрыСеансовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеВыбора = Объект.ФильтрыСеансов.НайтиПоИдентификатору(ВыбраннаяСтрока).Контрагент;
	Контрагент = НайтиКонтрагентаВСправочнике(ЗначениеВыбора);
	ОтфильтроватьСтрокиТЧ_СписокСоединенийУС(Контрагент);
	УстановитьОтборВДинамическихСписках(СписокАктовУС, Контрагент);
	УстановитьОтборВДинамическихСписках(СписокАктовЛС, Контрагент);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОтфильтроватьСтрокиТЧ_СписокСоединенийУС(Контрагент)
	//ЗначениеВыбора = Объект.ФильтрыСеансов.НайтиПоИдентификатору(ВыбраннаяСтрока).Контрагент;
	//СписокСеансов = Объект.СписокСоединенийУС;
	ПараметрыОтбора = Новый ФиксированнаяСтруктура("Контрагент", Контрагент);//НайтиКонтрагентаВСправочнике(ЗначениеВыбора)
	ЭтаФорма.Элементы.СписокСоединенийУС.ОтборСтрок = ПараметрыОтбора;
	
КонецПроцедуры // Отфиль()

&НаСервереБезКонтекста
Функция НайтиКонтрагентаВСправочнике(НаименованиеКонтрагента)
	Если НаименованиеКонтрагента = "Соответствий не найдено" Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеКонтрагента);
	КонецЕсли;
	
	Возврат Контрагент;	

КонецФункции // НайтиКонтрагентаВСправочнике()

&НаКлиенте
Процедура ОтключитьОтбор(Команда)
	ЭтаФорма.Элементы.СписокСоединенийУС.ОтборСтрок = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьКонтрагентов(Команда)
	Если Элементы.СписокСоединенийУС.ПодчиненныеЭлементы.СписокСоединенийУСКонтрагент.Видимость = Ложь Тогда
		 Элементы.СписокСоединенийУС.ПодчиненныеЭлементы.СписокСоединенийУСКонтрагент.Видимость = Истина;
		 Элементы.СписокСоединенийУС.КоманднаяПанель.ПодчиненныеЭлементы.СписокСоединенийУСОтображатьКонтрагентов.Пометка = Истина;
	 Иначе Элементы.СписокСоединенийУС.ПодчиненныеЭлементы.СписокСоединенийУСКонтрагент.Видимость = Ложь;
		 Элементы.СписокСоединенийУС.КоманднаяПанель.ПодчиненныеЭлементы.СписокСоединенийУСОтображатьКонтрагентов.Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьАктыУСНаСервере(КонтрагентНаименование)
	   	
		Если КонтрагентНаименование = "Соответствий не найдено" Тогда
			Возврат
		КонецЕсли;
		КонтрагентСсылка = Справочники.Контрагенты.НайтиПоНаименованию(КонтрагентНаименование);
	 	АктУС_Объект = Документы.BizОтчетОСоединенияхTeamViewer.СоздатьДокумент();
		АктУС_Объект.Дата = Объект.Дата;
		АктУС_Объект.Контрагент = КонтрагентСсылка;
		АктУС_Объект.НоменклатураУдаленногоСопровождения = Объект.НоменклатураУдаленногоСопровождения;
		АктУС_Объект.Цена = Объект.Цена;
		ПроверкаИТС = бизУчетИТСКлиентСервер.ПолучитьСведенияОПодпискеИТС(КонтрагентСсылка,Объект.Дата);
		Если ПроверкаИТС.ЕстьПодписка Тогда	
			АктУС_Объект.ВСчетИТСМин = ПроверкаИТС.СкидкаВ_минутах;
			АктУС_Объект.ВСчетИТССумма = Объект.Цена*ПроверкаИТС.СкидкаВ_минутах;
		КонецЕсли;
		//Заполнить ТЧ Список сеансов УС
		
		СписокСеансовУС = Объект.СписокСоединенийУС;
		
		Запрос = Новый Запрос;
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		//Текст запроса для построения временной таблицы
		Запрос.Текст =  "ВЫБРАТЬ
		                |	СписокСеансовУС.Контрагент,
		                |	СписокСеансовУС.Компьютер,
		                |	СписокСеансовУС.ID,
		                |	СписокСеансовУС.НачалоСеанса,
		                |	СписокСеансовУС.ОкончаниеСеанса,
		                |	СписокСеансовУС.СтатусСоединения,
		                |	СписокСеансовУС.ПродолжительностьВсего,
		                |	СписокСеансовУС.ПродолжительностьКОплате,
		                |	СписокСеансовУС.Сумма,
		                |	СписокСеансовУС.Комментарий,
		                |	СписокСеансовУС.Исполнитель,
		                |	СписокСеансовУС.СуммаСкидки,
		                |	СписокСеансовУС.СуммаСоСкидкой
		                |ПОМЕСТИТЬ СписокСеансовУС
		                |ИЗ
		                |	&СписокСеансовУС КАК СписокСеансовУС
		                |;
		                |
		                |////////////////////////////////////////////////////////////////////////////////
		                |ВЫБРАТЬ
		                |	СписокСеансовУС.Контрагент,
		                |	СписокСеансовУС.Компьютер,
		                |	СписокСеансовУС.ID,
		                |	СписокСеансовУС.НачалоСеанса,
		                |	СписокСеансовУС.ОкончаниеСеанса,
		                |	СписокСеансовУС.СтатусСоединения,
		                |	СписокСеансовУС.ПродолжительностьВсего,
		                |	СписокСеансовУС.ПродолжительностьКОплате,
		                |	СписокСеансовУС.Сумма,
		                |	СписокСеансовУС.Комментарий,
		                |	СписокСеансовУС.Исполнитель,
		                |	СписокСеансовУС.СуммаСкидки,
		                |	СписокСеансовУС.СуммаСоСкидкой
		                |ИЗ
		                |	СписокСеансовУС КАК СписокСеансовУС
		                |ГДЕ
		                |	СписокСеансовУС.Контрагент = &Контрагент";
		Запрос.УстановитьПараметр("СписокСеансовУС", СписокСеансовУС.Выгрузить());
		Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
		
		ПодмножествоСеансовУС = Запрос.Выполнить().Выгрузить();
		

		Для Каждого СеансУС Из ПодмножествоСеансовУС Цикл
			СтрокаТЧ_Соединения = АктУС_Объект.Соединения.Добавить();
			СтрокаТЧ_Соединения.ID = СеансУС.ID;
			СтрокаТЧ_Соединения.Исполнитель = СеансУС.Исполнитель;
			СтрокаТЧ_Соединения.Компьютер = СеансУС.Компьютер;
			СтрокаТЧ_Соединения.НачалоСеанса = СеансУС.НачалоСеанса;
			СтрокаТЧ_Соединения.ОкончаниеСеанса = СеансУС.ОкончаниеСеанса;
			СтрокаТЧ_Соединения.ПродолжительностьВсего  = СеансУС.ПродолжительностьВсего;
			СтрокаТЧ_Соединения.ПродолжительностьКОплате = СеансУС.ПродолжительностьКОплате;
			СтрокаТЧ_Соединения.Комментарий = СеансУС.Комментарий;
			СтрокаТЧ_Соединения.Сумма = СеансУС.Сумма;
			СтрокаТЧ_Соединения.СтатусСоединения = СеансУС.СтатусСоединения;
			Сумма = ПодмножествоСеансовУС.Итог("Сумма");
			Если НЕ Сумма = 0 Тогда
				СтрокаТЧ_Соединения.СуммаСкидки  = АктУС_Объект.ВСчетИТССумма*СеансУС.Сумма/ПодмножествоСеансовУС.Итог("Сумма");
			КонецЕсли;
			СтрокаТЧ_Соединения.СуммаСоСкидкой = СтрокаТЧ_Соединения.Сумма-СтрокаТЧ_Соединения.СуммаСкидки;
		КонецЦикла;
		АктУС_Объект.ПродолжительностьКОплатеИтог = АктУС_Объект.Соединения.Итог("ПродолжительностьВсего");
		АктУС_Объект.ПродолжительностьВДокументе = АктУС_Объект.Соединения.Итог("ПродолжительностьКОплате");
		АктУС_Объект.СуммаВТЧСоединения = АктУС_Объект.Соединения.Итог("Сумма");
		АктУС_Объект.СуммаВДокументе = АктУС_Объект.Соединения.Итог("СуммаСоСкидкой");
		АктУС_Объект.Записать(РежимЗаписиДокумента.Проведение);
	    
	
КонецПроцедуры

&НаСервере
Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений)
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции




&НаКлиенте
Процедура СоздатьАктыУС(Команда)
	
	ЕстьОшибки = ПроверитьЗаполнениеТЧ_СписокСоединенийУС();
	Если ЕстьОшибки Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОтобратьСтрокиС_Ошибками",ЭтотОбъект),"Обнаружены неприкрепленные TeamViewer ID!");
        Возврат;
	КонецЕсли;
		
	
	КоллекцияСтрок = Объект.ФильтрыСеансов.ПолучитьЭлементы();
	КоличествоСтрок = КоллекцияСтрок.Количество();
	Сч = 0;
	Для каждого Строка Из КоллекцияСтрок Цикл
		
		СоздатьАктыУСНаСервере(Строка.Контрагент);
		ТекущийПрогресс = Цел(Сч/КоличествоСтрок*100);
		Состояние(Строка.Контрагент,ТекущийПрогресс,,БиблиотекаКартинок.Обновить);
	    Сч = Сч+1;
	КонецЦикла;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("АктивизироватьЖурналыДокументов",ЭтотОбъект), "Все документы созданы!");
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЖурналыДокументов(Результат) Экспорт

	ЭтаФорма.ТекущийЭлемент = Элементы.СтраницаСписокДокументов;

КонецПроцедуры


&НаСервере
Функция ПроверитьЗаполнениеТЧ_СписокСоединенийУС()

	СписокСеансовУС = Объект.СписокСоединенийУС;
	МассивСтрокС_Ошибками = СписокСеансовУС.НайтиСтроки(Новый Структура("Контрагент", Справочники.Контрагенты.ПустаяСсылка()));
	
	Если МассивСтрокС_Ошибками.Количество() = 0 Тогда
	        ЕстьОшибки = ЛОЖЬ;
	Иначе ЕстьОшибки = ИСТИНА;			
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции // ПроверитьЗаполнениеТЧ_СписокСоединенийУС()

&НаКлиенте
Процедура ОтобратьСтрокиС_Ошибками(Результат) Экспорт
	
	ПараметрыОтбора = Новый ФиксированнаяСтруктура("Контрагент", НайтиКонтрагентаВСправочнике("Соответствий не найдено"));
	ЭтаФорма.Элементы.СписокСоединенийУС.ОтборСтрок = ПараметрыОтбора;		

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьОтборВДинамическихСписках(СписокАктовУС);
	УстановитьОтборВДинамическихСписках(СписокАктовЛС);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВДинамическихСписках(Список, Контрагент = Неопределено)
	     
		 		 
		 Если Список = СписокАктовУС Тогда
		     СписокАктовУС.Отбор.Элементы.Очистить();
			 Дата = Объект.Дата;
		 ИначеЕсли Список = СписокАктовЛС Тогда
			 СписокАктовЛС.Отбор.Элементы.Очистить();
			 Дата = ДобавитьМесяц(Объект.Дата,-1);
		 КонецЕсли;
		 
		 ГруппаОтбора = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		 ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			 
		 ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ПолеОтбора = Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Дата"));
		 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		 ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		 ЭлементОтбора.Использование = Истина;
		 ЭлементОтбора.ПравоеЗначение = НачалоМесяца(Дата);
		 
		 ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		 ПолеОтбора = Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Дата"));
		 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		 ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		 ЭлементОтбора.Использование = Истина;
		 ЭлементОтбора.ПравоеЗначение = КонецМесяца(Дата);
		 
		 Если НЕ Контрагент = Неопределено Тогда
			 ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			 ПолеОтбора = Список.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Дата"));
			 ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
			 ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			 ЭлементОтбора.Использование = Истина;
			 ЭлементОтбора.ПравоеЗначение = Контрагент;
		 КонецЕсли;
		 
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборВСпискеАктовУС(Команда)
	СписокАктовУС.Отбор.Элементы.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборВСпискеАктовЛС(Команда)
	СписокАктовЛС.Отбор.Элементы.Очистить();
КонецПроцедуры

&НаСервере
Функция СоздатьЗаказНарядНаСервере()
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.НоменклатураУдаленногоСопровождения КАК Номенклатура,
               |	""Удаленное сопровождение пользователей 1С: Предприятия 8 согласно отчету об удаленных подключениях TeamViewer от"" КАК Содержание,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.НоменклатураУдаленногоСопровождения.ЕдиницаИзмерения,
               |	СУММА(BizОтчетОСоединенияхTeamViewerСоединения.ПродолжительностьКОплате) КАК ПродолжительностьКОплате,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.Цена КАК Цена,
               |	СУММА(BizОтчетОСоединенияхTeamViewerСоединения.СуммаСоСкидкой) КАК СуммаСоСкидкой
               |ИЗ
               |	Документ.BizОтчетОСоединенияхTeamViewer.Соединения КАК BizОтчетОСоединенияхTeamViewerСоединения
               |ГДЕ
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.Дата >= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
               |	И BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.Дата <= КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
               |	И BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.Контрагент = &Контрагент
               |
               |СГРУППИРОВАТЬ ПО
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.НоменклатураУдаленногоСопровождения,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.НоменклатураУдаленногоСопровождения.ЕдиницаИзмерения,
               |	BizОтчетОСоединенияхTeamViewerСоединения.Ссылка.Цена
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	BizАктОбслуживанияКлиентаУслуги.Ссылка,
               |	BizАктОбслуживанияКлиентаУслуги.Номенклатура,
               |	BizАктОбслуживанияКлиентаУслуги.Содержание,
               |	BizАктОбслуживанияКлиентаУслуги.ЕдиницаИзмерения,
               |	BizАктОбслуживанияКлиентаУслуги.Количество,
               |	BizАктОбслуживанияКлиентаУслуги.Цена,
               |	BizАктОбслуживанияКлиентаУслуги.Сумма
               |ИЗ
               |	Документ.BizАктОбслуживанияКлиента.Услуги КАК BizАктОбслуживанияКлиентаУслуги
               |ГДЕ
               |	BizАктОбслуживанияКлиентаУслуги.Ссылка.Дата >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -1), МЕСЯЦ)
               |	И BizАктОбслуживанияКлиентаУслуги.Ссылка.Дата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&Дата, МЕСЯЦ, -1), МЕСЯЦ)
               |	И BizАктОбслуживанияКлиентаУслуги.Ссылка.Контрагент = &Контрагент
               |	И BizАктОбслуживанияКлиентаУслуги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бизВидыСопровожденияКлиентов.УслугиСопровожденияПП)
               |	И BizАктОбслуживанияКлиентаУслуги.Ссылка.БезТарификации = ЛОЖЬ";
			   
			   
КоллекцияЭлементовОтбора = СписокАктовУС.Отбор.Элементы.Получить(0).Элементы;

Для каждого ЭлементОтбора Из КоллекцияЭлементовОтбора Цикл
	
	Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Контрагент = ЭлементОтбора.ПравоеЗначение;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Дата")Тогда
		Запрос.УстановитьПараметр("Дата", ЭлементОтбора.ПравоеЗначение);
	КонецЕсли;

КонецЦикла;

РезультатЗапроса = Запрос.Выполнить();
Работы = РезультатЗапроса.Выгрузить();
ТЧ_Работы_Массив = ОбщегоНазначения.ТаблицаЗначенийВМассив(Работы);
СтавкаНДС = Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
СтруктураПараметров = Новый Структура("ТЧ_Работы_Массив, Контрагент, СтавкаНДС, ДоговорПоУмолчанию, Организация",ТЧ_Работы_Массив, Контрагент, СтавкаНДС, Контрагент.ДоговорПоУмолчанию, Контрагент.ДоговорПоУмолчанию.Организация); 
Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказНаряд(Команда)
	СтруктураПараметров = СоздатьЗаказНарядНаСервере();
	Форма_ЗаказНаряд = ПолучитьФорму("Документ.ЗаказПокупателя.Форма.ФормаЗаказНаряда", , ЭтотОбъект);
	ДанныеФормы = Форма_ЗаказНаряд.Объект;
	ДанныеФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд");
	ДанныеФормы.Контрагент = СтруктураПараметров.Контрагент;
	ДанныеФормы.Договор = СтруктураПараметров.ДоговорПоУмолчанию;
	ДанныеФормы.Организация = СтруктураПараметров.Организация;
	ДанныеФормы.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказНарядов.ВРаботе");
	
	//ДанныеФормы.
	ТЧ_Работы = ДанныеФормы.Работы;
	ТЧ_Работы.Очистить();
	Для каждого Элемент Из СтруктураПараметров.ТЧ_Работы_Массив Цикл
		Строка = ТЧ_Работы.Добавить();
		Строка.Номенклатура = Элемент.Номенклатура;
		КОплате = Элемент.ПродолжительностьКОплате;
		Строка.Количество = КОплате;
		Строка.Кратность = 1;
		Строка.Коэффициент = 1;
		Строка.Цена = Элемент.Цена;
		Строка.Сумма = Элемент.СуммаСоСкидкой;
		Строка.СтавкаНДС = СтруктураПараметров.СтавкаНДС;
		Строка.Всего = Элемент.СуммаСоСкидкой;
		
		Если ТипЗнч(Элемент.Ссылка) = Тип("ДокументСсылка.BizОтчетОСоединенияхTeamViewer") Тогда
			Основание = Элемент.Ссылка;
			BizОтчетTW  = Основание;
		КонецЕсли;
		Основание_СтруктураРеквизитов = ПолучитьЗначенияРеквизитовПоСсылке(Основание);
		СтрокаСкидкаВсчетИТС = ?(Основание_СтруктураРеквизитов.ВСчетИТСМин <> 0," - " + Основание_СтруктураРеквизитов.ВСчетИТСМин + " мин скидка в счет ИТС ПРОФ", "");
		СтрокаСкидкаЗаОбъем = ?(Основание_СтруктураРеквизитов.СкидкаЗаОбъемМин <> 0," - " + Основание_СтруктураРеквизитов.СкидкаЗаОбъемМин + " мин скидка за объем предоставленных услуг", "");
		СтрокаИтогоМинутКОплате = ?(Основание_СтруктураРеквизитов.ВСчетИТСМин = "" И Основание_СтруктураРеквизитов.СкидкаЗаОбъемМин , "" ," = " + КОплате + " минут к оплате");
		ЭтоУдаленноеСопровождение = ПроверитьСоответствиеПоНаименованию(Элемент.Номенклатура);
		Если ЭтоУдаленноеСопровождение Тогда
		    Строка.Содержание = Элемент.Содержание + " " + Формат(Основание_СтруктураРеквизитов.Дата, "ДФ='dd.MM.yyyy ""г.""'") + ", " + "(Всего: " + Основание_СтруктураРеквизитов.ПродолжительностьВсегоИтог  + " мин., оплачиваемых: "
		+ Основание_СтруктураРеквизитов.ПродолжительностьКОплатеИтог 
	    + СтрокаСкидкаВсчетИТС 
	    + СтрокаСкидкаЗаОбъем 
	    + СтрокаИтогоМинутКОплате
	    +")";
		Иначе Строка.Содержание = Элемент.Содержание;
		КонецЕсли;
				
	КонецЦикла;
	Форма_ЗаказНаряд.ИтогВсего = ТЧ_Работы.Итог("Всего");
	ДанныеФормы.BizОтчетTW = BizОтчетTW;
	
	Форма_ЗаказНаряд.ПараметрыРасчетовСКонтрагентом = ФормаЗаказНарядПараметрыРасчетовСКонтрагентом(Форма_ЗаказНаряд.Объект.Контрагент);
	Форма_ЗаказНаряд.Открыть();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФормаЗаказНарядПараметрыРасчетовСКонтрагентом(Контрагент)
		Возврат Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ВестиРасчетыПоЗаказам, ВестиРасчетыПоДоговорам"));	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьСоответствиеПоНаименованию(НоменклатураСсылка)
	Если НоменклатураСсылка = Константы.бизНоменклатураУдаленногоСопровождения.Получить()Тогда
		Возврат Истина;
	Иначе Возврат Ложь;
	КонецЕсли;
КонецФункции // Провери()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовПоСсылке(АктОбслуживанияСсылка)

Возврат Новый Структура("ВСчетИТСМин,СкидкаЗаОбъемМин,ПродолжительностьКОплатеИтог,ПродолжительностьВсегоИтог, Дата", 
АктОбслуживанияСсылка.ВСчетИТСМин, 
АктОбслуживанияСсылка.СкидкаЗаОбъемМин,
АктОбслуживанияСсылка.ПродолжительностьКОплатеИтог,
АктОбслуживанияСсылка.ПродолжительностьВсегоИтог,
АктОбслуживанияСсылка.Дата);	

КонецФункции // ПолучитьЗначенияРеквизитовПоСсылке(АктОбслуживанияСсылка)()





