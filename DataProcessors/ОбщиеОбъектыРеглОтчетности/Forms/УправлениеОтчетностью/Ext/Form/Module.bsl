
&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияМОС;

&НаКлиенте
// Переменная используется извне формы механизмом длительных операций алкоотчетности.
Перем ПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
// Переменная используется механизмом длительных операций алкоотчетности.
Перем СтруктураВспомДанныхДлитОперацииАЛКО;


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция НачатьЗамерВремени(Отчет)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		КлючеваяОперация = Неопределено;
		
		Если Отчет.ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
			КлючеваяОперация = "ОткрытиеФормыРеглОтчетаРСВ1";
		ИначеЕсли Отчет.ИсточникОтчета = "РегламентированныйОтчет4ФСС" Тогда
			КлючеваяОперация = "ОткрытиеФормыРеглОтчета4ФСС";
		ИначеЕсли Отчет.ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
			КлючеваяОперация = "ОткрытиеФормыРеглОтчетаПрибыль";
		ИначеЕсли Отчет.ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
			КлючеваяОперация = "ОткрытиеФормыРеглОтчетаНДС";
		КонецЕсли;
		
		Если КлючеваяОперация <> Неопределено Тогда
			ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент").НачатьЗамерВремени(Истина, КлючеваяОперация);
		КонецЕсли;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
КонецФункции

&НаКлиенте
Процедура ОткрытьСправочник(Команда)
		
	ОткрытьФорму("Справочник.РегламентированныеОтчеты.Форма.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивНаименованийПравыхГраницПериода = Новый Структура;
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц1", "января");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц2", "февраля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц3", "I-го квартала");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц4", "апреля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц5", "мая");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц6", "I-го полугодия");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц7", "июля");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц8", "августа");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц9", "III-го квартала");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц10", "октября");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц11", "ноября");
	МассивНаименованийПравыхГраницПериода.Вставить("Месяц12", "года");
		
	ПараметрыОткрытия = Параметры.ПараметрыОткрытия;
		
	МетаданныеВерсия = Метаданные.Версия;
	
	ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме
		= РегламентированнаяОтчетность.ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме();
	
	роНеПоказыватьИнформациюДляПользователей = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ИнформацияДляПользователей", "роНеПоказыватьИнформациюДляПользователей");
	
	ОтображатьСписокЦО = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтображатьСписокЦикловОбмена");
	Если ОтображатьСписокЦО = Неопределено Тогда 
		ОтображатьСписокЦО = Истина
	Иначе 
		Элементы.ОтображатьСписокЦикловОбмена.Пометка = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтображатьСписокЦикловОбмена");
	КонецЕсли;
	Элементы.ЦиклыОбмена.Видимость = Элементы.ОтображатьСписокЦикловОбмена.Пометка;
					
	ВосстановитьПараметрыОтбора();

	ЗаполнитьИзСправочникаРегламентированныеОтчеты();
	ВосстановитьСписокВыбранныхВидовОтчетов();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ЖурналОтчетов.ВосстанавливатьТекущуюСтроку = Истина;
	Элементы.ЖурналВыгрузки.ВосстанавливатьТекущуюСтроку = Истина;
		
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда // первое открытие
		Периодичность = "По итогам";
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		
	КонецЕсли;
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям) ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭУДокументооборота();
	Если ЭлектронныйДокументооборотАктивен ИЛИ ЭлектронныйДокументооборотСФССАктивен 
			ИЛИ ЭлектронныйДокументооборотСФСРАРАктивен ИЛИ ЭлектронныйДокументооборотСРПНАктивен
			ИЛИ ЭлектронныйДокументооборотСФТСАктивен Тогда
		УстановитьОтборыЦО();
	КонецЕсли;
	
	РегламентированнаяОтчетностьПереопределяемый.ДобавитьНазначаемуюКоманду(ЭтаФорма, Элементы.ПереходВНовыйИнтерфейс);
	
	ЗаголовокФормы = РегламентированнаяОтчетностьПереопределяемый.ЗаголовокФормыУправлениеОтчетностью();
	
	Заголовок = ?(ЗначениеЗаполнено(ЗаголовокФормы), ЗаголовокФормы, Заголовок);
	
	РегламентированнаяОтчетностьПереопределяемый.НастроитьКнопкиКалендаряБухгалтера(, Элементы.ФормаОткрытьКалендарь);
	
	УстановитьОтборы();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
		
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		
		МодульОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
			ЭтаФорма,
			"БП.Обработка.ОбщиеОбъектыРеглОтчетности",
			"УправлениеОтчетностью",
			,
			НСтр("ru='Новости: Регламентированная отчетность'"),
			Ложь,
			Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
			ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мОтображатьПустые", мОтображатьПустые);
	ПараметрыФормы.Вставить("мФильтроватьВидыОтчетовПоПериоду", мФильтроватьВидыОтчетовПоПериоду);
	ПараметрыФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417", РегламентированнаяОтчетностьКлиент.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417());

	ФормаНастроекОтчетности = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("УправлениеОтчетностьюФормаНастройки", ПараметрыФормы, ЭтаФорма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ФормаНастроекОтчетности.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроекОтчетности.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроекОтчетности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОтчетовНаКлиенте(ОбновлятьИзИБ = Истина)
	Перем ТекущийОтчет;
	
	Если ОбновлятьИзИБ ИЛИ мФильтроватьВидыОтчетовПоПериоду Тогда 
		
		Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
			ТекущийОтчет = Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка;
		КонецЕсли;
		
		СписокРаскрытых = СписокРаскрытыхВДеревеОтчетов();
		ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ);
		УстановитьРаскрытияВСпискеОтчетов(ДеревоОтчетов, СписокРаскрытых);
		
		Если НЕ Элементы.ДеревоОтчетов.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоОтчетов.ТекущаяСтрока = 0;
		КонецЕсли;
						
		Если ТекущийОтчет <> Неопределено Тогда
			УстановитьТекущуюСсылку(ТекущийОтчет);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборы();
	Элементы.ДеревоОтчетовРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	Элементы.ДеревоОтчетовКонтекстноеМенюРазвернутьВсе.Доступность = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюСвернутьВсе.Доступность   = мИерархическийПросмотр;
	
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОтчетовНаСервере(ОбновлятьИзИБ)
	
	СписокОтчетов = СписокВыбранныхСсылокВДеревеОтчетов();
	ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ);
	Если ОбновлятьИзИБ Тогда
		ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокОтчетов, Истина, Неопределено);
	КонецЕсли;
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокОтчетов, Истина, Неопределено);
			
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПараметрыОтбора()
	
	Если ТипЗнч(ПараметрыОткрытия) <> Тип("Структура") Тогда
		
		Организация = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация");
		
		КоличествоОрганизаций = Организация.Количество();
		Если КоличествоОрганизаций > 0 Тогда
			Для Индекс = 0 По КоличествоОрганизаций - 1 Цикл
				Инд = КоличествоОрганизаций - 1 - Индекс;
				ТекОрганизация = Организация[Инд].Значение;
				Если НЕ ТекОрганизация.Пустая() Тогда
					Если ТекОрганизация.ПолучитьОбъект() = Неопределено Тогда
						// Нарушена ссылочная целостность информационной базы.
						Организация.Удалить(Организация[Инд]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КодИФНС       = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_КодИФНС");
		ОтборКодИФНС  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборКодИФНС");
		ОтборПериод   = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод");
		Периодичность = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность");
		
		Если Периодичность = Неопределено Тогда
			Периодичность = "По итогам";
		КонецЕсли;
		
		ДатаНачалаПериодаОтчета = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета");
		ДатаКонцаПериодаОтчета  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета");
		
		Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
			ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
		КонецЕсли;
		
		мДокументОтбор = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДокументОтбор");
		
		УстановитьПредставлениеДокументаОтбора();
		
		мОтбиратьПоДокументуОтбора = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора");
		
		Если мОтбиратьПоДокументуОтбора = Неопределено Тогда
			мОтбиратьПоДокументуОтбора = Ложь;
		КонецЕсли;
		
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		
		ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
		Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
			Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
		КонецЕсли;
		
		мСписокВыбранныхВидовОтчетов = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов");
		
	КонецЕсли;
	
	сохрВыбранныеОтчеты = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты");
	Если сохрВыбранныеОтчеты <> Неопределено Тогда
		ВыбранныеОтчеты.ЗагрузитьЗначения(сохрВыбранныеОтчеты);
	КонецЕсли;
		
	мИерархическийПросмотр = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр");
	Если мИерархическийПросмотр = Неопределено Тогда
		мИерархическийПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	
	ТекСтраница = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
	Если ТекСтраница <> Неопределено И Элементы.Журналы.ПодчиненныеЭлементы.Найти(ТекСтраница) <> Неопределено Тогда
		Элементы.Журналы.ТекущаяСтраница = Элементы[ТекСтраница];
	КонецЕсли;
	
	мОтображатьПустые = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПоказыватьПустые");
	Если мОтображатьПустые = Неопределено Тогда
		мОтображатьПустые = Ложь;
	КонецЕсли;
	
	мФильтроватьВидыОтчетовПоПериоду = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду");
	Если мФильтроватьВидыОтчетовПоПериоду = Неопределено Тогда
		мФильтроватьВидыОтчетовПоПериоду = Истина;
	КонецЕсли;
	    
	ГрупповойРежим = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ГрупповойРежим");
			
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОтбора()
	
	Если НЕ ЗначениеЗаполнено(мДокументОтбор) Тогда
		ДокументОтборСтрока = "";
	Иначе
		ДокументОтборСтрока = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКнопкиОтбиратьПоОтчету()
	
	ОтборПоОтчету = мОтбиратьПоДокументуОтбора;
	Элементы.ДокументОтборСтрока.Доступность = мОтбиратьПоДокументуОтбора;
	Элементы.ОтборПоОтчету.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_СписокВидовОтчетов", СписокВыбранныхСсылокВДеревеОтчетов());
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели", Элементы.Журналы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_Организация", Организация);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_КодИФНС", КодИФНС);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборКодИФНС", ОтборКодИФНС);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтборПериод", ОтборПериод);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПолеВыбораПериодичность", Периодичность);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ДокументОтбор", мДокументОтбор);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ПоказыватьПустые", мОтображатьПустые);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мИерархическийПросмотр", мИерархическийПросмотр);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора", мОтбиратьПоДокументуОтбора);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду", мФильтроватьВидыОтчетовПоПериоду);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ВыбранныеОтчеты", ВыбранныеОтчеты.ВыгрузитьЗначения());
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.УправлениеОтчетностью", "ФормаРеглИФинОтчетности_ОтображатьСписокЦикловОбмена", Элементы.ОтображатьСписокЦикловОбмена.Пометка);
	
КонецПроцедуры

&НаСервере
Функция СписокВыбранныхСсылокВДеревеОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = мПолноеДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.Пометка = 1 Тогда
		СписокВидов.Добавить(УзелДерева.Ссылка);
	КонецЕсли;
		
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхСсылокВДеревеОтчетов(Стр, СписокВидов);
	КонецЦикла;
		
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ = Истина)
	
	Если ОбновлятьИзИБ Тогда
		
		СписокСкрытыхРеглОтчетов = Новый СписокЗначений;
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
							  | СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет КАК Ссылка
							  |ИЗ
							  |	РегистрСведений.СкрытыеРегламентированныеОтчеты КАК СкрытыеРегламентированныеОтчеты");
						  
		СписокСкрытыхРеглОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		Если мИерархическийПросмотр Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 0
                                  | ИНАЧЕ ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 2
                                  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 1
								  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 3
								  | КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК ИндексКартинки,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  | ИНАЧЕ РегламентированныеОтчеты.Наименование КОНЕЦ КАК Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	(РегламентированныеОтчеты.Ссылка НЕ В (&СписокСкрытыхРеглОтчетов) ИЛИ РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА)
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Код ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("СписокСкрытыхРеглОтчетов",         СписокСкрытыхРеглОтчетов);
			Запрос.УстановитьПараметр("Внешний",         " (внешний)");
			ЗначениеВДанныеФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), мПолноеДеревоОтчетов);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 0
                                  | ИНАЧЕ ВЫБОР КОГДА РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 2
                                  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И НЕ РегламентированныеОтчеты.ПометкаУдаления ТОГДА 1
								  | ИНАЧЕ ВЫБОР КОГДА НЕ РегламентированныеОтчеты.ЭтоГруппа И РегламентированныеОтчеты.ПометкаУдаления ТОГДА 3
								  | КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КАК ИндексКартинки,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
								  | ВЫБОР КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать ТОГДА РегламентированныеОтчеты.Наименование + &Внешний
								  | ИНАЧЕ РегламентированныеОтчеты.Наименование КОНЕЦ КАК Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.Ссылка НЕ В (&СписокСкрытыхРеглОтчетов) И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Наименование ");
			Запрос.УстановитьПараметр("СписокСкрытыхРеглОтчетов",         СписокСкрытыхРеглОтчетов);
			Запрос.УстановитьПараметр("Внешний",         " (внешний)");
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			мПолноеДеревоОтчетов.ПолучитьЭлементы().Очистить();
			Для Каждого Стр Из РезультатЗапроса Цикл
				НовСтр = мПолноеДеревоОтчетов.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
			
	СформироватьОтфильтрованноеДеревоОтчетов();
	УдалитьПустыеГруппыВОтфильтрованномДереве();
	Если мИерархическийПросмотр Тогда
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Элементы.ДеревоОтчетов.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуПериодов(СтруктураПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("МесяцНач");
	ТаблицаПериодов.Колонки.Добавить("МесяцКон");
	Если ТипЗнч(СтруктураПериодов) = Тип("Структура") ИЛИ ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		Для Каждого Эл Из СтруктураПериодов Цикл
			Ключ = Эл.Ключ;
			Значение = Эл.Значение;
			Если Ключ = "Месяц" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = Пер;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "МесяцНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "Квартал" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 3*(Пер - 1) + 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "КварталНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "Полугодие" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 6*(Пер - 1) + 6;
				КонецЦикла;
			ИначеЕсли Ключ = "Год" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 12;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Процедура СформироватьОтфильтрованноеДеревоОтчетов(Узел = Неопределено)
	
	УзелБылУдален = Ложь;
	Если Узел = Неопределено Тогда
		КопироватьДанныеФормы(мПолноеДеревоОтчетов, ДеревоОтчетов);
		Узел = ДеревоОтчетов;
	ИначеЕсли Узел.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Периоды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел.Ссылка, "Периоды");
		
		Если ОтборПериод И мФильтроватьВидыОтчетовПоПериоду И Периодичность <> "Произвольный" И ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
									
			Периоды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел.Ссылка, "Периоды").Получить();
						
			Если ТипЗнч(Периоды) = Тип("Соответствие") Тогда
				СтрПериоды = Новый Соответствие;
				Для Каждого ЗаписьПериода Из Периоды Цикл
					ЗаписьПериодаКлюч = ЗаписьПериода.Ключ;
					ЗаписьПериодаЗначение = ЗаписьПериода.Значение;
					СтрПериоды.Вставить(ЗаписьПериодаКлюч, СформироватьТаблицуПериодов(ЗаписьПериодаЗначение));
				КонецЦикла;
			ИначеЕсли ТипЗнч(Периоды) = Тип("Структура") Тогда
				СтрПериоды = Новый Соответствие;
				СтрПериоды.Вставить('00010101000000', СформироватьТаблицуПериодов(Периоды));
			КонецЕсли;
			
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Новый ХранилищеЗначения(СтрПериоды));
			
			Если ТаблицаПериодов <> Неопределено Тогда
				МесяцКон = Месяц(ДатаКонцаПериодаОтчета);
				Если ТаблицаПериодов.НайтиСтроки(Новый Структура("МесяцКон", МесяцКон)).Количество() = 0 Тогда
					СледуетУдалитьУзел = Истина;
				Иначе
					СледуетУдалитьУзел = Ложь;
				КонецЕсли;
			Иначе
				СледуетУдалитьУзел = Ложь;
			КонецЕсли;
			Если СледуетУдалитьУзел Тогда
				Если Узел.ПолучитьРодителя() = Неопределено Тогда
					ДеревоОтчетов.ПолучитьЭлементы().Удалить(Узел);
				Иначе
					Узел.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Узел);
				КонецЕсли;
				УзелБылУдален = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УзелБылУдален Тогда
		Кол = Узел.ПолучитьЭлементы().Количество();
		Для Сч = 1 По Кол Цикл
			ТекИнд = Кол - Сч;
			Стр = Узел.ПолучитьЭлементы().Получить(ТекИнд);
			СформироватьОтфильтрованноеДеревоОтчетов(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАктуальнуюТаблицуПериодов(Периоды)
	
	Если ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
		СтруктураПериодов = Периоды.Получить();
	Иначе
		СтруктураПериодов = Периоды;
	КонецЕсли;
		
	Если ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		ТаблицаПериодов = Неопределено;
		НачалоДействияТаблицыПериодов = '00010101000000';
		Для Каждого Элемент Из СтруктураПериодов Цикл
			Если Элемент.Ключ > ДатаКонцаПериодаОтчета ИЛИ Элемент.Ключ < НачалоДействияТаблицыПериодов Тогда
				Продолжить;
			Иначе
				ТаблицаПериодов = Элемент.Значение;
				НачалоДействияТаблицыПериодов = Элемент.Ключ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПериодов = СтруктураПериодов;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаСервере
Процедура УдалитьПустыеГруппыВОтфильтрованномДереве(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = ДеревоОтчетов.ПолучитьЭлементы();
	КонецЕсли;
	
	КолСтрок = Узел.Количество();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч;
		Стр = Узел.Получить(ТекИнд);
		УдалитьПустыеГруппыВОтфильтрованномДереве(Стр.ПолучитьЭлементы());
		Если Стр.ЭтоГруппа = Истина И Стр.ПолучитьЭлементы().Количество() = 0 Тогда
			Узел.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСписокВыбранныхВидовОтчетов()
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина, Неопределено);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина, Неопределено);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка, СписокВыбранных, ОбновлятьПометкуРодительских, Дерево)
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел.Пометка;
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Пометка;
			КонецЦикла;
			Стр1.Пометка = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Стр2.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр2.Ссылка) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр1.Ссылка) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.ПолучитьЭлементы() Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2.Пометка);
		КонецЦикла;
		Если СуммаПометок = Стр1.ПолучитьЭлементы().Количество() Тогда
			Стр1.Пометка = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1.Пометка = 0;
		Иначе
			Стр1.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ДействияПриОткрытии();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОткрытии()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	МассивПолученныхСообщений = Новый Массив;
	Оповестить("Заполнение списка полученных сообщений", МассивПолученныхСообщений);
	Если МассивПолученныхСообщений.Количество() > 0 Тогда 
		ПолученныеТранспортныеСообщения.ЗагрузитьЗначения(МассивПолученныхСообщений);
	КонецЕсли;
	
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеЭлементамиОтбораПоКодуИФНС();
	УправлениеНадписямиМесяцев();
	ПоказатьПериод();
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияМОС);
	
	РегламентированнаяОтчетностьКлиент.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить дерево отчетов" И Параметр = "Обновить дерево отчетов" Тогда
		ОбновитьДеревоОтчетовНаКлиенте();
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если ТипЗнч(Параметр.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Элементы.ЖурналОтчетов.ТекущаяСтрока = Параметр.Ссылка;
			Если Элементы.ЖурналОтчетов.ТекущаяСтрока <> Параметр.Ссылка Тогда // позиционирование не произошло => мешает отбор
				ПоказатьПредупреждение(,НСтр("ru='Введенный отчет не отображен в журнале, так как не соответствует отбору.'"));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Заполнение списка полученных сообщений" И ТипЗнч(Параметр) = Тип("Массив") Тогда
		
		Если НЕ ЭлектронныйДокументооборотАктивен И НЕ ЭлектронныйДокументооборотСФССАктивен 
			И НЕ ЭлектронныйДокументооборотСФСРАРАктивен И НЕ ЭлектронныйДокументооборотСРПНАктивен
			И НЕ ЭлектронныйДокументооборотСФТСАктивен Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.Количество() = 0 И ПолученныеТранспортныеСообщения.Количество() > 0 Тогда 
			// оповещение отправлено или открываемой формой или формой с пустым списком
			МассивДляПараметра = ПолученныеТранспортныеСообщения.ВыгрузитьЗначения();
			Для Каждого ЭлементМассива Из МассивДляПараметра Цикл
				Параметр.Добавить(ЭлементМассива);
			КонецЦикла;
		Иначе
			// оповещение отправлено формой с НЕ пустым списком (был выполнен обмен)
			Для Каждого ЭлементПараметра Из Параметр Цикл
				ЭлементСписка = ПолученныеТранспортныеСообщения.НайтиПоЗначению(ЭлементПараметра);
				Если ЭлементСписка = Неопределено Тогда 
					ПолученныеТранспортныеСообщения.Добавить(ЭлементПараметра);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолученныеТранспортныеСообщения.Количество() > 0 Тогда 
			ЗначениеПараметраПолученныеТС = ПолученныеТранспортныеСообщения.ВыгрузитьЗначения();
		Иначе
			Возврат; //ЗначениеПараметраПолученныеТС = Неопределено;
		КонецЕсли;
		
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаПредставление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		
	ИначеЕсли ИмяСобытия = "Чтение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Если НЕ ЭлектронныйДокументооборотАктивен И НЕ ЭлектронныйДокументооборотСФССАктивен 
			И НЕ ЭлектронныйДокументооборотСФСРАРАктивен И НЕ ЭлектронныйДокументооборотСРПНАктивен
			И НЕ ЭлектронныйДокументооборотСФТСАктивен Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметр.Свойство("Сообщение") Тогда 
			ЭлементСписка = ПолученныеТранспортныеСообщения.НайтиПоЗначению(Параметр.Сообщение);
			Если ЭлементСписка <> Неопределено Тогда 
				ПолученныеТранспортныеСообщения.Удалить(ЭлементСписка);
				
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПараметраПолученныеТС = ПолученныеТранспортныеСообщения.ВыгрузитьЗначения();
		
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаПредставление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ЗначениеПараметраПолученныеТС);
		
	ИначеЕсли ИмяСобытия = "Получение контекста ЭДО" И КонтекстЭДОКлиент <> Неопределено И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Параметр.КонтекстЭДО = КонтекстЭДОКлиент;
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйОтчет(Команда)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено
	   И НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчетаНаКлиенте(Отчет)
	
	ОрганизацияОтчета          = Неопределено;
	ДатаНачалаПериодаОтчета    = Неопределено;
	ДатаОкончанияПериодаОтчета = Неопределено;
	ПериодичностьОтчета        = Неопределено;
	
	ФормаОткрытаУспешно = Истина;
	НаименованиеОтчета = "";
	
	Если ТипЗнч(Отчет) = Тип("Структура") Тогда
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет, ОрганизацияОтчета, 
													ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, 
													ПериодичностьОтчета, НаименованиеОтчета);
	Иначе
		РезультатОткрытияФормыНаСервере = ОткрытьФормуОтчетаНаСервере(Отчет.ПолучитьИдентификатор(), ОрганизацияОтчета, 
													ДатаНачалаПериодаОтчета, ДатаОкончанияПериодаОтчета, 
													ПериодичностьОтчета, НаименованиеОтчета);
	КонецЕсли;
	
	Если РезультатОткрытияФормыНаСервере = "Недостаточно прав" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Недостаточно прав.'"));
		ФормаОткрытаУспешно = Ложь;
				
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Отчет не найден" Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='Отчет не найден.'"));
		ФормаОткрытаУспешно = Ложь;
				
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Не удалось открыть отчет" Тогда
				
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не удалось открыть отчет.'");
		Сообщение.Сообщить();
		
		ФормаОткрытаУспешно = Ложь;
		
	ИначеЕсли РезультатОткрытияФормыНаСервере = "Открыть внутренний отчет-документ" Тогда
		НачатьЗамерВремени(Отчет);
		Если Отчет.ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
			
			ИмяФормыОтчета = "Документ." + Отчет.ИсточникОтчета + ".Форма." + РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1();
						
		Иначе
			
			ИмяФормыОтчета = "Документ." + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма";
						
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
		НачатьЗамерВремени(Отчет);
		ВариантОткрытия = ?(РезультатОткрытияФормыНаСервере.ВнешнийОтчетИспользовать, "ВнешнийОтчет.", "Отчет.");
		Если Отчет.ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
			
			ИмяФормыОтчета = ВариантОткрытия + Отчет.ИсточникОтчета + ".Форма." + РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1();
			
		Иначе
			
			ИмяФормыОтчета = ВариантОткрытия + Отчет.ИсточникОтчета + ".Форма.ОсновнаяФорма";
			
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаОткрытаУспешно Тогда
		
		// Сначала попробуем найти его среди открытых стартовых форм.
		// Необходимо для предотвращения
		// открытия нескольких стартовых форм одного отчета.
		НайденоОкно = Ложь;
		РегламентированнаяОтчетностьКлиент.ВебКлиентНайтиАктивизироватьОкно(ИмяФормыОтчета,ЭтаФорма,НайденоОкно);
		Если НайденоОкно <> Неопределено Тогда
			Если НайденоОкно Тогда
				
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	
		Если ТипЗнч(РезультатОткрытияФормыНаСервере) = Тип("Структура") Тогда
			
			ОткрытьФорму(ИмяФормыОтчета, РезультатОткрытияФормыНаСервере, ЭтаФорма, ИмяФормыОтчета, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			РезультатОткрытияФормыНаСервере.Удалить("ВнешнийОтчетИспользовать");
			
		Иначе
			
			ОткрытьФорму(ИмяФормыОтчета, , ЭтаФорма, ИмяФормыОтчета, , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОткрытьФормуОтчетаНаСервере(Знач Отчет,
									ОрганизацияОтчета,
									ДатаНачалаПериодаОтчета,
									ДатаОкончанияПериодаОтчета,
									ПериодичностьОтчета,
									НаименованиеОтчета)
	
	Если НЕ ТипЗнч(Отчет) = Тип("Структура") Тогда
		Отчет = ДеревоОтчетов.НайтиПоИдентификатору(Отчет);
	КонецЕсли;
		
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
		
		НаименованиеИзСправочника = Отчет.Наименование;
		МетаОтчет = Метаданные.Отчеты.Найти(ИсточникОтчета);
		Если МетаОтчет <> Неопределено И МетаОтчет.ОсновнаяФорма <> Неопределено Тогда
			
			НаименованиеОтчета = МетаОтчет.ОсновнаяФорма.Синоним;
			
		Иначе
			
			НаименованиеОтчета = НаименованиеИзСправочника;
			
		КонецЕсли;
	КонецЕсли;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетностьВызовСервера.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	
	Если ПравоДоступаКОтчету = Ложь Тогда
		Возврат "Недостаточно прав";
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Возврат "Отчет не найден";
	КонецЕсли;
	
	Если Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
		Возврат "Открыть внутренний отчет-документ";
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Возврат "Не удалось открыть отчет";
	КонецЕсли;
	
	ПараметрыТекФормы = Новый Структура;
	ПараметрыТекФормы.Вставить("Организация");
	ПараметрыТекФормы.Вставить("мДатаНачалаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мДатаКонцаПериодаОтчета");
	ПараметрыТекФормы.Вставить("мПериодичность");
	
	Если ОрганизацияОтчета = Неопределено Тогда
		Если Организация.Количество() = 1 Тогда
			Попытка
				ПараметрыТекФормы.Организация = Организация.Получить(0).Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ПараметрыТекФормы.Организация = ОрганизацияОтчета;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ДатаНачалаПериодаОтчета <> Неопределено ИЛИ ДатаОкончанияПериодаОтчета <> Неопределено Тогда
		
		Попытка
			ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ПараметрыТекФормы.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ОтборПериод И Периодичность = "По итогам" Тогда
						
		Периоды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отчет.Ссылка, "Периоды").Получить();
				
		МесяцКонцаПериодаОтчета = Месяц(ДатаКонцаПериодаОтчета);
		КоличествоВозможныхПериодичностей = 0;
		
		Если Периоды <> Неопределено Тогда
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Периоды);
			Если ТаблицаПериодов <> Неопределено Тогда
				Для Каждого Стр Из ТаблицаПериодов Цикл
					Для Каждого Эл Из Стр.Значение Цикл
						Если Лев(Стр.Ключ, 7) = "Квартал" Тогда
							МесяцКонцаПериода = 3*Эл;
						ИначеЕсли Стр.Ключ = "Полугодие" Тогда
							МесяцКонцаПериода = 6*Эл;
						ИначеЕсли Стр.Ключ = "Год" Тогда
							МесяцКонцаПериода = 12;
						Иначе
							МесяцКонцаПериода = Эл;
						КонецЕсли;
						Если МесяцКонцаПериодаОтчета = МесяцКонцаПериода Тогда
							КоличествоВозможныхПериодичностей = КоличествоВозможныхПериодичностей + 1;
							КлючПериодичности = Стр.Ключ;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей = 0 Тогда
			
		ИначеЕсли КоличествоВозможныхПериодичностей = 1 Тогда
			
			Если КлючПериодичности = "Месяц" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "Квартал" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "Полугодие" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			Иначе
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	РегламентированныйОтчет.Периодичность
			               |ИЗ
			               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			               |ГДЕ
			               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
			Если Организация.Количество() > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				               |	И РегламентированныйОтчет.Организация В (&Организация)";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
						   |УПОРЯДОЧИТЬ ПО
						   |	РегламентированныйОтчет.МоментВремени УБЫВ";
			Запрос.УстановитьПараметр("ИсточникОтчета", Отчет.ИсточникОтчета);
			Запрос.УстановитьПараметр("Организация", Организация);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаРезультат.Количество() = 0 Тогда
				
				Если КлючПериодичности = "Месяц" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "Квартал" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "Полугодие" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				Иначе
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
				КонецЕсли;
				
			Иначе
				
				ПериодичностьДляПодстановки = ТаблицаРезультат.Получить(0).Получить(0);
				Если ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц Тогда
					ДатаКонцаДляПодстановки = КонецМесяца(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал Тогда
					ДатаКонцаДляПодстановки = КонецКвартала(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Год Тогда
					ДатаКонцаДляПодстановки = КонецГода(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаДляПодстановки);
				Иначе
					Если КлючПериодичности = "Месяц" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "Квартал" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "Полугодие" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					Иначе
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
					КонецЕсли;
				КонецЕсли;
					  				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей <> 0 Тогда
			Попытка
				ПараметрыТекФормы.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаДляПодстановки);
				ПараметрыТекФормы.мДатаКонцаПериодаОтчета = КонецДня(ДатаКонцаДляПодстановки);
			Исключение
			КонецПопытки;
			Если Периодичность <> "Произвольный" Тогда
				Попытка
					ПараметрыТекФормы.мПериодичность = ПериодичностьДляПодстановки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТекФормы.Вставить("ВнешнийОтчетИспользовать", Отчет.Ссылка.ВнешнийОтчетИспользовать);
	
	Возврат ПараметрыТекФормы;
	
КонецФункции

&НаКлиенте
Процедура СнятьПометкиУВсех(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Ложь, Неопределено, Ложь, Неопределено);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Ложь, Неопределено, Ложь, Неопределено);
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборы() Экспорт
	
	СписокВидовОтчетов = СписокВыбранныхВидовОтчетов();
	
	Если Элементы.Журналы.ТекущаяСтраница = Элементы.ГруппаЖурналОтчетов Тогда
		
		ОтборДинамическогоСписка = ЖурналОтчетов.КомпоновщикНастроек.Настройки.Отбор;
				
		ОтборДинамическогоСписка.Элементы.Очистить();
		
		ОтборИсточникОтчета = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборОрганизация    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборКодНалоговогоОргана = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаНачала     = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания  = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборДатаОкончания2 = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ОтборИсточникОтчета.Использование = Истина;
		ОтборИсточникОтчета.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборИсточникОтчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИсточникОтчета");
		ОтборИсточникОтчета.ПравоеЗначение = СписокВидовОтчетов;
		
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		
		ОтборКодНалоговогоОргана.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодНалоговогоОргана");
		
		ОтборДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
		
		ОтборДатаОкончания.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		ОтборДатаОкончания2.Использование = Ложь;
		ОтборДатаОкончания2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		
		Если Организация.Количество() = 0 Тогда
			ОтборОрганизация.Использование = Ложь;
		Иначе
			ОтборОрганизация.Использование = Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = Организация;
		КонецЕсли;
		
		Если НЕ ОтборКодИФНС Тогда
			ОтборКодНалоговогоОргана.Использование = Ложь;
		Иначе
			ОтборКодНалоговогоОргана.Использование = Истина;
			ОтборКодНалоговогоОргана.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборКодНалоговогоОргана.ПравоеЗначение = КодИФНС;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ОтборДатаНачала.Использование = Ложь;
			ОтборДатаОкончания.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ОтборДатаНачала.Использование = Истина;
				ОтборДатаОкончания.Использование = Истина;
				ОтборДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаНачала.ПравоеЗначение = ДатаНачалаПериодаОтчета;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = ДатаКонцаПериодаОтчета;
			Иначе
				ОтборДатаНачала.Использование = Ложь;
				
	            ОтборДатаОкончания.Использование = Истина;
				ОтборДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборДатаОкончания.ПравоеЗначение = НачалоДня(ДатаКонцаПериодаОтчета);
				
				ОтборДатаОкончания2.Использование = Истина;
				ОтборДатаОкончания2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборДатаОкончания2.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
		ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
			
	Иначе
				
		ОтборДинамическогоСписка = ЖурналВыгрузки.КомпоновщикНастроек.Настройки.Отбор;
				
		ОтборДинамическогоСписка.Элементы.Очистить();
		
		ОтборОрганизация = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборСсылка      = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборКодНалоговогоОргана = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПериодПо    = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПериодПо2   = ОтборДинамическогоСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
		ОтборОрганизация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		
		ОтборСсылка.Использование = Истина;
		ОтборСсылка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборСсылка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		
		ОтборКодНалоговогоОргана.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КодНалоговогоОргана");
		
		ОтборПериодПо.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПо");
		
		ОтборПериодПо2.Использование = Ложь;
		ОтборПериодПо2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодПо");
				
		Если Организация.Количество() = 0 Тогда
			ОтборОрганизация.Использование = Ложь;
		Иначе
			ОтборОрганизация.Использование = Истина;
			ОтборОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ОтборОрганизация.ПравоеЗначение = Организация;
		КонецЕсли;
				
		Если НЕ (мОтбиратьПоДокументуОтбора И ЗначениеЗаполнено(мДокументОтбор)) Тогда
			ОтборСсылка.ПравоеЗначение = СформироватьСписокВыгрузок(СписокВидовОтчетов);
		Иначе
			ОтборСсылка.ПравоеЗначение = СформироватьСписокВыгрузок(мДокументОтбор);
		КонецЕсли;
				
		Если НЕ ОтборКодИФНС Тогда
			ОтборКодНалоговогоОргана.Использование = Ложь;
		Иначе
			ОтборКодНалоговогоОргана.Использование = Истина;
			ОтборКодНалоговогоОргана.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборКодНалоговогоОргана.ПравоеЗначение = КодИФНС;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ОтборПериодПо.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ОтборПериодПо.Использование = Истина;
				ОтборПериодПо.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборПериодПо.ПравоеЗначение = ДатаКонцаПериодаОтчета;
			Иначе
				
				ОтборПериодПо.Использование = Истина;
				ОтборПериодПо.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ОтборПериодПо.ПравоеЗначение = НачалоДня(ДатаКонцаПериодаОтчета);
				
				ОтборПериодПо2.Использование = Истина;
				ОтборПериодПо2.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
				ОтборПериодПо2.ПравоеЗначение = КонецДня(ДатаКонцаПериодаОтчета);
	
			КонецЕсли;
		КонецЕсли;
		
		ОтборДинамическогоСписка.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
						
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВсе(Команда)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, Неопределено, Ложь, Неопределено);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, Неопределено, Ложь, Неопределено);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для Каждого Стр Из ДеревоОтчетов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоОтчетов.Свернуть(Стр.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиОтменитьИерархическийРежимПросмотра(Команда)
	
	мИерархическийПросмотр = НЕ мИерархическийПросмотр;
	Элементы.ДеревоОтчетовУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	Элементы.ДеревоОтчетовКонтекстноеМенюУстановитьИлиОтменитьИерархическийРежимПросмотра.Пометка = мИерархическийПросмотр;
	ОбновитьДеревоОтчетовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция СписокРаскрытыхВДеревеОтчетов(УзелДерева = Неопределено, СписокУзлов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева  = ДеревоОтчетов;
		СписокУзлов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокУзлов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.ПолучитьЭлементы().Количество() <> 0 Тогда
		
		СписокУзлов.Добавить(УзелДерева.Ссылка, Элементы.ДеревоОтчетов.Развернут(УзелДерева.ПолучитьИдентификатор()));
		
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокРаскрытыхВДеревеОтчетов(Стр, СписокУзлов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокУзлов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСсылку(Ссылка, Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		ПервыйПроход = Истина;
		Узел = ДеревоОтчетов;
	Иначе
		ПервыйПроход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйПроход И Узел.Ссылка = Ссылка Тогда
		Элементы.ДеревоОтчетов.ТекущаяСтрока = Узел.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьТекущуюСсылку(Ссылка, Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРаскрытияВСпискеОтчетов(Узел, СписокРаскрытых)
	
	Если Узел <> ДеревоОтчетов И Узел.ПолучитьЭлементы().Количество() <> 0 Тогда
		РезультатПоиска = СписокРаскрытых.НайтиПоЗначению(Узел.Ссылка);
		Если РезультатПоиска = Неопределено Тогда
			Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
		Иначе
			Если РезультатПоиска.Представление Тогда
				Элементы.ДеревоОтчетов.Развернуть(Узел.ПолучитьИдентификатор());
			Иначе
				Элементы.ДеревоОтчетов.Свернуть(Узел.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		УстановитьРаскрытияВСпискеОтчетов(Стр, СписокРаскрытых)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	Если НЕ ОтборПериод Тогда
		Подсказка = "Отбор по периоду не установлен";
	Иначе
		Если Периодичность = "По итогам" Тогда
			НайденноеЗначение = "";
			Если МассивНаименованийПравыхГраницПериода.Свойство("Месяц" + Месяц(ДатаКонцаПериодаОтчета), НайденноеЗначение) Тогда
				Подсказка = "Отчеты, представляемые по истечении " + НайденноеЗначение + " " + Формат(Год, "ЧГ=0") + " года";
			КонецЕсли;
		Иначе
			Если ДатаНачалаПериодаОтчета <= ДатаКонцаПериодаОтчета Тогда
				Подсказка = "Отчеты за период " + ПредставлениеПериода(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета), "ФП = Истина");
			Иначе
				Подсказка = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОтборПериод.Подсказка = Подсказка;
	Элементы.Периодичность.Подсказка = Подсказка;
	Элементы.Период.Подсказка = Подсказка;
	Элементы.Год.Подсказка = Подсказка;
	Элементы.ДатаКонцаПериодаОтчета.Подсказка = Подсказка;
	Элементы.ДатаНачалаПериодаОтчета.Подсказка = Подсказка;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодробнееОбОтчете(Команда)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Выберите отчет.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		ПоказатьПредупреждение(,НСтр("ru='Функция недоступна для группы отчетов.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка);
	
	ФормаПодробнееОФормах = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ПодробнееОбОтчете", ПараметрыФормы, ЭтаФорма);
	ФормаПодробнееОФормах.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаПодробнееОФормах.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = НЕ Элементы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
		
	Иначе
		Элементы.ДеревоОтчетовСоздатьНовыйОтчет.Доступность = Ложь;
		Элементы.ДеревоОтчетовКонтекстноеМенюСоздатьНовыйОтчет.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовПометкаПриИзменении(Элемент)
	
	АналогичнаяСтрокаПолногоДерева = ПолучитьСтрокуДереваПоСсылке(мПолноеДеревоОтчетов, Элементы.ДеревоОтчетов.ТекущиеДанные.Ссылка);
	Если Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	АналогичнаяСтрокаПолногоДерева.Пометка = Элементы.ДеревоОтчетов.ТекущиеДанные.Пометка;
	ИзменитьПометкуПодчиненных(Элементы.ДеревоОтчетов.ТекущиеДанные, Неопределено, Неопределено, Истина, ДеревоОтчетов);
	ИзменитьПометкуПодчиненных(АналогичнаяСтрокаПолногоДерева, Неопределено, Неопределено, Истина, мПолноеДеревоОтчетов);
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуДереваПоСсылке(Узел, Ссылка)
	
	Если ТипЗнч(Узел) = Тип("ДанныеФормыЭлементДерева") И Узел.Ссылка = Ссылка Тогда
		Возврат Узел;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.ПолучитьЭлементы() Цикл
		ИскомаяСтрока = ПолучитьСтрокуДереваПоСсылке(Стр, Ссылка);
		Если ИскомаяСтрока <> Неопределено Тогда
			Возврат ИскомаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Доки = ДокументыСУчетомКритериевОтбора(Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
		Если Доки <> 0 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИсточникОтчета", Элементы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
			ПараметрыФормы.Вставить("Периодичность", Периодичность);
			ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("ОтборКодИФНС", ОтборКодИФНС);
			ПараметрыФормы.Вставить("КодИФНС", КодИФНС);
			ПараметрыФормы.Вставить("ОтборПериод", ОтборПериод);
			ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
																						
			ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОтчета", ПараметрыФормы, ЭтаФорма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоОтчетовВыборЗавершение", ЭтотОбъект);
			ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОтчета.Открыть();
		Иначе
			ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтчетовВыборЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Истина Тогда // создаем новый отчет
		ОткрытьФормуОтчетаНаКлиенте(Элементы.ДеревоОтчетов.ТекущиеДанные);
	ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПоказатьЗначение(,РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументыСУчетомКритериевОтбора(ИсточникОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНалоговогоОргана", КодИФНС);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	РегламентированныйОтчет.Ссылка
				   |ИЗ
				   |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
				   |ГДЕ
				   |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	Если ОтборКодИФНС Тогда
		Запрос.Текст = Запрос.Текст + "
				   |	И РегламентированныйОтчет.КодНалоговогоОргана = &КодНалоговогоОргана";
	КонецЕсли;
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
			   
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
		
	ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
	ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораОрганизаций.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Организация.Количество() = 1 Тогда
		ПоказатьЗначение(,Организация.Получить(0).Значение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Организация.Очистить();
	Организация.Добавить(ВыбранноеЗначение);
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКодИФНСПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭлементамиОтбораПоКодуИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиОтбораПоКодуИФНС()
	
	Элементы.КодИФНС.Доступность = ОтборКодИФНС;
	
КонецПроцедуры

&НаКлиенте
Процедура КодИФНСПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЭлементамиОтбораПоПериоду()
		
	Элементы.Периодичность.Доступность = ОтборПериод;
	Элементы.Год.Доступность = ОтборПериод;
	Элементы.Период.Доступность = ОтборПериод;
	Элементы.ДатаНачалаПериодаОтчета.Доступность = ОтборПериод;
	Элементы.ДатаКонцаПериодаОтчета.Доступность = ОтборПериод;
	Элементы.ВыбратьПроизвольныйПериод.Доступность = ОтборПериод;
	          	
	Если ОтборПериод И Периодичность = "Произвольный" Тогда
		Элементы.Год.Доступность = Ложь;
		Элементы.Период.Доступность = Ложь;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Истина;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Истина;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Истина;
	ИначеЕсли ОтборПериод Тогда
		Элементы.Год.Доступность = Истина;
		Элементы.Период.Доступность = Истина;
		Элементы.ДатаНачалаПериодаОтчета.Доступность = Ложь;
		Элементы.ДатаКонцаПериодаОтчета.Доступность = Ложь;
		Элементы.ВыбратьПроизвольныйПериод.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	
	Если Месяц = 1 Тогда
		
		Период = "Январь";
				
	ИначеЕсли Месяц = 2 Тогда
		
		Период = "Февраль";
		
	ИначеЕсли Месяц = 3 Тогда
		
		Период = "Март (I квартал)";
		
	ИначеЕсли Месяц = 4 Тогда
		
		Период = "Апрель";
		
	ИначеЕсли Месяц = 5 Тогда
		
		Период = "Май";
		
	ИначеЕсли Месяц = 6 Тогда
		
		Период = "Июнь (II квартал)";
		
	ИначеЕсли Месяц = 7 Тогда
		
		Период = "Июль";
		
	ИначеЕсли Месяц = 8 Тогда
		
		Период = "Август";
		
	ИначеЕсли Месяц = 9 Тогда
		
		Период = "Сентябрь (III квартал)";
		
	ИначеЕсли Месяц = 10 Тогда
		
		Период = "Октябрь";
		
	ИначеЕсли Месяц = 11 Тогда
		
		Период = "Ноябрь";
		
	ИначеЕсли Месяц = 12 Тогда
		
		Период = "Декабрь (IV квартал)";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	УстановитьДатыНачалаИКонцаПериодаОтчета();
	
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатыНачалаИКонцаПериодаОтчета()
	
	Если Период = "Январь" Тогда
		
		Месяц = 1;
				
	ИначеЕсли Период = "Февраль" Тогда
		
		Месяц = 2;
		
	ИначеЕсли Период = "Март (I квартал)" Тогда
		
		Месяц = 3;
		
	ИначеЕсли Период = "Апрель" Тогда
		
		Месяц = 4;
		
	ИначеЕсли Период = "Май" Тогда
		
		Месяц = 5;
		
	ИначеЕсли Период = "Июнь (II квартал)" Тогда
		
		Месяц = 6;
		
	ИначеЕсли Период = "Июль" Тогда
		
		Месяц = 7;
		
	ИначеЕсли Период = "Август" Тогда
		
		Месяц = 8;
		
	ИначеЕсли Период = "Сентябрь (III квартал)" Тогда
		
		Месяц = 9;
		
	ИначеЕсли Период = "Октябрь" Тогда
		
		Месяц = 10;
		
	ИначеЕсли Период = "Ноябрь" Тогда
		
		Месяц = 11;
		
	ИначеЕсли Период = "Декабрь (IV квартал)" Тогда
		
		Месяц = 12;
		
	Иначе	
		
		Месяц = 0;
		
	КонецЕсли;
	
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
		
	УстановитьДатыНачалаИКонцаПериодаОтчета();
	
	УправлениеНадписямиМесяцев();
	ОбновитьДеревоОтчетовНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонцаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаНачалаПериодаОтчета = ДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = ДатаНачалаПериодаОтчета;
	Диалог.Период.ДатаОкончания = ДатаКонцаПериодаОтчета;
	
	ДополнительныеПараметры = Новый Структура("Диалог", Диалог);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПроизвольныйПериодЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Период <> Неопределено Тогда
		
		ДатаНачалаПериодаОтчета = Диалог.Период.ДатаНачала;
		ДатаКонцаПериодаОтчета  = Диалог.Период.ДатаОкончания;
		
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

&НаСервере
Функция СписокВыбранныхВидовОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено) Экспорт
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.ИсточникОтчета) = Неопределено И УзелДерева.Пометка = 1 И НЕ УзелДерева.ЭтоГруппа Тогда
		СписокВидов.Добавить(УзелДерева.ИсточникОтчета);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.ПолучитьЭлементы() Цикл
		СписокВыбранныхВидовОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьСписокВыгрузок(СписокВидовОтчетов)
	
	Если ТипЗнч(СписокВидовОтчетов) = Тип("СписокЗначений") Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Ссылка
								|ИЗ
								|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ВыгрузкаРегламентированныхОтчетовОсновная
								|ГДЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Основание В
								|			(ВЫБРАТЬ
								|				РегламентированныйОтчет.Ссылка
								|			ИЗ
								|				Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
								|			ГДЕ
								|				РегламентированныйОтчет.ИсточникОтчета В (&ИсточникОтчета))");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Ссылка КАК Ссылка
							  |ИЗ
							  |	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
							  |ГДЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Основная.Основание = &ИсточникОтчета");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	КонецЕсли;
	
	Если мОтображатьПустые = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
										|
										|ОБЪЕДИНИТЬ ВСЕ
										|
										|ВЫБРАТЬ
										|	Док.Ссылка КАК Ссылка
										|ИЗ
										|	Документ.ВыгрузкаРегламентированныхОтчетов КАК Док
										|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ТЧ
										|		ПО ТЧ.Ссылка = Док.Ссылка
										|ГДЕ
										|	ЕСТЬNULL(ТЧ.Ссылка, ИСТИНА) = ИСТИНА";
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписаниеРегОтчета(ДокументРегОтчет)
	
	ОписаниеРегОтч = Новый Структура;
	
	ОбъектРегОтч = ДокументРегОтчет.ПолучитьОбъект();
	
	ОписаниеРегОтч.Вставить("Организация",             ОбъектРегОтч.Организация);
	ОписаниеРегОтч.Вставить("ДатаНачалаПериодаОтчета", ОбъектРегОтч.ДатаНачала);
	ОписаниеРегОтч.Вставить("ДатаКонцаПериодаОтчета",  ОбъектРегОтч.ДатаОкончания);
	ОписаниеРегОтч.Вставить("КорректирующаяФорма",     ОбъектРегОтч.Вид > 0);
	ОписаниеРегОтч.Вставить("ВыбраннаяФорма",          СокрЛП(ОбъектРегОтч.ВыбраннаяФорма));
	
	Если СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "РСВ-1 ПФР" Тогда
		
		Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
			
			ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", Ложь);
			
			ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
			ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			
		ИначеЕсли ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
			
			ОтчетСтарогоОбразца_20141101 = Ложь;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
			ОтчетСтарогоОбразца_20141101 = ?(ОтчетСтарогоОбразца_20141101 = Неопределено, Истина, ОтчетСтарогоОбразца_20141101);
			ОписаниеРегОтч.Вставить("ОтчетСтарогоОбразца_20141101", ОтчетСтарогоОбразца_20141101);
			
			ЗагруженыВнешниеСведенияРаздела6 = Неопределено;
			ОбъектРегОтч.ДанныеОтчета.Получить().Свойство("ВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			ЗагруженыВнешниеСведенияРаздела6 = ?(ЗагруженыВнешниеСведенияРаздела6 = Неопределено, Ложь, Истина);
			ОписаниеРегОтч.Вставить("ЗагруженыВнешниеСведенияРаздела6", ЗагруженыВнешниеСведенияРаздела6);
			
		КонецЕсли;
		
	ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Декларация по УСН" Тогда
		
		Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2014Кв1" Тогда
			
			ПоказателиОтчета = Неопределено;
			СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
			СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
			Если ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.Свойство("П000210012003") Тогда
				ОписаниеРегОтч.Вставить("РекомендованнаяФорма",
					ПоказателиОтчета.ПолеТабличногоДокументаРаздел21.П000210012003 <> 6);
			Иначе
				ОписаниеРегОтч.Вставить("РекомендованнаяФорма", Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СокрЛП(ОбъектРегОтч.НаименованиеОтчета) = "Доходы, выплаченные иностранным организациям" Тогда
		
		Если ОписаниеРегОтч.ВыбраннаяФорма = "ФормаОтчета2016Кв1" Тогда
			
			СписокСохранения = ОбъектРегОтч.ДанныеОтчета.Получить();
			ДопПараметры = Неопределено;
			Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
				ОписаниеРегОтч.Вставить("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении",
				РегламентированнаяОтчетность.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении(
				ОбъектРегОтч, ДопПараметры));
				Если НЕ ОписаниеРегОтч.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении
					И ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
					Если ДопПараметры.Свойство("ТекстСообщения") Тогда
						ОписаниеРегОтч.Вставить("ТекстСообщения", ДопПараметры.ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеРегОтч;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные 		= Элементы.ЖурналОтчетов.ТекущиеДанные;
	Ссылка             	= ТекущиеДанные.Ссылка;
	НаименованиеОтчета 	= ТекущиеДанные.НаименованиеОтчета;
	
	ДокументСсылкаАлкоОтчет = Ссылка;			
	Описание = ОписаниеРегОтчета(ДокументСсылкаАлкоОтчет);
	ВыбраннаяФорма = Описание.ВыбраннаяФорма;
	// АлкоОтчеты с реализацией проверки с использованием длительных опреаций,
	// виноградные декларации 13, 14, 15.
	Если СтрНайти(НаименованиеОтчета, "Прил. 13: Объем собранного винограда для производства винодельческой продукции") > 0
		или
		СтрНайти(НаименованиеОтчета, "Прил. 14: Объем винограда, использованного для производства вина, игристого вина (шампанского)") > 0
		или
		СтрНайти(НаименованиеОтчета, "Прил. 15: Объем винограда, использованного для производства винодельческой продукции с защищенным географическим указанием") > 0
	
		Тогда
		
		Если ВыбраннаяФорма <> "ФормаОтчета2016Кв2" Тогда
		
			ДлитОперация = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Печать");				
			ВидПечати = "ПоказатьБланк";
			ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ДлитОперация, ВидПечати);
			
		    Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Вывод формы на предпросмотр перед печатью прерван.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПечатиРСВ_1ИзЖурналаРеглОтчетов(
					Элементы.ЖурналОтчетов.ТекущаяСтрока, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			
			РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПоказатьБланк");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Ложь;
	
	СтандартнаяОбработка = Истина;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяОрганизация = ?(Элементы.ЖурналОтчетов.ТекущиеДанные.Свойство("Организация"),
							 Элементы.ЖурналОтчетов.ТекущиеДанные.Организация, Организация[0].Значение);
	
	Если ВыполнениеКомандыОтменено(Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета, ВыбраннаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
		
	НаименованиеОтчета = Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета;
	Ссылка = Элементы.ЖурналОтчетов.ТекущиеДанные.Ссылка;	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
	
		ДокументСсылкаАлкоОтчет = Ссылка;					
		Описание = ОписаниеРегОтчета(ДокументСсылкаАлкоОтчет);
		ВыбраннаяФорма = Описание.ВыбраннаяФорма;
		// АлкоОтчеты с реализацией проверки с использованием длительных опреаций,
		// виноградные декларации 13, 14, 15.
		Если СтрНайти(НаименованиеОтчета, "Прил. 13: Объем собранного винограда для производства винодельческой продукции") > 0
			или
			СтрНайти(НаименованиеОтчета, "Прил. 14: Объем винограда, использованного для производства вина, игристого вина (шампанского)") > 0
			или
			СтрНайти(НаименованиеОтчета, "Прил. 15: Объем винограда, использованного для производства винодельческой продукции с защищенным географическим указанием") > 0
				
			Тогда
			
			Если ВыбраннаяФорма = "ФормаОтчета2016Кв2" Тогда
			
				ТекстПредупреждения = НСтр("ru = 'Проверка выгрузки, выгрузка редакции формы, утвержденной ПП РФ №411 от 13.05.2016, 
												|реализована начиная с отчетного периода за 2016 год.
												|Создайте новый отчет за период 2016 год или позже.'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
				Возврат;
				
			КонецЕсли;
			
			ДлитОперация = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.Выгрузка");
			ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ДлитОперация);
			
		    Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обход ошибки платформы.
	Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
		Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "РСВ-1 ПФР"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Декларация по НДС"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Для выгрузки (проверки выгрузки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
				Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Выгрузка прервана.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				РегламентированнаяОтчетностьКлиентПереопределяемый.ПриВыгрузкеРСВ_1ИзЖурналаРеглОтчетов(
					Элементы.ЖурналОтчетов.ТекущаяСтрока, ОписаниеРСВ_1, СтандартнаяОбработка);
			КонецЕсли;
			
			Если ОписаниеРСВ_1.ЗагруженыВнешниеСведенияРаздела6 Тогда
				Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6 = Истина;
			КонецЕсли;
			
		Иначе
			
			Если Элементы.ЖурналОтчетов.ТекущиеДанные.ПредставлениеВида = "П"
				И НЕ РегламентированнаяОтчетностьКлиентСерверПереопределяемый.ИмяОсновнойФормыРСВ1() = "ОсновнаяФорма" Тогда
				
				ПоказатьПредупреждение(,"Внимание! Выгружать в электронном виде первичную форму РСВ-1 необходимо
				|в комплекте с документами квартальной отчетности персонифицированного
				|учета из специализированного рабочего места подготовки квартальной
				|отчетности в ПФР. Выгрузка прервана.");
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого Строка Из Элементы.ЖурналОтчетов.ВыделенныеСтроки Цикл
		
		СтрокаДанные = Элементы.ЖурналОтчетов.ДанныеСтроки(Строка);
		
		Если СтрокаДанные.НаименованиеОтчета = "Статистика: Форма П-1" Тогда
			
			Если НЕ ПроверитьВозможностьВыгрузкиП1ИзЖурналаНаСервере(Строка) Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для отчета ""Статистика: Форма П-1 за %1"" не выбрано Приложение№3.
					|Необходимо сначала осуществить выгрузку из формы отчета. Выгрузка прервана.'"), СтрокаДанные.ПредставлениеПериода);
			    Сообщение.Сообщить();
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДанные.НаименованиеОтчета = "Статистика: Форма П-1 Приложение 3" Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выгрузка отчета ""Статистика: форма П-1 (приложение 3) за %1"" производится из формы П-1 за соответствующий период.'"), СтрокаДанные.ПредставлениеПериода);
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СтандартнаяОбработка Тогда
	
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
				ТекстВопроса = "Выгрузить выбранный отчет?";
			Иначе
				ТекстВопроса = "Выбрано " + ОтчетыДляПакетнойОбработки.Количество()
					+ " отчетов." + Символы.ПС + "Выгрузить выбранные отчеты?";
			КонецЕсли;
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ОтчетыДляПакетнойОбработки", ОтчетыДляПакетнойОбработки);
			ДополнительныеПараметры.Вставить("Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6", Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6);
			                                                              			
			ДополнительныеПараметры.Вставить("ТекстВопроса", ТекстВопроса);	
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДополнительныеПараметры);	
			
			НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ПодключеноРасширениеРаботыСФайлами", Подключено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='%1'"), ДополнительныеПараметры.ТекстВопроса), РежимДиалогаВопрос.ДаНет);
	
	ДополнительныеПараметры.Удалить("ТекстВопроса");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтчетыДляПакетнойОбработки = ДополнительныеПараметры.ОтчетыДляПакетнойОбработки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Истина;
		
		Если ДополнительныеПараметры.Это_РСВ_1_2014_И_ЗагруженыВнешниеСведенияРаздела6
		   И ДополнительныеПараметры.ПодключеноРасширениеРаботыСФайлами Тогда
			ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно = Ложь;
		КонецЕсли;
		
		Если НЕ РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(
				ОтчетыДляПакетнойОбработки, , , ВВебКлиентеСохранятьФайлВыгрузкиИнтерактивно) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Выгрузка прервана.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьВыгрузкиП1ИзЖурналаНаСервере(ОтчетСсылка)
	Перем ВыбранныйОтчетПриложение3;
	
	ДанныеОтчетаХЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетСсылка, "ДанныеОтчета");
	ДанныеВыгружаемогоОтчета = ДанныеОтчетаХЗ.Получить();
	
	Если НЕ ДанныеВыгружаемогоОтчета.Свойство("ВыбранныйОтчетПриложение3", ВыбранныйОтчетПриложение3) Тогда
		Возврат Ложь;
	ИначеЕсли ВыбранныйОтчетПриложение3 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	СтандартнаяОбработка = Истина;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяОрганизация = ?(Элементы.ЖурналОтчетов.ТекущиеДанные.Свойство("Организация"),
							 Элементы.ЖурналОтчетов.ТекущиеДанные.Организация, Организация[0].Значение);
	
	Если ВыполнениеКомандыОтменено(Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета, ВыбраннаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеОтчета = Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета;
	Ссылка = Элементы.ЖурналОтчетов.ТекущиеДанные.Ссылка;	
	
	ДокументСсылкаАлкоОтчет = Ссылка;			
	Описание = ОписаниеРегОтчета(ДокументСсылкаАлкоОтчет);
	ВыбраннаяФорма = Описание.ВыбраннаяФорма; 
	// АлкоОтчеты с реализацией проверки с использованием длительных опреаций,
	// виноградные декларации 13, 14, 15.
	Если СтрНайти(НаименованиеОтчета, "Прил. 13: Объем собранного винограда для производства винодельческой продукции") > 0
		или
		СтрНайти(НаименованиеОтчета, "Прил. 14: Объем винограда, использованного для производства вина, игристого вина (шампанского)") > 0
		или
		СтрНайти(НаименованиеОтчета, "Прил. 15: Объем винограда, использованного для производства винодельческой продукции с защищенным географическим указанием") > 0
		Тогда
		
		Если ВыбраннаяФорма = "ФормаОтчета2016Кв2" Тогда
		
			ТекстПредупреждения = НСтр("ru = 'Проверка выгрузки, выгрузка редакции формы, утвержденной ПП РФ №411 от 13.05.2016, 
											|реализована начиная с отчетного периода за 2016 год.
											|Создайте новый отчет за период 2016 год или позже.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
		ДлитОперация = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузки");				
		ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ДлитОперация);
		
	    Возврат;
		
	КонецЕсли;
	
	// Обход ошибки платформы.
	Если РегламентированнаяОтчетностьКлиент.ВебБраузер() = "MSIE" Тогда
		Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "РСВ-1 ПФР"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Декларация по НДС"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
			ИЛИ Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий" Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='Для выгрузки (проверки выгрузки) в браузере ""Internet Explorer"" необходимо открыть форму регламентированного отчета ""%1""'"),
				Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Проверка выгрузки прервана.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "РСВ-1 ПФР" Тогда
		
		ОписаниеРСВ_1 = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		
		Если ОписаниеРСВ_1.ДатаКонцаПериодаОтчета >= '20140101' Тогда
			
			Если НЕ (ПерсонифицированныйУчетВедетсяВоВнешнейПрограмме И ОписаниеРСВ_1.ОтчетСтарогоОбразца_20141101) Тогда
				
				РегламентированнаяОтчетностьКлиентПереопределяемый.ПриПроверкеВыгрузкиРСВ_1ИзЖурналаРеглОтчетов(
					Элементы.ЖурналОтчетов.ТекущаяСтрока, ОписаниеРСВ_1, СтандартнаяОбработка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		ОтчетыДляПакетнойОбработки.ЗагрузитьЗначения(Элементы.ЖурналОтчетов.ВыделенныеСтроки);
		
		Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
			
			Если НЕ РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(ОтчетыДляПакетнойОбработки) Тогда
				ПоказатьПредупреждение(,НСтр("ru='Проверка прервана.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФормыОбъектаПоУмолчанию(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаКлиенте
Процедура ЖурналОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;	
	
	Если НЕ Копирование Тогда
				
		ДобавлениеОтчетаВЖурналеОтчетов();
		
	Иначе
		
		ТекущиеДанные = Элементы.ЖурналОтчетов.ТекущиеДанные;
				
		Если ТекущиеДанные <> Неопределено Тогда
			
			Ссылка = ТекущиеДанные.Ссылка;
			ПараметрыФормы = Новый Структура("ЗначениеКопирования", Ссылка); 
			
			Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				
				ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.ФормаОбъекта", ПараметрыФормы);
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				
				ОткрытьФорму("Документ.РегламентированныйОтчет.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
				
			Иначе
				
				ИмяФормыОбъекта = ИмяФормыОбъектаПоУмолчанию(Ссылка);
				ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
				
			КонецЕсли;
			
		КонецЕсли;

		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетов()
	
	ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораВидаОтчета", , ЭтаФорма);
	
	Если НЕ мИерархическийПросмотр Тогда
		ФормаВыбораОтчета.Элементы.СправочникСписок.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеОтчетаВЖурналеОтчетовЗавершение", ЭтотОбъект);
	ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыбораОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеОтчетаВЖурналеОтчетовЗавершение(ВыбранныйВидОтчета, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчетаНаКлиенте(ВыбранныйВидОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖурнал(Команда)
		
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если Элементы.ЖурналВыгрузки.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не выбран документ.'"));
		Возврат;
	КонецЕсли;
	
	Если СуществуютТекстыДляСохраненияВФайл(Элементы.ЖурналВыгрузки.ТекущаяСтрока) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СсылкаНаОбъект", Элементы.ЖурналВыгрузки.ТекущаяСтрока);
		
		ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма).СохранитьТексты(Истина, Ложь, Неопределено, Неопределено, "", Неопределено, Истина, Неопределено, Неопределено, Ложь, Неопределено);
		
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru='В выбранном документе нет текстов для сохранения в файл.'"));
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СуществуютТекстыДляСохраненияВФайл(ТекДок)
	
	Если ТекДок.Основная.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьИсториюВыгрузки(Команда)
	
	Если Элементы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
		
		мДокументОтбор = Элементы.ЖурналОтчетов.ТекущаяСтрока;
		мОтбиратьПоДокументуОтбора = Истина;
		УстановитьПредставлениеДокументаОтбора();
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		Элементы.Журналы.ТекущаяСтраница = Элементы.ГруппаЖурналВыгрузки;
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОтчетуПриИзменении(Элемент)
	
	мОтбиратьПоДокументуОтбора = НЕ мОтбиратьПоДокументуОтбора;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтборСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	мДокументОтбор = Неопределено;
	мОтбиратьПоДокументуОтбора = Ложь;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьПредставлениеДокументаОтбора();
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОтборСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(мДокументОтбор) Тогда
		ПоказатьЗначение(,мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналОбмена(Команда)
	
	// инициализируем контекст формы - контейнера клиентских методов
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЖурналОбменаЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналОбменаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УправлениеОбменом");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиДокументооборота(Команда)
	
	ОткрытьФорму("Справочник.УчетныеЗаписиДокументооборота.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеПредставленияОтчетов(Команда)
	
	ОткрытьФорму("Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСписокЦикловОбмена(Команда)
	
	Элементы.ОтображатьСписокЦикловОбмена.Пометка = НЕ Элементы.ОтображатьСписокЦикловОбмена.Пометка;
	УправлениеПоказомТаблицыЦикловОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеПоказомТаблицыЦикловОбмена()
	
	Если Элементы.Найти("ОтображатьСписокЦикловОбмена") <> Неопределено
		И Элементы.ОтображатьСписокЦикловОбмена.Пометка Тогда 
		Элементы.ЦиклыОбмена.Видимость = Истина;
	Иначе
		Элементы.ЦиклыОбмена.Видимость = Ложь;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыЦО()
	
		// Устанавливаем параметры для произвольных запросов динамических списков
		// ФНС
		ТипыКолонка1ЦиклыОбмена = Новый Массив;
		ТипыКолонка1ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
		ТипыКолонка1ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		
		ТипыКолонка2ЦиклыОбмена = Новый Массив;
		ТипыКолонка2ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО);
		ТипыКолонка2ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО);
		
		ТипыКолонка4ЦиклыОбмена = Новый Массив;
		ТипыКолонка4ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО);
		ТипыКолонка4ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО);
		
		ТипыКолонка5ЦиклыОбмена = Новый Массив;
		ТипыКолонка5ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
		ТипыКолонка5ЦиклыОбмена.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка1", ТипыКолонка1ЦиклыОбмена);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка2", ТипыКолонка2ЦиклыОбмена);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка3", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка4", ТипыКолонка4ЦиклыОбмена);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка5", ТипыКолонка5ЦиклыОбмена);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка6", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка7", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ТипКолонка8", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
		
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("Предмет", Неопределено);
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", Неопределено);
		
		// ПФР
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ТипКолонкаПФР1", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ТипКолонкаПФР4", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ТипКолонкаПФР5", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ТипКолонкаПФР6", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
		
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("Предмет", Неопределено);
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", Неопределено);
		
		ОтправкиФСС.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", Неопределено);
		
		ОтправкиФСРАР.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", Неопределено);
		
		ОтправкиРПН.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", Неопределено);
		
		ОтправкиФТС.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", Неопределено);
		
		// Росстат
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС1", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьФСГС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС2", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДатыОтправкиФСГС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС3", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеДатыОтправкиФСГС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС4", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОПолученииОтчетностиФСГС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС5", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетностиФСГС);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ТипКолонкаФСГС6", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПротоколВходногоКонтроляОтчетностиФСГС);
		
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("Предмет", Неопределено);
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", Неопределено);

		// Заявление		
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка1", Перечисления.ТипыТранспортныхСообщений.ЗаявлениеНП);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка2", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗаявлениеНО);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка3", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка4", Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗаявлениеНО);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка5", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗаявлениеНО);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка6", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
		ПараметрыКолонки = Новый Массив;
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеРФНО);
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеНО);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка7", ПараметрыКолонки);
		
		ПараметрыКолонки = Новый Массив;
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиРФНП);
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка8", ПараметрыКолонки);
		
		ПараметрыКолонки = Новый Массив;
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.СообщениеОбОтзывеЗаявлениеРФНО);
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗаявлениеТСНО);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка9", ПараметрыКолонки);
		
		ПараметрыКолонки = Новый Массив;
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбОтзывеЗаявлениеРФНП);
		ПараметрыКолонки.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиТСНП);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ТипКолонка10", ПараметрыКолонки);
		
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("Предмет", Неопределено);
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", Неопределено);
		
		// Представление (уведомления)
		ЦиклыОбменаПредставление.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиОсновнойТаблицы()
	
	Если НЕ ЭлектронныйДокументооборотАктивен И НЕ ЭлектронныйДокументооборотСФССАктивен 
			И НЕ ЭлектронныйДокументооборотСФСРАРАктивен И НЕ ЭлектронныйДокументооборотСРПНАктивен
			И НЕ ЭлектронныйДокументооборотСФТСАктивен Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиОтчетовПФР = Новый Массив;
	ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРСВ1");
	ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРСВ2");
	ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРВ3");
	
	ИсточникиОтчетовФСС = Новый Массив;
	ИсточникиОтчетовФСС.Добавить("РегламентированныйОтчет4ФСС");
	ИсточникиОтчетовФСС.Добавить("РегламентированныйОтчет4аФСС");
	
	ИсточникиОтчетовФСРАР = Новый Массив;
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение1");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение2");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение3");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение4");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение5");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение6");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение7");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение8");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение9");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение10");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение11");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение12");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение13");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение14");
	ИсточникиОтчетовФСРАР.Добавить("РегламентированныйОтчетАлкоПриложение15");
	
	ИсточникиОтчетовЗаявление = Новый Массив;
	ИсточникиОтчетовЗаявление.Добавить("РегламентированныйОтчетЗаявлениеОВвозеТоваров");
	
	ИсточникиОтчетовПредставление = Новый Массив;
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРозничныеЦеныНаТабак");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетПереченьЗаявленийОВвозеТоваров");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение1");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение2");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение3");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение4");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение5");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение6");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение7");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение8");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение9");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение10");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение11");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение12");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение13");
	ИсточникиОтчетовПредставление.Добавить("РегламентированныйОтчетРеестрНДСПриложение14");
	
	ИсточникиОтчетовФСГС = Новый Массив;
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаБухОтчетность");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11К");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1И");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1П");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Т");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Информ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма5З");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1Приложение3");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП1СХ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2инв");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП2к");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП3");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП4НЗ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП5М");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаП6");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМТорг");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПМПром");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС1");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаС2");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПсвед");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Услуги");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПроизв");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма22ЖКХсв");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Автотранс");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Алкоголь");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1АлкогольОпт");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ЦеныПриобр");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9КС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДАуслуги");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма65Автотранс");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Закупки");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3СБвывоз");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11Сделка");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАППМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3ТОРГПМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2НаукаКр");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТРавто");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Учет");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма8ВЭСуслуги");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ВЭС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11ТЭР");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ТЭР");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МБ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Ф");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГМС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТОРГ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1НатураБМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ТПВоздух");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма26ЖКХ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма12Строительство");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Запасы");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Технология");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИЖС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Администрация");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаДАФЛ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПмсх");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ЦеныПриобр");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МО");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4Инновация");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма24Энергетика");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма14МЕТлом");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ГСГЗ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма3Приватизация");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2Приватизация");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма85К");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ТЕП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФПинд");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСРКраткая");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1КСР");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ДМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырье");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма4ДМ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РабочаяСила");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФПФ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФСС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма9ФОМС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ФП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1СХцены");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2СБСеверСр");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма2МПинн");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Контракт");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма11НА");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1РЖ");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1МС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ГС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТОРГм");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаИЖС");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1Предприниматель");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаМПСП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФорма1ИПмес");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВМП");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаТЗВбюджет");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаФормаПУслуги");
	ИсточникиОтчетовФСГС.Добавить("РегламентированныйОтчетСтатистикаПрочиеФормы");
	
	ИсточникиОтчетовРПН = Новый Массив;
	ИсточникиОтчетовРПН.Добавить("РегламентированныйОтчетРасчетПлатыОкрСредаСвод");
	ИсточникиОтчетовРПН.Добавить("РегламентированныйОтчетОтходыСубъектовМСП");
	ИсточникиОтчетовРПН.Добавить("РегламентированныйОтчетФорма2ТПОтходы");
	ИсточникиОтчетовРПН.Добавить("РегламентированныйОтчетРасчетЭкологическийСбор");
	
	ИсточникиОтчетовФТС = Новый Массив;
	ИсточникиОтчетовФТС.Добавить("РегламентированныйОтчетСтатистикаФормаУчетаПеремещенияТоваровТС");
	
	ТекДанные = Элементы.ЖурналОтчетов.ТекущаяСтрока;
	Если ТекДанные <> Неопределено Тогда 
		ТекДанные_ИсточникОтчета = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные,
			"ИсточникОтчета");
		ТекДанные_Ссылка = ТекДанные;
	КонецЕсли;
	
	// определяем, циклы обмена с каким КО будут отображаться
	Если ТекДанные = Неопределено
	 ИЛИ (ИсточникиОтчетовПФР.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовФСГС.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовФСС.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовФСРАР.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовРПН.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовФТС.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовЗаявление.Найти(ТекДанные_ИсточникОтчета) = Неопределено
		И ИсточникиОтчетовПредставление.Найти(ТекДанные_ИсточникОтчета) = Неопределено) Тогда
		
		// отображаются циклы обмена с ФНС
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаЦиклыОбменаФНС;
		
		Если ТекДанные = Неопределено Тогда 
			ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("Предмет", Неопределено); //Документы.РегламентированныйОтчет.ПустаяСсылка());
		Иначе 
			ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("Предмет", ТекДанные_Ссылка);
		КонецЕсли;
		
		ЦиклыОбменаФНС.Параметры.УстановитьЗначениеПараметра("ПолученныеТранспортныеСообщения", ПолученныеТранспортныеСообщения.ВыгрузитьЗначения());
		
	ИначеЕсли ИсточникиОтчетовПФР.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаЦиклыОбменаПФР;
		
		ЦиклыОбменаПФР.Параметры.УстановитьЗначениеПараметра("Предмет", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовЗаявление.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаЦиклыОбменаЗаявление;
		
		ЦиклыОбменаЗаявление.Параметры.УстановитьЗначениеПараметра("Предмет", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовПредставление.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаЦиклыОбменаПредставление;
		
		ЦиклыОбменаПредставление.Параметры.УстановитьЗначениеПараметра("Предмет", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовФСС.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаОтправкиФСС;
		
		ОтправкиФСС.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовФСРАР.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаОтправкиФСРАР;
		
		ОтправкиФСРАР.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовРПН.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаОтправкиРПН;
		
		ОтправкиРПН.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовФТС.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаОтправкиФТС;
		
		ОтправкиФТС.Параметры.УстановитьЗначениеПараметра("ОтчетСсылка", ТекДанные_Ссылка);
		
	ИначеЕсли ИсточникиОтчетовФСГС.Найти(ТекДанные_ИсточникОтчета) <> Неопределено Тогда
		
		Элементы.ЦиклыОбмена.ТекущаяСтраница = Элементы.ГруппаЦиклыОбменаФСГС;
		
		ЦиклыОбменаФСГС.Параметры.УстановитьЗначениеПараметра("Предмет", ТекДанные_Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналОтчетовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ОтображатьСписокЦикловОбмена.Пометка Тогда 
		
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиОсновнойТаблицы", 0.3, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВызватьВыборВТабличномПолеЦикловОбмена(ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	
	//// инициализируем контекст ЭДО - модуль обработки
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Возврат КонтекстЭДОСервер.ВыборВТабличномПолеЦикловОбмена( ,ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КолонкаВыбора = Поле.Имя;
	
	Результат = ВызватьВыборВТабличномПолеЦикловОбмена(ВыбраннаяСтрока, КолонкаВыбора, СтандартнаяОбработка);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда 
		ПоказатьПредупреждение(,Результат);
	ИначеЕсли ТипЗнч(Результат) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда 
		ПоказатьЗначение(,Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправкиФССВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	КолонкаВыбора = Поле.Имя;
	Если КолонкаВыбора = "ОтправкиФССРезультат" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФСС(ВыбраннаяСтрока);
	ИначеЕсли КолонкаВыбора = "ОтправкиФССПервичноеСообщение" Тогда
		СтандартнаяОбработка = Ложь;
		Адрес = "";
		ИмяФайлаПакета = "";
		ПолучитьАдресИмяФайлаПакета(ВыбраннаяСтрока, Адрес, ИмяФайлаПакета, "ИмяФайлаПакета");
		ПолучитьФайл(Адрес, ИмяФайлаПакета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьАдресИмяФайлаПакета(ОтправкаСсылка, Адрес, ИмяФайлаПакета, ИмяРеквизита)
	
	МетаданныеОбъекта = ОтправкаСсылка.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ИмяФайлаПакета = ОтправкаСсылка[ИмяРеквизита];
	КонецЕсли;
	Если ТипЗнч(ОтправкаСсылка) <> Тип("СправочникСсылка.ОтправкиФТС") Тогда
		Адрес = ПоместитьВоВременноеХранилище(ОтправкаСсылка.ЗашифрованныйПакет.Получить());
	Иначе
		Адрес = ПоместитьВоВременноеХранилище(ОтправкаСсылка.Подпись.Получить());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРВывестиВОкно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаПФРВывестиВОкноЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРВывестиВОкноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСВывестиВОкно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаФНСВывестиВОкноЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСВывестиВОкноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСВывестиВОкно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаФСГСВывестиВОкноЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСВывестиВОкноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСПоказатьОтчетОСостоянии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаФНСПоказатьОтчетОСостоянииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСПоказатьОтчетОСостоянииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьОтчетыОСостоянииЦикловОбмена(МассивВыделенныхСтрок);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРПоказатьОтчетОСостоянии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаПФРПоказатьОтчетОСостоянииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРПоказатьОтчетОСостоянииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьОтчетыОСостоянииЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСПоказатьОтчетОСостоянии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаФСГСПоказатьОтчетОСостоянииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСПоказатьОтчетОСостоянииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьОтчетыОСостоянииЦикловОбмена(МассивВыделенныхСтрок);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСВыгрузить(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСВыгрузитьКонтейнеры(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Ложь, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСВыгрузитьСодержимое(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Ложь, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРВыгрузить(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРВыгрузитьКонтейнеры(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Ложь, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРВыгрузитьСодержимое(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПФР.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Ложь, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСВыгрузить(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСВыгрузитьКонтейнеры(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Ложь, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСВыгрузитьСодержимое(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФСГС.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Ложь, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЦиклыОбмена(ВыгружатьКонтейнеры, ВыгружатьСодержимое, ВидимыеЦиклы)
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьКонтейнеры, ВыгружатьСодержимое, ВидимыеЦиклы", ВыгружатьКонтейнеры, ВыгружатьСодержимое, ВидимыеЦиклы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЦиклыОбменаПослеПолученияКонтекстаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЦиклыОбменаПослеПолученияКонтекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыгружатьКонтейнеры = ДополнительныеПараметры.ВыгружатьКонтейнеры;
	ВыгружатьСодержимое = ДополнительныеПараметры.ВыгружатьСодержимое;
	ВидимыеЦиклы = ДополнительныеПараметры.ВидимыеЦиклы;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Не выбраны циклы обмена.");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить цикл обмена """ + КонтекстЭДОКлиент.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выгрузить выбранные " + ВидимыеЦиклы.Количество() + " циклов обмена?";
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура("ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое", ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЦиклыОбменаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЦиклыОбменаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВидимыеЦиклы = ДополнительныеПараметры.ВидимыеЦиклы;
	ВыгружатьКонтейнеры = ДополнительныеПараметры.ВыгружатьКонтейнеры;
	ВыгружатьСодержимое = ДополнительныеПараметры.ВыгружатьСодержимое;
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ВыгрузитьЦиклыОбмена(ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПФРОбменяться(Команда)
	
	ТекущиеДанные = Элементы.ЦиклыОбменаПФР.ТекущаяСтрока;
	ЦиклыОбменаОбменяться(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФНСОбменяться(Команда)
	
	ТекущиеДанные = Элементы.ЦиклыОбменаФНС.ТекущаяСтрока;
	ЦиклыОбменаОбменяться(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаФСГСОбменяться(Команда)
	
	ТекущиеДанные = Элементы.ЦиклыОбменаФСГС.ТекущаяСтрока;
	ЦиклыОбменаОбменяться(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаОбменяться(ТекущиеДанные)
	
	ДополнительныеПараметры = Новый Структура("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаОбменятьсяЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаОбменятьсяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Выберите строку отправки.");
		Возврат;
	КонецЕсли;
	
	ОбменВУниверсальномФормате = Ложь;
	ЕстьУчетнаяЗаписьОбмена = Ложь;
	ВыбраннаяОрганизация = Неопределено;
	
	ПолучитьЗначенияНаСервере(ТекущиеДанные, ОбменВУниверсальномФормате, ЕстьУчетнаяЗаписьОбмена, ВыбраннаяОрганизация);
	
	Если НЕ ОбменВУниверсальномФормате Тогда 
		ПоказатьПредупреждение(,"По организации """ + ВыбраннаяОрганизация + """ отчета не включена возможность электронного документооборота с ФНС в универсальном формате.");
		Возврат;
	ИначеЕсли НЕ ЕстьУчетнаяЗаписьОбмена Тогда 
		ПоказатьПредупреждение(,"Не выбрана учетная запись для обмена по организации """ + ВыбраннаяОрганизация + """!");
		Возврат;
	КонецЕсли;
	
	СписокПолученныхТС = ПолученныеТранспортныеСообщения.Скопировать();
	
	ДополнительныеПараметры = Новый Структура("СписокПолученныхТС", СписокПолученныхТС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбменаПоУчетнойЗаписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ОсуществитьОбменПоУчетнойЗаписи(ОписаниеОповещения, ВыбраннаяОрганизация, СписокПолученныхТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбменаПоУчетнойЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СписокПолученныхТС = ДополнительныеПараметры.СписокПолученныхТС;
	Оповестить("Заполнение списка полученных сообщений", СписокПолученныхТС.ВыгрузитьЗначения());
	
	ПолученныеТранспортныеСообщения = СписокПолученныхТС.Скопировать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьЗначенияНаСервере(ТекущиеДанные, ОбменВУниверсальномФормате, ЕстьУчетнаяЗаписьОбмена, ВыбраннаяОрганизация)
	
	ВыбраннаяОрганизация = ТекущиеДанные.Организация;
	ОбменВУниверсальномФормате = (ВыбраннаяОрганизация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	ЕстьУчетнаяЗаписьОбмена = ЗначениеЗаполнено(ВыбраннаяОрганизация.УчетнаяЗаписьОбмена);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭУДокументооборота()
	
	//// инициализируем контекст ЭДО - модуль обработки
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер <> Неопределено Тогда
		
		// Есть учетные записи
		ЭлектронныйДокументооборотАктивен = КонтекстЭДОСервер.ЭлектронныйДокументооборотИспользуется();
		
		// Настроен ЭДО с ФСС
		ЭлектронныйДокументооборотСФССАктивен = Ложь;
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС) Тогда
			Если КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаФСС().Количество() > 0 Тогда
				ЭлектронныйДокументооборотСФССАктивен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Настроен ЭДО с ФСРАР
		ЭлектронныйДокументооборотСФСРАРАктивен = Ложь;
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСРАР) Тогда
			Если КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаФСРАР().Количество() > 0 Тогда
				ЭлектронныйДокументооборотСФСРАРАктивен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Настроен ЭДО с РПН
		ЭлектронныйДокументооборотСРПНАктивен = Ложь;
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаРПН) Тогда
			Если КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаРПН().Количество() > 0 Тогда
				ЭлектронныйДокументооборотСРПНАктивен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Настроен ЭДО с ФТС
		ЭлектронныйДокументооборотСФТСАктивен = Ложь;
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФТС) Тогда
			Если КонтекстЭДОСервер.СписокДопустимыхОрганизацийВОбъектахОбменаФТС().Количество() > 0 Тогда
				ЭлектронныйДокументооборотСФТСАктивен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЭлектронныйДокументооборотАктивен И НЕ ЭлектронныйДокументооборотСФССАктивен 
			И НЕ ЭлектронныйДокументооборотСФСРАРАктивен И НЕ ЭлектронныйДокументооборотСРПНАктивен
			И НЕ ЭлектронныйДокументооборотСФТСАктивен Тогда
			// ФНС ПФР ФСС Росстат ФСРАР РПН ФТС
			Элементы.ЦиклыОбмена.Видимость = Ложь;
			Элементы.ОтображатьСписокЦикловОбмена.Видимость = Ложь; // См.также "ОтображатьСписокЦикловОбмена"
			Элементы.ФормаОткрытьЖурналОбмена.Видимость = Ложь;
			Элементы.ФормаГруппаПерейти.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		// ФНС ПФР ФСС Росстат ФСРАР РПН ФТС
		Элементы.ЦиклыОбмена.Видимость = Ложь;
		Элементы.ОтображатьСписокЦикловОбмена.Видимость = Ложь; // См.также "ОтображатьСписокЦикловОбмена"
		Элементы.ФормаОткрытьЖурналОбмена.Видимость = Ложь;
		Элементы.ФормаГруппаПерейти.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросыНаИнформационноеОбслуживание(Команда)
	
	ОткрытьФорму("Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Форма.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеОбменяться(Команда)
	ТекущиеДанные = Элементы.ЦиклыОбменаЗаявление.ТекущаяСтрока;
	ЦиклыОбменаОбменяться(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеВывестиВОкно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаЗаявлениеВывестиВОкноЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеВывестиВОкноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(МассивВыделенныхСтрок);

	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеПоказатьОтчетОСостоянии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаЗаявлениеПоказатьОтчетОСостоянииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеПоказатьОтчетОСостоянииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьОтчетыОСостоянииЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеВыгрузить(Команда)
	ВидимыеЦиклы = Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Истина, ВидимыеЦиклы);
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеВыгрузитьКонтейнеры(Команда)
	ВидимыеЦиклы = Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Ложь, ВидимыеЦиклы);
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаЗаявлениеВыгрузитьСодержимое(Команда)
	ВидимыеЦиклы = Элементы.ЦиклыОбменаЗаявление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Ложь, Истина, ВидимыеЦиклы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявленияНаПодключение(Команда)
	
	ОткрытьФорму("Документ.ЗаявлениеАбонентаСпецоператораСвязи.ФормаСписка");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалендарь(Команда)
	
	СтандартнаяОбработка = Истина;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьКалендарь(ЭтаФорма, Организация, СтандартнаяОбработка);
		
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КалендарьЗаполнен() Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаПериодаОтчета);
	ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаКонцаПериодаОтчета);
	ПараметрыФормы.Вставить("Периодичность", Периодичность = "Произвольный");
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("КодИФНС", КодИФНС);
			
	ОткрытьФорму("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция КалендарьЗаполнен()
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари";
	Запрос.Текст = ТекстЗапроса;
	График = Запрос.Выполнить().Выгрузить();

	Если График.Количество() = 0 Тогда		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =НСтр("ru='Не заполнен производственный календарь.'");
		Сообщение.Сообщить();
		Возврат Ложь;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЦиклыОбменаФНСВыгрузитьПакет(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаФНС.ВыделенныеСтроки;
	ВыгрузитьПакеты(ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакеты(ВидимыеЦиклы)
	
	ДополнительныеПараметры = Новый Структура("ВидимыеЦиклы", ВидимыеЦиклы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетыПослеПолученияКонтекстаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетыПослеПолученияКонтекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВидимыеЦиклы = ДополнительныеПараметры.ВидимыеЦиклы;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Не выбраны циклы обмена.");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить цикл обмена """ + КонтекстЭДОКлиент.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выгрузить выбранные " + ВидимыеЦиклы.Количество() + " циклов обмена?";
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура("ВидимыеЦиклы", ВидимыеЦиклы);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВидимыеЦиклы = ДополнительныеПараметры.ВидимыеЦиклы;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КонтекстЭДОКлиент.ВыгрузитьПакетыПоДокументооборотамСдачиОтчетностиВФНС(ВидимыеЦиклы)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	ПредставлениеДокументаРеглОтч = "";
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВыбраннаяОрганизация = ?(Элементы.ЖурналОтчетов.ТекущиеДанные.Свойство("Организация"),
							 Элементы.ЖурналОтчетов.ТекущиеДанные.Организация, Организация[0].Значение);
							 
	Если ВыполнениеКомандыОтменено(Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета, ВыбраннаяОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаОтчета = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока, ПредставлениеДокументаРеглОтч);
	Если ФормаОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Декларация по УСН" Тогда
		ОписаниеУСН = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеУСН.ВыбраннаяФорма = "ФормаОтчета2014Кв1" И ОписаниеУСН.РекомендованнаяФорма Тогда
			ПоказатьПредупреждение(, НСтр("ru='Печать с двухмерным штрихкодом PDF417 формы, рекомендованной письмом ФНС от 20.05.2015 № ГД-4-3/8533@, не предусмотрена.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета = "Доходы, выплаченные иностранным организациям" Тогда
		ОписаниеДохИно = ОписаниеРегОтчета(Элементы.ЖурналОтчетов.ТекущаяСтрока);
		Если ОписаниеДохИно.ВыбраннаяФорма = "ФормаОтчета2016Кв1"
			И ОписаниеДохИно.Свойство("ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении") Тогда
			Если НЕ ОписаниеДохИно.ВозможноВосстановитьДанныеРеглОтчетаСозданногоВОбычномПриложении Тогда
				Если ОписаниеДохИно.Свойство("ТекстСообщения") Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru='%1 Вывод формы на предпросмотр перед печатью с двухмерным штрихкодом PDF417 прерван.'"), ОписаниеДохИно.ТекстСообщения);
					Сообщение.Сообщить();
				КонецЕсли;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФормаОтчета.СтруктураРеквизитовФормы.Свойство("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417") Тогда
	
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "ПоказатьСДвухмернымШтрихкодомPDF417");
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для отчета """ + Элементы.ЖурналОтчетов.ТекущиеДанные.НаименованиеОтчета + """ не предусмотрена печать бланка формы с двухмерным штрихкодом PDF417.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОтправкиФСРАРВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	КолонкаВыбора = Поле.Имя;
	Если КолонкаВыбора = "ОтправкиФСРАРРезультат" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФСРАР(ВыбраннаяСтрока);
	ИначеЕсли КолонкаВыбора = "ОтправкиФСРАРПервичноеСообщение" Тогда
		СтандартнаяОбработка = Ложь;
		Адрес = "";
		ИмяФайлаПакета = "";
		ПолучитьАдресИмяФайлаПакета(ВыбраннаяСтрока, Адрес, ИмяФайлаПакета, "ИмяФайлаПакета");
		ПолучитьФайл(Адрес, ИмяФайлаПакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьРезультатОбновленияИнформацииМеханизмаОнлайнСервисовРО()
	
	Попытка
			
		Если ЗаданиеВыполнено(ИдентификаторЗаданияМОС) Тогда // задание выполнено
			ПоказатьРезультатПроверкиОбновленияИнформацииМОС();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияМОС);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьРезультатОбновленияИнформацииМеханизмаОнлайнСервисовРО",
				ПараметрыОбработчикаОжиданияМОС.ТекущийИнтервал, Истина);
		КонецЕсли;
			
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ТекстСообщенияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при проверке результата обновления информации механизма онлайн-сервисов регламентированной отчетности
					 |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					 
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Регламентированная отчетность. Проверка результата обновления информации механизма онлайн-сервисов регламентированной отчетности'"), 
			"Ошибка", ТекстСообщенияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатПроверкиОбновленияИнформацииМОС() Экспорт
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресХранилищаМОС);
	Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РезультатПроверки) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
		
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Обновлены внешние формы отчетов - %1'"),
						Формат(РезультатПроверки.Количество(), "ЧГ="));
		
	Для каждого СтрокаСообщения Из РезультатПроверки Цикл
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС
					   + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), СтрокаСообщения);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗапросыНаВыпискуЕГРЮЛ_ЕГРИП(Команда)
	ОткрытьФорму("Документ.ЗапросНаВыпискуИзЕГРЮЛ_ЕГРИП.Форма.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	Организация.Очистить();
		
	УстановитьОтборы();
			
КонецПроцедуры

&НаКлиенте
Процедура ОтправкиРПНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	КолонкаВыбора = Поле.Имя;
	Если КолонкаВыбора = "ОтправкиРПНРезультат" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляРПН(ВыбраннаяСтрока);
	ИначеЕсли КолонкаВыбора = "ОтправкиРПНПервичноеСообщение" Тогда
		СтандартнаяОбработка = Ложь;
		Адрес = "";
		ИмяФайлаПакета = "";
		ПолучитьАдресИмяФайлаПакета(ВыбраннаяСтрока, Адрес, ИмяФайлаПакета, "ИмяФайлаПакета");
		ПолучитьФайл(Адрес, ИмяФайлаПакета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкиФТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	КолонкаВыбора = Поле.Имя;
	Если КолонкаВыбора = "ОтправкиФТСРезультат" Тогда
		СтандартнаяОбработка = Ложь;
		КонтекстЭДОКлиент.ПоказатьПротоколОбработкиПоСсылкеИсточникаДляФТС(ВыбраннаяСтрока);
	ИначеЕсли КолонкаВыбора = "ОтправкиФТСПервичноеСообщение" Тогда
		СтандартнаяОбработка = Ложь;
		Адрес = "";
		ИмяФайлаВыгрузки = "";
		ПолучитьАдресИмяФайлаПакета(ВыбраннаяСтрока, Адрес, ИмяФайлаВыгрузки, "ИмяФайлаВыгрузки");
		ПолучитьФайл(Адрес, НСтр("ru = 'Подпись'") + ИмяФайлаВыгрузки);
	ИначеЕсли КолонкаВыбора = "ОтправкиФТСНаКонтроле" Тогда
		СтандартнаяОбработка = Ложь;
		Если ОтправкаНаКонтроле(ВыбраннаяСтрока) Тогда
			ПерейтиПоНавигационнойСсылке("https://edata.customs.ru/FtsPersonalCabinetWeb/Services/Obtain/Stat");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправкаНаКонтроле(Отправка)
	
	Возврат Отправка.НаКонтроле;
	
КонецФункции

&НаКлиенте
Процедура ДоступныеОбновления(Команда)
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПереходаВНовыйИнтерфейсНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнениеКомандыОтменено(НаименованиеОтчета, Организация)
	
	Если (НаименованиеОтчета = "Бухгалтерская отчетность (с 2011 года)"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность малых предприятий"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО"
		ИЛИ НаименованиеОтчета = "Бухгалтерская отчетность СО НКО (до 2015 года)")
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Организация) Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета(); 
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВывестиВОкно(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаПредставлениеВывестиВОкноЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВывестиВОкноЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьДокументыЦикловОбмена(МассивВыделенныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеПоказатьОтчетОСостоянии(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦиклыОбменаПредставлениеПоказатьОтчетОСостоянииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеПоказатьОтчетОСостоянииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	Если КонтекстЭДОКлиент = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки.Количество();
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки Цикл
		МассивВыделенныхСтрок.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	КонтекстЭДОКлиент.ПоказатьОтчетыОСостоянииЦикловОбмена(МассивВыделенныхСтрок);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВыгрузить(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВыгрузитьКонтейнеры(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Истина, Ложь, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВыгрузитьСодержимое(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки;
	ВыгрузитьЦиклыОбмена(Ложь, Истина, ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеОбменяться(Команда)
	
	ТекущиеДанные = Элементы.ЦиклыОбменаПредставление.ТекущаяСтрока;
	ЦиклыОбменаОбменяться(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦиклыОбменаПредставлениеВыгрузитьПакет(Команда)
	
	ВидимыеЦиклы = Элементы.ЦиклыОбменаПредставление.ВыделенныеСтроки;
	ВыгрузитьПакеты(ВидимыеЦиклы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры


#Область ДлительныеОперацииАЛКО

////////////////////////////////////////////////////////////////////////////////
//
// Механизм длительных операций отчетов подсистемы ОтчетностьПоАлкогольнойПродукции
//		  
////////////////////////////////////////////////////////////////////////////////

// Выполняет все длительные операции отчета.
//
// Параметры:
//
//		ДокументСсылкаАлкоОтчет		- Документ.РегламентированныйОтчет.Ссылка - Документ отчета.
//	 	ВидДлОперации 				- Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.
//									Задает вид выполняемой длительной операции отчета.
// 		ВидПечати 					- Строка - Необязательный. Задает вид печати отчета при длительных
//									операцях печати.
//
&НаКлиенте
Процедура ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ВидДлОперации, ВидПечати = Неопределено)

	СтруктураВспомДанныхДлитОперацииАЛКО = Новый Структура;
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидДлительнойОперации", ВидДлОперации);
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидПечати", ВидПечати);
		
	ФормаОтчетаДлитОперации = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(ДокументСсылкаАлкоОтчет);
	
	СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ФормаОтчетаДлитОперации", ФормаОтчетаДлитОперации);
		
	ФормаОтчетаДлитОперации.ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлОперации, ВидПечати, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте()
	
	ФормаОтчетаДлитОперации = СтруктураВспомДанныхДлитОперацииАЛКО.ФормаОтчетаДлитОперации;
	ОперацияЗавершена = РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчетаДлитОперации);
	
	Если ОперацияЗавершена Тогда
		
		ПараметрыОбработчикаОжидания = Неопределено;
		СтруктураВспомДанныхДлитОперацииАЛКО = Неопределено;
		
	    Возврат;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область Новости

&НаКлиенте
// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыНовости(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		
		МодульОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(ЭтаФорма, Команда);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти