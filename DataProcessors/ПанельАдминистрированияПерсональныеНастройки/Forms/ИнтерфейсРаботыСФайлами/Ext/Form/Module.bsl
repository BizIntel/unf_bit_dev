
&НаКлиенте
Перем ОбновитьИнтерфейс;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	ПрочитатьЗначенияИзХранилищаОбщихНастроек(РеквизитПутьКДанным); // УНФ
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ДействиеПоДвойномуЩелчкуМыши" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "СпрашиватьРежимРедактированияПриОткрытииФайла" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьПодсказкиПриРедактированииФайлов" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьКолонкуРазмер" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "СпособСравненияВерсийФайлов" Тогда
		
		ХранилищеОбщихНастроек.Сохранить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Прочитать значения из хранилища общих настроек
//
&НаСервере
Процедура ПрочитатьЗначенияИзХранилищаОбщихНастроек(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ДействиеПоДвойномуЩелчкуМыши" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
	
		ДействиеПоДвойномуЩелчкуМыши = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
		Если ДействиеПоДвойномуЩелчкуМыши = Неопределено Тогда
			
			ДействиеПоДвойномуЩелчкуМыши = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
			СохранитьЗначениеРеквизита("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "СпрашиватьРежимРедактированияПриОткрытииФайла" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
		
		СпрашиватьРежимРедактированияПриОткрытииФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
			
			СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
			СохранитьЗначениеРеквизита("СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьПодсказкиПриРедактированииФайлов" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
		
		ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов");
		Если ПоказыватьПодсказкиПриРедактированииФайлов = Неопределено Тогда
			
			ПоказыватьПодсказкиПриРедактированииФайлов = Истина;
			СохранитьЗначениеРеквизита("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
		
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
		Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда 
			
			ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
			СохранитьЗначениеРеквизита("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ПоказыватьКолонкуРазмер" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
		
		ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
		Если ПоказыватьКолонкуРазмер = Неопределено Тогда
			
			ПоказыватьКолонкуРазмер = Ложь;
			СохранитьЗначениеРеквизита("ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "СпособСравненияВерсийФайлов" ИЛИ ПустаяСтрока(РеквизитПутьКДанным) Тогда
		
		СпособСравненияВерсийФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
		Если НЕ ЗначениеЗаполнено(СпособСравненияВерсийФайлов) Тогда
			
			СпособСравненияВерсийФайлов = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord;
			СохранитьЗначениеРеквизита("СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов);
			
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры // ПрочитатьЗначенияИзХранилищаОбщихНастроек()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОсновногоРабочегоКаталога");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	ФайловыеФункцииКлиент.ОткрытьФормуНастройкиСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭП(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСКриптографиейНаКлиенте(Команда)
	
	НачатьУстановкуРасширенияРаботыСКриптографией(Неопределено);
	
КонецПроцедуры

// Процедура - обработчик команды ОткрытьСписокПрисоединенныхФайлов
//
&НаКлиенте
Процедура ОткрытьСписокПрисоединенныхФайлов(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.Файлы");
	
КонецПроцедуры // ОткрытьСписокПрисоединенныхФайлов()

// Процедура - обработчик команды ОткрытьСписокРедактируемыхФайлов
//
&НаКлиенте
Процедура ОткрытьСписокРедактируемыхФайлов(Команда)
	
	ОткрытьФорму("Справочник.Файлы.Форма.РедактируемыеФайлы");
	
КонецПроцедуры // ОткрытьСписокРедактируемыхФайлов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// работа с файлами
	ПрочитатьЗначенияИзХранилищаОбщихНастроек();
	
	УстановитьДоступность();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ОбработкаВыбора формы.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ДействияСФайламиПоДвойномуЩелчку.ФормаВыбора" 
		И ЗначениеЗаполнено(ВыбранноеЗначение)
		И ВыбранноеЗначение <> ДействиеПоДвойномуЩелчкуМыши Тогда
		
		ДействиеПоДвойномуЩелчкуМыши = ВыбранноеЗначение;
		Подключаемый_ПриИзмененииРеквизита(Элементы.ДействиеПоДвойномуЩелчкуМыши);
		
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.СпособыСравненияВерсийФайлов.ФормаВыбора" 
		И ЗначениеЗаполнено(ВыбранноеЗначение)
		И ВыбранноеЗначение <> СпособСравненияВерсийФайлов Тогда
		
		СпособСравненияВерсийФайлов = ВыбранноеЗначение;
		Подключаемый_ПриИзмененииРеквизита(Элементы.СпособСравненияВерсийФайлов);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события ПриЗакрытии формы.
&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события Нажатие поля ДействиеПоДвойномуЩелчкуМыши
// 
&НаКлиенте
Процедура ДействиеПоДвойномуЩелчкуМышиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.ДействияСФайламиПоДвойномуЩелчку.ФормаВыбора", , ЭтаФорма);
	
КонецПроцедуры // ДействиеПоДвойномуЩелчкуМышиНажатие()

// Процедура - обработчик события ПриИзменении поля СпрашиватьРежимРедактированияПриОткрытииФайла
//
&НаКлиенте
Процедура СпрашиватьРежимРедактированияПриОткрытииФайлаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // СпрашиватьРежимРедактированияПриОткрытииФайлаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ПоказыватьПодсказкиПриРедактированииФайлов
//
&НаКлиенте
Процедура ПоказыватьПодсказкиПриРедактированииФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // ПоказыватьПодсказкиПриРедактированииФайловПриИзменении()

// Процедура - обработчик события ПриИзменении поля ПоказыватьЗанятыеФайлыПриЗавершенииРаботы
//
&НаКлиенте
Процедура ПоказыватьЗанятыеФайлыПриЗавершенииРаботыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // ПоказыватьЗанятыеФайлыПриЗавершенииРаботыПриИзменении()

// Процедура - обработчик события ПриИзменении поля ПоказыватьКолонкуРазмер
//
&НаКлиенте
Процедура ПоказыватьКолонкуРазмерПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры // ПоказыватьКолонкуРазмерПриИзменении()

// Процедура - обработчик события Нажатие поля СпособСравненияВерсийФайлов
&НаКлиенте
Процедура СпособСравненияВерсийФайловНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Перечисление.СпособыСравненияВерсийФайлов.ФормаВыбора", , ЭтаФорма);
	
КонецПроцедуры // СпособСравненияВерсийФайловНажатие()





