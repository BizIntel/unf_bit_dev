
&НаКлиенте
Перем ПараметрыОбработчика, ЦенаДоИзменения;


#Область СлужебныеПроцедурыФункции

&НаСервере
Процедура ЗаголовокЗаписанныхВидовЦен()
	
	ТекстЗаписанныеВидыЦен = "";
	Для каждого ЭлементСпискаЗначений Из ТекущиеВидыЦен Цикл
		
		Если ЭлементСпискаЗначений.Пометка Тогда
			
			ТекстЗаписанныеВидыЦен = ТекстЗаписанныеВидыЦен + ?(ПустаяСтрока(ТекстЗаписанныеВидыЦен), "", Символы.ПС) + "- " + ЭлементСпискаЗначений.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ДекорацияСоставЗаписанных.Заголовок = Новый ФорматированнаяСтрока(ТекстЗаписанныеВидыЦен, , КэшЗначений.ЦветТемноЗеленый);
	
КонецПроцедуры

&НаСервере
Процедура ЗаголовкиПодчиненныхВидовЦен()
	
	ТекстДинамическиеВидыЦен = "";
	ТекстРучныеВидыЦен = "";
	Для каждого ЭлементСпискаЗначений Из ТекущиеВидыЦен Цикл
		
		Если ЭлементСпискаЗначений.Пометка Тогда
			
			МассивПодчиненныхВидовЦен = КэшЗначений.ВыбранныеВидыЦен.Получить(ЭлементСпискаЗначений.Значение);
			Для каждого ЭлементМассива Из МассивПодчиненныхВидовЦен Цикл
				
				Если ЭлементМассива.РассчитыватьАвтоматически Тогда
					
					ТекстДинамическиеВидыЦен = ТекстДинамическиеВидыЦен + ?(ПустаяСтрока(ТекстДинамическиеВидыЦен), "", Символы.ПС) + "- " + ЭлементМассива.Наименование;
					
				Иначе
					
					ТекстРучныеВидыЦен = ТекстРучныеВидыЦен + ?(ПустаяСтрока(ТекстРучныеВидыЦен), "", Символы.ПС) + "- " + ЭлементМассива.Наименование;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДинамическиеВидыЦен) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияВидыЦенРассчитаютсяДинамически", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияСоставДинамических", "Видимость", Ложь);
		
	Иначе
		
		Элементы.ДекорацияСоставДинамических.Заголовок = Новый ФорматированнаяСтрока(ТекстДинамическиеВидыЦен, , КэшЗначений.ЦветСветлоЗеленый);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРучныеВидыЦен) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияВидыЦенРассчитаютсяВручную", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияСоставРучных", "Видимость", Ложь);
		
	Иначе
		
		Элементы.ДекорацияСоставРучных.Заголовок = Новый ФорматированнаяСтрока(ТекстРучныеВидыЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиДекорацийИтогов()
	
	ЗаголовокЗаписанныхВидовЦен();
	
	ЗаголовкиПодчиненныхВидовЦен();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОперандов(МассивВидовЦен)
	Перем ВключаяЦеныНоменклатуры, ВключаяЦеныКонтрагентов;
	
	ДеревоРезультата = Новый ДеревоЗначений;
	
	Параметры.Свойство("ЦеныНоменклатуры", ВключаяЦеныНоменклатуры);
	Если ВключаяЦеныНоменклатуры = Неопределено Тогда
		
		ВключаяЦеныНоменклатуры = Истина;
		
	КонецЕсли;
	
	Если КэшЗначений.ФОУчетЦенКонтрагентов Тогда
		
		Параметры.Свойство("ЦеныКонтрагентов", ВключаяЦеныКонтрагентов);
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Неопределено Тогда
		
		ВключаяЦеныКонтрагентов = Ложь;
		
	КонецЕсли;
	
	Обработки.Ценообразование.ПолучитьДеревоВидовЦен(ДеревоРезультата, МассивВидовЦен, ВключаяЦеныНоменклатуры, ВключаяЦеныКонтрагентов);
	
	ЗначениеВРеквизитФормы(ДеревоРезультата, "ВидыЦен");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьВыбранныеВидыЦен()
	
	ВыбранныеРаннееВидыЦен = КэшЗначений.ВыбранныеВидыЦен;
	КэшЗначений.ВыбранныеВидыЦен = Новый Соответствие;
	
	СтрокиГруппВидовЦен = ВидыЦен.ПолучитьЭлементы();
	Для каждого ГруппаВидовЦен Из СтрокиГруппВидовЦен Цикл
		
		СтрокиБазовыхВидовЦен = ГруппаВидовЦен.ПолучитьЭлементы();
		Для каждого СтрокаБазовогоВидаЦен Из СтрокиБазовыхВидовЦен Цикл
			
			Если СтрокаБазовогоВидаЦен.Использование Тогда
				
				ТекущиеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен, СтрокаБазовогоВидаЦен.Представление, Истина);
				
				ПодчиненныеВидыЦен		= Новый Массив;
				СтрокиРасчетныхВидовЦен = СтрокаБазовогоВидаЦен.ПолучитьЭлементы();
				Для каждого СтрокаВидаЦен Из СтрокиРасчетныхВидовЦен Цикл
					
					ПодчиненныеВидыЦен.Добавить(СтрокаВидаЦен.ВидЦен);
					
				КонецЦикла;
				
				КэшЗначений.ВыбранныеВидыЦен.Вставить(СтрокаБазовогоВидаЦен.ВидЦен, ПодчиненныеВидыЦен);
				
			Иначе
				
				Если ВыбранныеРаннееВидыЦен.Получить(СтрокаБазовогоВидаЦен.ВидЦен) <> Неопределено Тогда
					
					КэшЗначений.ОтключенныеВидыЦен.Добавить(СтрокаБазовогоВидаЦен.ВидЦен);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВидыЦенВыбраны()
	
	Возврат (КэшЗначений.ВыбранныеВидыЦен.Количество() <> 0);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПриходнымНакладнымВФорме(СтруктураПараметров, АдресНоменклатурыПриходныхНакладных) // Используется при вводе на основании
	
	Обработки.Ценообразование.ПолучитьНоменклатуруПоПриходнымНакладным(СтруктураПараметров, АдресНоменклатурыПриходныхНакладных);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресВременногоХранилища", АдресНоменклатурыПриходныхНакладных);
	
	ОбработатьРезультатЗаполненияНаСервере(Результат, Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(Результат.АдресВременногоХранилища) Тогда
		
		СтруктураТаблицДанных = ПолучитьИзВременногоХранилища(Результат.АдресВременногоХранилища);
		Если ЗначениеЗаполнено(СтруктураТаблицДанных) Тогда
			
			ДобавитьНоменклатуру(СтруктураТаблицДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныеЧастиНаСервере()
	
	ТЧНоменклатура.Очистить();
	ТЧХарактеристики.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавленияПроизвольнойНоменклатуры(СпособЗаполнения)
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница <> Элементы.СтраницаТри Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СпособЗаполнения = "Группы" Тогда
		
		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбораГруппы";
		
	ИначеЕсли СпособЗаполнения = "Элементы" Тогда
		
		ИмяФормыВыбораНоменклатуры = "Справочник.Номенклатура.ФормаВыбора";
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(ИмяФормыВыбораНоменклатуры, ПараметрыОткрытия, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокиХарактеристикПоКлючуСвязи(КлючСвязи, ТЧХарактеристики)
	
	НайденныеСтрокиХарактеристики = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Для каждого СтрокаХарактеристики Из НайденныеСтрокиХарактеристики Цикл
		
		ТЧХарактеристики.Удалить(СтрокаХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦену(Число, ОкруглениеПорядок, ОкруглениеВБольшуюСторону)
	
	// Преобразуем порядок округления числа. Если передали пустое значение порядка, то округлим до копеек. 
	ПорядокОкругления	= ?(ЗначениеЗаполнено(ОкруглениеПорядок), ОкруглениеПорядок, Перечисления.ПорядкиОкругления.Окр0_01);
	Порядок 			= Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		
	Иначе
		
		Если ОкруглениеВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Число = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Число = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

&НаСервере
Функция СтруктураКоллекцийДанныхФормы()
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	
	Возврат КоллекцииДанныхФормы;
	
КонецФункции

// Формирует печатную форму и открывает ее в форме ПечатьДокументов.
&НаСервере
Функция СформироватьТабличныйДокумент(КэшЗначений) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("КоллекцииДанныхФормы",				СтруктураКоллекцийДанныхФормы());
	ПараметрыПечати.Вставить("УстанавливатьХарактеристикамБезЦен",	УстанавливатьХарактеристикамБезЦен);
	ПараметрыПечати.Вставить("ПоказыватьДействующуюЦену",			ПоказыватьДействующуюЦену);
	ПараметрыПечати.Вставить("ПоказыватьЕдиницыИзмерения",			ПоказыватьЕдиницыИзмерения);
	ПараметрыПечати.Вставить("ПоказыватьЗависимыеЦены",				ПоказыватьЗависимыеЦены);
	ПараметрыПечати.Вставить("ПоказыватьОтклонениеЦен",				ПоказыватьОтклонениеЦен);
	ПараметрыПечати.Вставить("ПоказыватьХарактеристики",			ПоказыватьХарактеристики);
	ПараметрыПечати.Вставить("ВыбранныеВидыЦен",					КэшЗначений.ВыбранныеВидыЦен);
	
	Возврат Обработки.Ценообразование.СформироватьТабличныйДокументПоДеревуДанных(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов()
	Перем КоллекцияНоменклатуры;
	
	Если КэшЗначений.ВыбранныеВидыЦен.Количество() > 0 Тогда
		
		Для каждого ЭлементСоответствия Из КэшЗначений.ВыбранныеВидыЦен Цикл
			
			ВидЦен = ЭлементСоответствия.Ключ;
			Прервать;
			
		КонецЦикла;
		
	Иначе
		
		ВидЦен = Справочники.ВидыЦен.Оптовая;
		
	КонецЕсли;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("КоллекцииДанныхФормы", СтруктураКоллекцийДанныхФормы());
	ПараметрыРасчета.Вставить("УстанавливатьХарактеристикамБезЦен", УстанавливатьХарактеристикамБезЦен);
	
	Обработки.Ценообразование.СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен);
	
	ТаблицаЗапасов = КоллекцияНоменклатуры.Скопировать(, "Номенклатура, Характеристика");
	ТаблицаЗапасов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаЗапасов.ЗаполнитьЗначения(1, "Количество");
	
	// Подготовка структуры действий для обработки печати этикеток и ценников
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьСклад", Неопределено);
	СтруктураДействий.Вставить("ЗаполнитьВидЦен", ВидЦен);
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Ложь);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента", Ложь);
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу", Ложь);
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров", Истина);
	
	// Подготовка данных для заполенения табличной части обработки печати этикеток и ценников
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Запасы", ТаблицаЗапасов);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОбработкуПечатиЦенников()
	
	АдресВХранилище = ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов();
	
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.Форма", СтруктураПараметры, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЦен

&НаСервере
Процедура УдалитьДубли()
	
	ТаблицаНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	
	Запрос.Текст = 
	"Выбрать ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	|Поместить ТаблицаНоменклатуры
	|Из &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|; //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	|Выбрать ТаблицаНоменклатуры.Номенклатура
	|Сгруппировать по ТаблицаНоменклатуры.Номенклатура Имеющие Количество(*) > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НайденныеСтрокиНоменклатуры = ТЧНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			НайденныеСтрокиНоменклатуры.Удалить(0); // Первую запись оставляем
			Для каждого СтрокаНоменклатуры Из НайденныеСтрокиНоменклатуры Цикл
				
				Если ПоказыватьХарактеристики Тогда
					
					УдалитьСтрокиХарактеристикПоКлючуСвязи(СтрокаНоменклатуры.КлючСвязи, ТЧХарактеристики);
					
				КонецЕсли;
				
				ТЧНоменклатура.Удалить(СтрокаНоменклатуры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНовыеЦеныНаСервере()
	
	ИмяМетода			= "Обработки.Ценообразование.ЗаписатьНовыеЦены";
	ОписаниеОперации	= НСтр("ru = 'Запись новых цен в информационную базу'");
	
	ПараметрыРасчета	= Новый Структура;
	ПараметрыРасчета.Вставить("ПериодЗаписи", ПериодЗаписи);
	ПараметрыРасчета.Вставить("КэшЗначений", КэшЗначений);
	ПараметрыРасчета.Вставить("ПоказыватьХарактеристики", ПоказыватьХарактеристики);
	ПараметрыРасчета.Вставить("УстанавливатьХарактеристикамБезЦен", УстанавливатьХарактеристикамБезЦен);
	ПараметрыРасчета.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", ЗаписыватьНовыеЦеныПоверхУстановленных);
	
	СтруктураТаблицДанных = Новый Структура;
	СтруктураТаблицДанных.Вставить("ТаблицаНоменклатуры", РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений")));
	СтруктураТаблицДанных.Вставить("ТаблицаХарактеристик", РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений")));
	ПараметрыРасчета.Вставить("СтруктураТаблицДанных", СтруктураТаблицДанных);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыРасчета, ОписаниеОперации);
	
	КэшЗначений.ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	КэшЗначений.ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	КэшЗначений.ЗаданиеВыполнено = РезультатФоновогоЗадания.ЗаданиеВыполнено;
	Если НЕ КэшЗначений.ЗаданиеВыполнено Тогда
		
		Элементы.ДекорацияПять.РасширеннаяПодсказка.Заголовок = Нстр("ru ='
			|Подождите, пожалуйста. 
			|Производится запись новых.'");
			
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПять;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетКолонок

&НаСервере
Процедура ИзменитьКолонкиНовыхЦенНаСервере(Результат)
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
	СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
	
	Если Результат.ВариантИзменения = "Сумма"
		ИЛИ Результат.ВариантИзменения = "Процент"
		ИЛИ Результат.ВариантИзменения = "Округление"
		ИЛИ Результат.ВариантИзменения = "Очистить"
		Тогда
		
		ПересчетПоПростымПравилам(Результат);
		
	ИначеЕсли Результат.ВариантИзменения = "Формула" Тогда
		
		ЗаполнитьПоФормуле(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

//:::Простая арифметика
&НаКлиенте
Процедура ИзменитьКолонку(ВидРасчета)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений",	КэшЗначений);
	ПараметрыОткрытия.Вставить("ВидРасчета",	ВидРасчета);
	
	Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТипЗнч(Элементы[ЭтаФорма.ТекущийЭлемент.Имя].ТекущийЭлемент) = Тип("ПолеФормы") Тогда
		
		ПараметрыОткрытия.Вставить("ТекущаяКолонка", 	Элементы[ЭтаФорма.ТекущийЭлемент.Имя].ТекущийЭлемент.Имя);
		
	КонецЕсли;
	
	ОбработкаОписание = Новый ОписаниеОповещения("РасчетатьНовыеЦеныПоУказаннымУсловиям", ЭтотОбъект);
	ОткрытьФорму("Обработка.Ценообразование.Форма.ФормаИзмененияЦен", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьЗаполняемыеВидыЦен(Результат, ВидыЦенКПересчету)
	
	ВидыЦенКПересчету = Новый Соответствие;
	
	// По текущей колонке(0), По всем колонкам(1)
	Если Результат.ЗаполнятьПоТекущемуВидуЦен = 1 Тогда
		
		ВидыЦенКПересчету = КэшЗначений.ВыбранныеВидыЦен;
		
	Иначе
		
		Для каждого ЭлементСоответсветствия Из КэшЗначений.ВыбранныеВидыЦен Цикл
			
			Если ЭлементСоответсветствия.Ключ.ИдентификаторФормул = Результат.ИдентификаторТекущегоВидаЦен Тогда
				
				ВидыЦенКПересчету.Вставить(ЭлементСоответсветствия.Ключ, ЭлементСоответсветствия.Значение);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦеныПоПравилу(Строка, Результат, ДополнительныеПараметры)
	
	Для каждого ЭлементСоответствия Из ДополнительныеПараметры.ВидыЦенКПересчету Цикл
		
		ВидЦен					= ЭлементСоответствия.Ключ;
		Идентификатор 			= ДополнительныеПараметры.ИмяТабличнойЧасти + ВидЦен.ИдентификаторФормул;
		
		ИмяКолонкиЦенаДо		= Идентификатор + "_ЦенаДо";
		ИмяКолонкиДельта		= Идентификатор + "_Дельта";
		ИмяКолонкиЕдИзм			= Идентификатор + "_ЕдИзм";
		ИмяКолонкиЦенаНовая		= Идентификатор + "_ЦенаНовая";
		ИмяКолонкиЦенуИзменили	= Идентификатор + "_ЦенуИзменили";
		
		ИндивидуальныйРасчетДельта = Ложь;
		Если Результат.ВариантИзменения = "Сумма" Тогда
			
			Строка[ИмяКолонкиЦенаНовая] 	= Строка[ИмяКолонкиЦенаНовая] + Результат.Сумма;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Процент" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= Строка[ИмяКолонкиЦенаНовая] * (1 + Результат.Процент / 100);
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Округление" Тогда
			
			ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], Результат.ОкруглениеПорядок, Результат.ОкруглениеВБольшуюСторону);
			Строка[ИмяКолонкиЦенуИзменили] = Истина;
			
		ИначеЕсли Результат.ВариантИзменения = "Очистить" Тогда
			
			Строка[ИмяКолонкиЦенаНовая]		= 0;
			Строка[ИмяКолонкиДельта]		= 0;
			Строка[ИмяКолонкиЦенуИзменили]	= Истина;
			ИндивидуальныйРасчетДельта		= Истина;
			
		КонецЕсли;
		
		ОкруглитьЦену(Строка[ИмяКолонкиЦенаНовая], ВидЦен.ПорядокОкругления, ВидЦен.ОкруглятьВБольшуюСторону);
		
		Если НЕ ИндивидуальныйРасчетДельта Тогда
			
			Строка[ИмяКолонкиДельта] = Строка[ИмяКолонкиЦенаНовая] - Строка[ИмяКолонкиЦенаДо];
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонкиЕдИзм]) Тогда
			
			Строка[ИмяКолонкиЕдИзм] = Строка["Номенклатура"].ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетПоПростымПравилам(Результат)
	Перем ВидыЦенКПересчету;
	
	ОпределитьЗаполняемыеВидыЦен(Результат, ВидыЦенКПересчету);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	ДополнительныеПараметры.Вставить("ВидыЦенКПересчету", ВидыЦенКПересчету);
	
	Для каждого СтрокаНоменклатуры Из ТЧНоменклатура Цикл
		
		ИзменитьЦеныПоПравилу(СтрокаНоменклатуры, Результат, ДополнительныеПараметры);
		
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
	Для каждого СтрокаХарактеристик Из ТЧХарактеристики Цикл
		
		ИзменитьЦеныПоПравилу(СтрокаХарактеристик, Результат, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

//:::Формула
&НаСервере
Процедура ЗагрузитьРезультатВТаблицы(КоллекцииДанныхФормы)
	
	ЗначениеВРеквизитФормы(КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
	ЗначениеВРеквизитФормы(КоллекцииДанныхФормы.ТаблицаФормыХарактеристик, "ТЧХарактеристики");
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьДанныеКоллекцииВДлительнойОперации(ПараметрыРасчета)
	
	ИмяМетода			= "Обработки.Ценообразование.РассчитатьНовыеЦеныПоФормулеДлОперация";
	ОписаниеОперации	= НСтр("ru = 'Изменение колонок с новыми ценами по формуле'");
	
	РезультатФоновогоЗадания = 
		ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыРасчета, ОписаниеОперации);
	
	КэшЗначений.ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	КэшЗначений.ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	КэшЗначений.ЗаданиеВыполнено = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормуле(Результат)
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	КоллекцииДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Формула", Результат.Формула);
	ПараметрыРасчета.Вставить("ВидыЦенКПересчету", Неопределено);
	ПараметрыРасчета.Вставить("ПоказыватьХарактеристики", ПоказыватьХарактеристики);
	ПараметрыРасчета.Вставить("УстанавливатьХарактеристикамБезЦен", УстанавливатьХарактеристикамБезЦен);
	ПараметрыРасчета.Вставить("КоллекцииДанныхФормы", КоллекцииДанныхФормы);
	
	ОпределитьЗаполняемыеВидыЦен(Результат, ПараметрыРасчета.ВидыЦенКПересчету);
	
	Если ТЧНоменклатура.Количество() > КэшЗначений.КоличествоСтрокПриемлевогоБыстродействия Тогда
		
		// Выполнить в длительной операции
		Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_ДлительнаяОперация;
		РасчитатьДанныеКоллекцииВДлительнойОперации(ПараметрыРасчета);
		
	Иначе
		
		Обработки.Ценообразование.РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета);
		ЗагрузитьРезультатВТаблицы(ПараметрыРасчета.КоллекцииДанныхФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	Если Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_ДлительнаяОперация Тогда
		
		СтруктураКоллекцийДанныхФормы = ПолучитьИзВременногоХранилища(КэшЗначений.ФоновоеЗаданиеАдресХранилища);
		
		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
		ЗначениеВРеквизитФормы(СтруктураКоллекцийДанныхФормы.ТаблицаФормыХарактеристик, "ТЧХарактеристики");
		
		Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура;
		
	КонецЕсли;
	
	КэшЗначений.ЗаданиеВыполнено = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеВыполнено()
	
	Попытка
		
		КэшЗначений.ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(КэшЗначений.ФоновоеЗаданиеИдентификатор);
		
	Исключение
		
		КэшЗначений.ЗаданиеВыполнено = Истина;
		ВызватьИсключение Нстр("ru ='Ошибка'") + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если КэшЗначений.ЗаданиеВыполнено Тогда
		
		ФоновоеЗаданиеЗагрузитьРезультат();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	ФоновоеЗаданиеВыполнено();
	
	Если КэшЗначений.ЗаданиеВыполнено = Ложь Тогда
		
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания()
	
	Если КэшЗначений.ЗаданиеВыполнено = Ложь Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДанными

&НаСервере
Процедура ДобавитьНоменклатуруВДлительнойОперации(СтруктураТаблицДанных, ПараметрыКопирования)
	
	ИмяМетода			= "Обработки.Ценообразование.КопироватьДобавлениемСтрокТаблицЗначенийПакетно";
	ОписаниеОперации	= НСтр("ru = 'Копирование полученых строк в табличные части обработки'");
	
	ПараметрыДлОперации = Новый Структура;
	ПараметрыДлОперации.Вставить("СтруктураТаблицДанных", СтруктураТаблицДанных);
	
	ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
	ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
	
	СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
	СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
	
	ПараметрыДлОперации.Вставить("КоллекцииДанныхФормы", Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик));
	ПараметрыДлОперации.Вставить("ПараметрыКопирования", ПараметрыКопирования);
	
	РезультатФоновогоЗадания = 
		ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыДлОперации, ОписаниеОперации);
	
	КэшЗначений.ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	КэшЗначений.ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	КэшЗначений.ЗаданиеВыполнено = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНоменклатуру(СтруктураТаблицДанных)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Ложь);
	
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ИменаКолонокКопирования", Неопределено);
	ПараметрыКопирования.Вставить("ИменаКолонокИсключений", Неопределено);
	ПараметрыКопирования.Вставить("ВыбранныеВидыЦен", КэшЗначений.ВыбранныеВидыЦен);
	ПараметрыКопирования.Вставить("ЗаполнитьТекущиеЦены", Истина);
	ПараметрыКопирования.Вставить("ИмяТабличнойЧасти", "");
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязи", КэшЗначений.МаксимальныйКлючСвязи);
	ПараметрыКопирования.Вставить("МаксимальныйКлючСвязиПослеДобавления", КэшЗначений.МаксимальныйКлючСвязи);
	
	Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > КэшЗначений.КоличествоСтрокПриемлевогоБыстродействия Тогда
		
		// Выполнить в длительной операции
		Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_ДлительнаяОперация;
		ДобавитьНоменклатуруВДлительнойОперации(СтруктураТаблицДанных, ПараметрыКопирования);
		
	ИначеЕсли СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		// выполнить последовательно
		Если СтруктураТаблицДанных.ТаблицаНоменклатуры.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
			ТаблицаФормыНоменклатуры = РеквизитФормыВЗначение("ТЧНоменклатура", Тип("ТаблицаЗначений"));
			
			СоздатьКопиюТекущихДанных(ТаблицаФормыНоменклатуры.Скопировать(), КэшЗначений.ДоИзмененияНоменклатура);
			Обработки.Ценообразование.КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
			ЗначениеВРеквизитФормы(ТаблицаФормыНоменклатуры, "ТЧНоменклатура");
			
		КонецЕсли;
		
		Если СтруктураТаблицДанных.ТаблицаХарактеристик.Количество() > 0 Тогда
			
			ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
			ТаблицаФормыХарактеристик = РеквизитФормыВЗначение("ТЧХарактеристики", Тип("ТаблицаЗначений"));
			
			СоздатьКопиюТекущихДанных(ТаблицаФормыХарактеристик.Скопировать(), КэшЗначений.ДоИзмененияХарактеристики);
			Обработки.Ценообразование.КопироватьДобавлениемСтрокТаблицЗначений(СтруктураТаблицДанных.ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);
			ЗначениеВРеквизитФормы(ТаблицаФормыХарактеристик, "ТЧХарактеристики");
			
		КонецЕсли;
		
		КэшЗначений.МаксимальныйКлючСвязи = ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроизвольнуюНоменклатуру(МассивНоменклатуры)
	
	АдресВременногоХранилища = Обработки.Ценообразование.РазобратьМассивНоменклатуры(МассивНоменклатуры, ПоказыватьХарактеристики);
	
	ДополнительныеПараметры = Новый Структура;
	
	Результат = Новый Структура;
	Результат.Вставить("ВыборПроизведен", Истина);
	Результат.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ЦенаНовая, КлючСвязи)
	
	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
	
	Для каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл
		
		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0
			//ИЛИ ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"] = 0
			ИЛИ ЦенаДоИзменения = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] Тогда
			
			ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = ЦенаНовая;
			ПодчиненнаяСтрока[Идентификатор + "_Дельта"] = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] - ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор)
	
	Если ДанныеТекущейСтроки.Свойство(Идентификатор + "_Дельта")
		И ДанныеТекущейСтроки.Свойство(Идентификатор + "_ЦенаНовая")
		И ДанныеТекущейСтроки.Свойство(Идентификатор + "_ЦенаДо") Тогда
		
		ДанныеТекущейСтроки[Идентификатор + "_Дельта"] = ДанныеТекущейСтроки[Идентификатор + "_ЦенаНовая"] - ДанныеТекущейСтроки[Идентификатор + "_ЦенаДо"];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ЕдиницаИзмерения, КлючСвязи)
	
	СтрокиХарактеристик = ТЧХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
	
	Для каждого ПодчиненнаяСтрока Из СтрокиХарактеристик Цикл
		
		Если ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] = 0
			ИЛИ ПодчиненнаяСтрока[Идентификатор + "_ЦенаДо"] = 0
			ИЛИ ЦенаДоИзменения = ПодчиненнаяСтрока[Идентификатор + "_ЦенаНовая"] Тогда
			
			ПодчиненнаяСтрока[Идентификатор + "_ЕдИзм"] = ЕдиницаИзмерения;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРеквизитамиИЭлементами

&НаСервере
Процедура ИзменитьВидимостьЭлементовТабличнойЧасти(ИмяТабличнойЧасти)
	
	ЭлементыТЧ = Элементы[ИмяТабличнойЧасти].ПодчиненныеЭлементы;
	
	ПараметрыВидимости = Новый Соответствие;
	ПараметрыВидимости.Вставить("ПоказыватьДействующуюЦену",	"%1_ЦенаДо");
	ПараметрыВидимости.Вставить("ПоказыватьОтклонениеЦен",		"%1_Дельта");
	ПараметрыВидимости.Вставить("ПоказыватьЕдиницыИзмерения",	"%1_ЕдИзм");
	ПараметрыВидимости.Вставить("ПоказыватьЗависимыеЦены",		"%1%2_ЦенаДо");
	
	Для каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл
		
		ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
		ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;
		
		ОбщаяЧастьИмен = ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
		Если ЭлементыТЧ.Найти(ОбщаяЧастьИмен) <> Неопределено Тогда
			
			Для каждого ПараметрВидимости Из ПараметрыВидимости Цикл
				
				Если ПараметрВидимости.Ключ <> "ПоказыватьЗависимыеЦены" Тогда
					
					ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение, ОбщаяЧастьИмен);
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЭтотОбъект[ПараметрВидимости.Ключ]);
					
				Иначе
					
					Для каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл
						
						ИмяЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрВидимости.Значение, ОбщаяЧастьИмен, ЗависимаяЦена.ИдентификаторФормул);
						ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЭтотОбъект[ПараметрВидимости.Ключ]);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлемента)
	
	МассивРеквизитов = ПолучитьРеквизиты(ИмяТабличнойЧасти);
	Для каждого РеквизитФормы Из МассивРеквизитов Цикл
		
		Если РеквизитФормы.Имя = ПутьКРеквизитуИИмяЭлемента Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
	
	ВыбранныйВидЦен		= ВыбранныйВидЦенСоответствие.Ключ;
	ПодчиненныеВидыЦен	= ВыбранныйВидЦенСоответствие.Значение;
	
	//::: Создание реквизитов
	ПутьРеквизита		= ИмяТабличнойЧасти;
	ПрефиксРеквизитов	= ИмяТабличнойЧасти + ВыбранныйВидЦен.ИдентификаторФормул;
	ТипЧислоПлюс 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ТипЧислоЛюбое 		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
	ТипБулево			= Новый ОписаниеТипов("Булево");
	
	МассивТипов			= Новый	 Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ЕдиницыИзмерения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	ТипЕдИзмерения		= Новый ОписаниеТипов(МассивТипов);
	
	РеквизитЦенаДо		= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенаДо",		ТипЧислоПлюс,	ПутьРеквизита, НСтр("ru ='Цена до'"));
	РеквизитДельта		= Новый РеквизитФормы(ПрефиксРеквизитов + "_Дельта",		ТипЧислоЛюбое,	ПутьРеквизита, "Δ");
	РеквизитЦенаНовая	= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенаНовая",		ТипЧислоПлюс,	ПутьРеквизита, НСтр("ru ='Цена новая'"));
	РеквизитЦенуИзменили= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЦенуИзменили",	ТипБулево,		ПутьРеквизита, НСтр("ru ='_Служебный'"));
	РеквизитЕдИзмерения	= Новый РеквизитФормы(ПрефиксРеквизитов + "_ЕдИзм",			ТипЕдИзмерения,	ПутьРеквизита, НСтр("ru ='Ед. изм.'"));
	
	МассивРеквизитов 	= Новый Массив;
	МассивРеквизитов.Добавить(РеквизитЦенаДо);
	МассивРеквизитов.Добавить(РеквизитДельта);
	МассивРеквизитов.Добавить(РеквизитЦенаНовая);
	МассивРеквизитов.Добавить(РеквизитЦенуИзменили);
	МассивРеквизитов.Добавить(РеквизитЕдИзмерения);
	
	ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
	
	//::: Создание элементов формы
	ГруппаЦены					= Элементы.Добавить(ПрефиксРеквизитов, Тип("ГруппаФормы"), Элементы[ИмяТабличнойЧасти]);
	ГруппаЦены.Заголовок		= ВыбранныйВидЦен.Наименование;
	ГруппаЦены.Группировка		= ГруппировкаКолонок.Горизонтальная;
	ГруппаЦены.ОтображатьВШапке	= Истина;
	ГруппаЦены.ОтображатьЗаголовок = Истина;
	
	ЭлементЦенаДо 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаДо", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЦенаДо.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементЦенаДо.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаДо";
	ЭлементЦенаДо.Ширина		= 12;
	ЭлементЦенаДо.Видимость		= ПоказыватьДействующуюЦену;
	ЭлементЦенаДо.ТолькоПросмотр= Истина;
	ЭлементЦенаДо.ЦветТекста	= ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементЦенаДо.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементДельта 				= Элементы.Добавить(ПрефиксРеквизитов + "_Дельта", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементДельта.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементДельта.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_Дельта";
	ЭлементДельта.Ширина		= 12;
	ЭлементДельта.Видимость		= ПоказыватьОтклонениеЦен;
	ЭлементДельта.ТолькоПросмотр= Истина;
	ЭлементДельта.ЦветТекста	= ЦветаСтиля.НедоступныеДанныеЦвет;
	ЭлементДельта.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементНовая 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенаНовая", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементНовая.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементНовая.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенаНовая";
	ЭлементНовая.Ширина			= 12;
	ЭлементНовая.УстановитьДействие("ПриИзменении", "Подключаемый_НоваяЦенаПриИзменении");
	ЭлементНовая.РастягиватьПоГоризонтали = Ложь;
	
	ЭлементИзменили 			= Элементы.Добавить(ПрефиксРеквизитов + "_ЦенуИзменили", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементИзменили.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементИзменили.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЦенуИзменили";
	ЭлементИзменили.Видимость	= Ложь;
	
	ЭлементЕдИзм 				= Элементы.Добавить(ПрефиксРеквизитов + "_ЕдИзм", Тип("ПолеФормы"), ГруппаЦены);
	ЭлементЕдИзм.Вид			= ВидПоляФормы.ПолеВвода;
	ЭлементЕдИзм.ПутьКДанным	= ПутьРеквизита + "." + ПрефиксРеквизитов + "_ЕдИзм";
	ЭлементЕдИзм.Ширина			= 8;
	ЭлементЕдИзм.УстановитьДействие("ПриИзменении", "Подключаемый_ЕдиницаИзмеренияПриИзменении");
	ЭлементЕдИзм.РастягиватьПоГоризонтали = Ложь;
	ЭлементЕдИзм.Видимость		= ПоказыватьЕдиницыИзмерения;
	
	НовыйПараметр = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы." + ИмяТабличнойЧасти + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.Очищать);
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(НовыйПараметр);
	ЭлементЕдИзм.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	Если ПодчиненныеВидыЦен.Количество() > 0 Тогда
		
		Для каждого ЗависимаяЦена Из ПодчиненныеВидыЦен Цикл
			
			ПутьКРеквизитуИИмяЭлемента 	= ЗависимаяЦена.ИдентификаторФормул + "_ЦенаДо";
			Если НЕ РеквизитДобавленРаннее(ИмяТабличнойЧасти, ПутьКРеквизитуИИмяЭлемента) Тогда
				
				РеквизитЦенаЗависимая 		= Новый РеквизитФормы(ПутьКРеквизитуИИмяЭлемента, ТипЧислоПлюс, ПутьРеквизита, ЗависимаяЦена.Наименование);
				МассивРеквизитов.Очистить();
				МассивРеквизитов.Добавить(РеквизитЦенаЗависимая);
				ЭтотОбъект.ИзменитьРеквизиты(МассивРеквизитов);
				
			КонецЕсли;
			
			ЭлементЗависимаяЦена 				= Элементы.Добавить(ПрефиксРеквизитов + ПутьКРеквизитуИИмяЭлемента, Тип("ПолеФормы"), ГруппаЦены);
			ЭлементЗависимаяЦена.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветРамки;
			ЭлементЗависимаяЦена.Вид			= ВидПоляФормы.ПолеВвода;
			ЭлементЗависимаяЦена.ПутьКДанным	= ПутьРеквизита + "." + ПутьКРеквизитуИИмяЭлемента;
			ЭлементЗависимаяЦена.Ширина			= 12;
			ЭлементЗависимаяЦена.ТолькоПросмотр	= Истина;
			ЭлементЗависимаяЦена.ЦветТекста		= ЦветаСтиля.НедоступныеДанныеЦвет;
			ЭлементЗависимаяЦена.ПропускатьПриВводе = Истина;
			ЭлементЗависимаяЦена.Видимость		= ПоказыватьЗависимыеЦены;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
	
	ИмяГруппыЭлементов = ИмяТабличнойЧасти + ВыбранныйВидЦенСоответствие.Ключ.ИдентификаторФормул;
	
	ЭтоНовыйВидЦен = (Элементы.Найти(ИмяГруппыЭлементов) = Неопределено);
	Если ЭтоНовыйВидЦен Тогда
		
		ДобавитьРеквизитыИЭлементыТабличнойЧастиПоВидуЦен(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен)
	
	ИмяГруппыЭлементов = ИмяТабличнойЧасти + ОтключенныйВидЦен.ИдентификаторФормул;
	Если Элементы.Найти(ИмяГруппыЭлементов) <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти)
	
	Для каждого ВыбранныйВидЦенСоответствие Из КэшЗначений.ВыбранныеВидыЦен Цикл
		
		ИспользоватьВидЦенВТабличнойЧасти(ИмяТабличнойЧасти, ВыбранныйВидЦенСоответствие)
		
	КонецЦикла;
	
	Для каждого ОтключенныйВидЦен Из КэшЗначений.ОтключенныеВидыЦен Цикл
		
		ОтключитьИспользованиеВидовЦенВТабличнойЧасти(ИмяТабличнойЧасти, ОтключенныйВидЦен);
		
	КонецЦикла;
	КэшЗначений.ОтключенныеВидыЦен = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#Область КопияДанныхДоИзменения

&НаСервере
Процедура ВосстановитьТабличнуюЧастьИзКопии(ИмяТабличнойЧасти, АдресВоВременномХранилище)
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ЗначениеВРеквизитФормы(ТаблицаДанных, ИмяТабличнойЧасти);
		
	Иначе
		
		ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТабличныеЧастиИзКопий()
	
	ВосстановитьТабличнуюЧастьИзКопии("ТЧНоменклатура", КэшЗначений.ДоИзмененияНоменклатура);
	ВосстановитьТабличнуюЧастьИзКопии("ТЧХарактеристики", КэшЗначений.ДоИзмененияХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКопиюТекущихДанных(ТаблицаДанных, АдресВоВременномХранилище)
	
	ПоместитьВоВременноеХранилище(ТаблицаДанных, АдресВоВременномХранилище);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьОтменитьИзменение", "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоставляемаяЧастьБСП

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Перем МассивВидовЦен;
	
	Если НЕ Параметры.Свойство("ВидыЦен", МассивВидовЦен) Тогда
		
		МассивВидовЦен = Новый Массив;
		
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ФОУчетЦенКонтрагентов", ПолучитьФункциональнуюОпцию("УчетЦенКонтрагентов"));
	КэшЗначений.Вставить("ФОИспользоватьХарактеристики", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики"));
	КэшЗначений.Вставить("ФОИспользоватьЕдиницыИзмерения", ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения"));
	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("ВыбранныеВидыЦен", Новый Соответствие);
	КэшЗначений.Вставить("ОтключенныеВидыЦен", Новый Массив); // Используется, если на вернулись на первую страницу и отключили
	КэшЗначений.Вставить("ИсключенныеВидыЦен", Новый Массив); // Используется перед записью в регистр
	КэшЗначений.Вставить("МаксимальныйКлючСвязи", 0);
	КэшЗначений.Вставить("КоличествоСтрокПриемлевогоБыстродействия", 500);
	КэшЗначений.Вставить("АвторизированныйПользователь",	Пользователи.АвторизованныйПользователь());
	КэшЗначений.Вставить("ЗаданиеВыполнено", Неопределено);
	КэшЗначений.Вставить("ФоновоеЗаданиеИдентификатор", Неопределено);
	КэшЗначений.Вставить("ФоновоеЗаданиеАдресХранилища", Неопределено);
	КэшЗначений.Вставить("ДоИзмененияНоменклатура", ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, УникальныйИдентификатор));
	КэшЗначений.Вставить("ДоИзмененияХарактеристики", ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, УникальныйИдентификатор));
	КэшЗначений.Вставить("ЦветТемноЗеленый", ЦветаСтиля.ЦветТемноЗеленый);
	КэшЗначений.Вставить("ЦветСветлоЗеленый", ЦветаСтиля.ЦветСветлоЗеленый);
	КэшЗначений.Вставить("ВводНаОснованииПриходныхНакладных", Ложь);
	КэшЗначений.Вставить("ЗаполнениеНаОснованииПриходныхНакладныхВыполнено", Неопределено);
	КэшЗначений.Вставить("ОсновнаяФормаПрайсЛиста", УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяФормаПрайсЛиста"));
	КэшЗначений.Вставить("СписокПрайсЛистов", Перечисления.ОсновнаяФормаПрайсЛиста.СписокПрайсЛистов);
	КэшЗначений.Вставить("ФормированиеПрайсЛистов", Перечисления.ОсновнаяФормаПрайсЛиста.ФормированиеПрайсЛистов);
	
	Если Параметры.Свойство("ВводНаОснованииПриходныхНакладных") Тогда
		
		КэшЗначений.ВводНаОснованииПриходныхНакладных = Истина;
		КэшЗначений.ЗаполнениеНаОснованииПриходныхНакладныхВыполнено = Ложь;
		КэшЗначений.Вставить("МассивПриходныхНакладных", Параметры.МассивПриходныхНакладных);
		
	КонецЕсли;
	
	ЗаполнитьДеревоОперандов(МассивВидовЦен);
	
	ЗакрытьПомощникБезПодтверждения = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ЗакрытьПомощникБезПодтверждения");
	
	ПериодЗаписи = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПоказыватьХарактеристики", "Видимость", КэшЗначений.ФОИспользоватьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		ДобавитьПроизвольнуюНоменклатуру(ВыбранноеЗначение);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьПомощникБезПодтверждения");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитов

&НаКлиенте
Процедура ПоказыватьХарактеристикиПриИзменении(Элемент)
	
	// Если показываем характеристики, следовательно, пользователь имеет возможность отредактировать цены для характеристик самостоятельно
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УстанавливатьХарактеристикамБезЦен", "Видимость", НЕ ПоказыватьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыЦенИспользованиеПриИзменении(Элемент)
	
	ДанныеТекущейСтроки = Элементы.ВидыЦен.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено
		И НЕ ЗначениеЗаполнено(ДанныеТекущейСтроки.ВидЦен) Тогда
		
		ПодчиненныеСтроки = ДанныеТекущейСтроки.ПолучитьЭлементы(); 
		Для каждого Строка Из ПодчиненныеСтроки Цикл
			
			ДанныеТекущейСтроки.Свойство("Использование", Строка.Использование);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ПоказыватьХарактеристики Тогда
		
		Если Поле.Имя = "ТЧНоменклатураНоменклатура" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДанныеСтрокиФормы = ТЧНоменклатура.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ДанныеСтрокиФормы <> Неопределено 
				И (ДанныеСтрокиФормы.ИндексКартинки = 2 
					ИЛИ ДанныеСтрокиФормы.ИндексКартинки = 3) Тогда
				
				ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ДанныеСтрокиФормы.КлючСвязи);
				Элементы.ТЧХарактеристики.ОтборСтрок = ОтборСтрок;
				
				Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Характеристики;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередУдалением(Элемент, Отказ)
	
	Если ПоказыватьХарактеристики Тогда
		
		МассивСтроки = Элементы.ТЧНоменклатура.ВыделенныеСтроки;
		Если МассивСтроки.Количество() > 0 Тогда
			
			Для каждого Строка Из МассивСтроки Цикл
				
				НайденнаяСтрокаНоменклатура = ТЧНоменклатура.НайтиПоИдентификатору(Строка);
				Если НайденнаяСтрокаНоменклатура <> Неопределено Тогда
					
					УдалитьСтрокиХарактеристикПоКлючуСвязи(НайденнаяСтрокаНоменклатура.КлючСвязи, ТЧХарактеристики);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПомощникБезПодтвержденияПриИзменении(Элемент)
	
	УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(ЗакрытьПомощникБезПодтверждения, "ЗакрытьПомощникБезПодтверждения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТЧНоменклатураПередНачаломИзменения(Элемент, Отказ)
	
	Если ПоказыватьХарактеристики Тогда
		
		ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
		Если ДанныеТекущейСтроки <> Неопределено 
			И Элемент.Имя = "ТЧНоменклатура" Тогда
			
			ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
			Если СтрНайти(ИмяЭлемента, "_ЕдИзм") > 0  Тогда
				
				ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "_ЕдИзм", "_ЦенаНовая");
				
			КонецЕсли;
			
			ЦенаДоИзменения = ДанныеТекущейСтроки[ИмяЭлемента];
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьНовыеЦеныПоверхУстановленныхПриИзменении(Элемент)
	
	Если НЕ ПоказыватьХарактеристики Тогда
		
		Элементы.УстанавливатьХарактеристикамБезЦен.Заголовок = ?(ЗаписыватьНовыеЦеныПоверхУстановленных,
			НСтр(" ru='Устанавливать цены номенклатуры характеристикам'"),
			НСтр(" ru='Устанавливать цены номенклатуры характеристикам без цен'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСоставРучныхНажатие(Элемент)
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НоваяЦенаПриИзменении(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя,"ТЧНоменклатура", ""), "_ЦенаНовая", "");
		Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
		
		ОтразитьИзменениеНовойЦены(ДанныеТекущейСтроки, Идентификатор);
		ОтразитьНовуюЦенуВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя], ДанныеТекущейСтроки.КлючСвязи);
		
		ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕдиницаИзмеренияПриИзменении(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеТекущейСтроки = Элементы.ТЧНоменклатура.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ИдентификаторВидаЦен = СтрЗаменить(СтрЗаменить(Элемент.Имя,"ТЧНоменклатура", ""), "_ЕдИзм", "");
		Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
		
		ОтразитьЕдиницуИзмеренийВХарактеристиках(ИдентификаторВидаЦен, ДанныеТекущейСтроки[Элемент.Имя], ДанныеТекущейСтроки.КлючСвязи);
		
		// ДанныеТекущейСтроки[Идентификатор + "_ЦенуИзменили"] = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьПомощникБезПодтверждения = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписыватьНовыеЦеныПоверхУстановленных(Команда)
	
	КэшЗначений.ЗаписыватьНовыеЦеныПоверхУстановленных = Не КэшЗначений.ЗаписыватьНовыеЦеныПоверхУстановленных;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличнаяЧастьЗаписыватьНовыеЦеныПоверхУстановленных", "Пометка", КэшЗначений.ЗаписыватьНовыеЦеныПоверхУстановленных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(Команда)
	
	ОчиститьТабличныеЧастиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуру(Команда)
	
	Элементы.СтраницыПредварительныйРезультат.ТекущаяСтраница = Элементы.СтраницаПР_Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)
	
	ИмяТабличнойЧасти = ?(ЭтаФорма.ТекущийЭлемент = Элементы.ТЧХарактеристики, "ТЧХарактеристики", "ТЧНоменклатура");
	
	ДанныеТекущейСтроки = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.Номенклатура), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьХарактерисику(Команда)
	
	ДанныеТекущейСтроки = Элементы.ТЧХарактеристики.ТекущиеДанные;
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаОбъекта", Новый Структура("Ключ", ДанныеТекущейСтроки.Характеристика), ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПредупреждениеНажатие(Элемент)
	
	ТекстПредупреждения = НСтр(" ru='Изменение параметра невозможно из-за заполненной табличной части номенклатуры'");
	ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Если КэшЗначений.ФОИспользоватьХарактеристики
		И Элементы.ПоказыватьХарактеристики.Доступность Тогда
		
		ПоказыватьХарактеристики = Истина;
		
	КонецЕсли;
	
	ПоказыватьДействующуюЦену = Истина;
	ПоказыватьОтклонениеЦен = Истина;
	
	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда
		
		ПоказыватьЕдиницыИзмерения = Истина;
		
	КонецЕсли;
	
	ПоказыватьЗависимыеЦены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Если КэшЗначений.ФОИспользоватьХарактеристики
		И Элементы.ПоказыватьХарактеристики.Доступность Тогда
		
		ПоказыватьХарактеристики = Ложь;
		
	КонецЕсли;
	
	ПоказыватьДействующуюЦену = Ложь;
	ПоказыватьОтклонениеЦен = Ложь;
	
	Если КэшЗначений.ФОИспользоватьЕдиницыИзмерения Тогда
		
		ПоказыватьЕдиницыИзмерения = Ложь;
		
	КонецЕсли;
	
	ПоказыватьЗависимыеЦены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТабличнойЧасти(Команда)
	
	ОбластиОбъектов		= Новый СписокЗначений;
	ТабличныйДокумент	= СформироватьТабличныйДокумент(КэшЗначений);
	
	ИдентификаторПечатнойФормы = "ТабличнаяЧастьПоДеревуДанных";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Табличная часть обработки формирования цен'");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Табличная часть обработки формирования цен'");
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЦенников(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru ='Ценники могут формироваться только по записанным ценам,
			|в тоже время у формы есть не сохраненные данные.
			|Продолжить выполнение печати?'");
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЦенниковПослеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьОбработкуПечатиЦенников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрайсЛисты(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	Если НЕ ЗначениеЗаполнено(КэшЗначений.ОсновнаяФормаПрайсЛиста)
		ИЛИ КэшЗначений.ОсновнаяФормаПрайсЛиста = КэшЗначений.СписокПрайсЛистов Тогда
		
		ОткрытьФорму("Справочник.ПрайсЛисты.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
		
	ИначеЕсли КэшЗначений.ОсновнаяФормаПрайсЛиста = КэшЗначений.ФормированиеПрайсЛистов Тогда
		
		ПараметрыОткрытия.Вставить("ОткрытьОсновнойРабочийПрайсЛист");
		ОткрытьФорму("Обработка.ФормированиеПрайсЛистов.Форма", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

//:::Команды отвечающие за вызов диалогов подбора номенклатуры
#Область СекцияДобавленияНоменклатуры

&НаКлиенте
Процедура ЗаполнитьПоВидуЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КэшЗначений", 			КэшЗначений);
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	ПоказыватьХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ОбработатьРезультатЗаполнения", ЭтотОбъект);
	ОткрытьФорму("Обработка.Ценообразование.Форма.ФормаЗаполненияПоВидамЦен", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПриходнымНакладным(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны", ПоказыватьХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ОбработатьРезультатЗаполнения", ЭтотОбъект);
	ОткрытьФорму("Обработка.Ценообразование.Форма.ФормаЗаполненияПоПриходнымНакладным", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКатегорииНоменклатуры(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	ПоказыватьХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ОбработатьРезультатЗаполнения", ЭтотОбъект);
	ОткрытьФорму("Обработка.Ценообразование.Форма.ФормаЗаполненияПоКатегорииНоменклатуры", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЦеновойГруппе(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХарактеристикиВидны",	ПоказыватьХарактеристики);
	
	ОбработкаОписание = Новый ОписаниеОповещения("ОбработатьРезультатЗаполнения", ЭтотОбъект);
	ОткрытьФорму("Обработка.Ценообразование.Форма.ФормаЗаполненияПоЦеновымГруппам", ПараметрыОткрытия, ЭтотОбъект, , , , ОбработкаОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЭлементамНоменклатуры(Команда)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Элементы");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппамНоменклатуры(Команда)
	
	ОткрытьФормуДобавленияПроизвольнойНоменклатуры("Группы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗаполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыборПроизведен Тогда
		
		ОбработатьРезультатЗаполненияНаСервере(Результат, ДополнительныеПараметры);
		
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//:::Команды отвечающие за заполнение колонки с новыми ценами
#Область СекцияРедактированияНовыхЦен

&НаКлиенте
Процедура ИзменитьНаСумму(Команда)
	
	ВидРасчета = "Сумма";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	
	ВидРасчета = "Процент";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОкругление(Команда)
	
	ВидРасчета = "Округление";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОчистить(Команда)
	
	ВидРасчета = "Очистить";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФормула(Команда)
	
	ВидРасчета = "Формула";
	ИзменитьКолонку(ВидРасчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменение(Команда)
	
	ВосстановитьТабличныеЧастиИзКопий();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетатьНовыеЦеныПоУказаннымУсловиям(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.ВыборПроизведен Тогда
		
		ИзменитьКолонкиНовыхЦенНаСервере(Результат);
		
		Если Результат.ВариантИзменения = "Формула" Тогда
			
			ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область ПереопределяемаяЧасть

#Область Страница_1

&НаКлиенте
Функция Подключаемый_СтраницаОдин_ПриПереходеДалее(Отказ)
	
	ЗапомнитьВыбранныеВидыЦен();
	
	Если ВидыЦенВыбраны() Тогда
		
		ИмяТабличнойЧасти = "ТЧНоменклатура";
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти);
		
		ИмяТабличнойЧасти = "ТЧХарактеристики";
		ИзменитьСоставРеквизитовИЭлементовТабличнойЧасти(ИмяТабличнойЧасти);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Необходимо указать виды цен, для которых планируется установка новых цен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидыЦен", , Отказ);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Страница_2

&НаКлиенте
Функция Подключаемый_СтраницаДва_ПриПереходеДалее(Отказ)
	
	ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧНоменклатура");
	
	Если ПоказыватьХарактеристики Тогда
		
		ИзменитьВидимостьЭлементовТабличнойЧасти("ТЧХарактеристики");
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Страница_3

&НаКлиенте
Функция Подключаемый_СтраницаТри_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если НЕ Элементы.КомандаНазад1.Доступность Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаНазад1", "Доступность", Истина);
		
	КонецЕсли;
	
	Если КэшЗначений.ВводНаОснованииПриходныхНакладных
		И КэшЗначений.ЗаполнениеНаОснованииПриходныхНакладныхВыполнено = Ложь Тогда
		
		АдресНоменклатурыПриходныхНакладных = "";
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивПриходныхНакладных", КэшЗначений.МассивПриходныхНакладных);
		СтруктураПараметров.Вставить("ИспользоватьХарактеристики", ПоказыватьХарактеристики);
		
		ЗаполнитьПоПриходнымНакладнымВФорме(СтруктураПараметров, АдресНоменклатурыПриходныхНакладных);
		
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания();
		
		КэшЗначений.ЗаполнениеНаОснованииПриходныхНакладныхВыполнено = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаТри_ПриПереходеНазад(Отказ)
	
	ЕстьДанные = (ТЧНоменклатура.Количество() > 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказыватьХарактеристики", "Доступность", НЕ ЕстьДанные);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", ЕстьДанные);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаНазад1", "Доступность", НЕ ЕстьДанные);
	
КонецФункции

#КонецОбласти

#Область Страница_4

&НаКлиенте
Функция Подключаемый_СтраницаЧетыре_ПриПереходеДалее(Отказ)
	
	ЕстьВидыЦенКЗаписи = Ложь;
	ИсключенныеВидыЦен = Новый Массив;
	
	Для каждого ЭлементСписка Из ТекущиеВидыЦен Цикл
		
		Если ЭлементСписка.Пометка Тогда
			
			ЕстьВидыЦенКЗаписи = Истина;
			
		Иначе
			
			ИсключенныеВидыЦен.Добавить(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьВидыЦенКЗаписи Тогда
		
		КэшЗначений.Вставить("ИсключенныеВидыЦен", ИсключенныеВидыЦен);
		
	Иначе
		
		ТекстОшибки = НСтр("ru ='Нет видов цен (колонок прайс-листа), для которых требуется записать новые цены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ТекущиеВидыЦен", , Отказ);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Страница_5

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаОжидания".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПять_ОбработкаЗаписиНовыхЦен(Отказ, ПерейтиДалее)
	
	ВыполнитьЗаписьНовыхЦенНаСервере();
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗаписьНовыхЦенНаСервере()
	
	УдалитьДубли();
	
	ЗаписатьНовыеЦеныНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Страница_6

&НаКлиенте
Функция Подключаемый_СтраницаШесть_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ЗаполнитьЗаголовкиДекорацийИтогов();
	
КонецФункции

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

// Процедура определяет таблицу переходов по сценарию №1.
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 1;
	Переход.ИмяОсновнойСтраницы     = "СтраницаОдин";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииНачало";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаОдин_ПриПереходеДалее";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 2;
	Переход.ИмяОсновнойСтраницы     = "СтраницаДва";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	//Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	//Переход.ИмяОбработчикаПриОткрытии = "СтраницаДва_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаДва_ПриПереходеДалее";
	//Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаДва_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 3;
	Переход.ИмяОсновнойСтраницы     = "СтраницаТри";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаТри_ПриОткрытии";
	//Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаТри_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 4;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЧетыре";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	//Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаЧетыре_ПриПереходеДалее";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 5;
	Переход.ИмяОсновнойСтраницы     = "СтраницаПять";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	//Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ДлительнаяОперация      = Истина;
	Переход.ИмяОбработчикаДлительнойОперации = "СтраницаПять_ОбработкаЗаписиНовыхЦен";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 6;
	Переход.ИмяОсновнойСтраницы     = "СтраницаШесть";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаШесть_ПриОткрытии";
	//Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	
КонецПроцедуры

#КонецОбласти
