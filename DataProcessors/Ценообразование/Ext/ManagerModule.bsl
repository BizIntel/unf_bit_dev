
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПолучитьДеревоВидовЦен(ДеревоРезультата, МассивВидовЦен, ВключаяЦеныНоменклатуры = Истина, ВключаяЦеныКонтрагентов = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"Выбрать ВидыЦен.Ссылка КАК ВидЦен, Неопределено КАК Использование, Представление(ВидыЦен.Ссылка) КАК Представление, Истина КАК ЭтоВидЦенНоменклатуры, 0 КАК Картинка, Ложь КАК РазрешитьВыбирать, ВидыЦен.БазовыйВидЦен КАК БазовыйВидЦен, Выбор Когда ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ДинамическийФормула) Тогда ""Формула"" Когда ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.ДинамическийПроцент) Тогда ""Динамический"" Иначе ""Статический"" Конец КАК Вид, ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул
	|	Из Справочник.ВидыЦен КАК ВидыЦен ГДЕ НЕ ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.Статический)
	|	Итоги ПО БазовыйВидЦен
	|;
	|////////////////////////////////////////////////
	|Выбрать различные 
	|	ВидыЦен.Ссылка КАК ВидЦен, Выбор Когда Ссылка В(&МассивВидовЦен) Тогда Истина Иначе Ложь Конец КАК Использование, Представление(ВидыЦен.Ссылка) КАК Представление, Истина КАК ЭтоВидЦенНоменклатуры, 0 КАК Картинка, Истина КАК РазрешитьВыбирать, Выразить(""Статический"" КАК Строка(15)) КАК Вид, ВидыЦен.ИдентификаторФормул КАК ИдентификаторФормул
	|	Из Справочник.ВидыЦен КАК ВидыЦен ГДЕ ВидыЦен.ТипВидаЦен = Значение(Перечисление.ТипыВидовЦен.Статический)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|Выбрать различные 
	|	ВидыЦенКонтрагентов.Ссылка, Выбор Когда Ссылка В(&МассивВидовЦен) Тогда Истина Иначе Ложь Конец, Представление(ВидыЦенКонтрагентов.Ссылка), Ложь, 0, Истина, ""Статический"", ВидыЦенКонтрагентов.ИдентификаторФормул
	|	Из Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
	|
	|Итоги Выбор Когда ЭтоВидЦенНоменклатуры = Истина Тогда ""ЦЕНЫ НОМЕНКЛАТУРЫ"" Иначе ""ЦЕНЫ КОНТРАГЕНТОВ"" Конец КАК Представление, 1 КАК Картинка,  Истина КАК РазрешитьВыбирать
	|	ПО ЭтоВидЦенНоменклатуры");
	
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	ПодчиненныеВидыЦен	= РезультатЗапроса[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоРезультата	= РезультатЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для каждого СтрокаГруппы Из ПодчиненныеВидыЦен.Строки Цикл
		
		Если ЗначениеЗаполнено(СтрокаГруппы.БазовыйВидЦен) Тогда
			
			СтрокаДереваЗначений = ДеревоРезультата.Строки.Найти(СтрокаГруппы.БазовыйВидЦен, "ВидЦен", Истина);
			Если ТипЗнч(СтрокаДереваЗначений) = Тип("СтрокаДереваЗначений") Тогда
				
				Для каждого СтрокаВидаЦен Из СтрокаГруппы.Строки Цикл
					
					ПодчиненныйВидЦен = СтрокаДереваЗначений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаВидаЦен);
					
					ПодчиненныйВидЦен.Использование = СтрокаДереваЗначений.Использование;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			// Формулы
			// 1. Получим таблицу видов цен, которые участвуют в формуле
			// 2. Спозиционируемся в дереве видов цен на родительском элементе
			// 3. Запишем в родительские виды цен формульный вид цен как подчиненный
			
			Для каждого СтрокаФормульногоВидаЦен Из СтрокаГруппы.Строки Цикл
				
				ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(СтрокаФормульногоВидаЦен.ВидЦен.Формула);
				Для каждого СтрокаОперанда Из ТаблицаОперандов Цикл
					
					СтрокаДереваЗначений = ДеревоРезультата.Строки.Найти(СтрокаОперанда.ВидЦен, "ВидЦен", Истина);
					Если ТипЗнч(СтрокаДереваЗначений) = Тип("СтрокаДереваЗначений") Тогда
						
						ПодчиненныйВидЦен = СтрокаДереваЗначений.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(ПодчиненныйВидЦен, СтрокаФормульногоВидаЦен);
						
						ПодчиненныйВидЦен.Использование = СтрокаДереваЗначений.Использование;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВключаяЦеныНоменклатуры = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти("ЦЕНЫ НОМЕНКЛАТУРЫ", "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВключаяЦеныКонтрагентов = Ложь Тогда
		
		НайденнаяСтрока = ДеревоРезультата.Строки.Найти("ЦЕНЫ КОНТРАГЕНТОВ", "Представление", Ложь);
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ДеревоРезультата.Строки.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеЦенВМассив(ВыбранныеВидыЦен, БезПовторяющихся)
	
	МассивВидовЦен = Новый Массив;
	
	//ВыбранныеВидыЦен = Новый Соответствие;
	//Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
	//	
	//	МассивВидовЦен.Добавить(ЭлементСоответствия.Ключ);
	//	
	//	ЗависимыеЦены = ЭлементСоответствия.Значение;
	//	Если ТипЗнч(ЗависимыеЦены) = Тип("Массив") Тогда
	//		
	//		Для каждого ЗависимаяЦена Из ЗависимыеЦены Цикл
	//			
	//			Если БезПовторяющихся Тогда
	//				
	//				Если МассивВидовЦен.Найти(ЗависимаяЦена) <> Неопределено Тогда
	//					
	//					Продолжить;
	//					
	//				КонецЕсли;
	//				
	//			КонецЕсли;
	//			
	//			МассивВидовЦен.Добавить(ЗависимаяЦена);
	//			
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат МассивВидовЦен;
	
КонецФункции

#Region ВводНаОсновании

Процедура ПолучитьНоменклатуруПоПриходнымНакладным(СтруктураПараметров, АдресВременногоХранилища) Экспорт
	
	// 1. Получим СКД
	ИмяСхемыКД = "ПоПриходнымНакладным";
	СхемаКомпоновкиДанных = Обработки.Ценообразование.ПолучитьМакет(ИмяСхемыКД);
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.Номенклатура.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос(СхемаКомпоновкиДанных.НаборыДанных.ХарактеристикиНоменклатуры.Запрос);
	Запрос.УстановитьПараметр("МассивПриходныхНакладных", СтруктураПараметров.МассивПриходныхНакладных);
	ТаблицаХарактеристик = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметров.ИспользоватьХарактеристики = 0 Тогда
		
		ТаблицаХарактеристик.Очистить();
		
	КонецЕсли;
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		СтрокаНоменклатуры.КлючСвязи = ЛокальныйКлючСвязи;
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаНоменклатуры.Номенклатура);
		СтрокиХарактеристик = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаХарактеристики Из СтрокиХарактеристик Цикл
			
			СтрокаХарактеристики.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик", ТаблицаНоменклатуры, ТаблицаХарактеристик));
	
КонецПроцедуры

#EndRegion

#Region РаботаСФормулами

Процедура ПолучитьТаблицуПоследнихЦенПоступлений(ТаблицаСЦенамиПоступления)
	
	Запрос = Новый Запрос(
	"Выбрать
	|		ПН.Номенклатура КАК Номенклатура
	|		,ПН.Характеристика КАК Характеристика
	|		,Максимум(ПН.Ссылка.Дата) КАК Период
	|	Поместить ЗапасыПриходныхНакладныхСПериодами
	|	Из
	|		Документ.ПриходнаяНакладная.Запасы КАК ПН Где ПН.Ссылка.Проведен
	|	Сгруппировать по
	|		ПН.Номенклатура, ПН.Характеристика
	|	Индексировать по Номенклатура, Характеристика, Период
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать
	|		ПН.Номенклатура КАК Номенклатура
	|		,Максимум(ПН.Ссылка.Дата) КАК Период
	|	Поместить УслугиПриходныхНакладныхСПериодами
	|	Из
	|		Документ.ПриходнаяНакладная.Расходы КАК ПН Где ПН.Ссылка.Проведен
	|	Сгруппировать по
	|		ПН.Номенклатура
	|	Индексировать по Номенклатура, Период
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать различные
	|		ПН.Номенклатура КАК Номенклатура
	|		,ПН.Характеристика КАК Характеристика
	|		,ПН.Период КАК Период
	|		,ЦеныИзНакладных.Цена КАК Значение
	|		,ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Поместить ЦеныИзНакладныхЗапасы
	|	Из ЗапасыПриходныхНакладныхСПериодами КАК ПН
	|		Левое соединение Документ.ПриходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|			по ПН.Период = ЦеныИзНакладных.Ссылка.Дата И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура И ПН.Характеристика = ЦеныИзНакладных.Характеристика
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать различные
	|		ПН.Номенклатура КАК Номенклатура
	|		,Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|		,ПН.Период КАК Период
	|		,ЦеныИзНакладных.Цена КАК Значение
	|		,ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Поместить ЦеныИзНакладныхУслуги
	|	Из УслугиПриходныхНакладныхСПериодами КАК ПН
	|		Левое соединение Документ.ПриходнаяНакладная.Расходы КАК ЦеныИзНакладных
	|			по ПН.Период = ЦеныИзНакладных.Ссылка.Дата И ПН.Номенклатура = ЦеныИзНакладных.Номенклатура
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать
	|		ЦеныИзНакладныхЗапасы.Номенклатура КАК Номенклатура
	|		,ЦеныИзНакладныхЗапасы.Характеристика КАК Характеристика
	|		,ЦеныИзНакладныхЗапасы.Период КАК Период
	|		,ЦеныИзНакладныхЗапасы.Значение КАК Значение
	|		,ЦеныИзНакладныхЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Из ЦеныИзНакладныхЗапасы КАК ЦеныИзНакладныхЗапасы
	|	Объединить
	|	Выбрать
	|		ЦеныИзНакладныхУслуги.Номенклатура
	|		,ЦеныИзНакладныхУслуги.Характеристика
	|		,ЦеныИзНакладныхУслуги.Период
	|		,ЦеныИзНакладныхУслуги.Значение
	|		,ЦеныИзНакладныхУслуги.ЕдиницаИзмерения
	|	Из ЦеныИзНакладныхУслуги КАК ЦеныИзНакладныхУслуги
	|");
	
	ТаблицаСЦенамиПоступления = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуПоследнихЦенРеализаций(ТаблицаСЦенамиРеализации)

	Запрос = Новый Запрос(
	"Выбрать
	|		РН.Номенклатура КАК Номенклатура
	|		,РН.Характеристика КАК Характеристика
	|		,Максимум(РН.Ссылка.Дата) КАК Период
	|	Поместить НоменклатураРасходныхНакладныхСПериодами
	|	Из 		
	|		Документ.РасходнаяНакладная.Запасы КАК РН Где РН.Ссылка.Проведен
	|	Сгруппировать по
	|		РН.Номенклатура, РН.Характеристика
	|	Индексировать по Номенклатура, Характеристика, Период
	|	;		
	|	//////////////////////////////////////////////////////////
	|	Выбрать		
	|		РН.Номенклатура КАК Номенклатура
	|		,РН.Характеристика КАК Характеристика
	|		,РН.Период КАК Период
	|		,ЦеныИзНакладных.Цена КАК Цена
	|		,ЦеныИзНакладных.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Поместить НоменклатураРасходныхНакладныхСПериодамиИЦенами
	|	Из НоменклатураРасходныхНакладныхСПериодами КАК РН
	|		Левое соединение Документ.РасходнаяНакладная.Запасы КАК ЦеныИзНакладных
	|			по РН.Период = ЦеныИзНакладных.Ссылка.Дата И РН.Номенклатура = ЦеныИзНакладных.Номенклатура И РН.Характеристика = ЦеныИзНакладных.Характеристика
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать
	|		АктВР.Номенклатура КАК Номенклатура
	|		,АктВР.Характеристика КАК Характеристика
	|		,Максимум(АктВР.Ссылка.Дата) КАК Период
	|	Поместить НоменклатураАктаСПериодами
	|	Из
	|		Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВР Где АктВР.Ссылка.Проведен
	|	Сгруппировать по
	|		АктВР.Номенклатура, АктВР.Характеристика
	|	Индексировать по Номенклатура, Характеристика, Период
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать
	|		АктВР.Номенклатура КАК Номенклатура
	|		,АктВР.Характеристика КАК Характеристика
	|		,АктВР.Период КАК Период
	|		,ЦеныИзАктовВР.Цена КАК Цена
	|		,ЦеныИзАктовВР.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Поместить НоменклатураАктовСПериодамиИЦенами
	|	Из НоменклатураАктаСПериодами КАК АктВР
	|		Левое соединение Документ.АктВыполненныхРабот.РаботыИУслуги КАК ЦеныИзАктовВР
	|			по АктВР.Период = ЦеныИзАктовВР.Ссылка.Дата И АктВР.Номенклатура = ЦеныИзАктовВР.Номенклатура И АктВР.Характеристика = ЦеныИзАктовВР.Характеристика
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать РН.Номенклатура КАК Номенклатура
	|		,РН.Характеристика КАК Характеристика
	|		,РН.Период КАК Период
	|		,РН.Цена
	|		,РН.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Поместить ВсяНоменклатура
	|	Из НоменклатураРасходныхНакладныхСПериодамиИЦенами КАК РН
	|	Объединить все
	|	Выбрать АктВР.Номенклатура КАК Номенклатура
	|		,АктВР.Характеристика КАК Характеристика
	|		,АктВР.Период КАК Период
	|		,АктВР.Цена
	|		,АктВР.ЕдиницаИзмерения
	|	Из НоменклатураАктовСПериодамиИЦенами КАК АктВР
	|	;
	|	//////////////////////////////////////////////////////////
	|	Выбрать
	|		ВсяНоменклатура.Номенклатура КАК Номенклатура
	|		,ВсяНоменклатура.Характеристика КАК Характеристика
	|		,Максимум(ВсяНоменклатура.Период) КАК Период
	|		,ВсяНоменклатура.Цена КАК Значение
	|		,ВсяНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	Из ВсяНоменклатура КАК ВсяНоменклатура
	|	Сгруппировать по ВсяНоменклатура.Номенклатура, ВсяНоменклатура.Характеристика, ВсяНоменклатура.Цена, ВсяНоменклатура.ЕдиницаИзмерения");
	
	ТаблицаСЦенамиРеализации = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьТаблицуСебестоимости(ТаблицаССебестоимостью)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстаткиИОбороты.Номенклатура КАК Номенклатура
	|	,ЗапасыОстаткиИОбороты.Характеристика КАК Характеристика
	|	,ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток
	|	,ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	,ВЫБОР
	|		КОГДА ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток = 0 					// Себ-сть ниже 0 для цен безразлична
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток = 0			// Деление на 0 - это ошибка
	|				ИЛИ ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток ЕСТЬ NULL	// Операция не возможна
	|			ТОГДА 0
	|		ИНАЧЕ ЗапасыОстаткиИОбороты.СуммаКонечныйОстаток / ЗапасыОстаткиИОбороты.КоличествоКонечныйОстаток
	|	КОНЕЦ КАК Значение
	|	,ЗапасыОстаткиИОбороты.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрНакопления.Запасы.ОстаткиИОбороты(, , Авто, , СчетУчета.ТипСчета = ЗНАЧЕНИЕ(Перечисление.ТипыСчетов.Запасы)) КАК ЗапасыОстаткиИОбороты");
	
	ТаблицаССебестоимостью = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ПолучитьТаблицыЦен(ПараметрыРасчета, ЦеныНоменклатуры, ЦеныКонтрагентов)
	
	СтруктураТаблиц = Новый Структура("ТаблицаЦенНоменклатуры, ТаблицаЦенКонтрагентов");
	
	МассивНоменклатуры = ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	
	Если ЦеныНоменклатуры.Количество() > 0 Тогда
		
		Запрос 				= Новый Запрос;
		Запрос.УстановитьПараметр("МассивВидовЦен", 	ЦеныНоменклатуры.ВыгрузитьКолонку("ВидЦен"));
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст		=
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦен
		|	,ЦеныНоменклатуры.ВидЦен.ИдентификаторФормул КАК Идентификатор
		|	,ЦеныНоменклатуры.Номенклатура КАК Номенклатура
		|	,ЦеныНоменклатуры.Характеристика КАК Характеристика
		|	,ЦеныНоменклатуры.Цена КАК Значение
		|	,ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	
		|ИЗ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(,
		|		Актуальность И ВидЦен В(&МассивВидовЦен) И Номенклатура В(&МассивНоменклатуры) И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатуры";
		
		Если ПараметрыРасчета.ПоказыватьХарактеристики Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "");
			
		КонецЕсли;
		
		СтруктураТаблиц.ТаблицаЦенНоменклатуры = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ЦеныКонтрагентов.Количество() > 0 Тогда
		
		Запрос 				= Новый Запрос;
		Запрос.УстановитьПараметр("МассивВидовЦен", 	ЦеныКонтрагентов.ВыгрузитьКолонку("ВидЦен"));
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		Запрос.Текст		=
		"ВЫБРАТЬ
		|	ЦеныКонтрагентов.ВидЦенКонтрагента КАК ВидЦенКонтрагента
		|	,ЦеныКонтрагентов.ВидЦенКонтрагента.ИдентификаторФормул КАК Идентификатор
		|	,ЦеныКонтрагентов.Номенклатура КАК Номенклатура
		|	,ЦеныКонтрагентов.Характеристика КАК Характеристика
		|	,ЦеныКонтрагентов.Цена КАК Значение
		|	,ЦеныКонтрагентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|	
		|ИЗ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(,
		|		Актуальность И ВидЦенКонтрагента В(&МассивВидовЦен) И Номенклатура В(&МассивНоменклатуры) И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныКонтрагентов";
		
		Если ПараметрыРасчета.ПоказыватьХарактеристики Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, " И Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)", "");
			
		КонецЕсли;
		
		СтруктураТаблиц.ТаблицаЦенКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат СтруктураТаблиц;
	
КонецФункции

Процедура ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов) Экспорт
	Перем ПодготовленнаяТаблицаДанных;
	
	Формула = ПараметрыРасчета.Формула;
	
	ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(Формула);
	ТаблицаОперандов.Колонки.Добавить("Значение");
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВПриходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенПоступлений(ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[ПоследняяЦенаВРасходе]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ПолучитьТаблицуПоследнихЦенРеализаций(ПодготовленнаяТаблицаДанных);
		СтрокаТаблицы.Значение = ПодготовленнаяТаблицаДанных;
		
	КонецЕсли;
	
	СтрокаТаблицыСебестоимость 			= ТаблицаОперандов.Найти("[Себестоимость]", "Операнд");
	СтрокаТаблицыСебестоимостьНацВалюта = ТаблицаОперандов.Найти("[СебестоимостьНацВалюта]", "Операнд");
	Если СтрокаТаблицыСебестоимость <> Неопределено 
		ИЛИ СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
		
		ПолучитьТаблицуСебестоимости(ПодготовленнаяТаблицаДанных);
		Если СтрокаТаблицыСебестоимость <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимость.Значение = ПодготовленнаяТаблицаДанных;
			
		КонецЕсли;
		
		Если СтрокаТаблицыСебестоимостьНацВалюта <> Неопределено Тогда
			
			СтрокаТаблицыСебестоимостьНацВалюта.Значение = ПодготовленнаяТаблицаДанных;
			
			КурсВалютыУчета			= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаУчета.Получить(), ТекущаяДатаСеанса());
			
			НоваяСтрока				= ТаблицаОперандов.Добавить();
			НоваяСтрока.Операнд		= "[КурсВалютыУчета]";
			НоваяСтрока.Значение	= КурсВалютыУчета.Курс / КурсВалютыУчета.Кратность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсДоллара]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("840"), ТекущаяДатаСеанса());
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
		
	СтрокаТаблицы = ТаблицаОперандов.Найти("[КурсЕвро]", "Операнд");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ДанныеКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Справочники.Валюты.НайтиПоКоду("978"), ТекущаяДатаСеанса());
		СтрокаТаблицы.Значение = ДанныеКурса.Курс / ДанныеКурса.Кратность;
		
	КонецЕсли;
	
	МассивЦеныНоменклатуры = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Истина));
	МассивЦеныКонтрагентов = ТаблицаОперандов.НайтиСтроки(Новый Структура("ЭтоЦеныНоменклатуры", Ложь));
	Если МассивЦеныНоменклатуры.Количество() > 0
		ИЛИ МассивЦеныКонтрагентов.Количество() > 0 Тогда
		
		ЦеныНоменклатуры = ТаблицаОперандов.Скопировать(МассивЦеныНоменклатуры, "ВидЦен");
		ЦеныНоменклатуры.Свернуть("ВидЦен");
		
		ЦеныКонтрагентов = ТаблицаОперандов.Скопировать(МассивЦеныКонтрагентов, "ВидЦен");
		ЦеныКонтрагентов.Свернуть("ВидЦен");
		
		СтруктураТаблиц = ПолучитьТаблицыЦен(ПараметрыРасчета, ЦеныНоменклатуры, ЦеныКонтрагентов);
		
		Для каждого Строка Из МассивЦеныНоменклатуры Цикл
			
			Строка.Значение = СтруктураТаблиц.ТаблицаЦенНоменклатуры;
			
		КонецЦикла;
		
		Для каждого Строка Из МассивЦеныКонтрагентов Цикл
			
			Строка.Значение = СтруктураТаблиц.ТаблицаЦенКонтрагентов;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен) Экспорт
	
	#Region ПланТаблицы
	//	КоллекцияНоменклатуры.Период 					- не используется
	//	,КоллекцияНоменклатуры.ВидЦен					- не используется
	//	,КоллекцияНоменклатуры.Номенклатура 			- штатно
	//	,КоллекцияНоменклатуры.Характеристика 			- штатно
	//	,КоллекцияНоменклатуры.ТекущеееЗначение			- штатно
	//	,КоллекцияНоменклатуры.Цена						- новое значение, до обработки равно 0
	//	,КоллекцияНоменклатуры.Актуальность				- не используется
	//	,КоллекцияНоменклатуры.ЕдиницаИзмерения			- заполнять, если заполнено
	//	,КоллекцияНоменклатуры.ВключаяХарактеристики	- не используется
	//	,КоллекцияНоменклатуры.Автор					- не используется
	//	,КоллекцияНоменклатуры.ПересчетВыполнен			- не используется
	#EndRegion
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиНоменклатура",		Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("КлючСвязиХарактеристика",	Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("ТекущееЗначение",			Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВключаяХарактеристики",		Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("ПересчетВыполнен",			Новый ОписаниеТипов("Булево"));
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИдентификаторВидаЦен = "ТЧНоменклатура" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаНоменклатуры Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= СтрокаНоменклатуры.КлючСвязи;
		НоваяСтрока.КлючСвязиХарактеристика	= -1;
		НоваяСтрока.Номенклатура			= СтрокаНоменклатуры.Номенклатура;
		НоваяСтрока.Характеристика			= ПустаяХарактеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаНоменклатуры[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		
	КонецЦикла;
	
	ИдентификаторВидаЦен = "ТЧХарактеристики" + ВидЦен.ИдентификаторФормул;
	
	Для каждого СтрокаХарактеристики Из ПараметрыРасчета.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
		
		НоваяСтрока = КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.КлючСвязиНоменклатура	= -1;
		НоваяСтрока.КлючСвязиХарактеристика	= СтрокаХарактеристики.КлючСвязи;
		НоваяСтрока.Номенклатура			= СтрокаХарактеристики.Номенклатура;
		НоваяСтрока.Характеристика			= СтрокаХарактеристики.Характеристика;
		НоваяСтрока.ВключаяХарактеристики	= ПараметрыРасчета.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.ТекущееЗначение			= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаХарактеристики[ИдентификаторВидаЦен + "_ЕдИзм"];
		НоваяСтрока.ВидЦен 					= ВидЦен;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен)
	
	ИдентификаторВидаЦен = ВидЦен.ИдентификаторФормул;
	ПараметрыОтбора = Новый Структура;
	
	Для каждого СтрокаКоллекции Из КоллекцияНоменклатуры Цикл
		
		ПараметрыОтбора.Очистить();
		Если СтрокаКоллекции.КлючСвязиХарактеристика < 0 Тогда
			
			Идентификатор = "ТЧНоменклатура" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыНоменклатуры";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиНоменклатура);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			
		Иначе
			
			Идентификатор = "ТЧХарактеристики" + ИдентификаторВидаЦен;
			ИмяТаблицы = "ТаблицаФормыХарактеристик";
			ПараметрыОтбора.Вставить("КлючСвязи", СтрокаКоллекции.КлючСвязиХарактеристика);
			ПараметрыОтбора.Вставить("Номенклатура", СтрокаКоллекции.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаКоллекции.Характеристика);
			
		КонецЕсли;
		
		НайденныеСтроки = ПараметрыРасчета.КоллекцииДанныхФормы[ИмяТаблицы].НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТабличнойЧасти Из НайденныеСтроки Цикл
			
			СтрокаТабличнойЧасти[Идентификатор + "_ЦенаНовая"] = СтрокаКоллекции.Цена;
			СтрокаТабличнойЧасти[Идентификатор + "_ЕдИзм"] = СтрокаКоллекции.ЕдиницаИзмерения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета) Экспорт
	Перем КоллекцияНоменклатуры, ТаблицаОперандов;
	
	ПодготовитьОперандыИДанные(ПараметрыРасчета, ТаблицаОперандов);
	Для каждого ЭлементСоответствия Из ПараметрыРасчета.ВидыЦенКПересчету Цикл
		
		ВидЦен = ЭлементСоответствия.Ключ;
		КоллекцияНоменклатуры = Неопределено;
		
		СлияниеДанныхВОбщуюТаблицуЗначений(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен);
		ЦенообразованиеФормулыСервер.РасчитатьДанныеКоллекции(ПараметрыРасчета.Формула, КоллекцияНоменклатуры, ТаблицаОперандов, ВидЦен, Истина, Истина);
		ПересчитанныеСтрокиВТаблицыДанных(ПараметрыРасчета, КоллекцияНоменклатуры, ВидЦен);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНовыеЦеныПоФормулеДлОперация(ПараметрыРасчета, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	РассчитатьНовыеЦеныПоФормуле(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(ПараметрыРасчета.КоллекцииДанныхФормы, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

#EndRegion

#Region РаботаСТаблицамиЗначений

Процедура ДобавитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник, ТаблицаИсточникСЦеной)
	
	МассивВидовЦен = СоответствиеЦенВМассив(ВыбранныеВидыЦен, Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточник);
	
	Запрос.Текст =
	"Выбрать
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура
	|	,ТаблицаИсточник.Характеристика КАК Характеристика
	|	,ТаблицаИсточник.ЕдиницаИзмерения КАК ЕдиницаИзмеренияШаблон
	|	,ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон
	|	,ТаблицаИсточник.КлючСвязи КАК КлючСвязи
	|Поместить ТаблицаИсточник
	|Из &ТаблицаИсточник КАК ТаблицаИсточник
	|Индексировать По Номенклатура, Характеристика
	|;
	|////////////////////////////////////////////////////////////////
	|Выбрать
	|	ТаблицаИсточник.Номенклатура КАК Номенклатура
	|	,ТаблицаИсточник.Характеристика КАК Характеристика
	|	,ТаблицаИсточник.ЕдиницаИзмеренияШаблон КАК ЕдиницаИзмеренияШаблон
	|	,ТаблицаИсточник.ЦенаНоваяШаблон КАК ЦенаНоваяШаблон
	|	,ТаблицаИсточник.КлючСвязи КАК КлючСвязи
	|	,&ПолеИменаКолонокТекущихЦен
	|	,&ПолеИменаКолонокЕдиницИзмерения
	|	,&ПолеИменаКолонокДельта
	|	,&ПолеИменаКолонокНовыхЦен
	|Из ТаблицаИсточник КАК ТаблицаИсточник";
	
	ШаблонТекстаЗапросаВидЦен =
	"
	|	Левое Соединение РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Актуальность И ВидЦен  = &_ШаблонИмяВидаЦен) КАК _ШаблонИмяТаблицыЗапроса
	|	По ТаблицаИсточник.Номенклатура = _ШаблонИмяТаблицыЗапроса.Номенклатура";
	
	ШаблонТекстаЗапросаВидЦен = ШаблонТекстаЗапросаВидЦен +
		?(ИмяТабличнойЧасти = "ТЧНоменклатура",
			Символы.ПС + "		И _ШаблонИмяТаблицыЗапроса.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)",
			Символы.ПС + "		И ТаблицаИсточник.Характеристика = _ШаблонИмяТаблицыЗапроса.Характеристика");
	
	ПолеИменаКолонокТекущихЦен = "";
	ПолеИменаКолонокЕдиницИзмерения = "";
	ПолеИменаКолонокДельта = "";
	ПолеИменаКолонокНовыхЦен = "";
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		_ШаблонИмяТаблицыЗапроса = ЭлементСоответствия.Ключ.ИдентификаторФормул;
		
		ПолеИменаКолонокТекущихЦен = ПолеИменаКолонокТекущихЦен
			+ ?(ПустаяСтрока(ПолеИменаКолонокТекущихЦен), "", ", ") 
			+ _ШаблонИмяТаблицыЗапроса + ".Цена КАК " + ИмяТабличнойЧасти + _ШаблонИмяТаблицыЗапроса + "_ЦенаДо";
		
		ПолеИменаКолонокЕдиницИзмерения = ПолеИменаКолонокЕдиницИзмерения 
			+ ?(ПустаяСтрока(ПолеИменаКолонокЕдиницИзмерения), "", ", ") 
			+ "Выбор Когда ЕстьNULL(ТаблицаИсточник.ЕдиницаИзмеренияШаблон, 0) <> 0 Тогда ТаблицаИсточник.ЕдиницаИзмеренияШаблон Иначе ЕстьNULL(" + _ШаблонИмяТаблицыЗапроса + ".ЕдиницаИзмерения, ТаблицаИсточник.Номенклатура.ЕдиницаИзмерения) Конец КАК " + ИмяТабличнойЧасти + _ШаблонИмяТаблицыЗапроса + "_ЕдИзм";
		
		ПолеИменаКолонокДельта = ПолеИменаКолонокДельта 
			+ ?(ПустаяСтрока(ПолеИменаКолонокДельта), "", ", ") 
			+ "Выбор Когда ЕстьNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0 Тогда ТаблицаИсточник.ЦенаНоваяШаблон - " + _ШаблонИмяТаблицыЗапроса + ".Цена Иначе 0 Конец КАК " + ИмяТабличнойЧасти + _ШаблонИмяТаблицыЗапроса + "_Дельта";
		
		ПолеИменаКолонокНовыхЦен = ПолеИменаКолонокНовыхЦен
			+ ?(ПустаяСтрока(ПолеИменаКолонокНовыхЦен), "", ", ") 
			+ "Выбор Когда ЕстьNULL(ТаблицаИсточник.ЦенаНоваяШаблон, 0) <> 0 Тогда ТаблицаИсточник.ЦенаНоваяШаблон Иначе " + _ШаблонИмяТаблицыЗапроса + ".Цена Конец КАК " + ИмяТабличнойЧасти + _ШаблонИмяТаблицыЗапроса + "_ЦенаНовая";
			
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса", _ШаблонИмяТаблицыЗапроса);
		ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен", _ШаблонИмяТаблицыЗапроса);
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение;
		Запрос.УстановитьПараметр(_ШаблонИмяТаблицыЗапроса, ЭлементСоответствия.Ключ);
		
		Для каждого ПодчиненныйВидЦен Из ЭлементСоответствия.Значение Цикл
			
			_ШаблонИмяТаблицыЗапроса = ПодчиненныйВидЦен.ИдентификаторФормул;
			
			ПолеИменаКолонокТекущихЦен = ПолеИменаКолонокТекущихЦен + ", "
				+ _ШаблонИмяТаблицыЗапроса + ".Цена КАК " + _ШаблонИмяТаблицыЗапроса + "_ЦенаДо";
			
			ТекстЗапросаЛевоеСоединение = СтрЗаменить(ШаблонТекстаЗапросаВидЦен, "_ШаблонИмяТаблицыЗапроса", _ШаблонИмяТаблицыЗапроса);
			ТекстЗапросаЛевоеСоединение = СтрЗаменить(ТекстЗапросаЛевоеСоединение, "_ШаблонИмяВидаЦен", _ШаблонИмяТаблицыЗапроса);
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаЛевоеСоединение;
			Запрос.УстановитьПараметр(_ШаблонИмяТаблицыЗапроса, ПодчиненныйВидЦен);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокТекущихЦен", ПолеИменаКолонокТекущихЦен);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокЕдиницИзмерения", ПолеИменаКолонокЕдиницИзмерения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокДельта", ПолеИменаКолонокДельта);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеИменаКолонокНовыхЦен", ПолеИменаКолонокНовыхЦен);
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "Упорядочить ПО ТаблицаИсточник.Номенклатура.Наименование, ТаблицаИсточник.Характеристика";
	
	ТаблицаИсточникСЦеной = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура КопироватьДобавлениемСтрокТаблицЗначений(ТаблицаИсточник, ТаблицаПриемник, ПараметрыКопирования) Экспорт
	Перем ИмяТабличнойЧасти, ВыбранныеВидыЦен, ЗаполнитьТекущиеЦены, ИменаКолонокКопирования, ИменаКолонокИсключений, МаксимальныйКлючСвязи, МаксимальныйКлючСвязиПослеДобавления;
	
	Если ТипЗнч(ТаблицаИсточник) = Тип("ТаблицаЗначений")
		И ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаКопирования = ТаблицаИсточник.Скопировать();
		
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязи", МаксимальныйКлючСвязи);
		ПараметрыКопирования.Свойство("МаксимальныйКлючСвязиПослеДобавления", МаксимальныйКлючСвязиПослеДобавления);
		
		ПараметрыКопирования.Свойство("ИменаКолонокКопирования", ИменаКолонокКопирования);
		ПараметрыКопирования.Свойство("ИменаКолонокИсключений", ИменаКолонокИсключений);
		
		ЕстьПолеИндексКартинки = ТаблицаПриемник.Колонки.Найти("ИндексКартинки") <> Неопределено;
		
		ПараметрыКопирования.Свойство("ЗаполнитьТекущиеЦены", ЗаполнитьТекущиеЦены);
		ЗаполнитьТекущиеЦены = ?(ЗаполнитьТекущиеЦены = Неопределено, Ложь, ЗаполнитьТекущиеЦены);
		
		Если ЗаполнитьТекущиеЦены Тогда
			
			ПараметрыКопирования.Свойство("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
			ПараметрыКопирования.Свойство("ВыбранныеВидыЦен", ВыбранныеВидыЦен);
			ДобавитьКолонкиТекущихЦен(ВыбранныеВидыЦен, ИмяТабличнойЧасти, ТаблицаИсточник, ТаблицаКопирования);
			
		КонецЕсли;
		
		Для каждого СтрокаИсточник Из ТаблицаКопирования Цикл
			
			НоваяСтрока = ТаблицаПриемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник, ИменаКолонокКопирования, ИменаКолонокИсключений);
			
			НоваяСтрока.КлючСвязи = МаксимальныйКлючСвязи + СтрокаИсточник.КлючСвязи;
			МаксимальныйКлючСвязиПослеДобавления = МАКС(МаксимальныйКлючСвязиПослеДобавления, МаксимальныйКлючСвязи + СтрокаИсточник.КлючСвязи);
			
			Если ЕстьПолеИндексКартинки Тогда
				
				Если СтрокаИсточник.Номенклатура.ЭтоГруппа Тогда
					
					НоваяСтрока.ИндексКартинки = ?(СтрокаИсточник.Номенклатура.ПометкаУдаления, 13, 12);
					
				Иначе
					
					НоваяСтрока.ИндексКартинки = -1
						+ ?(СтрокаИсточник.Номенклатура.ПометкаУдаления, 1, 0)
						+ ?(СтрокаИсточник.Номенклатура.ИспользоватьХарактеристики = ЛОЖЬ, 1, 3);
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыКопирования.МаксимальныйКлючСвязиПослеДобавления = МаксимальныйКлючСвязиПослеДобавления;
	
КонецПроцедуры

Процедура КопироватьДобавлениемСтрокТаблицЗначенийПакетно(ПараметрыДлОперации, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем ПараметрыКопирования;
	
	ПараметрыДлОперации.Свойство("ПараметрыКопирования", ПараметрыКопирования);
	
	//:::Номенклатура
	ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧНоменклатура";
	ТаблицаНоменклатуры = ПараметрыДлОперации.СтруктураТаблицДанных.ТаблицаНоменклатуры;
	ТаблицаФормыНоменклатуры = ПараметрыДлОперации.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры;
	
	КопироватьДобавлениемСтрокТаблицЗначений(ТаблицаНоменклатуры, ТаблицаФормыНоменклатуры, ПараметрыКопирования);
	
	//:::Характеристики
	ПараметрыКопирования.ИмяТабличнойЧасти = "ТЧХарактеристики";
	ТаблицаХарактеристик = ПараметрыДлОперации.СтруктураТаблицДанных.ТаблицаХарактеристик;
	ТаблицаФормыХарактеристик = ПараметрыДлОперации.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик;
	
	КопироватьДобавлениемСтрокТаблицЗначений(ТаблицаХарактеристик, ТаблицаФормыХарактеристик, ПараметрыКопирования);
	
	СтруктураКоллекцийДанныхФормы = Новый Структура("ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик", ТаблицаФормыНоменклатуры, ТаблицаФормыХарактеристик);
	ПоместитьВоВременноеХранилище(СтруктураКоллекцийДанныхФормы, ФоновоеЗаданиеАдресХранилища);
	
КонецПроцедуры

Функция СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоЗначений)
	
	Результат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
КонецФункции

Функция РазобратьДеревоНоменклатуры(ДеревоНоменклатуры) Экспорт
	
	ТаблицаНоменклатуры = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	ТаблицаХарактеристик = СтруктуруДереваЗначенийВТаблицуЗначений(ДеревоНоменклатуры);
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЕдиницаИзмеренияШаблон") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмеренияШаблон", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаНоменклатуры.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЕдиницаИзмеренияШаблон") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЕдиницаИзмеренияШаблон", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("ЦенаНоваяШаблон") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("ЦенаНоваяШаблон", Новый ОписаниеТипов("Число"));
		
	КонецЕсли;
	
	Если ТаблицаХарактеристик.Колонки.Найти("Характеристика") = Неопределено Тогда
		
		ТаблицаХарактеристик.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	ЛокальныйКлючСвязи = 0;
	Для каждого СтрокаДереваНоменклатура Из ДеревоНоменклатуры.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДереваНоменклатура.Номенклатура) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЛокальныйКлючСвязи = ЛокальныйКлючСвязи + 1;
		
		НоваяСтрокаНоменклатура = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, СтрокаДереваНоменклатура);
		НоваяСтрокаНоменклатура.КлючСвязи = ЛокальныйКлючСвязи;
		
		Для каждого СтрокаДереваХарактеристика Из СтрокаДереваНоменклатура.Строки Цикл
			
			НоваяСтрокаХарактеристика = ТаблицаХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаХарактеристика, СтрокаДереваХарактеристика);
			НоваяСтрокаХарактеристика.КлючСвязи = ЛокальныйКлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаНоменклатуры, ТаблицаХарактеристик", ТаблицаНоменклатуры, ТаблицаХарактеристик);
	
КонецФункции

Функция РазобратьМассивНоменклатуры(МассивНоменклатуры, УстанавливатьХарактеристикамБезЦен) Экспорт
	
	ДеревоНоменклатуры = Новый ДеревоЗначений;
	
	// 1. Получим СКД
	ИмяСхемыКД = "ПоНоменклатуре";
	СхемаКомпоновкиДанных = Обработки.Ценообразование.ПолучитьМакет(ИмяСхемыКД);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		НастройкиКомпоновкиДанных.Структура[0].Структура[0].Использование = Ложь;
		
	КонецЕсли;
	
	// 2.1 установим значения параметров
	ПараметрКД = СхемаКомпоновкиДанных.Параметры.Найти("МассивНоменклатуры");
	ПараметрКД.Значение = МассивНоменклатуры;
	
	// 3. готовим макет 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// 4. исполняем макет 
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоНоменклатуры);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СтруктураТаблицДанных = РазобратьДеревоНоменклатуры(ДеревоНоменклатуры);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблицДанных);
	
	Возврат АдресВременногоХранилища;
	
КонецФункции

#EndRegion

#Region ЗаписьНовыхЦен

Процедура ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	ЗаписыватьНовыеЦеныПоверхУстановленных = ПараметрыКоллекции.ЗаписыватьНовыеЦеныПоверхУстановленных;
	
	ТекстЗапроса =
	"Выбрать
	|	РСЦены.Период КАК Период
	|	,РСЦены.ВидЦен КАК ВидЦен
	|	,РСЦены.Номенклатура КАК Номенклатура
	|	,РСЦены.Характеристика КАК Характеристика
	|	,РСЦены.Цена КАК Цена
	|	,РСЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,РСЦены.Актуальность КАК Актуальность
	|	,РСЦены.Автор КАК Автор
	|Поместить ТекущиеЗаписиРегистраЦен
	|Из РегистрСведений.ЦеныНоменклатуры КАК РСЦены
	|Где РСЦены.Период = &ПериодЗаписи И РСЦены.ВидЦен В(&МассивВидовЦен) И РСЦены.Цена <> 0
	|Индексировать по ВидЦен, Номенклатура, Характеристика
	|;/////////////////////////////////////////////////////////////////////
	|Выбрать
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,КоллекцияНоменклатуры.Цена КАК Цена
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|Поместить КоллекцияНоменклатуры
	|Из &КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|Где КоллекцияНоменклатуры.Цена <> 0
	|Индексировать по ВидЦен, Номенклатура, Характеристика
	|;/////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапросаТекущиеЦены = 
	"
	|// К новым ценам добавить текущие записи из регистра, при этом текущие цены менять нельзя
	|// (1) В таблице с новыми ценами, по совпадающим позициям установим цены из регистра (2) при объединении добавим только записи регистра, которых нет в коллекции
	|Выбрать
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.Цена, КоллекцияНоменклатуры.Цена) КАК Цена
	|	,ЕстьNULL(ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения, КоллекцияНоменклатуры.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|Поместить ТекущиеЗаписиРегистраЦенСНовымиЦенами
	|Из КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|	Левое соединение ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|		По КоллекцияНоменклатуры.ВидЦен = ТекущиеЗаписиРегистраЦен.ВидЦен
	|			И КоллекцияНоменклатуры.Номенклатура = ТекущиеЗаписиРегистраЦен.Номенклатура
	|			И КоллекцияНоменклатуры.Характеристика = ТекущиеЗаписиРегистраЦен.Характеристика;
	|/////////////////////////////////////////////////////////////////////
	|Выбрать * Из ТекущиеЗаписиРегистраЦенСНовымиЦенами Объединить Выбрать * Из ТекущиеЗаписиРегистраЦен";
	
	ТекстЗапросаНовыеЦены = 
	"
	|// К текущим ценам из регистра добавим новые записи из коллекции, а по пересекающимся строкам установим цены из коллекции
	|// (1) В таблице с ценами из регистра, по совпадающим позициям, установим новые цены (2) при объединении добавим только записи коллекции, которых нет в регистре цен
	|Выбрать
	|	ТекущиеЗаписиРегистраЦен.Период КАК Период
	|	,ТекущиеЗаписиРегистраЦен.ВидЦен КАК ВидЦен
	|	,ТекущиеЗаписиРегистраЦен.Номенклатура КАК Номенклатура
	|	,ТекущиеЗаписиРегистраЦен.Характеристика КАК Характеристика
	|	,ЕстьNULL(КоллекцияНоменклатуры.Цена, ТекущиеЗаписиРегистраЦен.Цена) КАК Цена
	|	,ЕстьNULL(КоллекцияНоменклатуры.ЕдиницаИзмерения, ТекущиеЗаписиРегистраЦен.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|	,ТекущиеЗаписиРегистраЦен.Актуальность КАК Актуальность
	|	,ТекущиеЗаписиРегистраЦен.Автор КАК Автор
	|Поместить ТекущиеЗаписиРегистраЦенСНовымиЦенами
	|Из ТекущиеЗаписиРегистраЦен КАК ТекущиеЗаписиРегистраЦен
	|	Левое соединение КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|		По ТекущиеЗаписиРегистраЦен.ВидЦен = КоллекцияНоменклатуры.ВидЦен 
	|			И ТекущиеЗаписиРегистраЦен.Номенклатура = КоллекцияНоменклатуры.Номенклатура 
	|			И ТекущиеЗаписиРегистраЦен.Характеристика = КоллекцияНоменклатуры.Характеристика;
	|/////////////////////////////////////////////////////////////////////
	|Выбрать * Из ТекущиеЗаписиРегистраЦенСНовымиЦенами Объединить Выбрать * Из КоллекцияНоменклатуры";
	
	ТекстЗапроса = ТекстЗапроса + ?(ЗаписыватьНовыеЦеныПоверхУстановленных, ТекстЗапросаНовыеЦены, ТекстЗапросаТекущиеЦены);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	Запрос.УстановитьПараметр("ПериодЗаписи", ПараметрыКоллекции.ПериодЗаписи);
	Запрос.УстановитьПараметр("МассивВидовЦен", МассивВидовЦен);
	
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры)
	
	ТекстЗапроса = 
	"
	|Выбрать 
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,КоллекцияНоменклатуры.Цена КАК Цена
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|	,КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен
	|	,КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|Поместить КоллекцияНоменклатуры
	|Из &КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|Где
	|	КоллекцияНоменклатуры.Характеристика = Значение(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, КатегорияНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.*
	|	,СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристики
	|ИЗ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|	Соединение Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	ПО КоллекцияНоменклатуры.Номенклатура = СпрХарактеристики.Владелец И КоллекцияНоменклатуры.ИспользоватьХарактеристики = Истина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоллекцияНоменклатуры.*
	|	,СпрХарактеристики.Ссылка КАК Характеристика
	|ПОМЕСТИТЬ КатегорияНоменклатурыХарактеристики
	|ИЗ КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|	Соединение Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
	|	По КоллекцияНоменклатуры.КатегорияНоменклатуры = СпрХарактеристики.Владелец И КоллекцияНоменклатуры.ИспользоватьХарактеристики = Истина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|Выбрать 
	|	КоллекцияНоменклатуры.Период КАК Период
	|	,КоллекцияНоменклатуры.ВидЦен КАК ВидЦен
	|	,КоллекцияНоменклатуры.Номенклатура КАК Номенклатура
	|	,КоллекцияНоменклатуры.Характеристика КАК Характеристика
	|	,КоллекцияНоменклатуры.Цена КАК Цена
	|	,КоллекцияНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КоллекцияНоменклатуры.Актуальность КАК Актуальность
	|	,КоллекцияНоменклатуры.Автор КАК Автор
	|	,КоллекцияНоменклатуры.УстанавливатьХарактеристикамБезЦен КАК УстанавливатьХарактеристикамБезЦен
	|	,КоллекцияНоменклатуры.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КоллекцияНоменклатуры.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|Поместить ВсяНоменклатураИХарактеристики
	|Из КоллекцияНоменклатуры КАК КоллекцияНоменклатуры
	|
	|Объединить все
	|
	|ВЫБРАТЬ
	|	НоменклатураХарактеристики.Период КАК Период
	|	,НоменклатураХарактеристики.ВидЦен КАК ВидЦен
	|	,НоменклатураХарактеристики.Номенклатура КАК Номенклатура
	|	,НоменклатураХарактеристики.Характеристика КАК Характеристика
	|	,НоменклатураХарактеристики.Цена КАК Цена
	|	,НоменклатураХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,НоменклатураХарактеристики.Актуальность КАК Актуальность
	|	,НоменклатураХарактеристики.Автор КАК Автор
	|	,Ложь КАК УстанавливатьХарактеристикамБезЦен
	|	,НоменклатураХарактеристики.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,НоменклатураХарактеристики.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|
	|Объединить все
	|
	|ВЫБРАТЬ
	|	КатегорияНоменклатурыХарактеристики.Период КАК Период
	|	,КатегорияНоменклатурыХарактеристики.ВидЦен КАК ВидЦен
	|	,КатегорияНоменклатурыХарактеристики.Номенклатура КАК Номенклатура
	|	,КатегорияНоменклатурыХарактеристики.Характеристика КАК Характеристика
	|	,КатегорияНоменклатурыХарактеристики.Цена КАК Цена
	|	,КатегорияНоменклатурыХарактеристики.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	,КатегорияНоменклатурыХарактеристики.Актуальность КАК Актуальность
	|	,КатегорияНоменклатурыХарактеристики.Автор КАК Автор
	|	,Ложь КАК УстанавливатьХарактеристикамБезЦен
	|	,КатегорияНоменклатурыХарактеристики.КатегорияНоменклатуры КАК КатегорияНоменклатуры
	|	,КатегорияНоменклатурыХарактеристики.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ИЗ КатегорияНоменклатурыХарактеристики КАК КатегорияНоменклатурыХарактеристики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|Выбрать 
	|	ВсяНоменклатураИХарактеристики.*
	|Из ВсяНоменклатураИХарактеристики КАК ВсяНоменклатураИХарактеристики
	|Упорядочить по ВидЦен, Номенклатура, Характеристика";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	КоллекцияНоменклатуры = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции)
	
	Для каждого ВидЦен Из МассивВидовЦен Цикл
		
		Идентификатор 						= ПараметрыКоллекции.ИмяТабличнойЧасти + ВидЦен.ИдентификаторФормул;
		
		НоваяСтрока 						= КоллекцияНоменклатуры.Добавить();
		НоваяСтрока.Период					= ПараметрыКоллекции.ПериодЗаписи;
		НоваяСтрока.ВидЦен					= ВидЦен;
		НоваяСтрока.Номенклатура			= СтрокаДереваДанныхНоменклатура.Номенклатура;
		
		Если ПараметрыКоллекции.ЕстьКолонкаХарактеристика Тогда
			
			НоваяСтрока.Характеристика		= СтрокаДереваДанныхНоменклатура.Характеристика;
			
		КонецЕсли;
		
		НоваяСтрока.Цена					= СтрокаДереваДанныхНоменклатура[Идентификатор + "_ЦенаНовая"];
		НоваяСтрока.ЕдиницаИзмерения		= СтрокаДереваДанныхНоменклатура[Идентификатор + "_ЕдИзм"];
		НоваяСтрока.Актуальность			= Истина;
		НоваяСтрока.Автор					= ПараметрыКоллекции.АвторизированныйПользователь;
		НоваяСтрока.УстанавливатьХарактеристикамБезЦен	= ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен;
		НоваяСтрока.КатегорияНоменклатуры	= СтрокаДереваДанныхНоменклатура.Номенклатура.КатегорияНоменклатуры;
		НоваяСтрока.ИспользоватьХарактеристики = СтрокаДереваДанныхНоменклатура.Номенклатура.ИспользоватьХарактеристики;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКоллекциюНоменклатурыПоДеревуДанных(СтруктураТаблицДанных, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции)
	
	ТаблицаНоменклатуры = СтруктураТаблицДанных.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = СтруктураТаблицДанных.ТаблицаХарактеристик;
	
	КоллекцияНоменклатуры = Новый ТаблицаЗначений;
	КоллекцияНоменклатуры.Колонки.Добавить("Период", 					Новый ОписаниеТипов("Дата"));
	КоллекцияНоменклатуры.Колонки.Добавить("ВидЦен", 					Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	КоллекцияНоменклатуры.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика",			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
	КоллекцияНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения",			Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КоллекцияНоменклатуры.Колонки.Добавить("Актуальность",				Новый ОписаниеТипов("Булево"));
	КоллекцияНоменклатуры.Колонки.Добавить("Автор",						Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	КоллекцияНоменклатуры.Колонки.Добавить("УстанавливатьХарактеристикамБезЦен", Новый ОписаниеТипов("Булево"));
	//::: Дополнительные поля
	КоллекцияНоменклатуры.Колонки.Добавить("КатегорияНоменклатуры",		Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры"));
	КоллекцияНоменклатуры.Колонки.Добавить("ИспользоватьХарактеристики",Новый ОписаниеТипов("Булево"));
	
	ПараметрыКоллекции.Вставить("ЕстьКолонкаХарактеристика", Ложь);
	ПараметрыКоллекции.Вставить("ИмяТабличнойЧасти", "ТЧНоменклатура");
	
	Для каждого СтрокаДереваДанныхНоменклатура Из ТаблицаНоменклатуры Цикл
		
		ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхНоменклатура, ПараметрыКоллекции);
		
	КонецЦикла;
	
	Если ПараметрыКоллекции.ПоказыватьХарактеристики Тогда
		
		ПараметрыКоллекции.Вставить("ИмяТабличнойЧасти", "ТЧХарактеристики");
		ПараметрыКоллекции.Вставить("ЕстьКолонкаХарактеристика", Истина);
		
		Для каждого СтрокаДереваДанныхХарактеристика Из ТаблицаХарактеристик Цикл
			
			Если ЗначениеЗаполнено(СтрокаДереваДанныхХарактеристика.Характеристика) Тогда // Доп. заглушка
				
				ДобавитьСтрокуДанныхВКоллекцию(КоллекцияНоменклатуры, МассивВидовЦен, СтрокаДереваДанныхХарактеристика, ПараметрыКоллекции);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыКоллекции.УстанавливатьХарактеристикамБезЦен Тогда
		
		ДобавитьСтрокиХарактеристикНоменклатуры(КоллекцияНоменклатуры);
		
	КонецЕсли;
	
	ОпределитьЗаписываемыеЦеныКоллекцииНоменклатуры(КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
	
КонецПроцедуры

Процедура ЗаписатьНовыеЦены(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	Перем КоллекцияНоменклатуры;
	
	ПараметрыКоллекции = Новый Структура;
	ПараметрыКоллекции.Вставить("ПериодЗаписи", СтруктураДанных.ПериодЗаписи);
	ПараметрыКоллекции.Вставить("АвторизированныйПользователь", СтруктураДанных.КэшЗначений.АвторизированныйПользователь);
	ПараметрыКоллекции.Вставить("ПоказыватьХарактеристики", СтруктураДанных.ПоказыватьХарактеристики);
	ПараметрыКоллекции.Вставить("УстанавливатьХарактеристикамБезЦен", СтруктураДанных.УстанавливатьХарактеристикамБезЦен);
	ПараметрыКоллекции.Вставить("ЗаписыватьНовыеЦеныПоверхУстановленных", СтруктураДанных.ЗаписыватьНовыеЦеныПоверхУстановленных);
	
	МассивВидовЦен = Новый Массив;
	Для каждого ЭлементСоответствия Из СтруктураДанных.КэшЗначений.ВыбранныеВидыЦен Цикл
		
		Если СтруктураДанных.КэшЗначений.ИсключенныеВидыЦен.Найти(ЭлементСоответствия.Ключ) = Неопределено Тогда
			
			МассивВидовЦен.Добавить(ЭлементСоответствия.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоздатьКоллекциюНоменклатурыПоДеревуДанных(СтруктураДанных.СтруктураТаблицДанных, КоллекцияНоменклатуры, МассивВидовЦен, ПараметрыКоллекции);
	
	СтруктураОтбора = Новый Структура;
	Для каждого ВидЦен Из МассивВидовЦен Цикл
		
		СтруктураОтбора.Вставить("ВидЦен", ВидЦен);
		СтрокиПоВидуЦен = КоллекцияНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		ЗаписиРегистра = КоллекцияНоменклатуры.Скопировать(СтрокиПоВидуЦен);
		
		Если ЗаписиРегистра.Количество() > 0 Тогда
			
			РСЦены = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			РСЦены.Отбор.Период.Установить(ПараметрыКоллекции.ПериодЗаписи, Истина);
			РСЦены.Отбор.ВидЦен.Установить(ВидЦен, Истина);
			РСЦены.Загрузить(ЗаписиРегистра);
			
			РСЦены.Записать(Истина);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#EndRegion

#Область ИнтерфейсПечати

Процедура ДобавитьПолеКД(НаборПолейДанных, Поле, Заголовок, ПутьКДанным)
	
	Если НаборПолейДанных.Найти(ПутьКДанным) = Неопределено Тогда
		
		НовоеПолеКД				= НаборПолейДанных.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеКД.Поле 		= Поле;
		НовоеПолеКД.Заголовок	= Заголовок;
		НовоеПолеКД.ПутьКДанным	= ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолеИтогаКД(ПоляИтогов, Выражение, ПутьКДанным)
	
	Если ПоляИтогов.Найти(ПутьКДанным) = Неопределено Тогда
		
		ПолеРесурса 			= ПоляИтогов.Добавить();
		ПолеРесурса.Выражение	= Выражение;
		ПолеРесурса.ПутьКДанным = ПутьКДанным;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ПутьКДанным, Заголовок, Использование = Истина)
	
	НоваяСтрока					= ТаблицаОписанияПолей.Добавить();
	НоваяСтрока.Поле			= Новый ПолеКомпоновкиДанных(ПутьКДанным);
	НоваяСтрока.Заголовок		= Заголовок;
	НоваяСтрока.Использование	= Использование;
	НоваяСтрока.Родитель		= ВидЦен;
	
КонецПроцедуры

Процедура ДобавитьПоляТекущихЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаДо";
	Заголовок		= Нстр("ru ='Текущая цена'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляОтклоненийЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_Дельта";
	Заголовок		= Нстр("ru ='Дельта'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляНовыхЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЦенаНовая";
	Заголовок		= Нстр("ru ='Новая цена'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляЕдиницИзмерения(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	ОписаниеПоля	= ВидЦен.ИдентификаторФормул + "_ЕдИзм";
	Заголовок		= Нстр("ru ='Единица измерения'");
	
	ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
	ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
	ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
	
КонецПроцедуры

Процедура ДобавитьПоляЗависимыеЦены(ВидЦен, ЗависимыеЦены, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей)
	
	Для каждого ЗависимаяЦена Из ЗависимыеЦены Цикл
		
		ОписаниеПоля	= ЗависимаяЦена.ИдентификаторФормул + "_ЦенаДо";
		Заголовок		= ЗависимаяЦена.Наименование;
		
		ДобавитьПолеКД(НаборПолейДанных, ОписаниеПоля, Заголовок, ОписаниеПоля);
		ДобавитьПолеИтогаКД(ПоляИтогов, ОписаниеПоля, ОписаниеПоля);
		ДобавитьОписаниеВыбранныхПолей(ТаблицаОписанияПолей, ВидЦен, ОписаниеПоля, Заголовок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей)
	
	ВыбранныеВидыЦен	= ПараметрыПечати.ВыбранныеВидыЦен;
	НаборПолейДанных	= СхемаКомпоновкиДанных.НаборыДанных["КоллекцияНоменклатуры"].Поля;
	ПоляИтогов			= СхемаКомпоновкиДанных.ПоляИтога;
	
	Для каждого ЭлементСоответствия Из ВыбранныеВидыЦен Цикл
		
		ВидЦен = ЭлементСоответствия.Ключ;
		Если ПараметрыПечати.ПоказыватьДействующуюЦену Тогда
			
			ДобавитьПоляТекущихЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ПоказыватьОтклонениеЦен Тогда
			
			ДобавитьПоляОтклоненийЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		// Выводим всегда
		ДобавитьПоляНовыхЦен(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
		
		Если ПараметрыПечати.ПоказыватьЕдиницыИзмерения Тогда
			
			ДобавитьПоляЕдиницИзмерения(ВидЦен, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ПоказыватьЗависимыеЦены Тогда
			
			Если ЭлементСоответствия.Значение.Количество() > 0 Тогда
				
				ДобавитьПоляЗависимыеЦены(ВидЦен, ЭлементСоответствия.Значение, НаборПолейДанных, ПоляИтогов, ТаблицаОписанияПолей);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД)
	
	Для каждого ЭлементНастройкиКД Из СтруктураКД Цикл
		
		Если ЭлементНастройкиКД.Имя = "Подпись" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекущийРодитель 			= Неопределено;
		КоллекцияВыбранныхПолейКД	= ЭлементНастройкиКД.Выбор.Элементы;
		Для каждого СтрокаТаблицы Из ТаблицаОписанияПолей Цикл
			
			Если ТекущийРодитель <> СтрокаТаблицы.Родитель Тогда
				
				ТекущийРодитель					= СтрокаТаблицы.Родитель;
				
				ГруппаВыбранныхПолей			= КоллекцияВыбранныхПолейКД.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаВыбранныхПолей.Заголовок	= ТекущийРодитель.Наименование;
				
			КонецЕсли;
			
			ВыбранноеПоле 			= ГруппаВыбранныхПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ВыбранноеПоле, СтрокаТаблицы);
			
		КонецЦикла;
		
		Если ЭлементНастройкиКД.Структура.Количество() > 0 Тогда
			
			ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, ЭлементНастройкиКД.Структура)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьЕдиныйНаборДанных(ПараметрыПечати)
	
	КоллекцияНоменклатуры = ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыНоменклатуры.Скопировать();
	КоллекцияНоменклатуры.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Для каждого КолонкаТаблицы Из КоллекцияНоменклатуры.Колонки Цикл
		
		КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧНоменклатура", "");
		
	КонецЦикла;
	
	Если ПараметрыПечати.ПоказыватьХарактеристики Тогда
		
		Для каждого КолонкаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик.Колонки Цикл
			
			КолонкаТаблицы.Имя = СтрЗаменить(КолонкаТаблицы.Имя, "ТЧХарактеристики", "");
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из ПараметрыПечати.КоллекцииДанныхФормы.ТаблицаФормыХарактеристик Цикл
			
			ЗаполнитьЗначенияСвойств(КоллекцияНоменклатуры.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоллекцияНоменклатуры;
	
КонецФункции

Функция СформироватьТабличныйДокументПоДеревуДанных(ПараметрыПечати) Экспорт
	
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	
	КоллекцияНоменклатуры = СоздатьЕдиныйНаборДанных(ПараметрыПечати);
	
	// 1. Получим СКД
	СхемаКомпоновкиДанных = Обработки.Ценообразование.ПолучитьМакет("ПечатьТабличнойЧасти");
	
	ТаблицаОписанияПолей = Новый ТаблицаЗначений;
	ТаблицаОписанияПолей.Колонки.Добавить("Поле");
	ТаблицаОписанияПолей.Колонки.Добавить("Заголовок");
	ТаблицаОписанияПолей.Колонки.Добавить("Использование");
	ТаблицаОписанияПолей.Колонки.Добавить("Родитель"); // Содержит вид цен (ссылка)
	
	ДобавитьПоляСКД(СхемаКомпоновкиДанных, ПараметрыПечати, ТаблицаОписанияПолей);
	
	// 2. создаем настройки для схемы 
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	СтруктураКД						= НастройкиКомпоновкиДанных.Структура;
	ДобавитьВыбранныеЭлементыКД(ТаблицаОписанияПолей, СтруктураКД);
	
	// 3. готовим макет 
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	// 4. исполняем макет 
	ВнешниеНаборыДанных = Новый Структура("КоллекцияНоменклатуры", КоллекцияНоменклатуры);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	ПроцессорКомпоновки.Сбросить();
	
	// 5. выводим результат 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// 6. Запишем СКД и данные расшифровки
	//АдресХранилищаСКД 				= ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	//АдресХранилищаДанныеРасшифровки	= ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#КонецЕсли