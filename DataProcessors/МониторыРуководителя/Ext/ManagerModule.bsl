#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ФормированиеДанных

// Процедура производит расчет данных необходимых в мониторе руководителя.
// Вызывается в фоновом задании из формы монитора руководителя.
//
// Параметры:
//  Параметры					 - Структура - Параметры используемые для расчета, обязательные ключи:
//										* Организация - отбор по организации, если не заполнен - то по всем организациям,
//										* ДатаРасчета - день расчета,
//										* НастройкиВиджетов - используемые настройки виджетов.
//  ВременноеХранилищеРезультата - Строка	 - Возвращаемый в родительский сеанс параметр. Содержит соответствие виджетов и структур подготовленных данных.
//
Процедура ПолучитьДанныеМонитора(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Результат = Новый Соответствие;
	
	Организация = Параметры.Организация;
	ДатаРасчета = Параметры.ДатаРасчета;
	НастройкиВиджетов = Параметры.НастройкиВиджетов;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из НастройкиВиджетов Цикл
		
		Если КлючИЗначение.Ключ = Перечисления.ВиджетыМонитораРуководителя.Продажи Тогда
			Данные = ПолучитьДанныеПродаж(Организация, ДатаРасчета, КлючИЗначение.Значение);
		ИначеЕсли КлючИЗначение.Ключ = Перечисления.ВиджетыМонитораРуководителя.Деньги Тогда
			Данные = ПолучитьДанныеДенежныхСредств(Организация, ДатаРасчета, КлючИЗначение.Значение);
		ИначеЕсли КлючИЗначение.Ключ = Перечисления.ВиджетыМонитораРуководителя.Долги Тогда
			Данные = ПолучитьДанныеДолгов(Организация, ДатаРасчета, КлючИЗначение.Значение);
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, Данные);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
	
КонецПроцедуры

// Функция формирует данные для виджета "Продажи".
//
Функция ПолучитьДанныеПродаж(Организация, ДатаРасчета, НастройкаВиджета)
	
	Результат = Новый Структура;
	
	ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ДатаРасчета, НастройкаВиджета.Период);
	ДатаОкончания = КонецДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВалютаУчета.Значение КАК ВалютаУчета,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаУчета.Значение) КАК ПредставлениеВалютыУчета,
		|	ЕСТЬNULL(ПродажиОбороты.СуммаОборот, 0) КАК Выручка,
		|	ЕСТЬNULL(ДоходыИРасходыОбороты.СуммаДоходовОборот, 0) - ЕСТЬNULL(ДоходыИРасходыОбороты.СуммаРасходовОборот, 0) КАК Прибыль
		|ИЗ
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК ПродажиОбороты
		|		ПО (ИСТИНА)
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоходыИРасходы.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК ДоходыИРасходыОбороты
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.Период КАК Период,
		|	ПродажиОбороты.СуммаОборот КАК Выручка,
		|	ПродажиОбороты.СебестоимостьОборот КАК Себестоимость,
		|	ПродажиОбороты.СуммаОборот - ПродажиОбороты.СебестоимостьОборот КАК ВаловаяПрибыль
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, День, Организация = &Организация) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Выручка),
		|	СУММА(Себестоимость),
		|	СУММА(ВаловаяПрибыль)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПродажиОбороты.Номенклатура
		|ПОМЕСТИТЬ втПродажиНоменклатурыПервые
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.СуммаОборот УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.Период КАК Период,
		|	ПродажиОбороты.Номенклатура КАК Номенклатура,
		|	ПродажиОбороты.СуммаОборот КАК Выручка,
		|	ПРЕДСТАВЛЕНИЕ(ПродажиОбороты.Номенклатура) КАК ПредставлениеНоменклатуры
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			Организация = &Организация
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						ПродажиНоменклатурыПервые.Номенклатура
		|					ИЗ
		|						втПродажиНоменклатурыПервые КАК ПродажиНоменклатурыПервые)) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Выручка УБЫВ
		|ИТОГИ
		|	СУММА(Выручка)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПродажиОбороты.Ответственный
		|ПОМЕСТИТЬ втПродажиОтветственныеПервые
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.СуммаОборот УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.Период КАК Период,
		|	ПродажиОбороты.Ответственный КАК Менеджер,
		|	ПродажиОбороты.СуммаОборот КАК Выручка,
		|	ПРЕДСТАВЛЕНИЕ(ПродажиОбороты.Ответственный) КАК ПредставлениеМенеджера
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			Организация = &Организация
		|				И Ответственный В
		|					(ВЫБРАТЬ
		|						ПродажиОтветственныеПервые.Ответственный
		|					ИЗ
		|						втПродажиОтветственныеПервые КАК ПродажиОтветственныеПервые)) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Выручка УБЫВ
		|ИТОГИ
		|	СУММА(Выручка)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыИРасходыОбороты.Период КАК Период,
		|	ДоходыИРасходыОбороты.СуммаДоходовОборот КАК Доходы,
		|	ДоходыИРасходыОбороты.СуммаРасходовОборот КАК Расходы,
		|	ДоходыИРасходыОбороты.СуммаДоходовОборот - ДоходыИРасходыОбороты.СуммаРасходовОборот КАК Прибыль
		|ИЗ
		|	РегистрНакопления.ДоходыИРасходы.Обороты(&ДатаНачала, &ДатаОкончания, День, Организация = &Организация) КАК ДоходыИРасходыОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Доходы),
		|	СУММА(Расходы),
		|	СУММА(Прибыль)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)";
	
	Периодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаВиджета.Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "День", Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Периодичность);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПродажиОбороты.Номенклатура",
		"ВЫБРАТЬ ПЕРВЫЕ " + НастройкаВиджета.ПервыеТовары + "
		|	ПродажиОбороты.Номенклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ВЫБРАТЬ ПЕРВЫЕ 5
		|	ПродажиОбороты.Ответственный",
		"ВЫБРАТЬ ПЕРВЫЕ " + НастройкаВиджета.ПервыеМенеджеры + "
		|	ПродажиОбороты.Ответственный");
	
	Если НастройкаВиджета.РасчетПрибыли = "ПоОплате" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоходыИРасходы", "ДоходыИРасходыКассовыйМетод");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Номенклатура", "Номенклатура");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Ответственный", "Ответственный");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("ДанныеШапки",				МассивРезультатов[0]);
	Результат.Вставить("ДиаграммаПродажи",			МассивРезультатов[1]);
	Результат.Вставить("ДиаграммаРейтингТоваров",	МассивРезультатов[3]);
	Результат.Вставить("ДиаграммаРейтингМенеджеров",МассивРезультатов[5]);
	Результат.Вставить("ДиаграммаПрибыль",			МассивРезультатов[6]);
	
	Расшифровки = ПолучитьРасшифровкиПродаж(Организация, ДатаНачала, ДатаОкончания, НастройкаВиджета);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, Расшифровки, Истина);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует данные для виджета "Деньги".
//
Функция ПолучитьДанныеДенежныхСредств(Организация, ДатаРасчета, НастройкаВиджета)
	
	Результат = Новый Структура;
	
	ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ДатаРасчета, НастройкаВиджета.Период);
	ДатаОкончания = КонецДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваОстаткиВсего.СуммаОстаток, 0) КАК ОстатокДенег,
		|	ЕСТЬNULL(ДенежныеСредстваОстаткиНаличные.СуммаОстаток, 0) КАК Наличные,
		|	ЕСТЬNULL(ДенежныеСредстваОстаткиБезналичные.СуммаОстаток, 0) КАК Безналичные,
		|	ЕСТЬNULL(ДенежныеСредстваОбороты.СуммаОборот, 0) КАК ДенежныйПоток,
		|	ВалютаУчета.Значение КАК ВалютаУчета,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаУчета.Значение) КАК ПредставлениеВалютыУчета
		|ИЗ
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК ДенежныеСредстваОбороты
		|		ПО (ИСТИНА)
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(
		|				&ДатаОкончания,
		|				Организация = &Организация
		|					И ТипДенежныхСредств = &Наличные) КАК ДенежныеСредстваОстаткиНаличные
		|		ПО (ИСТИНА)
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(
		|				&ДатаОкончания,
		|				Организация = &Организация
		|					И ТипДенежныхСредств = &Безналичные) КАК ДенежныеСредстваОстаткиБезналичные
		|		ПО (ИСТИНА)
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки(&ДатаОкончания, Организация = &Организация) КАК ДенежныеСредстваОстаткиВсего
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДСОстаткиИОбороты.Период КАК Период,
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток КАК ОстатокДенег
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(&ДатаНачала, &ДатаОкончания, День, ДвиженияИГраницыПериода, Организация = &Организация) КАК ДСОстаткиИОбороты
		|ГДЕ
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ОстатокДенег)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДСОстаткиИОбороты.Период КАК Период,
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток КАК Наличные
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипДенежныхСредств = &Наличные) КАК ДСОстаткиИОбороты
		|ГДЕ
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Наличные)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДСОстаткиИОбороты.Период КАК Период,
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток КАК Безналичные
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипДенежныхСредств = &Безналичные) КАК ДСОстаткиИОбороты
		|ГДЕ
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Безналичные)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДенежныеСредстваОбороты.Период КАК Период,
		|	ДенежныеСредстваОбороты.СуммаОборот КАК ДенежныйПоток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.Обороты(&ДатаНачала, &ДатаОкончания, День, Организация = &Организация) КАК ДенежныеСредстваОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ДенежныйПоток)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)";
	
	Периодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаВиджета.Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "День", Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Периодичность);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТипДенежныхСредств", "ТипДенежныхСредств");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Наличные", Перечисления.ТипыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Безналичные", Перечисления.ТипыДенежныхСредств.Безналичные);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("ДанныеШапки",				МассивРезультатов[0]);
	Результат.Вставить("ДиаграммаОстатокДенег",		МассивРезультатов[1]);
	Результат.Вставить("ДиаграммаНаличные",			МассивРезультатов[2]);
	Результат.Вставить("ДиаграммаБезналичные",		МассивРезультатов[3]);
	Результат.Вставить("ДиаграммаДенежныйПоток",	МассивРезультатов[4]);
	
	Расшифровки = ПолучитьРасшифровкиДС(Организация, ДатаНачала, ДатаОкончания);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, Расшифровки, Истина);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует данные для виджета "Долги".
//
Функция ПолучитьДанныеДолгов(Организация, ДатаРасчета, НастройкаВиджета)
	
	Результат = Новый Структура;
	
	ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ДатаРасчета, НастройкаВиджета.Период);
	ДатаОкончания = КонецДня(ДатаРасчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК ДолгПокупателей,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК ДолгПоставщикам,
		|	ВалютаУчета.Значение КАК ВалютаУчета,
		|	ПРЕДСТАВЛЕНИЕ(ВалютаУчета.Значение) КАК ПредставлениеВалютыУчета
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ДатаОкончания,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПокупателямиОстатки,
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			&ДатаОкончания,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПоставщикамиОстатки,
		|	Константа.ВалютаУчета КАК ВалютаУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Контрагент КАК Покупатель,
		|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК ДолгПокупателя,
		|	ПРЕДСТАВЛЕНИЕ(РасчетыСПокупателямиОстатки.Контрагент) КАК ПредставлениеПокупателя
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ДатаОкончания,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПокупателямиОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДолгПокупателя УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстаткиИОбороты.Период КАК Период,
		|	РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток КАК ДолгПокупателей
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПокупателямиОстаткиИОбороты
		|ГДЕ
		|	РасчетыСПокупателямиОстаткиИОбороты.СуммаКонечныйОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ДолгПокупателей)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Контрагент КАК Поставщик,
		|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК ДолгПоставщику,
		|	ПРЕДСТАВЛЕНИЕ(РасчетыСПоставщикамиОстатки.Контрагент) КАК ПредставлениеПоставщика
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			&ДатаОкончания,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПоставщикамиОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДолгПоставщику УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
		|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК ДолгПоставщикам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипРасчетов = &Долг) КАК РасчетыСПоставщикамиОстаткиИОбороты
		|ГДЕ
		|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(ДолгПоставщикам)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаНачала, &ДатаОкончания)";
	
	Периодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаВиджета.Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "День", Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Периодичность);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТипРасчетов", "ТипРасчетов");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Долг", Перечисления.ТипыРасчетов.Долг);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат.Вставить("ДанныеШапки",							МассивРезультатов[0]);
	Результат.Вставить("ДиаграммаСоотношениеДолговПокупателей",	МассивРезультатов[1]);
	Результат.Вставить("ДиаграммаДолгПокупателей",				МассивРезультатов[2]);
	Результат.Вставить("ДиаграммаСоотношениеДолговПоставщикам",	МассивРезультатов[3]);
	Результат.Вставить("ДиаграммаДолгПоставщикам",				МассивРезультатов[4]);
	
	Расшифровки = ПолучитьРасшифровкиДолгов(Организация, ДатаНачала, ДатаОкончания, НастройкаВиджета);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, Расшифровки, Истина);
	
	Возврат Результат;
	
КонецФункции

// Функция формирует подробные табличные документы вместе с данными для расшифровки.
//
Функция ПолучитьРасшифровкиПродаж(Организация, ДатаНачала, ДатаОкончания, НастройкаВиджета)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("РасшифровкаПродажи");
	
	УстанавливаемыеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		УстанавливаемыеПараметры.Вставить("Организация", Организация);
	КонецЕсли;
	УстанавливаемыеПараметры.Вставить("НачалоПериода", ДатаНачала);
	УстанавливаемыеПараметры.Вставить("КонецПериода", ДатаОкончания);
	УстанавливаемыеПараметры.Вставить("Периодичность", НастройкаВиджета.Периодичность);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	#Область Продажи
	
	РасшифровкаПродажи = Новый Структура;
	РасшифровкаПродажи.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаПродажи.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиОстатки = СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОстатки);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаПродажи.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаПродажи.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаПродажи.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область РейтингТоваров
	
	РасшифровкаРейтингТоваров = Новый Структура;
	РасшифровкаРейтингТоваров.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаРейтингТоваров.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиОстатки = СхемаКомпоновкиДанных.ВариантыНастроек[1].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОстатки);
	УстанавливаемыеПараметры.Вставить("КоличествоЗаписей", НастройкаВиджета.ПервыеТовары);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаРейтингТоваров.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаРейтингТоваров.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаРейтингТоваров.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область РейтингМенеджеров
	
	РасшифровкаРейтингМенеджеров = Новый Структура;
	РасшифровкаРейтингМенеджеров.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаРейтингМенеджеров.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиОстатки = СхемаКомпоновкиДанных.ВариантыНастроек[2].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОстатки);
	УстанавливаемыеПараметры.Вставить("КоличествоЗаписей", НастройкаВиджета.ПервыеМенеджеры);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаРейтингМенеджеров.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаРейтингМенеджеров.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаРейтингМенеджеров.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область Прибыль
	
	РасшифровкаПрибыль = Новый Структура;
	РасшифровкаПрибыль.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаПрибыль.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиОстатки = СхемаКомпоновкиДанных.ВариантыНастроек[3].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОстатки);
	ИндексНабора = ?(НастройкаВиджета.РасчетПрибыли = "ПоОтгрузке", 0, 1);
	УстанавливаемыеПараметры.Удалить("КоличествоЗаписей");
	УстанавливаемыеПараметры.Вставить("ИндексНабора", ИндексНабора);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаПрибыль.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаПрибыль.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаПрибыль.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаПродажи.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаРейтингТоваров.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаРейтингМенеджеров.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаПрибыль.ТабДок);
	
	Расшифровки = Новый Структура;
	Расшифровки.Вставить("РасшифровкаПродажи",	РасшифровкаПродажи);
	Расшифровки.Вставить("РасшифровкаРейтингТоваров",	РасшифровкаРейтингТоваров);
	Расшифровки.Вставить("РасшифровкаРейтингМенеджеров",	РасшифровкаРейтингМенеджеров);
	Расшифровки.Вставить("РасшифровкаПрибыль",	РасшифровкаПрибыль);
	
	Возврат Расшифровки;
	
КонецФункции

// Функция формирует подробные табличные документы вместе с данными для расшифровки.
//
Функция ПолучитьРасшифровкиДС(Организация, ДатаНачала, ДатаОкончания)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("РасшифровкаДенежныеСредства");
	
	УстанавливаемыеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		УстанавливаемыеПараметры.Вставить("Организация", Организация);
	КонецЕсли;
	УстанавливаемыеПараметры.Вставить("НачалоПериода", ДатаНачала);
	УстанавливаемыеПараметры.Вставить("КонецПериода", ДатаОкончания);
	УстанавливаемыеПараметры.Вставить("ВалютаУчета", Константы.ВалютаУчета.Получить());
	УстанавливаемыеПараметры.Вставить("УчетВалютныхОпераций", ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций"));
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	#Область Остатки
	
	РасшифровкаОстатокДенег = Новый Структура;
	РасшифровкаОстатокДенег.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаОстатокДенег.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиОстатки = СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОстатки);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаОстатокДенег.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаОстатокДенег.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаОстатокДенег.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область Наличные
	
	РасшифровкаНаличные = Новый Структура;
	РасшифровкаНаличные.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаНаличные.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиНаличные = СхемаКомпоновкиДанных.ВариантыНастроек[1].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиНаличные);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаНаличные.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаНаличные.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаНаличные.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область Безналичные
	
	РасшифровкаБезналичные = Новый Структура;
	РасшифровкаБезналичные.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаБезналичные.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиБезналичные = СхемаКомпоновкиДанных.ВариантыНастроек[2].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиБезналичные);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаБезналичные.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаБезналичные.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаБезналичные.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область ДенежныйПоток
	
	РасшифровкаДенежныйПоток = Новый Структура;
	РасшифровкаДенежныйПоток.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаДенежныйПоток.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиДенежныйПоток = СхемаКомпоновкиДанных.ВариантыНастроек[3].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиДенежныйПоток);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаДенежныйПоток.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаДенежныйПоток.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаДенежныйПоток.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаОстатокДенег.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаНаличные.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаБезналичные.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаДенежныйПоток.ТабДок);
	
	Расшифровки = Новый Структура;
	Расшифровки.Вставить("РасшифровкаОстатокДенег",	РасшифровкаОстатокДенег);
	Расшифровки.Вставить("РасшифровкаНаличные",		РасшифровкаНаличные);
	Расшифровки.Вставить("РасшифровкаБезналичные", 	РасшифровкаБезналичные);
	Расшифровки.Вставить("РасшифровкаДенежныйПоток",РасшифровкаДенежныйПоток);
	
	Возврат Расшифровки;
	
КонецФункции

// Функция формирует подробные табличные документы вместе с данными для расшифровки.
//
Функция ПолучитьРасшифровкиДолгов(Организация, ДатаНачала, ДатаОкончания, НастройкаВиджета)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("РасшифровкаВзаиморасчеты");
	
	УстанавливаемыеПараметры = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		УстанавливаемыеПараметры.Вставить("Организация", Организация);
	КонецЕсли;
	УстанавливаемыеПараметры.Вставить("Период", ДатаОкончания);
	УстанавливаемыеПараметры.Вставить("КоличествоЗаписей", НастройкаВиджета.ПодробноПервые);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	#Область Покупатели
	
	РасшифровкаДолгПокупателей = Новый Структура;
	РасшифровкаДолгПокупателей.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаДолгПокупателей.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиПокупатели = СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПокупатели);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры, НастройкаВиджета.ПоляРасшифровки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаДолгПокупателей.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаДолгПокупателей.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаДолгПокупателей.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	#Область Поставщики
	
	РасшифровкаДолгПоставщикам = Новый Структура;
	РасшифровкаДолгПоставщикам.Вставить("ТабДок", Новый ТабличныйДокумент);
	РасшифровкаДолгПоставщикам.Вставить("ДанныеРасшифровки", Новый ДанныеРасшифровкиКомпоновкиДанных);
	НастройкиПоставщики = СхемаКомпоновкиДанных.ВариантыНастроек[1].Настройки;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиПоставщики);
	УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры, НастройкаВиджета.ПоляРасшифровки);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), РасшифровкаДолгПоставщикам.ДанныеРасшифровки);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , РасшифровкаДолгПоставщикам.ДанныеРасшифровки);
	
	ПроцессорВывода.УстановитьДокумент(РасшифровкаДолгПоставщикам.ТабДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Ложь);
	
	#КонецОбласти
	
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаДолгПокупателей.ТабДок);
	ОбработатьТабличныйДокументРасшифровки(РасшифровкаДолгПоставщикам.ТабДок);
	
	Расшифровки = Новый Структура;
	Расшифровки.Вставить("РасшифровкаДолгПокупателей",	РасшифровкаДолгПокупателей);
	Расшифровки.Вставить("РасшифровкаДолгПоставщикам",	РасшифровкаДолгПоставщикам);
	
	Возврат Расшифровки;
	
КонецФункции

#КонецОбласти

#Область НастройкиВиджетов

// Функция получает текущий пользовательский состав и порядок виджетов. Если нет сохраненных настроек, возвращает настройки по умолчанию.
// 
// Возвращаемое значение:
//  СписокЗначений - список виджетов.
//
Функция СоставВиджетовТекущий() Экспорт
	
	СоставВиджетов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляМонитора", "СоставВиджетов");
	
	Если СоставВиджетов = Неопределено Тогда
		СоставВиджетов = СоставВиджетовПоУмолчанию();
	КонецЕсли;
	
	Возврат СоставВиджетов;
	
КонецФункции

// Функция получает текущие настройки включенных у пользователя виджетов.
// 
// Возвращаемое значение:
//  Соответствие - соответствие виджетов и настроек.
//
Функция ТекущиеНастройкиВиджетов() Экспорт
	
	НастройкиВиджетов = Новый Соответствие;
	
	ИспользуемыеВиджеты = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СоставВиджетовТекущий());
	Для Каждого Виджет Из ИспользуемыеВиджеты Цикл
		НастройкиВиджетов.Вставить(Виджет, НастройкаВиджетаТекущая(Виджет));
	КонецЦикла;
	
	Возврат НастройкиВиджетов;
	
КонецФункции

// Функция получает текущую пользовательскую настройку виджета. Если нет сохраненных настроек, возвращает настройки по умолчанию.
//
// Параметры:
//  Виджет	 - ПеречислениеСсылка.ВиджетыМонитораРуководителя	 - виджет для которого получаются настройки.
// 
// Возвращаемое значение:
//  Структура - настройки.
//
Функция НастройкаВиджетаТекущая(Виджет) Экспорт
	
	НастройкаВиджета = НастройкаВиджетаПоУмолчанию(Виджет);
	СохраненнаяНастройка = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляМонитора", ОбщегоНазначения.ИмяЗначенияПеречисления(Виджет));
	
	// Не восстанавливаем пользовательские настройки, связанные с отключенными функциональными опциями
	ИсключаяСвойства = "";
	Если НастройкаВиджета.Свойство("РасчетПрибыли") И НЕ ПолучитьФункциональнуюОпцию("КассовыйМетодУчетаДоходовИРасходов") Тогда
		ИсключаяСвойства = ИсключаяСвойства + "РасчетПрибыли";
	КонецЕсли;
	
	Если СохраненнаяНастройка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкаВиджета, СохраненнаяНастройка, , ИсключаяСвойства);
	КонецЕсли;
	
	Возврат НастройкаВиджета;
	
КонецФункции

// Функция определяет порядок и использование виджетов по умолчанию.
// 
// Возвращаемое значение:
//  СписокЗначений - список виджетов.
//
Функция СоставВиджетовПоУмолчанию() Экспорт
	
	СоставВиджетов = Новый СписокЗначений;
	СоставВиджетов.Добавить(Перечисления.ВиджетыМонитораРуководителя.Продажи, ,Истина);
	СоставВиджетов.Добавить(Перечисления.ВиджетыМонитораРуководителя.Деньги, ,Истина);
	СоставВиджетов.Добавить(Перечисления.ВиджетыМонитораРуководителя.Долги, ,Истина);
	
	Возврат СоставВиджетов;
	
КонецФункции

// Функция определяет настройки существующих виджетов по умолчанию.
//
// Параметры:
//  Виджет	 - ПеречислениеСсылка.ВиджетыМонитораРуководителя	 - виджет для которого получаются настройки.
// 
// Возвращаемое значение:
//  Структура - настройки.
//
Функция НастройкаВиджетаПоУмолчанию(Виджет) Экспорт
	
	НастройкаВиджета = Новый Структура;
	
	Если Виджет = Перечисления.ВиджетыМонитораРуководителя.Продажи Тогда
		
		НастройкаВиджета.Вставить("Период", Перечисления.ВидыПериодовМонитораРуководителя.ПоследнийМесяц);
		НастройкаВиджета.Вставить("Периодичность", Перечисления.Периодичность.День);
		НастройкаВиджета.Вставить("ТипДиаграммы", Перечисления.ТипыДиаграмм.ГистограммаСНакоплением);
		НастройкаВиджета.Вставить("ПервыеТовары", 5);
		НастройкаВиджета.Вставить("ПервыеМенеджеры", 5);
		НастройкаВиджета.Вставить("РасчетПрибыли", "ПоОтгрузке");
		
	ИначеЕсли Виджет = Перечисления.ВиджетыМонитораРуководителя.Деньги Тогда
		
		НастройкаВиджета.Вставить("Период", Перечисления.ВидыПериодовМонитораРуководителя.ПоследнийМесяц);
		НастройкаВиджета.Вставить("Периодичность", Перечисления.Периодичность.День);
		НастройкаВиджета.Вставить("ТипДиаграммы", Перечисления.ТипыДиаграмм.График);
		НастройкаВиджета.Вставить("НачалоОтсчета", "От минимального значения");
		
	ИначеЕсли Виджет = Перечисления.ВиджетыМонитораРуководителя.Долги Тогда
		
		НастройкаВиджета.Вставить("Период", Перечисления.ВидыПериодовМонитораРуководителя.ПоследнийМесяц);
		НастройкаВиджета.Вставить("Периодичность", Перечисления.Периодичность.День);
		НастройкаВиджета.Вставить("ТипДиаграммы", Перечисления.ТипыДиаграмм.График);
		НастройкаВиджета.Вставить("НачалоОтсчета", "От минимального значения");
		НастройкаВиджета.Вставить("ПодробноПервые", 20);
		
		ПоляРасшифровки = Новый СписокЗначений;
		ПоляРасшифровки.Добавить("СуммаДолг", "Долг", Истина);
		ПоляРасшифровки.Добавить("СуммаАванс", "Аванс", Истина);
		ПоляРасшифровки.Добавить("СуммаПросрочено", "Просроченный долг", Истина);
		ПоляРасшифровки.Добавить("СрокПросрочки", "Просрочено (дней)", Истина);
		ПоляРасшифровки.Добавить("ДолгПоСрокам", "Долг по срокам (дней)", Истина);
		
		НастройкаВиджета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
	КонецЕсли;
	
	Возврат НастройкаВиджета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура устанавливает отборы, параметры и выбранные поля компоновки данных.
//
Процедура УстановитьПараметрыНастроек(КомпоновщикНастроек, УстанавливаемыеПараметры, ВыбранныеПоля = Неопределено)
	
	Для Каждого КлючИЗначение Из УстанавливаемыеПараметры Цикл
		НайденныйПараметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ));
		Если НайденныйПараметр <> Неопределено Тогда
			НайденныйПараметр.Значение = КлючИЗначение.Значение;
			НайденныйПараметр.Использование = Истина;
		Иначе
			НайденныеОтборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, КлючИЗначение.Ключ);
			Для Каждого НайденныйОтбор Из НайденныеОтборы Цикл
				Если ТипЗнч(НайденныйОтбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				НайденныйОтбор.Использование = Истина;
				НайденныйОтбор.ПравоеЗначение = КлючИЗначение.Значение;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если УстанавливаемыеПараметры.Свойство("Периодичность") Тогда
		ИмяПоляКомпоновки = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(УстанавливаемыеПараметры.Периодичность);
		Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И ЭлементСтруктуры.Имя = "ДинамическийПериод" Тогда
				ЭлементСтруктуры.ПоляГруппировки.Элементы.Очистить();
				ПолеГруппировки = ЭлементСтруктуры.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновки);
				ПолеГруппировки.Использование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") И ЭлементСтруктуры.Имя = "ГруппировкаЛегенда" Тогда
			
			Если УстанавливаемыеПараметры.Свойство("КоличествоЗаписей") Тогда
				ЭлементСтруктуры.ПараметрыВывода.УстановитьЗначениеПараметра("КоличествоЗаписей", УстанавливаемыеПараметры.КоличествоЗаписей);
			КонецЕсли;
			
			ЦветаЛегенды = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
			Для Индекс = 0 По ЭлементСтруктуры.УсловноеОформление.Элементы.Количество()-1 Цикл
				ЭлементУО = ЭлементСтруктуры.УсловноеОформление.Элементы[Индекс];
				ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаЛегенды[Индекс]);
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбранныеПоля <> Неопределено Тогда
		Для Каждого ВыбранноеПоле из ВыбранныеПоля Цикл
			ПолеКД = Новый ПолеКомпоновкиДанных(ВыбранноеПоле.Значение);
			Для Каждого ЭлементВыбора Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
				Если (ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") И ЭлементВыбора.Поле = ПолеКД)
				Или (ТипЗнч(ЭлементВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") И ЭлементВыбора.Заголовок = ВыбранноеПоле.Представление) Тогда
					ЭлементВыбора.Использование = ВыбранноеПоле.Пометка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет дополнительные действия постобработки табличного документа сформированного СКД.
//
Процедура ОбработатьТабличныйДокументРасшифровки(ТабДок)
	
	// Вставим пустые области в начало таблиц для отображения левой и верхней границ рамки на форме монитора
	ТД = Новый ТабличныйДокумент;
	ПустаяСтрока = ТД.Область(1,,1);
	ПустаяСтрока.ВысотаСтроки = 6.5;
	ПустаяКолонка = ТД.Область(,1,1);
	ПустаяКолонка.ШиринаКолонки = 1.25;
	ТабДок.ВставитьОбласть(ПустаяСтрока, ТабДок.Область(1,,1), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ТабДок.ВставитьОбласть(ПустаяКолонка, ТабДок.Область(,1,1), ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли