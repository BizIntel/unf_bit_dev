
#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;	// Параметры опроса завершения фонового задания. См. общий модуль ДлительныеОперацииКлиент

&НаСервере
Перем ГСЧ;							// ГенераторСлучайныхЧисел. Используется для генерации значений диаграмм, если данные отсутствуют
Перем ФорматДатыПодсказки;			// Форматная строка даты во всплывающей подсказке.
Перем ФорматДатыТочки;				// Форматная строка даты в точках диаграммы.
Перем ФорматСуммы;					// Форматная строка сумм.
Перем ФорматКоличества;				// Форматная строка количества.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим текущую дату для отображения на форме
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Получим отбор по организации. Отбор не отображаем если это единственное возможное значение.
	Если Константы.УчетПоКомпании.Получить() Тогда
		ОтборОрганизация = Константы.Компания.Получить();
		Элементы.ОтборОрганизация.Видимость = Ложь;
	ИначеЕсли НЕ Константы.ИспользоватьНесколькоОрганизаций.Получить() Тогда
		ОтборОрганизация = Справочники.Организации.ОсновнаяОрганизация;
		Элементы.ОтборОрганизация.Видимость = Ложь;
	Иначе
		ОтборОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
			ОтборОрганизация = Справочники.Организации.ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	// Восстановим активные варианты виджетов и видимость Подробнее
	ВосстановитьНастройкиОтображения();
	
	// Установим свойства всех диаграмм по умолчанию
	ИнициализироватьДиаграммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнтервалЗапускаФоновогоЗадания = 0.2;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьФоновоеЗаданиеПриОткрытии", ИнтервалЗапускаФоновогоЗадания, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВводОстатков" Тогда
		ФоновоеЗаданиеВыполнено = Ложь;
		ФоновоеЗаданиеЗапущено = Истина;
		УправлениеФормой(ЭтотОбъект);
		ЗапуститьФоновоеЗаданиеНаСервере();
		НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ФоновоеЗаданиеВыполнено = Ложь;
	ФоновоеЗаданиеЗапущено = Истина;
	УправлениеФормой(ЭтотОбъект);
	
	ЗапуститьФоновоеЗаданиеНаСервере();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

#Область ПереключателиВариантов

&НаКлиенте
Процедура ПереключательПродажиНажатие(Элемент)
	
	ПереключитьВариант("Продажи", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРейтингТоваровНажатие(Элемент)
	
	ПереключитьВариант("Продажи", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРейтингМенеджеровНажатие(Элемент)
	
	ПереключитьВариант("Продажи", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПрибыльНажатие(Элемент)
	
	ПереключитьВариант("Продажи", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОстаткиДСНажатие(Элемент)
	
	ПереключитьВариант("Деньги", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНаличныеДСНажатие(Элемент)
	
	ПереключитьВариант("Деньги", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательБезналичныеДСНажатие(Элемент)
	
	ПереключитьВариант("Деньги", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПотокДСНажатие(Элемент)
	
	ПереключитьВариант("Деньги", 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДолгПокупателейНажатие(Элемент)
	
	ПереключитьВариант("Долги", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДолгПоставщикамНажатие(Элемент)
	
	ПереключитьВариант("Долги", 2);
	
КонецПроцедуры

#КонецОбласти

#Область СтрелкиПодробно

&НаКлиенте
Процедура СтрелкаПродажиНажатие(Элемент)
	
	Элементы.ПодробнееПродажи.Видимость = НЕ Элементы.ПодробнееПродажи.Видимость;
	Элемент.Картинка = ?(Элементы.ПодробнееПродажи.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрелкаДеньгиНажатие(Элемент)
	
	Элементы.ПодробнееДеньги.Видимость = НЕ Элементы.ПодробнееДеньги.Видимость;
	Элемент.Картинка = ?(Элементы.ПодробнееДеньги.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрелкаДолгиНажатие(Элемент)
	
	Элементы.ПодробнееДолги.Видимость = НЕ Элементы.ПодробнееДолги.Видимость;
	Элемент.Картинка = ?(Элементы.ПодробнееДолги.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

#КонецОбласти

#Область ПереходыВОтчеты

&НаКлиенте
Процедура ПерейтиВОтчетПродажиНажатие(Элемент)
	
	Виджет = ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Продажи");
	СвойстваОтчета = Новый Структура("ИмяОтчета, КлючВарианта");
	
	Если Элементы.ДиаграммыПродажи.ТекущаяСтраница = Элементы.ПродажиДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "Продажи";
		СвойстваОтчета.КлючВарианта = "ДинамикаПродаж";
	ИначеЕсли Элементы.ДиаграммыПродажи.ТекущаяСтраница = Элементы.РейтингТоваровДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "Продажи";
		СвойстваОтчета.КлючВарианта = "ДинамикаПродажПоНоменклатуре";
	ИначеЕсли Элементы.ДиаграммыПродажи.ТекущаяСтраница = Элементы.РейтингМенеджеровДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "Продажи";
		СвойстваОтчета.КлючВарианта = "ДинамикаПродажПоМенеджерам";
	ИначеЕсли Элементы.ДиаграммыПродажи.ТекущаяСтраница = Элементы.ПрибыльДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "ДоходыИРасходы";
		СвойстваОтчета.КлючВарианта = "ДинамикаДоходовИРасходов";
	КонецЕсли;
	
	КомпоновщикНастроек = СформироватьКомпоновщикОтчетаСервер(СвойстваОтчета, Виджет, ОтборОрганизация, ТекущаяДатаСеанса);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОтчетДеньгиНажатие(Элемент)
	
	Виджет = ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Деньги");
	СвойстваОтчета = Новый Структура("ИмяОтчета, КлючВарианта");
	
	Если Элементы.ДиаграммыДеньги.ТекущаяСтраница = Элементы.ОстатокДенегДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "ДенежныеСредства";
		СвойстваОтчета.КлючВарианта = "ОстаткиВВалюте";
	ИначеЕсли Элементы.ДиаграммыДеньги.ТекущаяСтраница = Элементы.НаличныеДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "ДенежныеСредства";
		СвойстваОтчета.КлючВарианта = "ОстаткиВВалюте";
		СвойстваОтчета.Вставить("ТипДенежныхСредств", "Наличные");
	ИначеЕсли Элементы.ДиаграммыДеньги.ТекущаяСтраница = Элементы.БезналичныеДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "ДенежныеСредства";
		СвойстваОтчета.КлючВарианта = "ОстаткиВВалюте";
		СвойстваОтчета.Вставить("ТипДенежныхСредств", "Безналичные");
	ИначеЕсли Элементы.ДиаграммыДеньги.ТекущаяСтраница = Элементы.ДенежныйПотокДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "ДенежныеСредства";
		СвойстваОтчета.КлючВарианта = "Анализ движений";
	КонецЕсли;
	
	КомпоновщикНастроек = СформироватьКомпоновщикОтчетаСервер(СвойстваОтчета, Виджет, ОтборОрганизация, ТекущаяДатаСеанса);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВОтчетДолгиНажатие(Элемент)
	
	Виджет = ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Долги");
	СвойстваОтчета = Новый Структура("ИмяОтчета, КлючВарианта");
	
	Если Элементы.ДиаграммыДолги.ТекущаяСтраница = Элементы.ДолгПокупателейДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "РасчетыСПокупателями";
		СвойстваОтчета.КлючВарианта = "Ведомость";
	ИначеЕсли Элементы.ДиаграммыДолги.ТекущаяСтраница = Элементы.ДолгПоставщикамДиаграмма Тогда
		СвойстваОтчета.ИмяОтчета = "РасчетыСПоставщиками";
		СвойстваОтчета.КлючВарианта = "Ведомость";
	КонецЕсли;
	
	КомпоновщикНастроек = СформироватьКомпоновщикОтчетаСервер(СвойстваОтчета, Виджет, ОтборОрганизация, ТекущаяДатаСеанса);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставленияПериодов

&НаКлиенте
Процедура ПредставлениеПериодаПродажиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийВиджет", ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Продажи"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.МониторыРуководителя.Форма.НастройкаМонитора" , ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаДСНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийВиджет", ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Деньги"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.МониторыРуководителя.Форма.НастройкаМонитора" , ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРасчетыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийВиджет", ПредопределенноеЗначение("Перечисление.ВиджетыМонитораРуководителя.Долги"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.МониторыРуководителя.Форма.НастройкаМонитора" , ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифровкиТабличныхДокументов

&НаКлиенте
Процедура РасшифровкаПродажиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРейтингТоваровОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиРейтингТоваров, "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРейтингМенеджеровОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиРейтингМенеджеров, "Ответственный");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПрибыльОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиПрибыль, "НаправлениеДеятельности,Статья");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОстатокДенегОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиОстатокДенег, "БанковскийСчетКасса");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаНаличныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиНаличные, "БанковскийСчетКасса");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаБезналичныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиБезналичные, "БанковскийСчетКасса");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДенежныйПотокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиДенежныйПоток, "Статья");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДолгПокупателейОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиДолгПокупателей, "Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаДолгПоставщикамОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРасшифровкуТД(Расшифровка, АдресРасшифровкиДолгПоставщикам, "Контрагент");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ФоновоеЗаданиеВыполнено = Ложь;
	ФоновоеЗаданиеЗапущено = Истина;
	УправлениеФормой(ЭтотОбъект);
	
	ЗапуститьФоновоеЗаданиеНаСервере();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.МониторыРуководителя.Форма.НастройкаМонитора" , , , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗаданиеПолучениеДанных

&НаСервере
Процедура ЗапуститьФоновоеЗаданиеНаСервере()
	
	Если МонопольныйРежим() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФоновоеЗаданиеЗапущено И НЕ ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		// Фоновое задание было запущено раньше, необходимо дождаться завершения.
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация", ОтборОрганизация);
	ПараметрыПроцедуры.Вставить("ДатаРасчета", ТекущаяДатаСеанса);
	ПараметрыПроцедуры.Вставить("НастройкиВиджетов", Обработки.МониторыРуководителя.ТекущиеНастройкиВиджетов());
	
	НаименованиеЗадания = НСтр("ru = 'Обновление виджетов монитора руководителя'");
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.МониторыРуководителя.ПолучитьДанныеМонитора",
		ПараметрыПроцедуры,
		НаименованиеЗадания,
		,
		Ложь);
	
	ФоновоеЗаданиеАдресРезультата = Результат.АдресХранилища;
	ФоновоеЗаданиеИдентификатор   = Результат.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если Результат.ЗаданиеВыполнено Тогда
		ОбновитьОтображениеВиджетов();
		ФоновоеЗаданиеВыполнено = Истина;
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		// Начнем опрос окончания фонового задания
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если ФоновоеЗаданиеЗапущено Тогда
		
		Если ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
			// Данные расчитаны, обновим данные формы
			ФоновоеЗаданиеЗапущено = Ложь;
			ФоновоеЗаданиеВыполнено = Истина;
			ОбновитьОтображениеВиджетов();
			УправлениеФормой(ЭтотОбъект);
		Иначе
			// Продолжим ожидание
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьФоновоеЗаданиеПриОткрытии()
	
	ЗапуститьФоновоеЗаданиеНаСервере();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область ОтображениеДанных

&НаСервере
Процедура ОбновитьОтображениеВиджетов()
	
	// Инициализируем переменные, использующиеся в процедурах обновления виджетов
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ФорматДатыПодсказки = "Л=ru_RU; ДФ=dd.MM.yyyy";
	ФорматДатыТочки = "Л=ru_RU; ДФ=d.MM";
	ФорматСуммы = "Л=ru_RU; ЧДЦ=2; ЧРД=,; ЧН=0,00";
	ФорматКоличества = "Л=ru_RU; ЧДЦ=; ЧН=0";
	
	// Получим подготовленные в фоновом задании данные и все необходимые настройки
	ДанныеМонитора = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	СоставВиджетов = Обработки.МониторыРуководителя.СоставВиджетовТекущий();
	НастройкиВиджетов = Обработки.МониторыРуководителя.ТекущиеНастройкиВиджетов();
	
	НомерВключенногоВиджета = 0;
	Для Каждого ЭлементСписка Из СоставВиджетов Цикл
		
		// Применим настройки к элементам-виджетам: выключим неиспользуемые и зададим порядок
		ИмяВиджета = ОбщегоНазначения.ИмяЗначенияПеречисления(ЭлементСписка.Значение);
		ГруппаВиджета = Элементы.Найти(ИмяВиджета);
		Если ГруппаВиджета <> Неопределено Тогда
			ГруппаВиджета.Видимость = ЭлементСписка.Пометка;
			Элементы.Переместить(ГруппаВиджета, Элементы.СтраницаВиджеты);
		КонецЕсли;
		
		// Остальной цикл только для включенных виджетов
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВиджета = ДанныеМонитора.Получить(ЭлементСписка.Значение);
		НастройкаВиджета = НастройкиВиджетов.Получить(ЭлементСписка.Значение);
		
		// Обновим каждый включенный виджет
		Если ЭлементСписка.Значение = Перечисления.ВиджетыМонитораРуководителя.Продажи Тогда
			ОбновитьВиджетПродажи(ДанныеВиджета, НастройкаВиджета);
		ИначеЕсли ЭлементСписка.Значение = Перечисления.ВиджетыМонитораРуководителя.Деньги Тогда
			ОбновитьВиджетДенежныеСредства(ДанныеВиджета, НастройкаВиджета);
		ИначеЕсли ЭлементСписка.Значение = Перечисления.ВиджетыМонитораРуководителя.Долги Тогда
			ОбновитьВиджетДолги(ДанныеВиджета, НастройкаВиджета);
		КонецЕсли;
		
		// Установим чередование цветов фона у включенных виджетов
		УстановитьЦветВиджета(ИмяВиджета, НомерВключенногоВиджета);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетПродажи(ДанныеПродажи, НастройкаВиджета)
	
	// Сформируем представление периода
	Элементы.ПредставлениеПериодаПродажи.Заголовок = СформироватьПредставлениеПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период, НастройкаВиджета.Периодичность);
	
	Если ДанныеПродажи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Выборка = ДанныеПродажи.ДанныеШапки.Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.ДанныеПродажи.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Продажи'"), Выборка.Выручка, , Выборка.ПредставлениеВалютыУчета);
		Элементы.ДанныеПрибыль.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Прибыль'"), Выборка.Прибыль, Истина, Выборка.ПредставлениеВалютыУчета);
	Иначе
		Элементы.ДанныеПродажи.Заголовок = "";
		Элементы.ДанныеПрибыль.Заголовок = "";
	КонецЕсли;
	Элементы.ДанныеРейтингТоваров.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Рейтинг товаров'"),
		НастройкаВиджета.ПервыеТовары, , НСтр("ru = 'лучших'"));
	Элементы.ДанныеРейтингМенеджеров.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Рейтинг менеджеров'"),
		НастройкаВиджета.ПервыеМенеджеры, , НСтр("ru = 'лучших'"));
		
	#КонецОбласти
	
	#Область Продажи
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажи.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	// Для диаграмм виджета "Продажи" отображаем легенду
	ДиаграммаПродажи.ОтображатьЛегенду = Истина;
	ДиаграммаПродажи.ОбластьПостроения.Право = 0.9;
	
	СерияСебестоимость = ДиаграммаПродажи.Серии.Добавить(НСтр("ru = 'Себестоимость'"));
	СерияСебестоимость.Маркер = ТипМаркераДиаграммы.Круг;
	СерияСебестоимость.Индикатор = Истина;
	СерияВаловаяПрибыль = ДиаграммаПродажи.Серии.Добавить(НСтр("ru = 'Валовая прибыль'"));
	СерияВаловаяПрибыль.Маркер = ТипМаркераДиаграммы.Круг;
	СерияВыручка = ДиаграммаПродажи.Серии.Добавить(НСтр("ru = 'Выручка'"));
	СерияВыручка.Маркер = ТипМаркераДиаграммы.Круг;
	СерияВыручка.Индикатор = Истина;
	
	Выборка = ДанныеПродажи.ДиаграммаПродажи.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	
	Выборка = ДанныеПродажи.ДиаграммаПродажи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаПродажи.Точки.Добавить();
			ДиаграммаПродажи.УстановитьЗначение(Точка, СерияВыручка, ГСЧ.СлучайноеЧисло(0,100),," ");
			ДиаграммаПродажи.УстановитьЗначение(Точка, СерияСебестоимость, ГСЧ.СлучайноеЧисло(0,100),," ");
			ДиаграммаПродажи.УстановитьЗначение(Точка, СерияВаловаяПрибыль, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Выручка = ?(Выборка.Выручка = Null, 0 , Выборка.Выручка);
		Себестоимость = ?(Выборка.Себестоимость = Null, 0 , Выборка.Себестоимость);
		ВаловаяПрибыль = ?(Выборка.ВаловаяПрибыль = Null, 0 , Выборка.ВаловаяПрибыль);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаПродажи.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выручка: %1 на %2'"),
			Формат(Выручка, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПродажи.УстановитьЗначение(Точка, СерияВыручка, Выручка, , Подсказка);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Себестоимость: %1 на %2'"),
			Формат(Себестоимость, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПродажи.УстановитьЗначение(Точка, СерияСебестоимость, Себестоимость, , Подсказка);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Валовая прибыль: %1 на %2'"),
			Формат(ВаловаяПрибыль, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПродажи.УстановитьЗначение(Точка, СерияВаловаяПрибыль, ВаловаяПрибыль, , Подсказка);
		
	КонецЦикла;
	
	УстановитьОтображениеДиаграммы(ДиаграммаПродажи, ЕстьДанныеДляОтображения);
	
	ДиаграммаПродажи.Обновление = Истина;
	
	#КонецОбласти
	
	#Область РейтингТоваров
	
	ДиаграммаРейтингТоваров.Обновление = Ложь;
	ДиаграммаРейтингТоваров.Очистить();
	ДиаграммаРейтингТоваров.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	// Для диаграмм виджета "Продажи" отображаем легенду
	ДиаграммаРейтингТоваров.ОтображатьЛегенду = Истина;
	ДиаграммаРейтингТоваров.ОбластьПостроения.Право = 0.9;
	
	Выборка = ДанныеПродажи.ДиаграммаРейтингТоваров.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	КлючиСерий = Новый Массив;
	
	ВыборкаПериод = ДанныеПродажи.ДиаграммаРейтингТоваров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаРейтингТоваров.Точки.Добавить();
			Если ДиаграммаРейтингТоваров.Серии.Количество() = 0 Тогда
				Серия = ДиаграммаРейтингТоваров.Серии.Добавить();
				Серия.Текст = НСтр("ru = 'Лучший товар'");
			Иначе
				Серия = ДиаграммаРейтингТоваров.Серии[0];
			КонецЕсли;
			ДиаграммаРейтингТоваров.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Период = КонецПериода(ВыборкаПериод.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаРейтингТоваров.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		
		ВыборкаНоменклатура = ВыборкаПериод.Выбрать();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ИндексСерии = КлючиСерий.Найти(ВыборкаНоменклатура.Номенклатура);
			Если ИндексСерии = Неопределено Тогда
				КлючиСерий.Добавить(ВыборкаНоменклатура.Номенклатура);
				Серия = ДиаграммаРейтингТоваров.Серии.Добавить();
				Серия.Текст = ВыборкаНоменклатура.ПредставлениеНоменклатуры;
				Серия.Маркер = ТипМаркераДиаграммы.Круг;
			Иначе
				Серия = ДиаграммаРейтингТоваров.Серии.Получить(ИндексСерии);
			КонецЕсли;
			
			Если ВыборкаНоменклатура.Выручка <> Null Тогда
				ЕстьДанныеДляОтображения = Истина;
			КонецЕсли;
			
			Выручка = ?(ВыборкаНоменклатура.Выручка = Null, 0 , ВыборкаНоменклатура.Выручка);
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выручка: %1 за номенклатуру: ""%2"" на %3'"),
				Формат(Выручка, ФорматСуммы),
				ВыборкаНоменклатура.ПредставлениеНоменклатуры,
				Формат(Период, ФорматДатыПодсказки)
				);
			ДиаграммаРейтингТоваров.УстановитьЗначение(Точка, Серия, Выручка, , Подсказка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьОтображениеДиаграммы(ДиаграммаРейтингТоваров, ЕстьДанныеДляОтображения);
	
	ДиаграммаРейтингТоваров.Обновление = Истина;
	
	#КонецОбласти
	
	#Область РейтингМенеджеров
	
	ДиаграммаРейтингМенеджеров.Обновление = Ложь;
	ДиаграммаРейтингМенеджеров.Очистить();
	ДиаграммаРейтингМенеджеров.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	// Для диаграмм виджета "Продажи" отображаем легенду
	ДиаграммаРейтингМенеджеров.ОтображатьЛегенду = Истина;
	ДиаграммаРейтингМенеджеров.ОбластьПостроения.Право = 0.9;
	
	Выборка = ДанныеПродажи.ДиаграммаРейтингМенеджеров.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	КлючиСерий = Новый Массив;
	
	ВыборкаПериод = ДанныеПродажи.ДиаграммаРейтингМенеджеров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаРейтингМенеджеров.Точки.Добавить();
			Если ДиаграммаРейтингМенеджеров.Серии.Количество() = 0 Тогда
				Серия = ДиаграммаРейтингМенеджеров.Серии.Добавить();
				Серия.Текст = НСтр("ru = 'Лучший менеджер'");
			Иначе
				Серия = ДиаграммаРейтингМенеджеров.Серии[0];
			КонецЕсли;
			ДиаграммаРейтингМенеджеров.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Период = КонецПериода(ВыборкаПериод.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаРейтингМенеджеров.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		
		ВыборкаМенеджеры = ВыборкаПериод.Выбрать();
		
		Пока ВыборкаМенеджеры.Следующий() Цикл
			
			ИндексСерии = КлючиСерий.Найти(ВыборкаМенеджеры.Менеджер);
			Если ИндексСерии = Неопределено Тогда
				КлючиСерий.Добавить(ВыборкаМенеджеры.Менеджер);
				Серия = ДиаграммаРейтингМенеджеров.Серии.Добавить();
				Серия.Текст = ВыборкаМенеджеры.ПредставлениеМенеджера;
				Серия.Маркер = ТипМаркераДиаграммы.Круг;
			Иначе
				Серия = ДиаграммаРейтингМенеджеров.Серии.Получить(ИндексСерии);
			КонецЕсли;
			
			Если ВыборкаМенеджеры.Выручка <> Null Тогда
				ЕстьДанныеДляОтображения = Истина;
			КонецЕсли;
			
			Выручка = ?(ВыборкаМенеджеры.Выручка = Null, 0 , ВыборкаМенеджеры.Выручка);
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выручка: %1 по менеджеру: %2, на %3'"),
				Формат(Выручка, ФорматСуммы),
				ВыборкаМенеджеры.ПредставлениеМенеджера,
				Формат(Период, ФорматДатыПодсказки)
				);
			ДиаграммаРейтингМенеджеров.УстановитьЗначение(Точка, Серия, Выручка, , Подсказка);
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьОтображениеДиаграммы(ДиаграммаРейтингМенеджеров, ЕстьДанныеДляОтображения);
	
	ДиаграммаРейтингМенеджеров.Обновление = Истина;
	
	#КонецОбласти
	
	#Область Прибыль
	
	ДиаграммаПрибыль.Обновление = Ложь;
	ДиаграммаПрибыль.Очистить();
	ДиаграммаПрибыль.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	// Для диаграмм виджета "Продажи" отображаем легенду
	ДиаграммаПрибыль.ОтображатьЛегенду = Истина;
	ДиаграммаПрибыль.ОбластьПостроения.Право = 0.9;
	
	СерияРасходы = ДиаграммаПрибыль.Серии.Добавить(НСтр("ru = 'Расходы'"));
	СерияРасходы.Маркер = ТипМаркераДиаграммы.Круг;
	СерияРасходы.Индикатор = Истина;
	СерияПрибыль = ДиаграммаПрибыль.Серии.Добавить(НСтр("ru = 'Прибыль'"));
	СерияПрибыль.Маркер = ТипМаркераДиаграммы.Круг;
	СерияДоходы = ДиаграммаПрибыль.Серии.Добавить(НСтр("ru = 'Доходы'"));
	СерияДоходы.Маркер = ТипМаркераДиаграммы.Круг;
	СерияДоходы.Индикатор = Истина;
	
	Выборка = ДанныеПродажи.ДиаграммаПрибыль.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	
	Выборка = ДанныеПродажи.ДиаграммаПрибыль.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаПрибыль.Точки.Добавить();
			ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияДоходы, ГСЧ.СлучайноеЧисло(0,100),," ");
			ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияРасходы, ГСЧ.СлучайноеЧисло(0,100),," ");
			ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияПрибыль, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Доходы = ?(Выборка.Доходы = Null, 0 , Выборка.Доходы);
		Расходы = ?(Выборка.Расходы = Null, 0 , Выборка.Расходы);
		Прибыль = ?(Выборка.Прибыль = Null, 0 , Выборка.Прибыль);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаПрибыль.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доход: %1 на %2'"),
			Формат(Доходы, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияДоходы, Доходы, , Подсказка);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расход: %1 на %2'"),
			Формат(Расходы, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияРасходы, Расходы, , Подсказка);
		
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Прибыль: %1 на %2'"),
			Формат(Прибыль, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаПрибыль.УстановитьЗначение(Точка, СерияПрибыль, Прибыль, , Подсказка);
		
	КонецЦикла;
	
	УстановитьОтображениеДиаграммы(ДиаграммаПрибыль, ЕстьДанныеДляОтображения);
	
	ДиаграммаПрибыль.Обновление = Истина;
	
	#КонецОбласти
	
	РасшифровкаПродажи				= ДанныеПродажи.РасшифровкаПродажи.ТабДок;
	РасшифровкаРейтингТоваров		= ДанныеПродажи.РасшифровкаРейтингТоваров.ТабДок;
	РасшифровкаРейтингМенеджеров	= ДанныеПродажи.РасшифровкаРейтингМенеджеров.ТабДок;
	РасшифровкаПрибыль				= ДанныеПродажи.РасшифровкаПрибыль.ТабДок;
	
	АдресРасшифровкиОстатокДенег		= ПоместитьВоВременноеХранилище(ДанныеПродажи.РасшифровкаПродажи.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиРейтингТоваров		= ПоместитьВоВременноеХранилище(ДанныеПродажи.РасшифровкаРейтингТоваров.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиРейтингМенеджеров	= ПоместитьВоВременноеХранилище(ДанныеПродажи.РасшифровкаРейтингМенеджеров.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиПрибыль				= ПоместитьВоВременноеХранилище(ДанныеПродажи.РасшифровкаПрибыль.ДанныеРасшифровки, УникальныйИдентификатор);
	
	Элементы.РасшифровкаПродажи.Высота 				= РассчитатьВысотуЭлемента(РасшифровкаПродажи.ВысотаТаблицы);
	Элементы.РасшифровкаРейтингТоваров.Высота 		= РассчитатьВысотуЭлемента(РасшифровкаРейтингТоваров.ВысотаТаблицы);
	Элементы.РасшифровкаРейтингМенеджеров.Высота	= РассчитатьВысотуЭлемента(РасшифровкаРейтингМенеджеров.ВысотаТаблицы);
	Элементы.РасшифровкаПрибыль.Высота 				= РассчитатьВысотуЭлемента(РасшифровкаПрибыль.ВысотаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетДенежныеСредства(ДанныеДенежныхСредств, НастройкаВиджета)
	
	// Сформируем представление периода
	Элементы.ПредставлениеПериодаДеньги.Заголовок = СформироватьПредставлениеПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период, НастройкаВиджета.Периодичность);
	
	Если ДанныеДенежныхСредств = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Выборка = ДанныеДенежныхСредств.ДанныеШапки.Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.ДанныеОстаткиДС.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Остаток денег'"), Выборка.ОстатокДенег, , Выборка.ПредставлениеВалютыУчета);
		Элементы.ДанныеНаличные.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Наличные'"), Выборка.Наличные, , Выборка.ПредставлениеВалютыУчета);
		Элементы.ДанныеБезналичные.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Безналичные'"), Выборка.Безналичные, , Выборка.ПредставлениеВалютыУчета);
		Элементы.ДанныеДенежныйПоток.Заголовок = СформироватьЗаголовокВарианта(НСтр("ru = 'Денежный поток'"), Выборка.ДенежныйПоток, Истина, Выборка.ПредставлениеВалютыУчета);
	Иначе
		Элементы.ДанныеОстаткиДС.Заголовок = "";
		Элементы.ДанныеНаличные.Заголовок = "";
		Элементы.ДанныеБезналичные.Заголовок = "";
		Элементы.ДанныеДенежныйПоток.Заголовок = "";
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОстатокДенег
	
	ДиаграммаОстатокДенег.Обновление = Ложь;
	ДиаграммаОстатокДенег.Очистить();
	ДиаграммаОстатокДенег.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаОстатокДенег.Серии.Добавить(НСтр("ru = 'Остаток'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаОстатокДенег.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаОстатокДенег.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаОстатокДенег.Точки.Добавить();
			ДиаграммаОстатокДенег.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Остаток = ?(Выборка.ОстатокДенег = Null, ПредыдущееЗначение, Выборка.ОстатокДенег);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаОстатокДенег.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Остаток денег: %1 на %2'"),
			Формат(Остаток, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаОстатокДенег.УстановитьЗначение(Точка, Серия, Остаток, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, Остаток, Мин(МинимальноеЗначение, Остаток));
		ПредыдущееЗначение = Остаток;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаОстатокДенег.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаОстатокДенег.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаОстатокДенег, ЕстьДанныеДляОтображения);
	
	ДиаграммаОстатокДенег.Обновление = Истина;
	
	#КонецОбласти
	
	#Область Наличные
	
	ДиаграммаНаличные.Обновление = Ложь;
	ДиаграммаНаличные.Очистить();
	ДиаграммаНаличные.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаНаличные.Серии.Добавить(НСтр("ru = 'Остаток'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаНаличные.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаНаличные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаНаличные.Точки.Добавить();
			ДиаграммаНаличные.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Наличные = ?(Выборка.Наличные = Null, ПредыдущееЗначение, Выборка.Наличные);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаНаличные.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Наличные: %1 на %2'"),
			Формат(Наличные, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаНаличные.УстановитьЗначение(Точка, Серия, Наличные, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, Наличные, Мин(МинимальноеЗначение, Наличные));
		ПредыдущееЗначение = Наличные;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаНаличные.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаНаличные.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаНаличные, ЕстьДанныеДляОтображения);
	
	ДиаграммаНаличные.Обновление = Истина;
	
	#КонецОбласти
	
	#Область Безналичные
	
	ДиаграммаБезналичные.Обновление = Ложь;
	ДиаграммаБезналичные.Очистить();
	ДиаграммаБезналичные.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаБезналичные.Серии.Добавить(НСтр("ru = 'Остаток'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаБезналичные.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаБезналичные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаБезналичные.Точки.Добавить();
			ДиаграммаБезналичные.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		Безналичные = ?(Выборка.Безналичные = Null, ПредыдущееЗначение, Выборка.Безналичные);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаБезналичные.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Безналичные: %1 на %2'"),
			Формат(Безналичные, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаБезналичные.УстановитьЗначение(Точка, Серия, Безналичные, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, Безналичные, Мин(МинимальноеЗначение, Безналичные));
		ПредыдущееЗначение = Безналичные;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаБезналичные.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаБезналичные.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаБезналичные, ЕстьДанныеДляОтображения);
	
	ДиаграммаБезналичные.Обновление = Истина;
	
	#КонецОбласти
	
	#Область ДенежныйПоток
	
	ДиаграммаДенежныйПоток.Обновление = Ложь;
	ДиаграммаДенежныйПоток.Очистить();
	ДиаграммаДенежныйПоток.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаДенежныйПоток.Серии.Добавить(НСтр("ru = 'Остаток'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаДенежныйПоток.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеДенежныхСредств.ДиаграммаДенежныйПоток.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаДенежныйПоток.Точки.Добавить();
			ДиаграммаДенежныйПоток.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		ДенежныйПоток = ?(Выборка.ДенежныйПоток = Null, ПредыдущееЗначение, Выборка.ДенежныйПоток);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаДенежныйПоток.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Денежный поток: %1 на %2'"),
			Формат(ДенежныйПоток, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаДенежныйПоток.УстановитьЗначение(Точка, Серия, ДенежныйПоток, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, ДенежныйПоток, Мин(МинимальноеЗначение, ДенежныйПоток));
		ПредыдущееЗначение = ДенежныйПоток;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаДенежныйПоток.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаДенежныйПоток.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаДенежныйПоток, ЕстьДанныеДляОтображения);
	
	ДиаграммаДенежныйПоток.Обновление = Истина;
	
	#КонецОбласти
	
	РасшифровкаОстатокДенег 	= ДанныеДенежныхСредств.РасшифровкаОстатокДенег.ТабДок;
	РасшифровкаНаличные 		= ДанныеДенежныхСредств.РасшифровкаНаличные.ТабДок;
	РасшифровкаБезналичные 		= ДанныеДенежныхСредств.РасшифровкаБезналичные.ТабДок;
	РасшифровкаДенежныйПоток 	= ДанныеДенежныхСредств.РасшифровкаДенежныйПоток.ТабДок;
	
	АдресРасшифровкиОстатокДенег	= ПоместитьВоВременноеХранилище(ДанныеДенежныхСредств.РасшифровкаОстатокДенег.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиНаличные 		= ПоместитьВоВременноеХранилище(ДанныеДенежныхСредств.РасшифровкаНаличные.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиБезналичные 	= ПоместитьВоВременноеХранилище(ДанныеДенежныхСредств.РасшифровкаБезналичные.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиДенежныйПоток 	= ПоместитьВоВременноеХранилище(ДанныеДенежныхСредств.РасшифровкаДенежныйПоток.ДанныеРасшифровки, УникальныйИдентификатор);
	
	Элементы.РасшифровкаОстатокДенег.Высота 	= РассчитатьВысотуЭлемента(РасшифровкаОстатокДенег.ВысотаТаблицы);
	Элементы.РасшифровкаНаличные.Высота 		= РассчитатьВысотуЭлемента(РасшифровкаНаличные.ВысотаТаблицы);
	Элементы.РасшифровкаБезналичные.Высота 		= РассчитатьВысотуЭлемента(РасшифровкаБезналичные.ВысотаТаблицы);
	Элементы.РасшифровкаДенежныйПоток.Высота 	= РассчитатьВысотуЭлемента(РасшифровкаДенежныйПоток.ВысотаТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетДолги(ДанныеВзаиморасчетов, НастройкаВиджета)
	
	Элементы.ПредставлениеПериодаДолги.Заголовок = СформироватьПредставлениеПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период, НастройкаВиджета.Периодичность);
	
	Если ДанныеВзаиморасчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Область Шапка
	
	Выборка = ДанныеВзаиморасчетов.ДанныеШапки.Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.ДанныеДолгПокупателей.Заголовок =	СформироватьЗаголовокВарианта(НСтр("ru = 'Долг покупателей'"),
			Выборка.ДолгПокупателей, , Выборка.ПредставлениеВалютыУчета);
		Элементы.ДанныеДолгПоставщикам.Заголовок =	СформироватьЗаголовокВарианта(НСтр("ru = 'Долг поставщикам'"),
			Выборка.ДолгПоставщикам, , Выборка.ПредставлениеВалютыУчета);
	Иначе
		Элементы.ДанныеДолгПокупателей.Заголовок = "";
		Элементы.ДанныеДолгПоставщикам.Заголовок = "";
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СоотношениеДолговПокупателей
	
	ДиаграммаСоотношениеДолговПокупателей.Обновление = Ложь;
	ДиаграммаСоотношениеДолговПокупателей.Очистить();
	ДиаграммаСоотношениеДолговПокупателей.ТипДиаграммы = ТипДиаграммы.КруговаяОбъемная;
	ДиаграммаСоотношениеДолговПокупателей.ВидПодписей = ВидПодписейКДиаграмме.Серия;
	
	Точка = ДиаграммаСоотношениеДолговПокупателей.Точки.Добавить();
	Точка.Текст = НСтр("ru = 'Долг'");
	
	КлючиСерий = Новый Массив;
	МаксСерийДиаграммы = 6;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаСоотношениеДолговПокупателей.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если КлючиСерий.Количество() < МаксСерийДиаграммы Тогда
			
			КлючиСерий.Добавить(Выборка.Покупатель);
			
			Серия = ДиаграммаСоотношениеДолговПокупателей.Серии.Добавить(Выборка.ПредставлениеПокупателя);
			Серия.Расшифровка = Выборка.Покупатель;
			Серия.Раздвигать = Истина;
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность: %1 от покупателя: %2'"),
				Формат(Выборка.ДолгПокупателя, ФорматСуммы),
				Выборка.ПредставлениеПокупателя
				);
			ДиаграммаСоотношениеДолговПокупателей.УстановитьЗначение(Точка, Серия, Выборка.ДолгПокупателя, , Подсказка);
			
		Иначе
			
			СводнаяСерия = ДиаграммаСоотношениеДолговПокупателей.Серии.Получить(КлючиСерий.ВГраница());
			СводнаяСерия.Текст = НСтр("ru = 'Прочие'");
			СводноеЗначение = ДиаграммаСоотношениеДолговПокупателей.ПолучитьЗначение(Точка, СводнаяСерия);
			НовоеЗначение = СводноеЗначение.Значение + Выборка.ДолгПокупателя;
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность прочих покупателей: %1'"),
				Формат(НовоеЗначение, ФорматСуммы),
				);
			ДиаграммаСоотношениеДолговПокупателей.УстановитьЗначение(Точка, СводнаяСерия, НовоеЗначение, , Подсказка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьДанныеДляОтображения Тогда
		КоличествоСерий = ГСЧ.СлучайноеЧисло(2, МаксСерийДиаграммы);
		Для Индекс = 1 По КоличествоСерий Цикл
			Серия = ДиаграммаСоотношениеДолговПокупателей.Серии.Добавить();
			Серия.Раздвигать = Истина;
			ДиаграммаСоотношениеДолговПокупателей.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100), , " ");
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаСоотношениеДолговПокупателей, ЕстьДанныеДляОтображения);
	
	ДиаграммаСоотношениеДолговПокупателей.Обновление = Истина;
	
	#КонецОбласти
	
	#Область ДолгПокупателей
	
	ДиаграммаДолгПокупателей.Обновление = Ложь;
	ДиаграммаДолгПокупателей.Очистить();
	ДиаграммаДолгПокупателей.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаДолгПокупателей.Серии.Добавить(НСтр("ru = 'Задолженность'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаДолгПокупателей.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаДолгПокупателей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаДолгПокупателей.Точки.Добавить();
			ДиаграммаДолгПокупателей.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		ДолгПокупателей = ?(Выборка.ДолгПокупателей = Null, ПредыдущееЗначение, Выборка.ДолгПокупателей);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаДолгПокупателей.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общая задолженность: %1 на %2'"),
			Формат(ДолгПокупателей, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаДолгПокупателей.УстановитьЗначение(Точка, Серия, ДолгПокупателей, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, ДолгПокупателей, Мин(МинимальноеЗначение, ДолгПокупателей));
		ПредыдущееЗначение = ДолгПокупателей;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаДолгПокупателей.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаДолгПокупателей.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаДолгПокупателей, ЕстьДанныеДляОтображения);
	
	ДиаграммаДолгПокупателей.Обновление = Истина;
	
	#КонецОбласти
	
	#Область СоотношениеДолговПоставщикам
	
	ДиаграммаСоотношениеДолговПоставщикам.Обновление = Ложь;
	ДиаграммаСоотношениеДолговПоставщикам.Очистить();
	ДиаграммаСоотношениеДолговПоставщикам.ТипДиаграммы = ТипДиаграммы.КруговаяОбъемная;
	ДиаграммаСоотношениеДолговПоставщикам.ВидПодписей = ВидПодписейКДиаграмме.Серия;
	
	Точка = ДиаграммаСоотношениеДолговПоставщикам.Точки.Добавить();
	Точка.Текст = НСтр("ru = 'Долг'");
	
	КлючиСерий = Новый Массив;
	МаксСерийДиаграммы = 6;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаСоотношениеДолговПоставщикам.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если КлючиСерий.Количество() < МаксСерийДиаграммы Тогда
			
			КлючиСерий.Добавить(Выборка.Поставщик);
			
			Серия = ДиаграммаСоотношениеДолговПоставщикам.Серии.Добавить(Выборка.ПредставлениеПоставщика);
			Серия.Расшифровка = Выборка.Поставщик;
			Серия.Раздвигать = Истина;
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность: %1 поставщику: %2'"),
				Формат(Выборка.ДолгПоставщику, ФорматСуммы),
				Выборка.ПредставлениеПоставщика
				);
			ДиаграммаСоотношениеДолговПоставщикам.УстановитьЗначение(Точка, Серия, Выборка.ДолгПоставщику, , Подсказка);
			
		Иначе
			
			СводнаяСерия = ДиаграммаСоотношениеДолговПоставщикам.Серии.Получить(КлючиСерий.ВГраница());
			СводнаяСерия.Текст = НСтр("ru = 'Прочие'");
			СводноеЗначение = ДиаграммаСоотношениеДолговПоставщикам.ПолучитьЗначение(Точка, СводнаяСерия);
			НовоеЗначение = СводноеЗначение.Значение + Выборка.ДолгПоставщику;
			Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность прочим поставщикам: %1'"),
				Формат(НовоеЗначение, ФорматСуммы),
				);
			ДиаграммаСоотношениеДолговПоставщикам.УстановитьЗначение(Точка, СводнаяСерия, НовоеЗначение, , Подсказка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьДанныеДляОтображения Тогда
		КоличествоСерий = ГСЧ.СлучайноеЧисло(2, МаксСерийДиаграммы);
		Для Индекс = 1 По КоличествоСерий Цикл
			Серия = ДиаграммаСоотношениеДолговПоставщикам.Серии.Добавить();
			Серия.Раздвигать = Истина;
			ДиаграммаСоотношениеДолговПоставщикам.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100), , " ");
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаСоотношениеДолговПоставщикам, ЕстьДанныеДляОтображения);
	
	ДиаграммаСоотношениеДолговПоставщикам.Обновление = Истина;
	
	#КонецОбласти
	
	#Область ДолгПоставщикам
	
	ДиаграммаДолгПоставщикам.Обновление = Ложь;
	ДиаграммаДолгПоставщикам.Очистить();
	ДиаграммаДолгПоставщикам.ТипДиаграммы = Перечисления.ТипыДиаграмм.ПолучитьСистемныйТипДиаграммы(НастройкаВиджета.ТипДиаграммы);
	
	Серия = ДиаграммаДолгПоставщикам.Серии.Добавить(НСтр("ru = 'Задолженность'"));
	Серия.Маркер = ТипМаркераДиаграммы.Круг;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаДолгПоставщикам.Выбрать();
	ЕстьДанныеДляОтображения = Выборка.Количество() > 0;
	МинимальноеЗначение = Неопределено;
	ПредыдущееЗначение = 0;
	
	Выборка = ДанныеВзаиморасчетов.ДиаграммаДолгПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЕстьДанныеДляОтображения Тогда
			Точка = ДиаграммаДолгПоставщикам.Точки.Добавить();
			ДиаграммаДолгПоставщикам.УстановитьЗначение(Точка, Серия, ГСЧ.СлучайноеЧисло(0,100),," ");
			Продолжить;
		КонецЕсли;
		
		ДолгПоставщикам = ?(Выборка.ДолгПоставщикам = Null, ПредыдущееЗначение, Выборка.ДолгПоставщикам);
		Период = КонецПериода(Выборка.Период, НастройкаВиджета.Периодичность);
		
		Точка = ДиаграммаДолгПоставщикам.Точки.Добавить();
		Точка.Текст = Формат(Период, ФорматДатыТочки);
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Общая задолженность: %1 на %2'"),
			Формат(ДолгПоставщикам, ФорматСуммы),
			Формат(Период, ФорматДатыПодсказки)
			);
		ДиаграммаДолгПоставщикам.УстановитьЗначение(Точка, Серия, ДолгПоставщикам, , Подсказка);
		
		МинимальноеЗначение = ?(МинимальноеЗначение = Неопределено, ДолгПоставщикам, Мин(МинимальноеЗначение, ДолгПоставщикам));
		ПредыдущееЗначение = ДолгПоставщикам;
		
	КонецЦикла;
	
	Если НастройкаВиджета.НачалоОтсчета = "От минимального значения" Тогда
		ДиаграммаДолгПоставщикам.БазовоеЗначение = ?(МинимальноеЗначение = Неопределено, 0, МинимальноеЗначение);
	ИначеЕсли НастройкаВиджета.НачалоОтсчета = "От нуля" Тогда
		ДиаграммаДолгПоставщикам.БазовоеЗначение = 0;
	КонецЕсли;
	
	УстановитьОтображениеДиаграммы(ДиаграммаДолгПоставщикам, ЕстьДанныеДляОтображения);
	
	ДиаграммаДолгПоставщикам.Обновление = Истина;
	
	#КонецОбласти
	
	РасшифровкаДолгПокупателей = ДанныеВзаиморасчетов.РасшифровкаДолгПокупателей.ТабДок;
	РасшифровкаДолгПоставщикам = ДанныеВзаиморасчетов.РасшифровкаДолгПоставщикам.ТабДок;
	
	АдресРасшифровкиДолгПокупателей = ПоместитьВоВременноеХранилище(ДанныеВзаиморасчетов.РасшифровкаДолгПокупателей.ДанныеРасшифровки, УникальныйИдентификатор);
	АдресРасшифровкиДолгПоставщикам = ПоместитьВоВременноеХранилище(ДанныеВзаиморасчетов.РасшифровкаДолгПоставщикам.ДанныеРасшифровки, УникальныйИдентификатор);
	
	Элементы.РасшифровкаДолгПокупателей.Высота = РассчитатьВысотуЭлемента(РасшифровкаДолгПокупателей.ВысотаТаблицы);
	Элементы.РасшифровкаДолгПоставщикам.Высота = РассчитатьВысотуЭлемента(РасшифровкаДолгПоставщикам.ВысотаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормойИЭлементами

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ФоновоеЗаданиеВыполнено Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВиджеты;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	КонецЕсли;
	
	Элементы.КоманднаяПанель.Доступность = НЕ Форма.ФоновоеЗаданиеЗапущено;
	Элементы.ОтборОрганизация.Доступность = НЕ Форма.ФоновоеЗаданиеЗапущено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьВариант(ИмяВиджета, НомерВарианта)
	
	Если (ИмяВиджета = "Продажи" И НомерВарианта = ТекущийВариантПродажи)
		Или (ИмяВиджета = "Деньги" И НомерВарианта = ТекущийВариантДеньги)
		Или (ИмяВиджета = "Долги" И НомерВарианта = ТекущийВариантДолги) Тогда
			Возврат;
	КонецЕсли;
	
	СохранитьНастройкиОтображения();
	
	НовыйВариант = ВариантПоНомеру(ИмяВиджета, НомерВарианта);
	Если ИмяВиджета = "Продажи" Тогда
		ПредыдущийВариант = ВариантПоНомеру(ИмяВиджета, ТекущийВариантПродажи);
	ИначеЕсли ИмяВиджета = "Деньги" Тогда
		ПредыдущийВариант = ВариантПоНомеру(ИмяВиджета, ТекущийВариантДеньги);
	ИначеЕсли ИмяВиджета = "Долги" Тогда
		ПредыдущийВариант = ВариантПоНомеру(ИмяВиджета, ТекущийВариантДолги);
	КонецЕсли;
	
	Если ПредыдущийВариант.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоВариантаПервый") Тогда
		ОчередьЦвета = "Первый";
	ИначеЕсли ПредыдущийВариант.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоВариантаВторой") Тогда
		ОчередьЦвета = "Второй";
	КонецЕсли;
	
	НовыйВариант.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонАктивногоВарианта" + ОчередьЦвета);
	ПредыдущийВариант.ЦветФона = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ФонНеактивногоВарианта" + ОчередьЦвета);
	
	Если ИмяВиджета = "Продажи" Тогда
		ТекущийВариантПродажи = НомерВарианта;
	ИначеЕсли ИмяВиджета = "Деньги" Тогда
		ТекущийВариантДеньги = НомерВарианта;
	ИначеЕсли ИмяВиджета = "Долги" Тогда
		ТекущийВариантДолги = НомерВарианта;
	КонецЕсли;
	
	// Переключаем страницы на текущий вариант
	СтраницыДиаграмм = Элементы["Диаграммы" + ИмяВиджета];
	СтраницаДиаграмм = СтраницыДиаграмм.ПодчиненныеЭлементы[НомерВарианта-1];
	СтраницыДиаграмм.ТекущаяСтраница = СтраницаДиаграмм;
	
	СтраницыПодробнее = Элементы["Подробнее" + ИмяВиджета];
	СтраницаПодробнее = СтраницыПодробнее.ПодчиненныеЭлементы[НомерВарианта-1];
	СтраницыПодробнее.ТекущаяСтраница = СтраницаПодробнее;
	
	СтраницыПодробнее.Высота = СтраницаПодробнее.ПодчиненныеЭлементы[0].Высота;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровкуТД(ИдентификаторРасшифровки, АдресРасшифровки, ИменаПолей)
	
	Значение = ПолучитьЗначениеРасшифровки(ИменаПолей, ИдентификаторРасшифровки, АдресРасшифровки);
	Если Значение <> Неопределено Тогда
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СформироватьЗаголовокВарианта(ИмяВарианта, ЧисловоеЗначение, ОтображатьПлюс = Ложь, ДополнительноеЗначение = Неопределено)
	
	Если ДополнительноеЗначение = Неопределено Тогда
		ДополнительноеЗначение = "";
	КонецЕсли;
	
	ФорматнаяСтрока = "ЧДЦ=; ЧРГ=' '; ЧН=—; ЧГ=3,0; ЧО=2";
	
	ФорматированноеЧисло = Формат(ЧисловоеЗначение, ФорматнаяСтрока);
	Если ОтображатьПлюс И ЧисловоеЗначение > 0 Тогда
		ФорматированноеЧисло = "+ " + ФорматированноеЧисло;
	КонецЕсли;
	
	Цвет = ЦветаСтиля.ЦветНадписейМонитораРуководителя;
	
	ЭлементИмяВарианта = Новый ФорматированнаяСтрока(ИмяВарианта, Новый Шрифт(, 12), Цвет);
	ЭлементЧисло = Новый ФорматированнаяСтрока(ФорматированноеЧисло, Новый Шрифт(, 16, Истина), Цвет);
	ЭлементДополнительноеЗначение = Новый ФорматированнаяСтрока(ДополнительноеЗначение, Новый Шрифт(), Цвет);
	
	ЭлементыСтроки = Новый Массив;
	ЭлементыСтроки.Добавить(ЭлементИмяВарианта);
	ЭлементыСтроки.Добавить(Символы.ПС);
	ЭлементыСтроки.Добавить(ЭлементЧисло);
	ЭлементыСтроки.Добавить("  ");
	ЭлементыСтроки.Добавить(ЭлементДополнительноеЗначение);
	
	Результат = Новый ФорматированнаяСтрока(ЭлементыСтроки);
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеПериода(ДатаОкончания, ВидПериода, Интервал)
	
	ФорматнаяСтрока = "Л=ru_RU; ДФ='d MMMM'";
	
	Если Интервал = Перечисления.Периодичность.День Тогда
		ПредставлениеИнтервала = НСтр("ru='по дням'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Неделя Тогда
		ПредставлениеИнтервала = НСтр("ru='по неделям'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Декада Тогда
		ПредставлениеИнтервала = НСтр("ru='по декадам'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Месяц Тогда
		ПредставлениеИнтервала = НСтр("ru='помесячно'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Квартал Тогда
		ПредставлениеИнтервала = НСтр("ru='поквартально'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Полугодие Тогда
		ПредставлениеИнтервала = НСтр("ru='по полугодиям'");
	ИначеЕсли Интервал = Перечисления.Периодичность.Год Тогда
		ПредставлениеИнтервала = НСтр("ru='по неделям'");
	Иначе
		ПредставлениеИнтервала = "";
	КонецЕсли;
	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 - %2 (%3)",
		Формат(Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ДатаОкончания, ВидПериода), ФорматнаяСтрока),
		Формат(ДатаОкончания, ФорматнаяСтрока),
		ПредставлениеИнтервала
		);
	
	Возврат Результат;
	
КонецФункции

// Функция рассчитывает приблизительную высоту элемента формы отображающего табличный документ, по количеству строк табличного документа
//
// Параметры:
//  ВысотаТаблицы	 - число - количество строк
// 
// Возвращаемое значение:
//  число - высота элемента формы
//
&НаСервереБезКонтекста
Функция РассчитатьВысотуЭлемента(ВысотаТаблицы)
	
	Если ВысотаТаблицы < 8 Тогда
		Возврат Макс(ВысотаТаблицы, 4);
	Иначе
		Возврат Окр(ВысотаТаблицы * 0.85);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, Параметры) Экспорт
	
	// Если настройки не были изменены - ничего не делаем
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗаданиеВыполнено = Ложь;
	ФоновоеЗаданиеЗапущено = Истина;
	УправлениеФормой(ЭтотОбъект);
	
	ЗапуститьФоновоеЗаданиеНаСервере();
	НачатьОжиданиеЗавершенияФоновогоЗаданияНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРасшифровки(ИменаПолей, Расшифровка, АдресДанныхРасшифровки)
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей, ",", Истина);
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		ПоляРасшифровки = ЭлементРасшифровки.ПолучитьПоля();
		Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
			Если МассивПолей.Найти(ПолеРасшифровки.Поле) <> Неопределено Тогда
				Возврат ПолеРасшифровки.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДиаграммы()
	
	ИнициализироватьДиаграмму(ДиаграммаПродажи);
	ИнициализироватьДиаграмму(ДиаграммаРейтингТоваров);
	ИнициализироватьДиаграмму(ДиаграммаРейтингМенеджеров);
	ИнициализироватьДиаграмму(ДиаграммаПрибыль);
	ИнициализироватьДиаграмму(ДиаграммаОстатокДенег);
	ИнициализироватьДиаграмму(ДиаграммаНаличные);
	ИнициализироватьДиаграмму(ДиаграммаБезналичные);
	ИнициализироватьДиаграмму(ДиаграммаДенежныйПоток);
	ИнициализироватьДиаграмму(ДиаграммаСоотношениеДолговПокупателей, ТипДиаграммы.КруговаяОбъемная);
	ИнициализироватьДиаграмму(ДиаграммаДолгПокупателей);
	ИнициализироватьДиаграмму(ДиаграммаСоотношениеДолговПоставщикам, ТипДиаграммы.КруговаяОбъемная);
	ИнициализироватьДиаграмму(ДиаграммаДолгПоставщикам);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьДиаграмму(Диаграмма, ВидДиаграммы = Неопределено)
	
	Если ВидДиаграммы = Неопределено Тогда
		ВидДиаграммы = ТипДиаграммы.График;
	КонецЕсли;
	
	БезРамки = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	
	Диаграмма.ТипДиаграммы 				= ВидДиаграммы;
	Диаграмма.МаксимумСерий 			= МаксимумСерий.НеЗадано;
	Диаграмма.ПропускатьБазовоеЗначение	= Ложь;
	Диаграмма.БазовоеЗначение 			= 0;
	Диаграмма.АвтоМаксимальноеЗначение 	= Истина;
	Диаграмма.АвтоМинимальноеЗначение 	= Истина;
	Диаграмма.ОтображатьЗаголовок 		= Ложь;
	Диаграмма.ОтображатьЛегенду 		= Ложь;
	Диаграмма.АвтоТранспонирование 		= Ложь;
	Диаграмма.ПробелыВоронки		 	= 15;
	Диаграмма.РежимПолупрозрачности 	= РежимПолупрозрачностиДиаграммы.Авто;
	Диаграмма.ПроцентПолупрозрачности 	= 20;
	Диаграмма.РежимСглаживания 			= РежимСглаживанияДиаграммы.ГладкаяКривая;
	Диаграмма.НатяжениеСглаживания 		= 100;
	Диаграмма.Рамка 					= БезРамки;
	Диаграмма.ВидПодписей 				= ВидПодписейКДиаграмме.Нет;
	Диаграмма.ПоложениеПодписей			= ПоложениеПодписейКДиаграмме.Край;
	Диаграмма.ФорматЗначенийВПодписях	= "Л=ru_RU; ЧДЦ=; ЧН=' '";
	Диаграмма.ШрифтПодписей				= Новый Шрифт(,7);
	Диаграмма.ЦветТекстаПодписей		= ЦветаСтиля.ПоясняющийТекст;
	Диаграмма.ПрозрачныйФонПодписей 	= Истина;
	Диаграмма.РамкаПодписей 			= БезРамки;
	Диаграмма.ПрозрачныйФон 			= Истина;
	Диаграмма.Градиент		 			= Ложь;
	Диаграмма.ПалитраЦветов 			= ПалитраЦветовДиаграммы.Палитра32;
	Диаграмма.Анимация 					= АнимацияДиаграммы.Авто;
	Диаграмма.АвтоУстановкаТекстаСерий 	= Ложь;
	Диаграмма.АвтоУстановкаТекстаТочек 	= Ложь;
	
	Диаграмма.ОбластьПостроения.Верх			 				= 0;
	Диаграмма.ОбластьПостроения.Низ				 				= 1;
	Диаграмма.ОбластьПостроения.Лево			 				= 0;
	Диаграмма.ОбластьПостроения.Право			 				= 1;
	Диаграмма.ОбластьПостроения.ОтображатьШкалу 				= Истина;
	Диаграмма.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы 	= Ложь;
	Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек 	= Ложь;
	Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыЗначений 	= Истина;
	Диаграмма.ОбластьПостроения.ФорматШкалыЗначений 			= "ЧН=' '";
	Диаграмма.ОбластьПостроения.ОриентацияМеток 				= ОриентацияМетокДиаграммы.Горизонтально;
	Диаграмма.ОбластьПостроения.ЛинииШкалы 						= Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	Диаграмма.ОбластьПостроения.ЦветШкалы 						= ЦветаСтиля.ЦветНадписейМонитораРуководителя;
	Диаграмма.ОбластьПостроения.ЦветТекста 						= ЦветаСтиля.ЦветНадписейМонитораРуководителя;
	Диаграмма.ОбластьПостроения.Шрифт 							= Новый Шрифт(,7);
	Диаграмма.ОбластьПостроения.Рамка 							= БезРамки;
	Диаграмма.ОбластьПостроения.ПрозрачныйФон 					= Истина;
	
	Диаграмма.ОбластьЗаголовка.Верх			 	= 0.2;
	Диаграмма.ОбластьЗаголовка.Низ				= 0.5;
	Диаграмма.ОбластьЗаголовка.Лево			 	= 0;
	Диаграмма.ОбластьЗаголовка.Право			= 1;
	Диаграмма.ОбластьЗаголовка.Текст			= НСтр("ru='Нет данных для отображения'");
	Диаграмма.ОбластьЗаголовка.Рамка			= БезРамки;
	Диаграмма.ОбластьЗаголовка.ПрозрачныйФон	= Истина;
	Диаграмма.ОбластьЗаголовка.ЦветФона			= ЦветаСтиля.ЦветФонаФормы;
	Диаграмма.ОбластьЗаголовка.ЦветТекста		= ЦветаСтиля.ПоясняющийТекст;
	Диаграмма.ОбластьЗаголовка.Шрифт			= Новый Шрифт(,,Истина);
	
	Диаграмма.ОбластьЛегенды.Верх			= 0;
	Диаграмма.ОбластьЛегенды.Низ			= 1;
	Диаграмма.ОбластьЛегенды.Лево			= 0.9;
	Диаграмма.ОбластьЛегенды.Право			= 1;
	Диаграмма.ОбластьЛегенды.Рамка			= БезРамки;
	Диаграмма.ОбластьЛегенды.ПрозрачныйФон	= Истина;
	Диаграмма.ОбластьЛегенды.ЦветТекста		= ЦветаСтиля.ЦветНадписейМонитораРуководителя;
	Диаграмма.ОбластьЛегенды.Шрифт			= Новый Шрифт(,7);
	Диаграмма.ОбластьЛегенды.Прокрутка		= Ложь;
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКомпоновщикОтчетаСервер(СвойстваОтчета, Виджет, ОтборОрганизация, ТекущаяДатаСеанса)
	
	НастройкаВиджета = Обработки.МониторыРуководителя.НастройкаВиджетаТекущая(Виджет);
	
	ПараметрыИОтборы = Новый Массив;
	
	Если СвойстваОтчета.ИмяОтчета = "Продажи" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период);
		ПериодОтчета.ДатаОкончания = КонецДня(ТекущаяДатаСеанса);
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "Период");
		Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
		ПараметрыИОтборы.Добавить(Настройка);
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "Периодичность");
		Настройка.Вставить("ПравоеЗначение", НастройкаВиджета.Периодичность);
		ПараметрыИОтборы.Добавить(Настройка);
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "Организация");
			Настройка.Вставить("ПравоеЗначение", ОтборОрганизация);
			ПараметрыИОтборы.Добавить(Настройка);
		КонецЕсли;
		
	ИначеЕсли СвойстваОтчета.ИмяОтчета = "ДоходыИРасходы" Тогда
		
		Если НастройкаВиджета.РасчетПрибыли = "ПоОплате" Тогда
			СвойстваОтчета.ИмяОтчета = "ДоходыИРасходыКассовымМетодом";
		КонецЕсли;
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период);
		ПериодОтчета.ДатаОкончания = КонецДня(ТекущаяДатаСеанса);
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "СтПериод");
		Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
		ПараметрыИОтборы.Добавить(Настройка);
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "Периодичность");
		Настройка.Вставить("ПравоеЗначение", НастройкаВиджета.Периодичность);
		ПараметрыИОтборы.Добавить(Настройка);
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "Организация");
			Настройка.Вставить("ПравоеЗначение", ОтборОрганизация);
			ПараметрыИОтборы.Добавить(Настройка);
		КонецЕсли;
	
	ИначеЕсли СвойстваОтчета.ИмяОтчета = "ДенежныеСредства" Тогда
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "Организация");
			Настройка.Вставить("ПравоеЗначение", ОтборОрганизация);
			ПараметрыИОтборы.Добавить(Настройка);
		КонецЕсли;
		
		Если СвойстваОтчета.КлючВарианта = "Анализ движений" Тогда
			
			ПериодОтчета = Новый СтандартныйПериод;
			ПериодОтчета.ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период);
			ПериодОтчета.ДатаОкончания = КонецДня(ТекущаяДатаСеанса);
			
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "СтПериод");
			Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
			ПараметрыИОтборы.Добавить(Настройка);
			
		Иначе
			
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "КонецПериода");
			Настройка.Вставить("ПравоеЗначение", КонецДня(ТекущаяДатаСеанса));
			ПараметрыИОтборы.Добавить(Настройка);
			
		КонецЕсли;
		
		Если СвойстваОтчета.Свойство("ТипДенежныхСредств") Тогда
			ТипДС = ПредопределенноеЗначение("Перечисление.ТипыДенежныхСредств." + СвойстваОтчета.ТипДенежныхСредств);
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "ТипДенежныхСредств");
			Настройка.Вставить("ПравоеЗначение", ТипДС);
			ПараметрыИОтборы.Добавить(Настройка);
		КонецЕсли;
		
	ИначеЕсли СвойстваОтчета.ИмяОтчета = "РасчетыСПокупателями" Или СвойстваОтчета.ИмяОтчета = "РасчетыСПоставщиками" Тогда
		
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.ДатаНачала = Перечисления.ВидыПериодовМонитораРуководителя.ПолучитьНачалоПериода(ТекущаяДатаСеанса, НастройкаВиджета.Период);
		ПериодОтчета.ДатаОкончания = КонецДня(ТекущаяДатаСеанса);
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "Период");
		Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
		ПараметрыИОтборы.Добавить(Настройка);
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			Настройка = Новый Структура;
			Настройка.Вставить("ИмяПоля", "Организация");
			Настройка.Вставить("ПравоеЗначение", ОтборОрганизация);
			ПараметрыИОтборы.Добавить(Настройка);
		КонецЕсли;
		
	ИначеЕсли СвойстваОтчета.ИмяОтчета = "СводныйАнализЗаказовПокупателей" Тогда
		
		Настройка = Новый Структура;
		Настройка.Вставить("ИмяПоля", "КонецПериода");
		Настройка.Вставить("ПравоеЗначение", КонецДня(ТекущаяДатаСеанса));
		ПараметрыИОтборы.Добавить(Настройка);
		
	КонецЕсли;
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Процедура постобработки диаграмм. Устанавливает цвета серий и толщину линий
//
// Параметры:
//  Диаграмма				 - диаграмма - обрабатываемая диаграмма
//  ЕстьДанныеДляОтображения - булево	 - признак наличия/отсутствия данных
//  ЦветаСерий				 - массив	 - массив цветов в соответствии с которым назначаются цвета. Если не задан, то назначаются по умолчанию
&НаСервереБезКонтекста
Процедура УстановитьОтображениеДиаграммы(Диаграмма, ЕстьДанныеДляОтображения, ЦветаСерий = Неопределено)
	
	Если ЦветаСерий = Неопределено Тогда
		ЦветаСерий = РаботаСЦветомКлиентСервер.ЦветаСерийДиаграмм();
	КонецЕсли;
	
	// Если точек на диаграмме меньше, то серии рисуем толстой линией, если больше - то тонкой
	МаксТочекДиаграммыСТолстойЛинией = 32;
	
	ТонкаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	ТолстаяЛиния = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	
	Для ИндексСерии = 0 По Диаграмма.Серии.Количество() - 1 Цикл
		
		Серия = Диаграмма.Серии[ИндексСерии];
		
		Если ЕстьДанныеДляОтображения Тогда
			Серия.Цвет = ЦветаСерий[ИндексСерии];
		Иначе
			Серия.Цвет = ЦветаСтиля.ЦветДиаграммыОтсутствующиеДанные;
		КонецЕсли;
		
		Если Диаграмма.Точки.Количество() > МаксТочекДиаграммыСТолстойЛинией Тогда
			Серия.Линия = ТонкаяЛиния;
		Иначе
			Серия.Линия = ТолстаяЛиния;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДанныеДляОтображения Тогда
		Диаграмма.ОтображатьЗаголовок = Ложь;
		Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Ложь;
		Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыЗначений = Истина;
	Иначе
		Диаграмма.ОтображатьЗаголовок = Истина;
		Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыТочек = Ложь;
		Диаграмма.ОбластьПостроения.ОтображатьПодписиШкалыЗначений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОтображения()
	
	НастройкиОтображения = Новый Структура;
	
	НастройкиОтображения.Вставить("ТекущийВариантПродажи", ТекущийВариантПродажи);
	НастройкиОтображения.Вставить("ТекущийВариантДеньги", ТекущийВариантДеньги);
	НастройкиОтображения.Вставить("ТекущийВариантДолги", ТекущийВариантДолги);
	
	НастройкиОтображения.Вставить("РаскрыватьПодробнееПродажи", Элементы.ПодробнееПродажи.Видимость);
	НастройкиОтображения.Вставить("РаскрыватьПодробнееДеньги", Элементы.ПодробнееДеньги.Видимость);
	НастройкиОтображения.Вставить("РаскрыватьПодробнееДолги", Элементы.ПодробнееДолги.Видимость);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиДляМонитора", "НастройкиОтображения", НастройкиОтображения);
	
КонецПроцедуры

&НаКлиенте
Функция ВариантПоНомеру(ИмяВиджета, НомерВарианта)
	
	Элемент = Неопределено;
	
	Если ИмяВиджета = "Продажи" Тогда
		
		Если НомерВарианта = 1 Тогда
			Элемент = Элементы.ПродажиВариант;
		ИначеЕсли НомерВарианта = 2 Тогда
			Элемент = Элементы.РейтингТоваров;
		ИначеЕсли НомерВарианта = 3 Тогда
			Элемент = Элементы.РейтингМенеджеров;
		ИначеЕсли НомерВарианта = 4 Тогда
			Элемент = Элементы.Прибыль;
		КонецЕсли;
		
	ИначеЕсли ИмяВиджета = "Деньги" Тогда
		
		Если НомерВарианта = 1 Тогда
			Элемент = Элементы.ОстаткиДС;
		ИначеЕсли НомерВарианта = 2 Тогда
			Элемент = Элементы.Наличные;
		ИначеЕсли НомерВарианта = 3 Тогда
			Элемент = Элементы.Безналичные;
		ИначеЕсли НомерВарианта = 4 Тогда
			Элемент = Элементы.ДенежныйПоток;
		КонецЕсли;
		
	ИначеЕсли ИмяВиджета = "Долги" Тогда
		
		Если НомерВарианта = 1 Тогда
			Элемент = Элементы.ДолгПокупателей;
		ИначеЕсли НомерВарианта = 2 Тогда
			Элемент = Элементы.ДолгПоставщикам;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройкиОтображения()
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляМонитора", "НастройкиОтображения");
	Если НастройкиОтображения = Неопределено Тогда
		ТекущийВариантПродажи = 1;
		ТекущийВариантДеньги = 1;
		ТекущийВариантДолги = 1;
		Элементы.ПодробнееПродажи.Видимость = Ложь;
		Элементы.ПодробнееДеньги.Видимость = Ложь;
		Элементы.ПодробнееДолги.Видимость = Ложь;
	Иначе
		ТекущийВариантПродажи = НастройкиОтображения.ТекущийВариантПродажи;
		ТекущийВариантДеньги = НастройкиОтображения.ТекущийВариантДеньги;
		ТекущийВариантДолги = НастройкиОтображения.ТекущийВариантДолги;
		Элементы.ПодробнееПродажи.Видимость = НастройкиОтображения.РаскрыватьПодробнееПродажи;
		Элементы.ПодробнееДеньги.Видимость = НастройкиОтображения.РаскрыватьПодробнееДеньги;
		Элементы.ПодробнееДолги.Видимость = НастройкиОтображения.РаскрыватьПодробнееДолги;
	КонецЕсли;
	
	Элементы.СтрелкаПродажи.Картинка = ?(Элементы.ПодробнееПродажи.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	Элементы.СтрелкаДеньги.Картинка = ?(Элементы.ПодробнееДеньги.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	Элементы.СтрелкаДолги.Картинка = ?(Элементы.ПодробнееДолги.Видимость, БиблиотекаКартинок.СтрелкаВнизСплошная, БиблиотекаКартинок.СтрелкаВправоСплошная);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветВиджета(ИмяВиджета, НомерВключенногоВиджета)
	
	НомерВключенногоВиджета = НомерВключенногоВиджета + 1;
	Если НомерВключенногоВиджета % 2 = 1 Тогда
		ОчередьЦвета = "Первый";
	Иначе
		ОчередьЦвета = "Второй";
	КонецЕсли;
	
	Если ИмяВиджета = "Продажи" Тогда
		
		Элементы.ПродажиВариант.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантПродажи = 1, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.РейтингТоваров.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантПродажи = 2, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.РейтингМенеджеров.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантПродажи = 3, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.Прибыль.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантПродажи = 4, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ПродажиДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.РейтингТоваровДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.РейтингМенеджеровДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.ПрибыльДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ПодвалПродажи.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		СтраницаДиаграмм = Элементы.ДиаграммыПродажи.ПодчиненныеЭлементы[ТекущийВариантПродажи-1];
		Элементы.ДиаграммыПродажи.ТекущаяСтраница = СтраницаДиаграмм;
		
		СтраницаПодробнее = Элементы.ПодробнееПродажи.ПодчиненныеЭлементы[ТекущийВариантПродажи-1];
		Элементы.ПодробнееПродажи.ТекущаяСтраница = СтраницаПодробнее;
		
		Элементы.ПодробнееПродажи.Высота = СтраницаПодробнее.ПодчиненныеЭлементы[0].Высота;
		
	ИначеЕсли ИмяВиджета = "Деньги" Тогда
		
		Элементы.ОстаткиДС.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДеньги = 1, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.Наличные.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДеньги = 2, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.Безналичные.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДеньги = 3, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.ДенежныйПоток.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДеньги = 4, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ОстатокДенегДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.НаличныеДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.БезналичныеДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.ДенежныйПотокДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ПодвалДеньги.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		СтраницаДиаграмм = Элементы.ДиаграммыДеньги.ПодчиненныеЭлементы[ТекущийВариантДеньги-1];
		Элементы.ДиаграммыДеньги.ТекущаяСтраница = СтраницаДиаграмм;
		
		СтраницаПодробнее = Элементы.ПодробнееДеньги.ПодчиненныеЭлементы[ТекущийВариантДеньги-1];
		Элементы.ПодробнееДеньги.ТекущаяСтраница = СтраницаПодробнее;
		
		Элементы.ПодробнееДеньги.Высота = СтраницаПодробнее.ПодчиненныеЭлементы[0].Высота;
		
	ИначеЕсли ИмяВиджета = "Долги" Тогда
		
		Элементы.ДолгПокупателей.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДолги = 1, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		Элементы.ДолгПоставщикам.ЦветФона = ЦветаСтиля["Фон" + ?(ТекущийВариантДолги = 2, "", "Не") + "АктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ДолгПокупателейДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		Элементы.ДолгПоставщикамДиаграмма.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		Элементы.ПодвалДолги.ЦветФона = ЦветаСтиля["ФонАктивногоВарианта" + ОчередьЦвета];
		
		СтраницаДиаграмм = Элементы.ДиаграммыДолги.ПодчиненныеЭлементы[ТекущийВариантДолги-1];
		Элементы.ДиаграммыДолги.ТекущаяСтраница = СтраницаДиаграмм;
		
		СтраницаПодробнее = Элементы.ПодробнееДолги.ПодчиненныеЭлементы[ТекущийВариантДолги-1];
		Элементы.ПодробнееДолги.ТекущаяСтраница = СтраницаПодробнее;
		
		Элементы.ПодробнееДолги.Высота = СтраницаПодробнее.ПодчиненныеЭлементы[0].Высота;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонецПериода(Период, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Результат = КонецДня(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Результат = КонецНедели(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ДеньДекады = ДеньГода(Период) % 10;
		ДнейДоКонцаДекады = ?(ДеньДекады = 0, 0, 10 - ДеньДекады);
		Результат = КонецДня(Период + 86400*ДнейДоКонцаДекады);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат = КонецМесяца(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат = КонецКвартала(Период);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(Период) <=6 Тогда
			Результат = ДобавитьМесяц(КонецГода(Период), -6);
		Иначе
			Результат = КонецГода(Период);
		КонецЕсли;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат = КонецГода(Период);
	Иначе
		Результат = Период;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
