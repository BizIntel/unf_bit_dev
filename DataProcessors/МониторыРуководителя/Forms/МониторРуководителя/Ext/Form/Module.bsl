
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолучитьНастройки();
	ОбновитьДанные();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)

    ОбновитьДанные();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля Период.
//
Процедура ПериодПриИзменении(Элемент)
	
	Если Период = '00010101' Тогда
		Период = ТекущаяДата();
	КонецЕсли;	
		
	ОбновитьДанные();	
    	
КонецПроцедуры // ПериодПриИзменении()

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета ДенежныеСредства.
//
&НаКлиенте
Процедура ДенежныеСредстваПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "ДенежныеСредства");
	СвойстваОтчета.Вставить("КлючВарианта", "Ведомость");
	
	ПараметрыИОтборы = Новый Массив;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(НачалоДня(Период),-1);
	ПериодОтчета.ДатаОкончания = КонецДня(Период);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Организация");
	Настройка.Вставить("ПравоеЗначение", Организация);
	ПараметрыИОтборы.Добавить(Настройка);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "СтПериод");
	Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета Дебиторы.
//
&НаКлиенте
Процедура ДебиторыПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "РасчетыСПокупателями");
	СвойстваОтчета.Вставить("КлючВарианта", "Ведомость");
	
	ПараметрыИОтборы = Новый Массив;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(НачалоДня(Период),-1);
	ПериодОтчета.ДатаОкончания = КонецДня(Период);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Организация");
	Настройка.Вставить("ПравоеЗначение", Организация);
	ПараметрыИОтборы.Добавить(Настройка);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Период");
	Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета Кредиторы.
//
&НаКлиенте
Процедура КредиторыПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "РасчетыСПоставщиками");
	СвойстваОтчета.Вставить("КлючВарианта", "Ведомость");
	
	ПараметрыИОтборы = Новый Массив;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(НачалоДня(Период),-1);
	ПериодОтчета.ДатаОкончания = КонецДня(Период);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Организация");
	Настройка.Вставить("ПравоеЗначение", Организация);
	ПараметрыИОтборы.Добавить(Настройка);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Период");
	Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета ЗаказыПокупателей.
//
&НаКлиенте
Процедура ЗаказыПокупателейПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "СводныйАнализЗаказовПокупателей");
	СвойстваОтчета.Вставить("КлючВарианта", "Основной");
	
	ПараметрыИОтборы = Новый Массив;
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "КонецПериода");
	Настройка.Вставить("ПравоеЗначение", КонецДня(Период));
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФильтрПоСостояниюОтгрузки", "Неотгруженные");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета ЗаказыПоставщикам.
//
&НаКлиенте
Процедура ЗаказыПоставщикамПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "СводныйАнализЗаказовПоставщикам");
	СвойстваОтчета.Вставить("КлючВарианта", "Основной");
	
	ПараметрыИОтборы = Новый Массив;
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "КонецПериода");
	Настройка.Вставить("ПравоеЗначение", КонецДня(Период));
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 			 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",	 КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФильтрПоСостояниюПоступления", "Непоступившие");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",		 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета ПрибыльУбытки.
//
&НаКлиенте
Процедура ПрибыльПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "ДоходыИРасходы");
	СвойстваОтчета.Вставить("КлючВарианта", "Ведомость");
	
	ПараметрыИОтборы = Новый Массив;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(НачалоДня(Период),-1);
	ПериодОтчета.ДатаОкончания = КонецДня(Период);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Организация");
	Настройка.Вставить("ПравоеЗначение", Организация);
	ПараметрыИОтборы.Добавить(Настройка);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "СтПериод");
	Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура - обработчик события Нажатие гиперссылки Подробнее из виджета Продажи.
//
&НаКлиенте
Процедура ПродажиПодробнееНажатие(Элемент)
	
	СвойстваОтчета = Новый Структура;
	СвойстваОтчета.Вставить("ИмяОтчета", "Продажи");
	СвойстваОтчета.Вставить("КлючВарианта", "ДинамикаПродаж");
	
	ПараметрыИОтборы = Новый Массив;
	
	ПериодОтчета = Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала = ДобавитьМесяц(НачалоДня(Период),-1);
	ПериодОтчета.ДатаОкончания = КонецДня(Период);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Организация");
	Настройка.Вставить("ПравоеЗначение", Организация);
	ПараметрыИОтборы.Добавить(Настройка);
	
	Настройка = Новый Структура;
	Настройка.Вставить("ИмяПоля", "Период");
	Настройка.Вставить("ПравоеЗначение", ПериодОтчета);
	ПараметрыИОтборы.Добавить(Настройка);
	
	КомпоновщикНастроек = УправлениеНебольшойФирмойСервер.ПолучитьПереопределенныйКомпоновщикНастроек(СвойстваОтчета, ПараметрыИОтборы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",		 		 СвойстваОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",	 Истина);
	
	ОткрытьФорму("Отчет." + СвойстваОтчета.ИмяОтчета + ".Форма", ПараметрыФормы, Элемент, УникальныйИдентификатор);

КонецПроцедуры

// Процедура - обработчик события Выбор диаграммы Касса.
//
&НаКлиенте
Процедура ДиаграммаКассаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ЗначениеДиаграммы.Подсказка);
	
КонецПроцедуры

// Процедура - обработчик события Выбор диаграммы Счета.
//
&НаКлиенте
Процедура ДиаграммаСчетаВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ЗначениеДиаграммы.Подсказка);
	
КонецПроцедуры

// Процедура - обработчик события Выбор диаграммы Прибыль.
//
&НаКлиенте
Процедура ДиаграммаПрибыльВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ЗначениеДиаграммы.Подсказка);
	
КонецПроцедуры

// Процедура - обработчик события Выбор диаграммы Продажи.
//
&НаКлиенте
Процедура ДиаграммаПродажиВыбор(Элемент, ЗначениеДиаграммы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, ЗначениеДиаграммы.Подсказка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанные();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Процедура восстанавливает настройки общие для мониторов.
//
Процедура ПолучитьНастройки()
	
	Если Константы.УчетПоКомпании.Получить() Тогда
		Организация = Константы.Компания.Получить();
		Элементы.Организация.ТолькоПросмотр = Истина;
	Иначе
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляМониторов", "Организация");
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Организация = Справочники.Организации.ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Период = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиДляМониторов", "Период");
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНастройки()

&НаСервере
// Процедура сохраняет настройки общие для мониторов.
//
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиДляМониторов", "Организация", Организация);
	
	Если (НачалоДня(ТекущаяДатаСеанса()) = НачалоДня(Период)) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиДляМониторов", "Период", '00010101');
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиДляМониторов", "Период", Период);
	КонецЕсли;

КонецПроцедуры // СохранитьНастройки()

&НаСервере
// Процедура обновляет данные на форме.
//
Процедура ОбновитьДанные()
		
	ПредставлениеПериода = Формат(ДобавитьМесяц(Период, -1), "ДЛФ=DD") + " — " + Формат(Период, "ДЛФ=DD") + ?(НачалоДня(Период) = НачалоДня(ТекущаяДатаСеанса()), " (Сегодня)", "");
	
	ОбновитьВиджетДенежныеСредства();
	ОбновитьВиджетЗаказы();
	ОбновитьВиджетДебиторы();
	ОбновитьВиджетПрибыльУбыток();
	ОбновитьВиджетПродажи();
	ОбновитьВиджетКредиторы();
	
	СохранитьНастройки();
	
КонецПроцедуры // ОбновитьДанные()	

&НаСервере
Процедура ОбновитьВиджетДенежныеСредства()
	
	// Кассы.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДСОстаткиИОбороты.Период КАК Период,
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(
		|			&ДатаОтбораНачала,
		|			&ДатаОтбора,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипДенежныхСредств = &ТипДенежныхСредств) КАК ДСОстаткиИОбороты
		|ГДЕ
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток >= 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(СуммаКонечныйОстаток)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаОтбораНачала, &ДатаОтбора)";
	
	Запрос.УстановитьПараметр("ДатаОтбора", КонецДня(Период));
	Запрос.УстановитьПараметр("ДатаОтбораНачала", ДобавитьМесяц(НачалоДня(Период),-1));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Наличные);
	
	ДиаграммаКасса.Обновление = Ложь;
	ДиаграммаКасса.Очистить();
	ДиаграммаКасса.АвтоТранспонирование = Ложь;
	ДиаграммаКасса.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	Серия = ДиаграммаКасса.Серии.Добавить("Остаток");
	Серия.Цвет = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Оранжевый");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	НомерЗаписи = 0;
	ТекущийОстаток = 0;
	ОстатокВчера = 0;
	Пока Выборка.Следующий() Цикл
		
		Точка = ДиаграммаКасса.Точки.Добавить(Выборка.Период);
		Точка.Текст = Формат(Выборка.Период, "ДФ=dd.MM.yy");
		Точка.Расшифровка = Выборка.Период;
		Подсказка = "Остаток " + Выборка.СуммаКонечныйОстаток + " на " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy");
		ДиаграммаКасса.УстановитьЗначение(Точка, Серия, Выборка.СуммаКонечныйОстаток, Точка.Расшифровка, Подсказка);
		
		НомерЗаписи = НомерЗаписи + 1;
		Если НомерЗаписи = Выборка.Количество()-1 Тогда
			ОстатокВчера = ?(Выборка.СуммаКонечныйОстаток = Null, 0, Выборка.СуммаКонечныйОстаток);
		ИначеЕсли НомерЗаписи = Выборка.Количество() Тогда
			ТекущийОстаток = ?(Выборка.СуммаКонечныйОстаток = Null, 0, Выборка.СуммаКонечныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	ДиаграммаКасса.АвтоТранспонирование = Истина;
	ДиаграммаКасса.Обновление = Истина;
	
	Элементы.ДекорацияКассаОстаток.Заголовок = ?(ТекущийОстаток = 0, "—", УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ТекущийОстаток));
	ИзменениеПроцент = ?(ОстатокВчера = 0, 0, Окр((ТекущийОстаток - ОстатокВчера) / ОстатокВчера * 100));
	Если ИзменениеПроцент = 0 Тогда
		Элементы.ДекорацияКассаПроцент.Видимость = Ложь;
	ИначеЕсли ИзменениеПроцент < 0 Тогда
		Элементы.ДекорацияКассаПроцент.Видимость = Истина;
		Элементы.ДекорацияКассаПроцент.Заголовок = "" + Формат(ИзменениеПроцент, "ЧДЦ=") + "%";
		Элементы.ДекорацияКассаПроцент.ЦветТекста = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Красный");
	ИначеЕсли ИзменениеПроцент > 0 Тогда
		Элементы.ДекорацияКассаПроцент.Видимость = Истина;
		Элементы.ДекорацияКассаПроцент.Заголовок = "+" + Формат(ИзменениеПроцент, "ЧДЦ=") + "%";
		Элементы.ДекорацияКассаПроцент.ЦветТекста = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Зеленый");
	КонецЕсли;
	
	
	// Счета.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДСОстаткиИОбороты.Период КАК Период,
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства.ОстаткиИОбороты(
		|			&ДатаОтбораНачала,
		|			&ДатаОтбора,
		|			День,
		|			ДвиженияИГраницыПериода,
		|			Организация = &Организация
		|				И ТипДенежныхСредств = &ТипДенежныхСредств) КАК ДСОстаткиИОбороты
		|ГДЕ
		|	ДСОстаткиИОбороты.СуммаКонечныйОстаток >= 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(СуммаКонечныйОстаток)
		|ПО
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаОтбораНачала, &ДатаОтбора)";
	
	Запрос.УстановитьПараметр("ДатаОтбора", КонецДня(Период));
	Запрос.УстановитьПараметр("ДатаОтбораНачала", ДобавитьМесяц(НачалоДня(Период),-1));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипДенежныхСредств", Перечисления.ТипыДенежныхСредств.Безналичные);
	
	ДиаграммаСчета.Обновление = Ложь;
	ДиаграммаСчета.Очистить();
	ДиаграммаСчета.АвтоТранспонирование = Ложь;
	ДиаграммаСчета.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	Серия = ДиаграммаСчета.Серии.Добавить("Остаток");
	Серия.Цвет = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Оранжевый");
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	НомерЗаписи = 0;
	ТекущийОстаток = 0;
	ОстатокВчера = 0;
	Пока Выборка.Следующий() Цикл
		
		Точка = ДиаграммаСчета.Точки.Добавить(Выборка.Период);
		Точка.Текст = Формат(Выборка.Период, "ДФ=dd.MM.yy");
		Точка.Расшифровка = Выборка.Период;
		Подсказка = "Остаток " + Выборка.СуммаКонечныйОстаток + " на " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy");
		ДиаграммаСчета.УстановитьЗначение(Точка, Серия, Выборка.СуммаКонечныйОстаток, Точка.Расшифровка, Подсказка);
		
		НомерЗаписи = НомерЗаписи + 1;
		Если НомерЗаписи = Выборка.Количество()-1 Тогда
			ОстатокВчера = ?(Выборка.СуммаКонечныйОстаток = Null, 0, Выборка.СуммаКонечныйОстаток);
		ИначеЕсли НомерЗаписи = Выборка.Количество() Тогда
			ТекущийОстаток = ?(Выборка.СуммаКонечныйОстаток = Null, 0, Выборка.СуммаКонечныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	ДиаграммаСчета.АвтоТранспонирование = Истина;
	ДиаграммаСчета.Обновление = Истина;
	
	Элементы.ДекорацияСчетаОстаток.Заголовок = ?(ТекущийОстаток = 0, "—", УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ТекущийОстаток));
	ИзменениеПроцент = ?(ОстатокВчера = 0, 0, Окр((ТекущийОстаток - ОстатокВчера) / ОстатокВчера * 100));
	Если ИзменениеПроцент = 0 Тогда
		Элементы.ДекорацияСчетаПроцент.Видимость = Ложь;
	ИначеЕсли ИзменениеПроцент < 0 Тогда
		Элементы.ДекорацияСчетаПроцент.Видимость = Истина;
		Элементы.ДекорацияСчетаПроцент.Заголовок = "" + Формат(ИзменениеПроцент, "ЧДЦ=") + "%";
		Элементы.ДекорацияСчетаПроцент.ЦветТекста = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Красный");
	ИначеЕсли ИзменениеПроцент > 0 Тогда
		Элементы.ДекорацияСчетаПроцент.Видимость = Истина;
		Элементы.ДекорацияСчетаПроцент.Заголовок = "+" + Формат(ИзменениеПроцент, "ЧДЦ=") + "%";
		Элементы.ДекорацияСчетаПроцент.ЦветТекста = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Зеленый");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетПрибыльУбыток()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоходыИРасходыОбороты.Период КАК Период,
		|	ДоходыИРасходыОбороты.СуммаДоходовОборот КАК Доходы,
		|	ДоходыИРасходыОбороты.СуммаРасходовОборот КАК Расходы,
		|	ДоходыИРасходыОбороты.СуммаДоходовОборот - ДоходыИРасходыОбороты.СуммаРасходовОборот КАК Прибыль
		|ИЗ
		|	РегистрНакопления.ДоходыИРасходы.Обороты(
		|			&ДатаОтбораНачала,
		|			&ДатаОтбораОкончания,
		|			День,
		|			Организация = &Организация
		|				И СчетУчета <> &ПустойСчет) КАК ДоходыИРасходыОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Доходы),
		|	СУММА(Расходы),
		|	СУММА(Прибыль)
		|ПО
		|	ОБЩИЕ,
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаОтбораНачала, &ДатаОтбораОкончания)";

	Запрос.УстановитьПараметр("ДатаОтбораНачала", ДобавитьМесяц(НачалоДня(Период),-1));
	Запрос.УстановитьПараметр("ДатаОтбораОкончания", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Управленческий.ПустаяСсылка());

	ВыборкаОбщийИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаОбщийИтог.Следующий() Тогда
		Элементы.ДекорацияДоходыИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщийИтог.Доходы);
		Элементы.ДекорацияРасходыИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщийИтог.Расходы);
		Элементы.ДекорацияПрибыльИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщийИтог.Прибыль);
	Иначе
		Элементы.ДекорацияДоходыИтог.Заголовок = "—";
		Элементы.ДекорацияРасходыИтог.Заголовок = "—";
		Элементы.ДекорацияПрибыльИтог.Заголовок = "—";
	КонецЕсли;
	
	ДиаграммаПрибыль.Обновление = Ложь;
	ДиаграммаПрибыль.Очистить();
	ДиаграммаПрибыль.АвтоТранспонирование = Ложь;
	ДиаграммаПрибыль.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	Серия = ДиаграммаПрибыль.Серии.Добавить("Прибыль (убыток)");
	Серия.Цвет = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Синий");
	Серия.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
	Серия.Маркер = ТипМаркераДиаграммы.Нет;
	
	МаксЗначение = 0;
	МинЗначение = 0;
	Выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
	Пока Выборка.Следующий() Цикл
		
		Точка = ДиаграммаПрибыль.Точки.Добавить(Выборка.Период);
		Если Выборка.Прибыль = Null Тогда
			ПрибыльУбыток = 0;
		Иначе
			ПрибыльУбыток = Выборка.Прибыль;
		КонецЕсли;
		Точка.Текст = Формат(Выборка.Период, "ДФ=dd.MM.yy");
		Точка.Расшифровка = Выборка.Период;
		Подсказка = ?(ПрибыльУбыток < 0, "Убыток " + -ПрибыльУбыток, "Прибыль " + ПрибыльУбыток) + " на " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy");
		ДиаграммаПрибыль.УстановитьЗначение(Точка, Серия, Выборка.Прибыль, Точка.Расшифровка, Подсказка);
		
		Если ПрибыльУбыток > МаксЗначение Тогда
			МаксЗначение = ПрибыльУбыток;
		ИначеЕсли ПрибыльУбыток < МинЗначение Тогда
			МинЗначение = ПрибыльУбыток;
		КонецЕсли;
		 
	КонецЦикла;
	
	ДиаграммаПрибыль.МаксимальноеЗначение = Макс(Макс(МаксЗначение, -МаксЗначение), Макс(МинЗначение, -МинЗначение));
	ДиаграммаПрибыль.МинимальноеЗначение = -ДиаграммаПрибыль.МаксимальноеЗначение;
	
	ДиаграммаПрибыль.АвтоТранспонирование = Истина;
	ДиаграммаПрибыль.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетДебиторы()
	
	ШиринаКонтрагент = 28;
	ШиринаДолг = 9;
	ШиринаПросрочено = 9;
	ШиринаАванс = 9;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПокупателямиОстаткиПросрочено.ТипРасчетов КАК ТипРасчетов,
		|	РасчетыСПокупателямиОстаткиПросрочено.Контрагент КАК Контрагент,
		|	РасчетыСПокупателямиОстаткиПросрочено.СуммаОстаток
		|ПОМЕСТИТЬ втПросрочено
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(
		|			&ДатаОтбора,
		|			Организация = &Организация
		|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				И Договор.СрокОплатыПокупателя > 0
		|				И РАЗНОСТЬДАТ(ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.АктВыполненныхРабот)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.АктВыполненныхРабот).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.Взаимозачет)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.Взаимозачет).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ЗаказПокупателя)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ЗаказПокупателя).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ОтчетКомиссионера)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ОтчетКомиссионера).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ОтчетОПереработке)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ОтчетОПереработке).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ПередачаВА)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПередачаВА).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ПоступлениеВКассу)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПоступлениеВКассу).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ПоступлениеНаСчет)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПоступлениеНаСчет).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ПриходнаяНакладная)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПриходнаяНакладная).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.РасходнаяНакладная)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходнаяНакладная).Дата
		|						ИНАЧЕ Документ.Дата
		|					КОНЕЦ, &ДатаОтбора, ДЕНЬ) > Договор.СрокОплатыПокупателя) КАК РасчетыСПокупателямиОстаткиПросрочено
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТипРасчетов,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент,
		|	РасчетыСПокупателямиОстатки.Контрагент.Представление,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				ТОГДА РасчетыСПокупателямиОстатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДолга,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПокупателямиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				ТОГДА -РасчетыСПокупателямиОстатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаАванса,
		|	СУММА(ЕСТЬNULL(втПросрочено.СуммаОстаток, 0)) КАК СуммаПросрочено
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями.Остатки(&ДатаОтбора, Организация = &Организация) КАК РасчетыСПокупателямиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПросрочено КАК втПросрочено
		|		ПО РасчетыСПокупателямиОстатки.ТипРасчетов = втПросрочено.ТипРасчетов
		|			И РасчетыСПокупателямиОстатки.Контрагент = втПросрочено.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПокупателямиОстатки.Контрагент,
		|	РасчетыСПокупателямиОстатки.Контрагент.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	СуммаДолга УБЫВ
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
		|	СУММА(СуммаДолга),
		|	СУММА(СуммаАванса),
		|	СУММА(СуммаПросрочено)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДатаОтбора", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаОбщиеИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщиеИтоги.Следующий() Тогда
		Элементы.ДекорацияДебиторыКоличество.Заголовок = ВыборкаОбщиеИтоги.Контрагент;
		Элементы.ДекорацияДебиторыЗадолженностьИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщиеИтоги.СуммаДолга);
		Элементы.ДекорацияДебиторыПросроченоИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщиеИтоги.СуммаПросрочено);
	Иначе
		Элементы.ДекорацияДебиторыКоличество.Заголовок = "—";
		Элементы.ДекорацияДебиторыЗадолженностьИтог.Заголовок = "—";
		Элементы.ДекорацияДебиторыПросроченоИтог.Заголовок = "—";
	КонецЕсли;
	
	Элементы.ДебиторыКонтрагент.Заголовок = "";
	Элементы.ДебиторыКонтрагент.Подсказка = "";
	Элементы.ДебиторыДолг.Заголовок = "";
	Элементы.ДебиторыДолг.Подсказка = "";
	Элементы.ДебиторыПросрочено.Заголовок = "";
	Элементы.ДебиторыПросрочено.Подсказка = "";
	Элементы.ДебиторыАванс.Заголовок = "";
	Элементы.ДебиторыАванс.Подсказка = "";
	
	Выборка = ВыборкаОбщиеИтоги.Выбрать();
	Для Индекс = 1 По 5 Цикл
		Если Выборка.Следующий() Тогда
			
			СуммаДолгаПредставление = Формат(Выборка.СуммаДолга, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			СуммаПросроченоПредставление = Формат(Выборка.СуммаПросрочено, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			СуммаАвансаПредставление = Формат(Выборка.СуммаАванса, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			
			ЗаголовокКонтрагент = СтрЗаменить(Выборка.КонтрагентПредставление, " ", Символы.НПП);
			Элементы.ДебиторыКонтрагент.Заголовок = Элементы.ДебиторыКонтрагент.Заголовок + ?(ПустаяСтрока(Элементы.ДебиторыКонтрагент.Заголовок),"", Символы.ПС) 
				+ Лев(ЗаголовокКонтрагент, ШиринаКонтрагент) + ?(СтрДлина(ЗаголовокКонтрагент) > ШиринаКонтрагент, "...", "");
			Элементы.ДебиторыКонтрагент.Подсказка = Элементы.ДебиторыКонтрагент.Подсказка + ?(ПустаяСтрока(Элементы.ДебиторыКонтрагент.Подсказка),"", Символы.ПС) 
				+ ЗаголовокКонтрагент;
				
			Элементы.ДебиторыДолг.Заголовок = Элементы.ДебиторыДолг.Заголовок + ?(ПустаяСтрока(Элементы.ДебиторыДолг.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаДолгаПредставление, ШиринаДолг) + ?(СтрДлина(СуммаДолгаПредставление) > ШиринаДолг, "...", "");
			Элементы.ДебиторыДолг.Подсказка = Элементы.ДебиторыДолг.Подсказка + ?(ПустаяСтрока(Элементы.ДебиторыДолг.Подсказка),"", Символы.ПС) 
				+ СуммаДолгаПредставление;
				
			Элементы.ДебиторыПросрочено.Заголовок = Элементы.ДебиторыПросрочено.Заголовок + ?(ПустаяСтрока(Элементы.ДебиторыПросрочено.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаПросроченоПредставление, ШиринаПросрочено) + ?(СтрДлина(СуммаПросроченоПредставление) > ШиринаПросрочено, "...", "");
			Элементы.ДебиторыПросрочено.Подсказка = Элементы.ДебиторыПросрочено.Подсказка + ?(ПустаяСтрока(Элементы.ДебиторыПросрочено.Подсказка),"", Символы.ПС) 
				+ СуммаПросроченоПредставление;
				
			Элементы.ДебиторыАванс.Заголовок = Элементы.ДебиторыАванс.Заголовок + ?(ПустаяСтрока(Элементы.ДебиторыАванс.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаАвансаПредставление, ШиринаАванс) + ?(СтрДлина(СуммаАвансаПредставление) > ШиринаАванс, "...", "");
			Элементы.ДебиторыАванс.Подсказка = Элементы.ДебиторыАванс.Подсказка + ?(ПустаяСтрока(Элементы.ДебиторыАванс.Подсказка),"", Символы.ПС) 
				+ СуммаАвансаПредставление;
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетКредиторы()
	
	ШиринаКонтрагент = 28;
	ШиринаДолг = 9;
	ШиринаПросрочено = 9;
	ШиринаАванс = 9;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстаткиПросрочено.ТипРасчетов,
		|	РасчетыСПоставщикамиОстаткиПросрочено.Контрагент,
		|	РасчетыСПоставщикамиОстаткиПросрочено.СуммаОстаток
		|ПОМЕСТИТЬ втПросрочено
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|			&ДатаОтбора,
		|			Организация = &Организация
		|				И ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				И Договор.СрокОплатыПоставщику > 0
		|				И РАЗНОСТЬДАТ(ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.АвансовыйОтчет)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.АвансовыйОтчет).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.Взаимозачет)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.Взаимозачет).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ДополнительныеРасходы)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ДополнительныеРасходы).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ОтчетКомитенту)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ОтчетКомитенту).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ОтчетПереработчика)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ОтчетПереработчика).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.ПриходнаяНакладная)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.ПриходнаяНакладная).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.РасходИзКассы)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходИзКассы).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.РасходнаяНакладная)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходнаяНакладная).Дата
		|						КОГДА ТИПЗНАЧЕНИЯ(Документ) = ТИП(Документ.РасходСоСчета)
		|							ТОГДА ВЫРАЗИТЬ(Документ КАК Документ.РасходСоСчета).Дата
		|						ИНАЧЕ Документ.Дата
		|					КОНЕЦ, &ДатаОтбора, ДЕНЬ) > Договор.СрокОплатыПоставщику) КАК РасчетыСПоставщикамиОстаткиПросрочено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент,
		|	РасчетыСПоставщикамиОстатки.Контрагент.Представление,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Долг)
		|				ТОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДолга,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыСПоставщикамиОстатки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетов.Аванс)
		|				ТОГДА -РасчетыСПоставщикамиОстатки.СуммаОстаток
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаАванса,
		|	СУММА(ЕСТЬNULL(втПросрочено.СуммаОстаток, 0)) КАК СуммаПросрочено
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОтбора, Организация = &Организация) КАК РасчетыСПоставщикамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПросрочено КАК втПросрочено
		|		ПО РасчетыСПоставщикамиОстатки.ТипРасчетов = втПросрочено.ТипРасчетов
		|			И РасчетыСПоставщикамиОстатки.Контрагент = втПросрочено.Контрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщикамиОстатки.Контрагент,
		|	РасчетыСПоставщикамиОстатки.Контрагент.Представление
		|
		|УПОРЯДОЧИТЬ ПО
		|	СуммаДолга УБЫВ
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагент),
		|	СУММА(СуммаДолга),
		|	СУММА(СуммаАванса),
		|	СУММА(СуммаПросрочено)
		|ПО
		|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ДатаОтбора", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВыборкаОбщиеИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщиеИтоги.Следующий() Тогда
		Элементы.ДекорацияКредиторыКоличество.Заголовок = ВыборкаОбщиеИтоги.Контрагент;
		Элементы.ДекорацияКредиторыЗадолженностьИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщиеИтоги.СуммаДолга);
		Элементы.ДекорацияКредиторыПросроченоИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщиеИтоги.СуммаПросрочено);
	Иначе
		Элементы.ДекорацияКредиторыКоличество.Заголовок = "—";
		Элементы.ДекорацияКредиторыЗадолженностьИтог.Заголовок = "—";
		Элементы.ДекорацияКредиторыПросроченоИтог.Заголовок = "—";
	КонецЕсли;
	
	Элементы.КредиторыКонтрагент.Заголовок = "";
	Элементы.КредиторыКонтрагент.Подсказка = "";
	Элементы.КредиторыДолг.Заголовок = "";
	Элементы.КредиторыДолг.Подсказка = "";
	Элементы.КредиторыПросрочено.Заголовок = "";
	Элементы.КредиторыПросрочено.Подсказка = "";
	Элементы.КредиторыАванс.Заголовок = "";
	Элементы.КредиторыАванс.Подсказка = "";
	
	Выборка = ВыборкаОбщиеИтоги.Выбрать();
	Для Индекс = 1 По 5 Цикл
		Если Выборка.Следующий() Тогда
			
			СуммаДолгаПредставление = Формат(Выборка.СуммаДолга, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			СуммаПросроченоПредставление = Формат(Выборка.СуммаПросрочено, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			СуммаАвансаПредставление = Формат(Выборка.СуммаАванса, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00; ЧГ=3,0");
			
			ЗаголовокКонтрагент = СтрЗаменить(Выборка.КонтрагентПредставление, " ", Символы.НПП);
			Элементы.КредиторыКонтрагент.Заголовок = Элементы.КредиторыКонтрагент.Заголовок + ?(ПустаяСтрока(Элементы.КредиторыКонтрагент.Заголовок),"", Символы.ПС) 
				+ Лев(ЗаголовокКонтрагент, ШиринаКонтрагент) + ?(СтрДлина(ЗаголовокКонтрагент) > ШиринаКонтрагент, "...", "");
			Элементы.КредиторыКонтрагент.Подсказка = Элементы.КредиторыКонтрагент.Подсказка + ?(ПустаяСтрока(Элементы.КредиторыКонтрагент.Подсказка),"", Символы.ПС) 
				+ ЗаголовокКонтрагент;
				
			Элементы.КредиторыДолг.Заголовок = Элементы.КредиторыДолг.Заголовок + ?(ПустаяСтрока(Элементы.КредиторыДолг.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаДолгаПредставление, ШиринаДолг) + ?(СтрДлина(СуммаДолгаПредставление) > ШиринаДолг, "...", "");
			Элементы.КредиторыДолг.Подсказка = Элементы.КредиторыДолг.Подсказка + ?(ПустаяСтрока(Элементы.КредиторыДолг.Подсказка),"", Символы.ПС) 
				+ СуммаДолгаПредставление;
				
			Элементы.КредиторыПросрочено.Заголовок = Элементы.КредиторыПросрочено.Заголовок + ?(ПустаяСтрока(Элементы.КредиторыПросрочено.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаПросроченоПредставление, ШиринаПросрочено) + ?(СтрДлина(СуммаПросроченоПредставление) > ШиринаПросрочено, "...", "");
			Элементы.КредиторыПросрочено.Подсказка = Элементы.КредиторыПросрочено.Подсказка + ?(ПустаяСтрока(Элементы.КредиторыПросрочено.Подсказка),"", Символы.ПС) 
				+ СуммаПросроченоПредставление;
				
			Элементы.КредиторыАванс.Заголовок = Элементы.КредиторыАванс.Заголовок + ?(ПустаяСтрока(Элементы.КредиторыАванс.Заголовок),"", Символы.ПС) 
				+ Лев(СуммаАвансаПредставление, ШиринаАванс) + ?(СтрДлина(СуммаАвансаПредставление) > ШиринаАванс, "...", "");
			Элементы.КредиторыАванс.Подсказка = Элементы.КредиторыАванс.Подсказка + ?(ПустаяСтрока(Элементы.КредиторыАванс.Подсказка),"", Символы.ПС) 
				+ СуммаАвансаПредставление;
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетЗаказы()
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	// ЗАКАЗЫ ПОКУПАТЕЛЕЙ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период < &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период = &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|			КОГДА ДокЗаказПокупателя.ЗапланироватьОплату
		|					И НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПокупателя.Ссылка
		|		КОНЕЦ) КАК ЗаказыПокупателейНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказПокупателя.Ссылка) КАК ЗаказыПокупателейВРаботе
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ДокЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикВыполнения.Заказ
		|			И (ГрафикВыполнения.Период <= &НачалоДняДатаОтбора)
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказПокупателя.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= &НачалоДняДатаОтбора)}
		|ГДЕ
		|	ДокЗаказПокупателя.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|	И НЕ ДокЗаказПокупателя.ПометкаУдаления
		|	И ДокЗаказПокупателя.Проведен
		|	И НЕ ДокЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|	И ВЫБОР
		|			КОГДА &УчетПоКомпании = ЛОЖЬ
		|				ТОГДА ДокЗаказПокупателя.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";

	Запрос.УстановитьПараметр("НачалоДняДатаОтбора", НачалоДня(Период));
	Запрос.УстановитьПараметр("УчетПоКомпании", УчетПоКомпании);
	Запрос.УстановитьПараметр("Организация", Организация);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Элементы.ДекорацияКОтгрузкеКоличество.Заголовок = ?(Выборка.ЗаказыПокупателейВРаботе = 0, "—", Выборка.ЗаказыПокупателейВРаботе);
		Элементы.ДекорацияКОтгрузкеСегодняКоличество.Заголовок = ?(Выборка.ЗаказыПокупателейНаСегодня = 0, "—", Выборка.ЗаказыПокупателейНаСегодня);
		Элементы.ДекорацияКОтгрузкеПросроченоКоличество.Заголовок = ?(Выборка.ЗаказыПокупателейПросроченоВыполнение = 0, "—", Выборка.ЗаказыПокупателейПросроченоВыполнение);
	КонецЕсли;
	
	// ЗАКАЗЫ ПОСТАВЩИКАМ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период < &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоВыполнение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА НЕ ГрафикВыполнения.Заказ ЕСТЬ NULL 
		|					И ГрафикВыполнения.Период = &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|			КОГДА НЕ ГрафикОплаты.СчетНаОплату ЕСТЬ NULL 
		|					И ГрафикОплаты.Период = &НачалоДняДатаОтбора
		|				ТОГДА ДокЗаказПоставщику.Ссылка
		|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокЗаказПоставщику.Ссылка) КАК ЗаказыПоставщикамВРаботе
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДокЗаказПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикВыполненияЗаказов КАК ГрафикВыполнения
		|		ПО ДокЗаказПоставщику.Ссылка = ГрафикВыполнения.Заказ
		|			И (ГрафикВыполнения.Период <= &НачалоДняДатаОтбора)
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикОплатыЗаказов КАК ГрафикОплаты
		|		ПО ДокЗаказПоставщику.Ссылка = ГрафикОплаты.СчетНаОплату
		|			И (ГрафикОплаты.Период <= &НачалоДняДатаОтбора)}
		|ГДЕ
		|	ДокЗаказПоставщику.Проведен
		|	И НЕ ДокЗаказПоставщику.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПоставщикам.Завершен)
		|	И ВЫБОР
		|			КОГДА &УчетПоКомпании = ЛОЖЬ
		|				ТОГДА ДокЗаказПоставщику.Организация = &Организация
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";

	Запрос.УстановитьПараметр("НачалоДняДатаОтбора", НачалоДня(Период));
	Запрос.УстановитьПараметр("УчетПоКомпании", УчетПоКомпании);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Элементы.ДекорацияКПоступлениюКоличество.Заголовок = ?(Выборка.ЗаказыПоставщикамВРаботе = 0, "—", Выборка.ЗаказыПоставщикамВРаботе);
		Элементы.ДекорацияКПоступлениюСегодняКоличество.Заголовок = ?(Выборка.ЗаказыПоставщикамНаСегодня = 0, "—", Выборка.ЗаказыПоставщикамНаСегодня);
		Элементы.ДекорацияКПоступлениюПросроченоКоличество.Заголовок = ?(Выборка.ЗаказыПоставщикамПросроченоВыполнение = 0, "—", Выборка.ЗаказыПоставщикамПросроченоВыполнение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВиджетПродажи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ПродажиОбороты.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
		|				ТОГДА ПродажиОбороты.Номенклатура
		|		КОНЕЦ) КАК Товары,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
		|			КОГДА ПродажиОбороты.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|				ТОГДА ПродажиОбороты.Номенклатура
		|		КОНЕЦ) КАК Услуги
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаОтбораНачала, &ДатаОтбора, , Организация = &Организация) КАК ПродажиОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПродажиОбороты.Период КАК Период,
		|	ПродажиОбороты.СуммаОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&ДатаОтбораНачала, &ДатаОтбора, День, Организация = &Организация) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	ОБЩИЕ,
		|	Период ПЕРИОДАМИ(ДЕНЬ, &ДатаОтбораНачала, &ДатаОтбора)";

	Запрос.УстановитьПараметр("ДатаОтбора", КонецДня(Период));
	Запрос.УстановитьПараметр("ДатаОтбораНачала", ДобавитьМесяц(НачалоДня(Период),-1));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Выборка.Следующий();
	Элементы.ДекорацияТоварыКоличество.Заголовок = ?(Выборка.Товары = 0, "—", Выборка.Товары);
	Элементы.ДекорацияУслугиКоличество.Заголовок = ?(Выборка.Услуги = 0, "—", Выборка.Услуги);
	
	ВыборкаОбщийИтог = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаОбщийИтог.Следующий() Тогда
		Элементы.ДекорацияПродажиИтог.Заголовок = УправлениеНебольшойФирмойСервер.СформироватьЗаголовок(ВыборкаОбщийИтог.Сумма);
	Иначе
		Элементы.ДекорацияПродажиИтог.Заголовок = "—";
	КонецЕсли;
	
	ДиаграммаПродажи.Обновление = Ложь;
	ДиаграммаПродажи.Очистить();
	ДиаграммаПродажи.АвтоТранспонирование = Ложь;
	ДиаграммаПродажи.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, -1);
	
	Серия = ДиаграммаПродажи.Серии.Добавить("Сумма продаж");
	Серия.Цвет = УправлениеНебольшойФирмойСервер.ЦветДляМониторов("Темно-зеленый");
	
	Выборка = ВыборкаОбщийИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");

	Пока Выборка.Следующий() Цикл
		
		Точка = ДиаграммаПродажи.Точки.Добавить(Выборка.Период);
		Точка.Текст = Формат(Выборка.Период, "ДФ=dd.MM.yy");
		Точка.Расшифровка = Выборка.Период;
		Подсказка = "Сумма продаж " + Выборка.Сумма + " на " + Формат(Выборка.Период, "ДФ=dd.MM.yyyy");
		ДиаграммаПродажи.УстановитьЗначение(Точка, Серия, Выборка.Сумма, Точка.Расшифровка, Подсказка);
		 
	КонецЦикла;
	
	ДиаграммаПродажи.АвтоТранспонирование = Истина;
	ДиаграммаПродажи.Обновление = Истина;
	
КонецПроцедуры

#КонецОбласти
