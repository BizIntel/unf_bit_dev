#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
//
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. 
// После отладки рекомендуется внести соответствующие исправления обработчиков
// в базе «Конвертация данных 2.0» и заново сформировать файл правил.
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем Параметры;
Перем Правила;
Перем Алгоритмы;
Перем Запросы;
Перем ТаблицаПравилВыгрузки;
Перем ТаблицаНастройкиПараметров;
Перем УзелДляОбмена; // только для on-line обмена
Перем ОбщиеПроцедурыФункции;
Перем ДатаНачала;
Перем ДатаОкончания;
Перем ДатаВыгрузкиДанных; // только для on-line обмена
Перем КомментарийПриВыгрузкеДанных;
Перем КомментарийПриЗагрузкеДанных;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем ЗначениеПустаяДата;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	Параметры.Вставить("ВидЗаказа", Справочники.ВидыЗаказовПокупателей.Основной);
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗаказовПокупателейПорядокСостояний.Состояние КАК СостояниеЗаказов
	|ИЗ
	|	Справочник.ВидыЗаказовПокупателей.ПорядокСостояний КАК ВидыЗаказовПокупателейПорядокСостояний
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЗаказовПокупателейПорядокСостояний.НомерСтроки";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Параметры.Вставить("СостояниеЗаказовПокупателей", ВыборкаЗапроса.СостояниеЗаказов);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЗаказовПоставщикам.Ссылка КАК СостояниеЗаказов
	|ИЗ
	|	Справочник.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияЗаказовПоставщикам.РеквизитДопУпорядочивания";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Параметры.Вставить("СостояниеЗаказовПоставщикам", ВыборкаЗапроса.СостояниеЗаказов);
	КонецЕсли;
	
	// Валюта
	Параметры.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	
	ЗагруженныеОбъектыПереноса = Новый ТаблицаЗначений;
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("ИмяПКО");
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("Объект");
	ЗагруженныеОбъектыПереноса.Колонки.Добавить("Параметры");
	
	Параметры.Вставить("ЗагруженныеОбъектыПереноса", ЗагруженныеОбъектыПереноса);

КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных() Экспорт

	
	Перем КДОбъект;
	
	КДОбъект = Обработки.КонвертацияОбъектовИнформационныхБаз.Создать();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасыПринятые.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПринятые КАК ВводНачальныхОстатковЗапасыПринятые
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасыПереданные.Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПереданные КАК ВводНачальныхОстатковЗапасыПереданные) КАК ТаблицаНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатура.Номенклатура");
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Количество() > 0 Тогда
		Константы.ФункциональнаяОпцияИспользоватьПартии.Установить(Истина);
	КонецЕсли;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СправочникОбъект = ВыборкаЗапроса.Номенклатура.ПолучитьОбъект();
		Если НЕ СправочникОбъект.ИспользоватьПартии Тогда
			СправочникОбъект.ИспользоватьПартии = Истина;
			СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			КДОбъект.ЗаписатьОбъектВИБ(СправочникОбъект, ТипЗнч(СправочникОбъект));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасы.Номенклатура КАК Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.Запасы КАК ВводНачальныхОстатковЗапасы
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасы.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасыВРазрезеГТД.Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыВРазрезеГТД КАК ВводНачальныхОстатковЗапасыВРазрезеГТД
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасыВРазрезеГТД.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасыПереданные.Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПереданные КАК ВводНачальныхОстатковЗапасыПереданные
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасыПереданные.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВводНачальныхОстатковЗапасыПринятые.Номенклатура
	|	ИЗ
	|		Документ.ВводНачальныхОстатков.ЗапасыПринятые КАК ВводНачальныхОстатковЗапасыПринятые
	|	ГДЕ
	|		ВводНачальныхОстатковЗапасыПринятые.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ТаблицаНоменклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатура.Номенклатура");
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Количество() > 0 Тогда
		Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Установить(Истина);
	КонецЕсли;
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СправочникОбъект = ВыборкаЗапроса.Номенклатура.ПолучитьОбъект();
		Если НЕ СправочникОбъект.ИспользоватьХарактеристики Тогда
			СправочникОбъект.ИспользоватьХарактеристики = Истина;
			СправочникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
			КДОбъект.ЗаписатьОбъектВИБ(СправочникОбъект, ТипЗнч(СправочникОбъект));
		КонецЕсли;
	КонецЦикла;
	
	ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	
	// Обновление наборов свойств контрагентов.
	ОбщиеСвойства = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
	|ГДЕ
	|	(НЕ КонтрагентыДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ОбщиеСвойства.ДополнительныеРеквизиты.Найти(Выборка.Свойство, "Свойство") = Неопределено Тогда
			НовоеСвойство = ОбщиеСвойства.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = Выборка.Свойство;
		КонецЕсли;
	КонецЦикла;
	ОбщиеСвойства.Записать();
	
	// Обновление наборов свойств физических лиц.
	ОбщиеСвойства = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ФизическиеЛица.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ФизическиеЛица.ДополнительныеРеквизиты КАК ФизическиеЛицаДополнительныеРеквизиты
	|ГДЕ
	|	(НЕ ФизическиеЛицаДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ОбщиеСвойства.ДополнительныеРеквизиты.Найти(Выборка.Свойство, "Свойство") = Неопределено Тогда
			НовоеСвойство = ОбщиеСвойства.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = Выборка.Свойство;
		КонецЕсли;
	КонецЦикла;
	ОбщиеСвойства.Записать();
	
	// Обновление наборов свойств договоров.
	ОбщиеСвойства = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ДоговорыКонтрагентов.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ОбщиеСвойства.ДополнительныеРеквизиты.Найти(Выборка.Свойство, "Свойство") = Неопределено Тогда
			НовоеСвойство = ОбщиеСвойства.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = Выборка.Свойство;
		КонецЕсли;
	КонецЦикла;
	ОбщиеСвойства.Записать();
	
	// Обновление наборов свойств номенклатуры.
	ОбщиеСвойства = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	(НЕ НоменклатураДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ОбщиеСвойства.ДополнительныеРеквизиты.Найти(Выборка.Свойство, "Свойство") = Неопределено Тогда
			НовоеСвойство = ОбщиеСвойства.ДополнительныеРеквизиты.Добавить();
			НовоеСвойство.Свойство = Выборка.Свойство;
		КонецЕсли;
	КонецЦикла;
	ОбщиеСвойства.Записать();
	
	// Установка константы "ИспользоватьНесколькоОрганизаций". Выполняется тут,
	// т.к. есть вероятность того что организации не сопоставятся.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Количество)
			И Выборка.Количество > 1 Тогда
			Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	РозничнаяТочка = Неопределено;
	Если Выборка.Следующий() Тогда
		РозничнаяТочка = Выборка.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РозничнаяТочка) Тогда
		СправочникКассыККМ = Справочники.КассыККМ.Выбрать();
		Пока СправочникКассыККМ.Следующий() Цикл
			СправочникОбъект = СправочникКассыККМ.ПолучитьОбъект();
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.СтруктурнаяЕдиница) Тогда
				СправочникОбъект.СтруктурнаяЕдиница = РозничнаяТочка;
				КДОбъект.ЗаписатьОбъектВИБ(СправочникОбъект, ТипЗнч(СправочникОбъект));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Установка корректного типа номенклатуры "Услуга".
	
	Запрос = Новый Запрос;
	
	// Услуга присутствует в заказах покупателей и заказах поставщикам.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщикуЗапасы.НомерСтроки КАК НомерСтроки,
	|	ЗаказПоставщикуЗапасы.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО ЗаказПоставщикуЗапасы.Номенклатура = ЗаказПокупателяЗапасы.Номенклатура
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ЕСТЬNULL(ЗаказПокупателяЗапасы.Ссылка, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	ЗаказПоставщику,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Номенклатура,
	|	ЗаказПоставщику,
	|	НомерСтроки";
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(
		НоваяНоменклатура,
		ВыборкаПоНоменклатуре.Номенклатура,
		"Родитель, Наименование, Артикул, ЕдиницаИзмерения, МетодОценки, НаименованиеПолное,
		|НаправлениеДеятельности, КатегорияНоменклатуры, Склад, Спецификация, СпособПополнения,
		|СтавкаНДС, СчетУчетаЗапасов, СчетУчетаЗатрат, Ячейка, ЦеноваяГруппа, ИспользоватьХарактеристики,
		|ИспользоватьПартии, ФайлКартинки, СрокИсполненияЗаказа, НормаВремени, ФиксированнаяСтоимость"
		);
		
		НоваяНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НоваяНоменклатура.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);	
		КДОбъект.ЗаписатьОбъектВИБ(НоваяНоменклатура, ТипЗнч(НоваяНоменклатура));
		
		ВыборкаПоЗаказам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			ДокументОбъект = ВыборкаПоЗаказам.ЗаказПоставщику.ПолучитьОбъект();
			
			ВыборкаПоНомерамСтрок = ВыборкаПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоНомерамСтрок.Следующий() Цикл
				ДокументОбъект.Запасы[ВыборкаПоНомерамСтрок.НомерСтроки - 1].Номенклатура = НоваяНоменклатура.Ссылка;
				Если ЗначениеЗаполнено(ДокументОбъект.Запасы[ВыборкаПоНомерамСтрок.НомерСтроки - 1].Характеристика) Тогда
					ХарктеристикаОбъект = ДокументОбъект.Запасы[ВыборкаПоНомерамСтрок.НомерСтроки - 1].Характеристика.ПолучитьОбъект();
					НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
					НоваяХарактеристика.Владелец = НоваяНоменклатура.Ссылка;
					НоваяХарактеристика.Наименование = ХарктеристикаОбъект.Наименование;
					НоваяХарактеристика.ДополнительныеРеквизиты.Загрузить(ХарктеристикаОбъект.ДополнительныеРеквизиты.Выгрузить());
					КДОбъект.ЗаписатьОбъектВИБ(НоваяХарактеристика, ТипЗнч(НоваяХарактеристика));
				КонецЕсли;
			КонецЦикла;
			
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Услуга присутствует только в заказах поставщикам.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуЗапасы.Номенклатура КАК НоменклатураЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщикуЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО ЗаказПоставщикуЗапасы.Номенклатура = ЗаказПокупателяЗапасы.Номенклатура
	|ГДЕ
	|	ЗаказПоставщикуЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	И ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура, 0) = 0";
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		НоменклатураОбъект = ВыборкаПоНоменклатуре.НоменклатураЗаказПоставщику.ПолучитьОбъект();
		НоменклатураОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НоменклатураОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);	
		КДОбъект.ЗаписатьОбъектВИБ(НоменклатураОбъект, ТипЗнч(НоменклатураОбъект));
		
	КонецЦикла;
	
	ЗагруженныеОбъектыПереноса = Параметры.ЗагруженныеОбъектыПереноса;
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъектыПереноса Цикл
		
		Если СтрокаТаблицы.Объект.ЭтоНовый() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = СтрокаТаблицы.Объект.Ссылка.ПолучитьОбъект();
		ИмяПКО = СтрокаТаблицы.ИмяПКО;
		
		Если ИмяПКО = "ФайлыНоменклатуры" Тогда 
			
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(Объект.Ссылка, Объект.ФайлХранилище.Получить());
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ

Процедура ПКО_ПослеЗагрузки_КонстантыНабор(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	РежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	Если РежимРаботы.МодельСервиса Тогда
		
		Отказ = Истина;
		
		Попытка
			МассивКонстант = Новый Массив;
			МассивКонстант.Добавить(Метаданные.Константы.ВалютаУчета); 
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияУчетРозничныхПродаж);
			МассивКонстант.Добавить(Метаданные.Константы.ИспользоватьНесколькоОрганизаций);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияУчетПоПроектам);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяУчетВалютныхОпераций);
			МассивКонстант.Добавить(Метаданные.Константы.ФункциональнаяОпцияИспользоватьПартии);
			
			НаборКонстант = Константы.СоздатьНабор(МассивКонстант);
			ЗаполнитьЗначенияСвойств(НаборКонстант, Объект);
			НаборКонстант.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка из УТ 10.3",
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				НСтр("ru = 'Не удалось инициализировать константы по причине: '") + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ФайлыНоменклатуры(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Выполнить(Алгоритмы.ПослеЗагрузкиПрисоединенногоФайла);
	
	//Занесем данные об объекте в таблицу отложенной обработки 
	НоваяСтрока = Параметры.ЗагруженныеОбъектыПереноса.Добавить();
	НоваяСтрока.ИмяПКО = "ФайлыНоменклатуры";
	НоваяСтрока.Объект = Объект;
	НоваяСтрока.Параметры = ПараметрыОбъекта;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Организации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК СтавкаНДС
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Ставка = 18
	|	И НЕ СтавкиНДС.НеОблагается
	|	И НЕ СтавкиНДС.Расчетная";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.СтавкаНДСПоУмолчанию = Выборка.СтавкаНДС;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Номенклатура(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗапасов) Тогда
			Объект.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
			Объект.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НезавершенноеПроизводство;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
			Объект.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
		КонецЕсли;
		Выполнить(Алгоритмы.ЗаполнитьСтавкуНДСШапки);
		Если НЕ ЗначениеЗаполнено(Объект.КатегорияНоменклатуры) Тогда
			Объект.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Кассы(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчета) Тогда
		Объект.СчетУчета = ПланыСчетов.Управленческий.Касса;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Контрагенты(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПокупателя) Тогда
			Объект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаАвансовПоставщику) Тогда
			Объект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПокупателем) Тогда
			Объект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСПоставщиком) Тогда
			Объект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_БанковскиеСчета(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.ВидСчета) Тогда
		Объект.ВидСчета = "Расчетный";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчета) Тогда
		Объект.СчетУчета = ПланыСчетов.Управленческий.Банк;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВариантУказанияКПП) Тогда
		Объект.ВариантУказанияКПП = Перечисления.ВариантыУказанияКПП.ПриПеречисленииНалогов;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_КассыККМ(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчета) Тогда
		Объект.СчетУчета = ПланыСчетов.Управленческий.Касса;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Объект.ВалютаДенежныхСредств = Параметры.НациональнаяВалюта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТипКассы) Тогда
		Объект.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктурныеЕдиницы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|ГДЕ
		|	СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Розница)";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект.СтруктурнаяЕдиница = Выборка.Ссылка;	
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_НоменклатурныеГруппы(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	Если НЕ Отказ И НЕ Объект.ЭтоГруппа Тогда
			
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(Объект, "Справочник_ХарактеристикиНоменклатуры", "НаборСвойствХарактеристики");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(Объект, "Справочник_Номенклатура", "НаборСвойств");
		// Конец СтандартныеПодсистемы.Свойства
			
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_НаборыДополнительныхРеквизитовИСведений(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// При записи производятся операции записи в БД, необходимые для корректной работы
	Объект.ОбменДанными.Загрузка = Ложь;
	Объект.Записать();

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СтруктурныеЕдиницы(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Подразделения(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Сотрудники(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если НЕ Объект.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетРасчетовПоПерерасходу) Тогда
			Объект.СчетРасчетовПоПерерасходу = ПланыСчетов.Управленческий.ПерерасходПодотчетников;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетРасчетовСПерсоналом) Тогда
			Объект.СчетРасчетовСПерсоналом = ПланыСчетов.Управленческий.РасчетыСПерсоналомПоОплатеТруда;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетРасчетовСПодотчетниками) Тогда
			Объект.СчетРасчетовСПодотчетниками = ПланыСчетов.Управленческий.РасчетыСПодотчетниками;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковСобственныеТоварыНаСкладах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоварыВРазрезеГТД(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоварыПринятыеНаКомиссию(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Дозаполним табличную части ЗапасыПринятые документа
	Для каждого ТекСтрока Из Объект.ЗапасыПринятые Цикл
		
		// Заполним партию.
		Выполнить(Алгоритмы.ЗаполнитьПартию);
		
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДенежныеСредстваВКассах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДенежныхСредствНаБанковскихСчетах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковТоварыПереданныеНаКомиссию(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгПодотчетниковПоНаличнымСредствам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПодотчетниками.
	Для каждого Строка Из Объект.РасчетыСПодотчетниками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.Перерасход Тогда
				НовыйДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
				НовыйДокумент.Сотрудник = Строка.Сотрудник;
			Иначе
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.Подотчетник = Строка.Сотрудник;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Валюта;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгПодотчетниковПоБезналичным(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПодотчетниками.
	Для каждого Строка Из Объект.РасчетыСПодотчетниками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.Перерасход Тогда
				НовыйДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
				НовыйДокумент.Сотрудник = Строка.Сотрудник;
			Иначе
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.Подотчетник = Строка.Сотрудник;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Валюта;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПерерасходПодотчетныхСредств(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПодотчетниками.
	Для каждого Строка Из Объект.РасчетыСПодотчетниками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.Перерасход Тогда
				НовыйДокумент = Документы.АвансовыйОтчет.СоздатьДокумент();
				НовыйДокумент.Сотрудник = Строка.Сотрудник;
			Иначе
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Подотчетнику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.Подотчетник = Строка.Сотрудник;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Валюта;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиКлиентовПоЗаказам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиКлиентовПоРеализациям(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиКомиссионеровЗаПроданныеТовары(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочаяДебиторскаяЗадолженностьКлиентов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковАвансыПоЗаказамПолученныеОтКлиентов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочиеАвансыПолученныеОтКлиентов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПокупателями.
	Для каждого Строка Из Объект.РасчетыСПокупателями Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.ПоступлениеВКассу.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.РасходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиПоставщикамПоЗаказам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиПоставщикамПоПоступлениям(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковДолгиКомитентамЗаПроданныеТовары(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочаяКредиторЗадолженностьПоставщикам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковАвансыПоЗаказамУплаченныеПоставщикам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочиеАвансыУплаченныеПоставщикам(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Формирование документов для табличной части РасчетыСПоставщиками.
	Для каждого Строка Из Объект.РасчетыСПоставщиками Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
			Если Строка.ПризнакАванса Тогда
				НовыйДокумент = Документы.РасходИзКассы.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
				НовыйДокумент.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
				НовыйДокумент.Касса = Объект.Организация.КассаПоУмолчанию;
				НовыйДокумент.ВалютаДенежныхСредств = Строка.Договор.ВалютаРасчетов;
				НовыйДокумент.СуммаДокумента = Строка.СуммаВал;
			Иначе
				НовыйДокумент = Документы.ПриходнаяНакладная.СоздатьДокумент();
				НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
				НовыйДокумент.Договор = Строка.Контрагент.ДоговорПоУмолчанию;
				НовыйДокумент.СтруктурнаяЕдиница = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			КонецЕсли;
			НовыйДокумент.Дата = Объект.Дата;
			НовыйДокумент.Организация = Объект.Организация;
			НовыйДокумент.Контрагент = Строка.Контрагент;
			
			СтрокаКомментарий = Нстр("ru='Сформирован автоматически документом Ввод начальных остатков № %Номер% от %Дата%'");
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Номер%", Строка(Объект.Номер));
			СтрокаКомментарий = СтрЗаменить(СтрокаКомментарий, "%Дата%", Строка(Объект.Дата));
			НовыйДокумент.Комментарий = СтрокаКомментарий;
			
			НовыйДокумент.Записать();
			
			Строка.Документ = НовыйДокумент.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочаяДебиторскаяЗадолженность(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Для каждого ТекСтрока Из Объект.ПрочиеРазделы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВводОстатковПрочаяКредиторскаяЗадолженность(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Для каждого ТекСтрока Из Объект.ПрочиеРазделы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Счет) Тогда
			ТекСтрока.Счет = ПланыСчетов.Управленческий.ПрибылиИУбыткиБезНалогаНаПрибыль;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	// Проведение документа.
	Выполнить(Алгоритмы.УстановитьРежимПроведения);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Событие(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ЗаказПокупателя(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ЗапасыТабличнаяЧасть");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидЗаказа) Тогда
		Объект.ВидЗаказа = Параметры.ВидЗаказа;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеЗаказа) Тогда
		Объект.СостояниеЗаказа = Параметры.СостояниеЗаказовПокупателей;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиницаПродажи) Тогда
		Объект.СтруктурнаяЕдиницаПродажи = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		Объект.ДатаОтгрузки = Объект.Дата; 
	КонецЕсли;  
	
	// Дозаполним табличную части Запасы документа значениями по умолчанию.
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		
		Если ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			ТекСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		Иначе
			ТекСтрока.ДатаОтгрузки = Объект.Дата;
		КонецЕсли;
		
		// Заполним единицу измерения
		Выполнить(Алгоритмы.ЗаполнитьЕдиницуИзмерения);
		
		// Заполним ставку НДС.
		Выполнить(Алгоритмы.ЗаполнитьСтавкуНДСПоСтроке);
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
	
		Если ТекСтрока.ПроцентСкидкиНаценки = 100 Тогда
			ТекСтрока.Сумма = 0;
		ИначеЕсли ТекСтрока.ПроцентСкидкиНаценки <> 0 И ТекСтрока.Количество <> 0 Тогда
			ТекСтрока.Сумма = ТекСтрока.Сумма * (1 - ТекСтрока.ПроцентСкидкиНаценки / 100);
		КонецЕсли;
		
		// Заполним сумму НДС.
		ТекСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			ТекСтрока.Сумма - (ТекСтрока.Сумма) / ((ТекСтрока.СтавкаНДС.Ставка + 100) / 100),
			ТекСтрока.Сумма * ТекСтрока.СтавкаНДС.Ставка / 100
		);
		
		// Заполним итоговую сумму по строке.
		ТекСтрока.Всего = ТекСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ЗаказПоставщику(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Заполнение автора документа.
	Выполнить(Алгоритмы.ЗаполнитьАвтора);
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация, , Объект.Дата);
	
	Если ПараметрыОбъекта <> Неопределено Тогда
		ПараметрыТЧ = ПараметрыОбъекта.Получить("ЗапасыТабличнаяЧасть");	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеЗаказа) Тогда
		Объект.СостояниеЗаказа = Параметры.СостояниеЗаказовПоставщикам;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
		Объект.ДатаПоступления = Объект.Дата; 
	КонецЕсли;  
	
	// Дозаполним табличную части Запасы документа значениями по умолчанию.
	Для каждого ТекСтрока Из Объект.Запасы Цикл
		
		Если ЗначениеЗаполнено(Объект.ДатаПоступления) Тогда
			ТекСтрока.ДатаПоступления = Объект.ДатаПоступления;
		Иначе
			ТекСтрока.ДатаПоступления = Объект.Дата;
		КонецЕсли;
		
		// Заполним единицу измерения.
		Выполнить(Алгоритмы.ЗаполнитьЕдиницуИзмерения);
		
		// Заполним ставку НДС.
		Выполнить(Алгоритмы.ЗаполнитьСтавкуНДСПоСтроке);
		
		ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
		
		// Заполним сумму НДС.
		ТекСтрока.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			ТекСтрока.Сумма - (ТекСтрока.Сумма) / ((ТекСтрока.СтавкаНДС.Ставка + 100) / 100),
			ТекСтрока.Сумма * ТекСтрока.СтавкаНДС.Ставка / 100
		);
		
		// Заполним итоговую сумму по строке.
		ТекСтрока.Всего = ТекСтрока.Сумма + ?(Объект.СуммаВключаетНДС, 0, ТекСтрока.СуммаНДС);
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ДокументыФизическихЛиц(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	// ...Из модуля объекта УТ 11
	ТекстСерия				= НСтр("ru = ', серия: %1'");
	ТекстНомер				= НСтр("ru = ', № %1'");
	ТекстДатаВыдачи			= НСтр("ru = ', выдан: %1 года'");
	ТекстСрокДействия		= НСтр("ru = ', действует до: %1 года'");
	ТекстКодПодразделения	= НСтр("ru = ', № подр. %1'");
	
	Если Объект.ВидДокумента.Пустая() Тогда
		Объект.Представление = "";
		
	Иначе
		Объект.Представление = ""
			+ Объект.ВидДокумента
			+ ?(ЗначениеЗаполнено(Объект.Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, Объект.Серия), "")
			+ ?(ЗначениеЗаполнено(Объект.Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, Объект.Номер), "")
			+ ?(ЗначениеЗаполнено(Объект.ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(Объект.ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
			+ ?(ЗначениеЗаполнено(Объект.СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокДействия, Формат(Объект.СрокДействия,"ДФ='дд ММММ гггг'")), "")
			+ ?(ЗначениеЗаполнено(Объект.КемВыдан), ", " + Объект.КемВыдан, "")
			+ ?(ЗначениеЗаполнено(Объект.КодПодразделения) И Объект.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКодПодразделения, Объект.КодПодразделения), "");
		
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ДополнительныеРеквизитыИСведения(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если ПараметрыОбъекта <> Неопределено Тогда
		
		МассивНаименованийТиповВСтрокеВнутр = ПараметрыОбъекта.Получить("Тип");
		Если МассивНаименованийТиповВСтрокеВнутр <> Неопределено Тогда
			
			МассивНаименованийТипов = ЗначениеИзСтрокиВнутр(МассивНаименованийТиповВСтрокеВнутр);
			
			МассивТипов = Новый Массив;
			Для каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
				МассивТипов.Добавить(Тип(НаименованиеТипа));
			КонецЦикла;
			
			Попытка
				Объект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Виден = Истина;
	Объект.Доступен = Истина;
	Объект.ДополнительныеЗначенияИспользуются = Истина;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ И ГРУПП СВОЙСТВ ОБЪЕКТОВ


////////////////////////////////////////////////////////////////////////////////
//                             ВНИМАНИЕ 
//            ИЗМЕНЯТЬ КОД В ЭТОМ БЛОКЕ (НИЖЕ) ЗАПРЕЩЕНО!
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОБЩИХ ПРОЦЕДУР И ФУНКЦИЙ


// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО                      - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "") Экспорт
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);
	
КонецФункции

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.СоздатьУзел(Имя); 

КонецФункции

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьУзел(УзелРодитель, Имя); 

КонецФункции

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Возврат ОбщиеПроцедурыФункции.КопироватьУзел(Узел); 
	
КонецФункции 

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт

	ОбщиеПроцедурыФункции.УстановитьОбменДаннымиЗагрузка(Объект, Значение);
	
КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт
	
	ОбщиеПроцедурыФункции.УстановитьАтрибут(Узел, Имя, Значение);
	
КонецПроцедуры

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	ОбщиеПроцедурыФункции.ДобавитьПодчиненный(УзелРодитель, Узел);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	ОбщиеПроцедурыФункции.одЗаписатьЭлемент(Объект, Имя, Значение);
	
КонецПроцедуры

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одАтрибут(Объект, Тип, Имя);
		
КонецФункции
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	ОбщиеПроцедурыФункции.одПропустить(Объект, Имя);
	
КонецПроцедуры

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Возврат ОбщиеПроцедурыФункции.одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству, ОбрезатьСтрокуСправа);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//	Значение - значение перечисления
//
// Возвращаемое значение:
//	Строка - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одИмяЗначенияПеречисления(Значение);
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры:
//	Значение - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//	Истина - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПустое(Значение, ЭтоNULL);
	
КонецФункции

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//	ЗначениеТипа - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одОписаниеТипа(ЗначениеТипа);
	
КонецФункции

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//	Тип - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьПустоеЗначение(Тип);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено,
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина,
	СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
		НайденныйОбъектПоУникальномуИдентификатору,
		ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска,
		РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//	Стр - Строка - значение свойства, по которому осуществляется поиск объекта;
//	Тип - тип искомого объекта;
//	Свойство - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//	Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство);
	
КонецФункции

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одТипЗначенияСтрокой(ЗначениеИлиТип);
	
КонецФункции

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//	Стр          - разбираемая строка;
//	Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//	Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ОтделитьРазделителем(Стр, Разделитель, Режим);
	
КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//	Стр            - Разбираемая строка
//	Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//	Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Возврат ОбщиеПроцедурыФункции.МассивИзСтроки(Стр, Разделитель);

КонецФункции

// Возвращает строку номера без символьных префиксов
// Например:
//	ПолучитьСтроковыйНомерБезПрефиксов("УТ0000001234") = "0000001234"
//
// Параметры:
//	Номер - Строка - номер, из которого необходимо вычислить результат функции
// 
// Возвращаемое значение:
//	Строка номера без символьных префиксов
//
Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьСтроковыйНомерБезПрефиксов(Номер);
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть, Режим);
	
КонецФункции

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина,
	Префикс = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПривестиНомерКДлине(Стр, Длина,
		ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера, Префикс);
	
КонецФункции

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьКПрефиксу(Стр, Добавок, Длина, Режим); 

КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одДополнитьСтроку(Стр, Длина, Чем);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	ОбщиеПроцедурыФункции.ЗаписатьВФайл(Узел);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Возврат ОбщиеПроцедурыФункции.НайтиПравило(Объект, ИмяПравила);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Выполняет передачу строки данных для загрузки в базе-приемнике
//
// Параметры:
//	ИнформацияДляЗаписиВФайл - Строка (текст XML) - строка с данными
//	СтрокаОшибкиВБазеПриемнике - Строка - содержит описание ошибки при загрузке в базе-приемнике
// 
Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
	
КонецПроцедуры

// Выполняет запись имени, типа и значения параметра в файл сообщения обмена для передачи в базу-приемник
//
Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации);
	
КонецПроцедуры

// Передает все дополнительные параметры в приемник
//
Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьДополнительныеПараметрыВПриемник();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНСТРУКТОР И ДЕСТРУКТОР ОБРАБОТКИ

Процедура Конструктор(Владелец) Экспорт

	ОбщиеПроцедурыФункции      = Владелец;
	Параметры                  = Владелец.Параметры;
	Запросы                    = Владелец.Запросы;
	Правила                    = Владелец.Правила;
	ТаблицаПравилВыгрузки      = Владелец.ТаблицаПравилВыгрузки;
	ТаблицаНастройкиПараметров = Владелец.ТаблицаНастройкиПараметров;
	
	КомментарийПриВыгрузкеДанных = Владелец.КомментарийПриВыгрузкеДанных;
	КомментарийПриЗагрузкеДанных = Владелец.КомментарийПриЗагрузкеДанных;
	
	
	//переменная для универсального обмена
	Попытка
		ДатаНачала = Владелец.ДатаНачала;
	Исключение
	КонецПопытки;
	
	//переменная для универсального обмена
	Попытка
		ДатаОкончания = Владелец.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		ДатаВыгрузкиДанных = Владелец.ДатаВыгрузкиДанных;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		УзелДляОбмена = Владелец.УзелДляОбмена;
	Исключение
	КонецПопытки;
	
	// Типы
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
	Алгоритмы = Владелец.Алгоритмы;
	

КонецПроцедуры


Процедура Деструктор() Экспорт
	
	ОбщиеПроцедурыФункции = Неопределено;
	
КонецПроцедуры

#КонецЕсли
