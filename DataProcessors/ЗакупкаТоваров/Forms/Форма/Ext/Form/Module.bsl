
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если КоличествоДней = 0 Тогда
		КоличествоДней = 30;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РежимЗакупкиТоваров) Тогда
		РежимЗакупкиТоваров = "у поставщика";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПериодРасчетаСреднихПродаж.ДатаНачала)
		ИЛИ Не ЗначениеЗаполнено(ПериодРасчетаСреднихПродаж.ДатаОкончания) Тогда
		ПериодРасчетаСреднихПродаж.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененЗаказПоставщику" Тогда
		
		ОчиститьСообщения();
		ОбновитьТабличнуюЧастьЗаказыСервер();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РежимЗакупкиТоваровПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Потребность"

&НаКлиенте
Процедура ПотребностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяПоле = Поле.Имя;
	
	Если ИмяПоле <> "ПотребностьПоставщик" 
		И ИмяПоле <> "ПотребностьНоменклатура"
		И ИмяПоле <> "ПотребностьХарактеристика" Тогда
		
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "Потребность", "");
	
	Значение = Элемент.ТекущиеДанные[ИмяРеквизита];
	Если ЗначениеЗаполнено(Значение) Тогда
		ПоказатьЗначение(Неопределено, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностьПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Потребность.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ЗначениеОтметки = ТекущиеДанные.Пометка;
		Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			ЗаполнитьОтметкиПотребность(ЗначениеОтметки, ТекущиеДанные.ПолучитьИдентификатор());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПотребностьКоличествоКЗакупкеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Потребность.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтрокаВерхнегоУровня = ТекущиеДанные.ПолучитьРодителя();
		Если СтрокаВерхнегоУровня <> Неопределено Тогда
			
			КоличествоКЗакупкеИтог = 0;
			ЭлементыНижнегоУровня = СтрокаВерхнегоУровня.ПолучитьЭлементы();
			Для каждого ЭлементНижнегоУровня Из ЭлементыНижнегоУровня Цикл
				КоличествоКЗакупкеИтог = КоличествоКЗакупкеИтог + ЭлементНижнегоУровня.КоличествоКЗакупке;
			КонецЦикла;
			
			СтрокаВерхнегоУровня.КоличествоКЗакупке = КоличествоКЗакупкеИтог;
			
			Если Не ТекущиеДанные.Пометка Тогда
				ТекущиеДанные.Пометка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "Заказы"

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Документ = Элемент.ТекущиеДанные.Документ;
	Если ЗначениеЗаполнено(Документ) Тогда
		ПоказатьЗначение(Неопределено, Документ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	ЗаполнитьОтметкиПотребность(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	ЗаполнитьОтметкиПотребность(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиЗаказы(Команда)
	
	ЗаполнитьОтметкиЗаказы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиЗаказы(Команда)
	
	ЗаполнитьОтметкиЗаказы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНулевыеПродажи(Команда)
	
	Если Потребность.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПоказатьНулевыеПродажиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ПоказатьНулевыеПродажиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНулевыеПродажиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ПоказатьНулевыеПродажиФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНулевыеПродажиФрагмент()
    
    Элементы.ПоказатьНулевыеПродажи.Пометка = Не Элементы.ПоказатьНулевыеПродажи.Пометка;
    ЗаполнитьИРассчитатьСервер();
    
    ПересчитатьСтрокиДерева();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИРассчитать(Команда)
	
	Если Потребность.ПолучитьЭлементы().Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьИРассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьИРассчитатьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИРассчитатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьИРассчитатьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИРассчитатьФрагмент()
    
    Если Не ЗначениеЗаполнено(ПериодРасчетаСреднихПродаж.ДатаНачала)
        ИЛИ Не ЗначениеЗаполнено(ПериодРасчетаСреднихПродаж.ДатаОкончания) Тогда
        
        ПериодРасчетаСреднихПродаж.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
    КонецЕсли;
    
    ЗаполнитьИРассчитатьСервер();
    
    ПересчитатьСтрокиДерева();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	ОчиститьСообщения();
	Заказы.Очистить();
	Если СформироватьЗаказыСервер() Тогда
		
		ПоказатьОповещениеПользователя(
			,,
			НСтр("ru = 'Заказы поставщикам успешно созданы.'"),
			БиблиотекаКартинок.Информация32
		);
		
		Элементы.СтраницыТовары.ТекущаяСтраница = Элементы.СтраницаЗаказы;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет данных для формирования заказов.'");
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗаказ(Команда)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказ(Команда)
	
	ЗаказыНаУдаление = Заказы.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если ЗаказыНаУдаление.Количество() = 0 Тогда
		
		Возврат;
		
	ИначеЕсли ЗаказыНаУдаление.Количество() = 1 Тогда
		
		ТекстВопроса = НСтр("ru = 'Выбранный документ будет удален. Продолжить?'");
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Выбранные документы будут удалены. Продолжить?'");
		
	КонецЕсли;
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЗаказЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        УдалитьЗаказыСервер();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиЗаказы(Команда)
	
	ОчиститьСообщения();
	ПровестиЗаказыСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость элементов формы.
//
&НаКлиенте
Процедура УстановитьВидимость()
	
	Если РежимЗакупкиТоваров = "у поставщика" Тогда
		Элементы.Поставщик.Видимость = Истина;
		Элементы.ГруппаТоваров.Видимость = Ложь;
	Иначе
		Элементы.Поставщик.Видимость = Ложь;
		Элементы.ГруппаТоваров.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу Потребность данными
// и рассчитывает количество рекомендуемое к закупке.
//
&НаСервере
Процедура ЗаполнитьИРассчитатьСервер()
	
	ДеревоПотребность = РеквизитФормыВЗначение("Потребность");
	ДеревоПотребность.Строки.Очистить();
	
	ВыводитьНулевыеПродажи = Элементы.ПоказатьНулевыеПродажи.Пометка;
	
	НачалоПериодаРасчетаСтатистики = ПериодРасчетаСреднихПродаж.ДатаНачала;
	ОкончаниеПериодаРасчетаСтатистики = ПериодРасчетаСреднихПродаж.ДатаОкончания;
	
	ТаблицаОстаткиПоДням = Новый ТаблицаЗначений;
	
	ТаблицаОстаткиПоДням.Колонки.Добавить("ПериодДень", Новый ОписаниеТипов("Дата"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("НачальныйОстаток", Новый ОписаниеТипов("Число"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("КонечныйОстаток", Новый ОписаниеТипов("Число"));
	ТаблицаОстаткиПоДням.Колонки.Добавить("КоличествоПриход", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыНаСкладахОстаткиИОбороты.Период КАК ПериодДень,
	|	ЗапасыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстаткиИОбороты.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстаткиИОбороты.КоличествоНачальныйОстаток КАК НачальныйОстаток,
	|	ЗапасыНаСкладахОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ЗапасыНаСкладахОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ЗапасыНаСкладахОстаткиИОбороты.КоличествоКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ЗапасыНаСкладах.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			%ОтборПоПоставщику%
	|				И %ОтборПоГруппе%) КАК ЗапасыНаСкладахОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодДень,
	|	Номенклатура,
	|	Характеристика
	|ИТОГИ
	|	СУММА(НачальныйОстаток),
	|	СУММА(КоличествоПриход),
	|	СУММА(КоличествоРасход),
	|	СУММА(КонечныйОстаток)
	|ПО
	|	ПериодДень ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &КонецПериода),
	|	Номенклатура,
	|	Характеристика";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаРасчетаСтатистики);
	Запрос.УстановитьПараметр("КонецПериода", ОкончаниеПериодаРасчетаСтатистики);

	ОбработатьТекстЗапроса(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ПериодДень", "Все");

	Пока ВыборкаПериод.Следующий() Цикл

		ВыборкаНоменклатура = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				Если ВыборкаХарактеристика.НачальныйОстаток > 0
					ИЛИ ВыборкаХарактеристика.КонечныйОстаток > 0
					ИЛИ (ВыборкаХарактеристика.КоличествоПриход <> Null И ВыборкаХарактеристика.КоличествоПриход > 0) Тогда
					
					НоваяСтрока = ТаблицаОстаткиПоДням.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристика);
					НоваяСтрока.КоличествоДней = 1;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОстаткиПоДням.Свернуть("Номенклатура, Характеристика", "КоличествоДней");
	ТаблицаОстаткиПоДням.Индексы.Добавить("Номенклатура, Характеристика");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстаткиПоДням.Номенклатура КАК Номенклатура,
	|	ТаблицаОстаткиПоДням.Характеристика КАК Характеристика,
	|	ТаблицаОстаткиПоДням.КоличествоДней КАК КоличествоДнейПродаж
	|ПОМЕСТИТЬ Вт_КоличествоДнейПродаж
	|ИЗ
	|	&ТаблицаОстаткиПоДням КАК ТаблицаОстаткиПоДням
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	Номенклатура.Поставщик
	|ПОМЕСТИТЬ Вт_НоменклатураХарактеристики
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И %ОтборПоПоставщику%
	|	И %ОтборПоГруппе%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	Номенклатура.Поставщик
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка)
	|ГДЕ
	|	Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И %ОтборПоПоставщику%
	|	И %ОтборПоГруппе%
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураХарактеристики.Поставщик КАК Поставщик,
	|	НоменклатураХарактеристики.Номенклатура КАК Номенклатура,
	|	НоменклатураХарактеристики.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК ТекущийОстаток
	|ПОМЕСТИТЬ Вт_НоменклатураХарактеристикиОстатки
	|ИЗ
	|	Вт_НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						НоменклатураХарактеристики.Номенклатура,
	|						НоменклатураХарактеристики.Характеристика
	|					ИЗ
	|						Вт_НоменклатураХарактеристики КАК НоменклатураХарактеристики)) КАК ЗапасыОстатки
	|		ПО НоменклатураХарактеристики.Номенклатура = ЗапасыОстатки.Номенклатура
	|			И НоменклатураХарактеристики.Характеристика = ЗапасыОстатки.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Характеристика,
	|	СУММА(ПродажиОбороты.КоличествоОборот) КАК Продано
	|ПОМЕСТИТЬ Вт_Продажи
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Авто,
	|			(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					Вт_НоменклатураХарактеристики.Номенклатура,
	|					Вт_НоменклатураХарактеристики.Характеристика
	|				ИЗ
	|					Вт_НоменклатураХарактеристики КАК Вт_НоменклатураХарактеристики)) КАК ПродажиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_НоменклатураХарактеристикиОстатки.Поставщик КАК Поставщик,
	|	Вт_НоменклатураХарактеристикиОстатки.Номенклатура КАК Номенклатура,
	|	Вт_НоменклатураХарактеристикиОстатки.Характеристика КАК Характеристика,
	|	Вт_НоменклатураХарактеристикиОстатки.ТекущийОстаток КАК ТекущийОстаток,
	|	ЕСТЬNULL(Вт_Продажи.Продано, 0) КАК СтатистикаПродажКоличество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Вт_Продажи.Продано, 0) = 0 
	|				ИЛИ ЕСТЬNULL(Вт_КоличествоДнейПродаж.КоличествоДнейПродаж, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Вт_Продажи.Продано, 0) / Вт_КоличествоДнейПродаж.КоличествоДнейПродаж
	|	КОНЕЦ КАК СтатистикаПродажСредняяПродажа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Вт_Продажи.Продано, 0) = 0 
	|				ИЛИ ЕСТЬNULL(Вт_КоличествоДнейПродаж.КоличествоДнейПродаж, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Вт_Продажи.Продано, 0) / Вт_КоличествоДнейПродаж.КоличествоДнейПродаж
	|	КОНЕЦ * &КоличествоДней - Вт_НоменклатураХарактеристикиОстатки.ТекущийОстаток КАК КоличествоКЗакупке,
	|	Вт_КоличествоДнейПродаж.КоличествоДнейПродаж КАК СтатистикаПродажКоличествоДней
	|ИЗ
	|	Вт_НоменклатураХарактеристикиОстатки КАК Вт_НоменклатураХарактеристикиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Продажи КАК Вт_Продажи
	|		ПО Вт_НоменклатураХарактеристикиОстатки.Номенклатура = Вт_Продажи.Номенклатура
	|			И Вт_НоменклатураХарактеристикиОстатки.Характеристика = Вт_Продажи.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Вт_КоличествоДнейПродаж КАК Вт_КоличествоДнейПродаж
	|		ПО Вт_НоменклатураХарактеристикиОстатки.Номенклатура = Вт_КоличествоДнейПродаж.Номенклатура
	|			И Вт_НоменклатураХарактеристикиОстатки.Характеристика = Вт_КоличествоДнейПродаж.Характеристика
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ВыводитьНулевыеПродажи
	|				ТОГДА ЕСТЬNULL(Вт_Продажи.Продано, 0) > 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик, КоличествоКЗакупке УБЫВ, Номенклатура, Характеристика
	|ИТОГИ
	|	СУММА(ТекущийОстаток),
	|	СУММА(СтатистикаПродажКоличество),
	|	СУММА(СтатистикаПродажСредняяПродажа),
	|	СУММА(КоличествоКЗакупке),
	|	СУММА(СтатистикаПродажКоличествоДней)
	|ПО
	|	Поставщик";
	
	Запрос.УстановитьПараметр("ТаблицаОстаткиПоДням", ТаблицаОстаткиПоДням);
	Запрос.УстановитьПараметр("НачПериода", НачалоПериодаРасчетаСтатистики);
	Запрос.УстановитьПараметр("КонПериода", ОкончаниеПериодаРасчетаСтатистики);
	Запрос.УстановитьПараметр("КоличествоДней", КоличествоДней);
	Запрос.УстановитьПараметр("ВыводитьНулевыеПродажи", ВыводитьНулевыеПродажи);
	
	ОбработатьТекстЗапроса(Запрос);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ЗначениеВРеквизитФормы(ДеревоПотребность, "Потребность");
		Возврат;
	КонецЕсли;
	
	ВыборкаПоставщик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоставщик.Следующий() Цикл
		
		СтрокаПоставщик = ДеревоПотребность.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоставщик, ВыборкаПоставщик);
		
		СтрокаПоставщик.КоличествоКЗакупке = Окр(СтрокаПоставщик.КоличествоКЗакупке);
		
		ВыборкаНоменклатура = ВыборкаПоставщик.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			СтрокаНоменклатура = СтрокаПоставщик.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатура, ВыборкаНоменклатура,,"Поставщик");
			
			СтрокаНоменклатура.КоличествоКЗакупке = Окр(СтрокаНоменклатура.КоличествоКЗакупке);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоПотребность, "Потребность");
	Элементы.Потребность.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТекстЗапроса(Запрос)
	
	Если РежимЗакупкиТоваров = "у поставщика"
		И ЗначениеЗаполнено(Поставщик) Тогда
		
		Запрос.УстановитьПараметр("Поставщик", Поставщик);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоПоставщику%", "Номенклатура.Поставщик = &Поставщик");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоГруппе%", "ИСТИНА");
		
	ИначеЕсли РежимЗакупкиТоваров = "группу товаров"
		И ЗначениеЗаполнено(ГруппаТоваров) Тогда
		
		Запрос.УстановитьПараметр("ГруппаТоваров", ГруппаТоваров);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоГруппе%", "Номенклатура.Ссылка В ИЕРАРХИИ (&ГруппаТоваров)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоПоставщику%", "ИСТИНА");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоПоставщику%", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоГруппе%", "ИСТИНА");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет отметки строк в таблице Заказы.
//
&НаКлиенте
Процедура ЗаполнитьОтметкиЗаказы(ЗначениеОтметки)
	
	Для каждого СтрокаТаблицы Из Заказы Цикл
		СтрокаТаблицы.Пометка = ЗначениеОтметки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет отметки строк в таблице Потребность.
//
&НаКлиенте
Процедура ЗаполнитьОтметкиПотребность(ЗначениеОтметки, ИдентификаторЭлемента = Неопределено)
	
	Если ИдентификаторЭлемента <> Неопределено Тогда
		ЭлементДерева = Потребность.НайтиПоИдентификатору(ИдентификаторЭлемента);
		ЭлементыНижнегоУровня = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого ЭлементНижнегоУровня Из ЭлементыНижнегоУровня Цикл
			ЭлементНижнегоУровня.Пометка = ЗначениеОтметки;
		КонецЦикла;
	Иначе
		ЭлементыВерхнегоУровня = Потребность.ПолучитьЭлементы();
		Для Каждого ЭлементВерхнегоУровня Из ЭлементыВерхнегоУровня Цикл
			ЭлементВерхнегоУровня.Пометка = ЗначениеОтметки;
			ЭлементыНижнегоУровня = ЭлементВерхнегоУровня.ПолучитьЭлементы();
			Для каждого ЭлементНижнегоУровня Из ЭлементыНижнегоУровня Цикл
				ЭлементНижнегоУровня.Пометка = ЗначениеОтметки;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает договор контрагента по умолчанию соответствующий условиям документа.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Контрагент.ДоговорПоУмолчанию;
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СКомитентом);
	
	ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговора);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Процедура формирует заказы поставщикам по данным выбранных строк в таблице Потребность.
//
&НаСервере
Функция СформироватьЗаказыСервер()
	
	ДеревоПотребность = РеквизитФормыВЗначение("Потребность");
	ЗаказыСформированы = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого СтрокаПоставщик Из ДеревоПотребность.Строки Цикл
			
			Если СтрокаПоставщик.Строки.Найти(Истина, "Пометка") = Неопределено
				ИЛИ СтрокаПоставщик.Строки.Итог("КоличествоКЗакупке") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрагентПоставщик = СтрокаПоставщик.Поставщик;
			
			ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
			
			ДокументОбъект.Заполнить(Неопределено);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			ДокументОбъект.ПоложениеДатыПоступления = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			ДокументОбъект.Контрагент = КонтрагентПоставщик;
			
			ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(
			ДокументОбъект,
			ДокументОбъект.Контрагент,
			ДокументОбъект.Организация);
			
			Если ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
				
				ДокументОбъект.ВалютаДокумента = ДоговорПоУмолчанию.ВалютаРасчетов;
				ДокументОбъект.Договор = ДоговорПоУмолчанию;
				
				ВидЦенКонтрагента = ДоговорПоУмолчанию.ВидЦенКонтрагента;
				ДокументОбъект.ВидЦенКонтрагента = ВидЦенКонтрагента;
				
			КонецЕсли;
			
			Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
			СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДата(), Отбор);
			
			ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
			ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
			
			Если ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
				ДокументОбъект.СуммаВключаетНДС = ВидЦенКонтрагента.ЦенаВключаетНДС;
			КонецЕсли;
			
			Для каждого СтрокаНоменклатура Из СтрокаПоставщик.Строки Цикл
				
				Если Не СтрокаНоменклатура.Пометка
					ИЛИ СтрокаНоменклатура.КоличествоКЗакупке = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДокументОбъект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = СтрокаНоменклатура.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаНоменклатура.Характеристика;
				НоваяСтрока.Количество = СтрокаНоменклатура.КоличествоКЗакупке;
				
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("Организация", ДокументОбъект.Организация);
				СтруктураДанные.Вставить("Номенклатура", НоваяСтрока.Номенклатура);
				СтруктураДанные.Вставить("Характеристика", НоваяСтрока.Характеристика);
				СтруктураДанные.Вставить("НалогообложениеНДС", ДокументОбъект.НалогообложениеНДС);
				
				Если ЗначениеЗаполнено(ДокументОбъект.ВидЦенКонтрагента) Тогда
					
					СтруктураДанные.Вставить("ДатаОбработки", ДокументОбъект.Дата);
					СтруктураДанные.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
					СтруктураДанные.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
					СтруктураДанные.Вставить("ВидЦенКонтрагента", ДокументОбъект.ВидЦенКонтрагента);
					СтруктураДанные.Вставить("Коэффициент", 1);
					
				КонецЕсли;
				
				СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
				
				НоваяСтрока.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
				НоваяСтрока.Количество = СтрокаНоменклатура.КоличествоКЗакупке;
				НоваяСтрока.Цена = СтруктураДанные.Цена;
				НоваяСтрока.СтавкаНДС = СтруктураДанные.СтавкаНДС;
				НоваяСтрока.Содержание = "";
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока, ДокументОбъект.СуммаВключаетНДС);
				
			КонецЦикла;
			
			Если ДокументОбъект.Запасы.Количество() = 0 Тогда
				ДокументОбъект = Неопределено;
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего");
			ДокументОбъект.Комментарий = НСтр("ru = 'Создан автоматически обработкой ""Расчет потребности товаров""'");
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			СтрокаЗаказы = Заказы.Добавить();
			СтрокаЗаказы.Документ = ДокументОбъект.Ссылка;
			СтрокаЗаказы.Поставщик = ДокументОбъект.Контрагент;
			СтрокаЗаказы.СуммаДокумента = ДокументОбъект.СуммаДокумента;
			СтрокаЗаказы.ИндексКартинки = 0;
			
			ЗаказыСформированы = Истина
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр(
			"ru = 'При формировании заказов произошла ошибка.
			|Формирование заказов отменено.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
	Возврат ЗаказыСформированы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Номенклатура.СтавкаНДС);
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", СтруктураДанные.Организация.СтавкаНДСПоУмолчанию);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидЦенКонтрагента") Тогда
		
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦенКонтрагента(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
		
	Иначе
		
		СтруктураДанные.Вставить("Цена", 0);
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС)
	
	// Сумма.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	// Сумма НДС.
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
	// Всего.
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

// Процедура проводит выбранные заказы поставщикам.
//
&НаСервере
Процедура ПровестиЗаказыСервер()
	
	Для каждого СтрокаТаблицы Из Заказы Цикл
		
		Если Не СтрокаТаблицы.Пометка
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		ДокументПроведенУспешно = Ложь;
		Попытка
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				
				// выполняем попытку проведения документа
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ДокументПроведенУспешно = ДокументОбъект.Проведен;
				
			Иначе
				
				ДокументПроведенУспешно = Ложь;
				
			КонецЕсли;
			
		Исключение
			
			ДокументПроведенУспешно = Ложь;
			
		КонецПопытки;
		
		Если ДокументПроведенУспешно Тогда
			
			СтрокаТаблицы.ИндексКартинки = 1;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось провести документ: %1.'"), Строка(ДокументОбъект));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
			СтрокаТаблицы.ИндексКартинки = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет наличие ссылок на документ.
//
&НаСервереБезКонтекста
Функция ЕстьСсылкиНаДокумент(Документ)

	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Документ);
	
	ТабСсылок = НайтиПоСсылкам(МассивСсылок);
	
	Если ТабСсылок.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Процедура удаляет выбранные заказы поставщикам.
//
&НаСервере
Процедура УдалитьЗаказыСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтрокНаУдаление = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Заказы Цикл
		
		Если Не СтрокаТаблицы.Пометка
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Попытка
			Если ЕстьСсылкиНаДокумент(ДокументОбъект.Ссылка) Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ДокументОбъект.Удалить();
			КонецЕсли;
			МассивСтрокНаУдаление.Добавить(СтрокаТаблицы);
		Исключение
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось пометить на удаление документ: %1.'"), Строка(ДокументОбъект));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
		
		Заказы.Удалить(СтрокаНаУдаление);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет данные таблицы Заказы при изменении заказа поставщику.
//
&НаСервере
Процедура ОбновитьТабличнуюЧастьЗаказыСервер()
	
	Для каждого СтрокаТаблицы Из Заказы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Документ, "Проведен, Контрагент, СуммаДокумента");
		СтрокаТаблицы.Поставщик = ЗначенияРеквизитов.Контрагент;
		СтрокаТаблицы.СуммаДокумента = ЗначенияРеквизитов.СуммаДокумента;
		
		СтрокаТаблицы.ИндексКартинки = ?(ЗначенияРеквизитов.Проведен, 1, 0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокиДерева()
	
	СтрокиВерхнегоУровня = Потребность.ПолучитьЭлементы();
	Для каждого СтрокаВерхнегоУровня Из СтрокиВерхнегоУровня Цикл
		
		КоличествоКЗакупкеИтог = 0;
		СтатистикаПродажКоличествоДнейМакс = 0;
		СтатистикаПродажСредняяПродажаМакс = 0;
		
		ЭлементыНижнегоУровня = СтрокаВерхнегоУровня.ПолучитьЭлементы();
		Для каждого ЭлементНижнегоУровня Из ЭлементыНижнегоУровня Цикл
			КоличествоКЗакупкеИтог = КоличествоКЗакупкеИтог + ЭлементНижнегоУровня.КоличествоКЗакупке;
			Если ЭлементНижнегоУровня.СтатистикаПродажКоличествоДней > СтатистикаПродажКоличествоДнейМакс Тогда
				СтатистикаПродажКоличествоДнейМакс = ЭлементНижнегоУровня.СтатистикаПродажКоличествоДней;
			КонецЕсли;
			Если ЭлементНижнегоУровня.СтатистикаПродажСредняяПродажа > СтатистикаПродажСредняяПродажаМакс Тогда
				СтатистикаПродажСредняяПродажаМакс = ЭлементНижнегоУровня.СтатистикаПродажСредняяПродажа;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаВерхнегоУровня.КоличествоКЗакупке = КоличествоКЗакупкеИтог;
		СтрокаВерхнегоУровня.СтатистикаПродажКоличествоДней = СтатистикаПродажКоличествоДнейМакс;
		СтрокаВерхнегоУровня.СтатистикаПродажСредняяПродажа = СтатистикаПродажСредняяПродажаМакс;
		
	КонецЦикла;
	
КонецПроцедуры

