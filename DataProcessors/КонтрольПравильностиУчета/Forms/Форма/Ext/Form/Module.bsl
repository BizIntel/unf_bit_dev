
#Область ОписаниеПеременных

&НаСервере
Перем ТаблицаЗапасы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
// В процедуре осуществляется
// - инициализация реквизитов формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МассивТиповДокументыОплаты.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
	МассивТиповДокументыОплаты.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
	МассивТиповДокументыОплаты.Добавить(Тип("ДокументСсылка.РасходИзКассы"));
	МассивТиповДокументыОплаты.Добавить(Тип("ДокументСсылка.РасходСоСчета"));
	
	ЗаполнитьНачальныеДанные();
	
КонецПроцедуры

//Процедура-обработчик выбора в подчиненной форме
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Спецификации") Тогда
		ОбработатьВыборСпецификации(ВыбранноеЗначение);
		УстановитьКартинкуСтрокиДерева();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура-обработчик события "ПриАктивизацииСтроки"
// табличного поля "ДеревоРазделов"
&НаКлиенте
Процедура ДеревоРазделовПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	ТекущаяСсылкаНаСправку = "";
	ТекущаяДатаПоследногоИсправления = '00010101';
	
	Если ТекущаяСтрокаДерева.Уровень > 0 Тогда
		
		НомерТекущегоРаздела = ТекущаяСтрокаДерева.НомерРаздела;
		ТекущийРазделУчета = ТекущаяСтрокаДерева.РазделУчета;
		ТекущийРазделУчетаПредствление = ТекущаяСтрокаДерева.РазделУчетаПредствление;
		ТекущаяСсылкаНаСправку = ТекущаяСтрокаДерева.СсылкаНаСправку;
		ТекущаяДатаПоследногоИсправления = ТекущаяСтрокаДерева.ДатаВыполнения;
		
		Если ТекущаяСтрокаДерева.АнализВыполнен Тогда
			ВывестиДанныеПоРазделу();
		Иначе
			ВывестиНавигациюОбновитьДанные();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрокаДерева.Уровень = 0 Тогда
		
		Если ТекущаяСтрокаДерева.РазделУчета = "РазделыУчета" Тогда
			
			ВывестиПервуюСтраницу();
			
		ИначеЕсли ТекущаяСтрокаДерева.РазделУчета = "ФинальныйОтчет" Тогда
			ВывестиФинальныйОтчет();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДокументРезультат.ТекущаяОбласть = ДокументРезультат.Область(1, 1, 1, 1);
	
КонецПроцедуры

// Процедура-обработчик события Выбор табличного документа ДокументРезультат.
//
&НаКлиенте
Процедура ДокументРезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ВариантПереопределения = 0;
	
	ИмяПроцедурыДляВыполненияНаКлиенте = "";
	
	БылиИзмененыДанные = Ложь;
	
	ЭтоРисунок = Ложь;
	
	Если ТипЗнч(Область) = Тип("РисунокТабличногоДокумента") Тогда
		ЭтоРисунок = Истина;
	КонецЕсли;
	
	ОбработатьНажатиеНаЯчейку(Область.Имя, ВариантПереопределения, ИмяПроцедурыДляВыполненияНаКлиенте, ЭтоРисунок, БылиИзмененыДанные);
	
	ТекОбласть = Область;
	
	Если ИмяПроцедурыДляВыполненияНаКлиенте <> "" Тогда
		
		Если ИмяПроцедурыДляВыполненияНаКлиенте = "Закрыть()" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ОчиститьДокументРезультат();
			
			Закрыть();
			
		ИначеЕсли Лев(ИмяПроцедурыДляВыполненияНаКлиенте, 15) = "ПерейтиКСтроке#" Тогда
			
			ИдентификаторСтроки = 0;
			
			Попытка
				ИдентификаторСтроки = Число(Прав(ИмяПроцедурыДляВыполненияНаКлиенте, СтрДлина(ИмяПроцедурыДляВыполненияНаКлиенте) - 15));
			Исключение
				
			КонецПопытки;
			
			Если ИдентификаторСтроки <> 0 Тогда
				Элементы.ДеревоРазделов.ТекущаяСтрока = ИдентификаторСтроки;
			КонецЕсли;
			
		ИначеЕсли ИмяПроцедурыДляВыполненияНаКлиенте = "ВывестиФинальныйОтчет()" Тогда
			
			Элементы.ДеревоРазделов.ТекущаяСтрока = ВсегоРазделовДоступно + 1;
			ВариантПереопределения = 1;
			
		Иначе
			
			Попытка
				#Если ВебКлиент Тогда
					ВыполнитьПроцедуруНаВебКлиенте(ИмяПроцедурыДляВыполненияНаКлиенте, ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
				#Иначе
					Выполнить(ИмяПроцедурыДляВыполненияНаКлиенте);
				#КонецЕсли
			Исключение
				МассивОписанийОшибок = Новый Массив;
				МассивОписанийОшибок.Добавить("Не удалось выполнить процедуру " + ИмяПроцедурыДляВыполненияНаКлиенте);
				МассивОписанийОшибок.Добавить(ОписаниеОшибки());
				ВывестиСтрокуОшибки(МассивОписанийОшибок);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВариантПереопределения = 1 Тогда
		Элементы.ДокументРезультат.ТекущаяОбласть = ДокументРезультат.Область(1, 1, 1, 1);
	ИначеЕсли ВариантПереопределения = 2 Тогда
		Элементы.ДокументРезультат.ТекущаяОбласть = ДокументРезультат.Область(ПолучитьТекСтрокуИзИмениОбласти(Область.Имя) + "C1");
	КонецЕсли;
	
	Если БылиИзмененыДанные Тогда
		
		Если ТекущийРазделУчета = "НоменклатураБезСпецификаций" Тогда
			ИзменитьПодчиненныеНоменклатураБезСпецификаций();
		ИначеЕсли ТекущийРазделУчета = "ОтчетыПерерБезСпецификаций" Тогда
			ИзменитьПодчиненныеОтчетыПерерБезСпецификаций();
		ИначеЕсли ТекущийРазделУчета = "ДокПроизводствоБезСпецификаций" Тогда
			ИзменитьПодчиненныеДокПроизводствоБезСпецификаций();
		КонецЕсли;
		
		УстановитьКартинкуСтрокиДерева();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаРасшифровки табличного документа ДокументРезультат.
//
&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПериодМинус(Команда)
	
	ИзменитьПериод(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПлюс(Команда)
	
	ИзменитьПериод(1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция формирует структуру, содержащую дату последней корректировки данных
// для каждого раздела.
// Возвращаемое значение СтруктураДанных: ключ - название раздела, значение - дата.
//
&НаСервере
Функция ЗаполнитьСтуктуруДатВыполнения()
	
	СтруктураДанных = Новый Структура;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДатыВыполненияИсправленийПоРазделам.РазделУчета,
	|	ДатыВыполненияИсправленийПоРазделам.ДатаВыполнения
	|ИЗ
	|	РегистрСведений.ДатыВыполненияИсправленийПоРазделам КАК ДатыВыполненияИсправленийПоРазделам");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных.Вставить(Выборка.РазделУчета, Выборка.ДатаВыполнения);
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Процедура заполняет начальные данные формы, вызывается при создании формы.
//
&НаСервере
Процедура ЗаполнитьНачальныеДанные()
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		НачалоПериода = Параметры.НачалоПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("КонецПериода") Тогда
		КонецПериода = Параметры.КонецПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	УстановитьПредставлениеПериода();
	
	Если Параметры.КонтекстЗакрытияМесяца Тогда
		
		Элементы.БезКонтекста.Видимость = Ложь;
		
		Элементы.НадписьПериодОрганизация.Заголовок = "За " + НРег(ПредставлениеПериода) + ", для организации """ + СокрЛП(Организация.Наименование) + """";
		
	Иначе
		
		Элементы.СКонтекстом.Видимость = Ложь;
		
	КонецЕсли;
	
	ВестиУчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	ЗаполнитьДеревоРазделов();
	
	ВывестиПервуюСтраницу();
	
КонецПроцедуры

// Процедура формирует текстовое представление анализируемого периода в формате ММ.гггг и 
// помещает в реквизит ПредставлениеПериода.
//
&НаСервере
Процедура УстановитьПредставлениеПериода()
	
	Если Не ЗначениеЗаполнено(НачалоПериода) ИЛИ Не ЗначениеЗаполнено(КонецПериода) Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	ПредставлениеПериода = ПредставлениеПериода(НачалоПериода, КонецДня(КонецПериода));
	
КонецПроцедуры

// Процедура заполняет реквизит ДеревоРазделов.
//
&НаСервере
Процедура ЗаполнитьДеревоРазделов()
	
	СтруктураДанных = ЗаполнитьСтуктуруДатВыполнения();
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоРазделов");
	
	ДеревоДанных.Строки.Очистить();
	
	СчСтрок = 0;
	
	НоваяСтрока_Уровень0 = ДеревоДанных.Строки.Добавить();
	НоваяСтрока_Уровень0.РазделУчета = "РазделыУчета";
	НоваяСтрока_Уровень0.РазделУчетаПредствление = "РАЗДЕЛЫ УЧЕТА";
	НоваяСтрока_Уровень0.Уровень = 0;
	НумерацияСтрокДерева(НоваяСтрока_Уровень0, СчСтрок);
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "РасчетыСПоставщиками";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Расчеты с поставщиками";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "postavshiki";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "РасчетыСПокупателями";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Расчеты с покупателями";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "pokupateli";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "КурсовыеРазницы";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Курсовые разницы";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "kursov_r";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "НоменклатураБезСпецификаций";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Номенклатура без спецификаций";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "nom_bez_spec";
	
	НоваяСтрока_Уровень2 = НоваяСтрока_Уровень1.Строки.Добавить();
	НоваяСтрока_Уровень2.РазделУчета = "ОтчетыПерерБезСпецификаций";
	НоваяСтрока_Уровень2.РазделУчетаПредствление = "Отчеты переработчиков без спецификаций";
	НоваяСтрока_Уровень2.Уровень = 2;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень2, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень2, СчСтрок);
	НоваяСтрока_Уровень2.СсылкаНаСправку = "otchet_bez_spec";
	
	НоваяСтрока_Уровень3 = НоваяСтрока_Уровень2.Строки.Добавить();
	НоваяСтрока_Уровень3.РазделУчета = "ОтчетыПерерНесоответСписаний";
	НоваяСтрока_Уровень3.РазделУчетаПредствление = "Отчеты переработчиков - несоответствие списаний спецификациям";
	НоваяСтрока_Уровень3.Уровень = 3;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень3, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень3, СчСтрок);
	НоваяСтрока_Уровень3.СсылкаНаСправку = "otchet_nesoot_spec";
	
	НоваяСтрока_Уровень2 = НоваяСтрока_Уровень1.Строки.Добавить();
	НоваяСтрока_Уровень2.РазделУчета = "ДокПроизводствоБезСпецификаций";
	НоваяСтрока_Уровень2.РазделУчетаПредствление = "Документы ""Производство"" без спецификаций";
	НоваяСтрока_Уровень2.Уровень = 2;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень2, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень2, СчСтрок);
	НоваяСтрока_Уровень2.СсылкаНаСправку = "proizv_bez_spec";
	
	НоваяСтрока_Уровень3 = НоваяСтрока_Уровень2.Строки.Добавить();
	НоваяСтрока_Уровень3.РазделУчета = "ДокПроизводствоНесоответСписаний";
	НоваяСтрока_Уровень3.РазделУчетаПредствление = "Документы ""Производство"" - несоответствие списаний спецификациям";
	НоваяСтрока_Уровень3.Уровень = 3;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень3, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень3, СчСтрок);
	НоваяСтрока_Уровень3.СсылкаНаСправку = "proizv_nesoot_spec";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "АнализЗакупочныхЦен";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Анализ закупочных цен";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "zakup_prices";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "КонтрольДоговоровОрганизаций";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Контроль организаций и договоров в документах";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "dogovor_org";
	
	НоваяСтрока_Уровень1 = НоваяСтрока_Уровень0.Строки.Добавить();
	НоваяСтрока_Уровень1.РазделУчета = "СтатьиДДС";
	НоваяСтрока_Уровень1.РазделУчетаПредствление = "Статьи движения денежных средств";
	НоваяСтрока_Уровень1.Уровень = 1;
	УстановитьДатуВыполненияВСтроку(НоваяСтрока_Уровень1, СтруктураДанных);
	НумерацияСтрокДерева(НоваяСтрока_Уровень1, СчСтрок);
	НоваяСтрока_Уровень1.СсылкаНаСправку = "dds";
	
	НоваяСтрока_Уровень0 = ДеревоДанных.Строки.Добавить();
	НоваяСтрока_Уровень0.РазделУчета = "ФинальныйОтчет";
	НоваяСтрока_Уровень0.РазделУчетаПредствление = "Финальный отчет";
	НоваяСтрока_Уровень0.Уровень = 0;
	НумерацияСтрокДерева(НоваяСтрока_Уровень0, СчСтрок);
	
	НумерацияРазделов(ДеревоДанных);
	
	ЗначениеВРеквизитФормы(ДеревоДанных, "ДеревоРазделов");
	
КонецПроцедуры

// Установка последних дат корректировок по каждому разделу - т.е. строке дерева.
//
&НаСервере
Процедура УстановитьДатуВыполненияВСтроку(СтрокаДерева, СтруктураДанных)
	
	Если СтруктураДанных.Свойство(СтрокаДерева.РазделУчета) Тогда
		СтрокаДерева.ДатаВыполнения = СтруктураДанных[СтрокаДерева.РазделУчета];
	КонецЕсли;
	
КонецПроцедуры

// Нумерация строк дерева разделов. 
// Нумеруются только строки, уровень 1 и более. 
//
&НаСервере
Процедура НумерацияРазделов(ДеревоДанных)
	
	СчРазделов = 0;
	
	Для каждого Строка_Уровень0 Из ДеревоДанных.Строки Цикл
		
		УстановкаНомеровВПодчиненных(Строка_Уровень0, СчРазделов);
		
	КонецЦикла;
	
	ВсегоРазделовДоступно = СчРазделов;
	
КонецПроцедуры

// Рекурсивно вызывается из НумерацияРазделов(ДеревоДанных).
//
&НаСервере
Процедура УстановкаНомеровВПодчиненных(СтрокаРодитель, СчРазделов)
	
	Для каждого ТекущаяСтрока Из СтрокаРодитель.Строки Цикл
		
		СчРазделов = СчРазделов + 1;
		
		ТекущаяСтрока.НомерРаздела = СчРазделов;
		
		УстановкаНомеровВПодчиненных(ТекущаяСтрока, СчРазделов);
		
	КонецЦикла;
	
КонецПроцедуры

// Нумеруются все строки дерева - для навигации.
//
&НаСервереБезКонтекста
Процедура НумерацияСтрокДерева(СтрокаДерева, СчСтрок)
	
	СтрокаДерева.НомерСтрокиДерева = СчСтрок;
	
	СчСтрок = СчСтрок + 1;
	
КонецПроцедуры

// Процедура выводит в ДокументРезультат гиперссылку обновления данных.
// Выводится если, данные по разделу не заполнялись ранее.
//
&НаСервере
Процедура ВывестиНавигациюОбновитьДанные()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетВывода = ОбработкаОбъект.ПолучитьМакет("МакетВывода");
	
	ДокументРезультат.Очистить();
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ВыполнитьАнализДанных");
	ОбластьМакета.Параметры.РасшифровкаВыполнитьАнализДанных = "ВыполнитьПроцедуруНаКлиенте#ВыполнитьОбновлениеДанных(ВариантПереопределения, БылиИзмененыДанные)";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ВывестиГиперссылкуОписание(МакетВывода);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку обновления данных.
//
&НаКлиенте
Процедура ВыполнитьОбновлениеДанных(ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 1;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	Если НЕ ТекущаяСтрокаДерева.АнализВыполнен Тогда
		
		ТекущаяСтрокаДерева.АнализВыполнен = Истина;
		
		ПодчиненныеСтроки = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		
		Для каждого Строка Из ПодчиненныеСтроки Цикл
			Строка.РазделРодительВыведен = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Процедура выводит область макета со ссылкой на повторное обновление данных
//
&НаСервере
Процедура ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода)
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбластьОтступ");
	ДокументРезультат.Вывести(ОбластьМакета);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбновитьДанныеПоРазделу");
	ОбластьМакета.Параметры.РасшифровкаОбновитьДанныеПоРазделу = "ВыполнитьПроцедуру#Подключаемый_ОбновитьДанныеПоСформированномуРазделу(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку обновления данных по сформированному разделу.
//
&НаСервере
Процедура Подключаемый_ОбновитьДанныеПоСформированномуРазделу(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 1;
	
	БылиИзмененыДанные = Истина;
	
	Если ТекущийРазделУчета = "РасчетыСПоставщиками" Тогда
		
		РасчетыСПоставщикамиЗаполнялось = Ложь;
		РасчетыСПоставщиками.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "РасчетыСПокупателями" Тогда
		
		РасчетыСПокупателямиЗаполнялось = Ложь;
		РасчетыСПокупателями.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "КурсовыеРазницы" Тогда
		
		КурсовыеРазницыЗаполнялось = Ложь;
		КурсовыеРазницыДокументыПерепроведены = Ложь;
		
		НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы().Очистить();
		НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы().Очистить();
		НекорректныеКурсовыеРазницыПоставщики.ПолучитьЭлементы().Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "НоменклатураБезСпецификаций" Тогда
		
		НоменклатураБезСпецификацийЗаполнялось = Ложь;
		НоменклатураБезСпецификаций.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "ОтчетыПерерБезСпецификаций" Тогда
		
		ОтчетыПерерБезСпецификацийЗаполнялось = Ложь;
		ОтчетыПереработчиковСпецификации.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "ОтчетыПерерНесоответСписаний" Тогда
		
		ОтчетыПереработчиковНесоответствияЗаполнялось = Ложь;
		ОтчетыПереработчиковНесоответствия.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "ДокПроизводствоБезСпецификаций" Тогда
		
		ДокПроизводствоСпецификацииЗаполнялось = Ложь;
		ДокПроизводствоСпецификации.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "ДокПроизводствоНесоответСписаний" Тогда
		
		ДокПроизводствоНесоответствияЗаполнялось = Ложь;
		ДокПроизводствоНесоответствия.Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "АнализЗакупочныхЦен" Тогда
		
		АнализЗакупочныхЦенЗаполнялось = Ложь;
		АнализЗакупочныхЦен.ПолучитьЭлементы().Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "КонтрольДоговоровОрганизаций" Тогда
		
		ДеревоДокументовДоговораОрганизацииЗаполнялось = Ложь;
		ДеревоДокументовДоговораОрганизации.ПолучитьЭлементы().Очистить();
		
	ИначеЕсли ТекущийРазделУчета = "СтатьиДДС" Тогда
		
		СтатьиДДСЗаполнялось = Ложь;
		СтатьиДДС.ПолучитьЭлементы().Очистить();
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден обработчик обновления данных для раздела """ + ТекущийРазделУчетаПредствление + """";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Выводит в табличный документ область макета, содержащую сообщение об отсутствии данных
//
&НаСервере
Процедура ВывестиОбластьНетДанных(МакетВывода)
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНетДанных");
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Выводит в ДокументРезультат результат анализа конкретного раздела учета.
//
&НаСервере
Процедура ВывестиДанныеПоРазделу()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетВывода = ОбработкаОбъект.ПолучитьМакет("МакетВывода");
	
	ИмяПроцедурыОбработчика = СтрШаблон("Подключаемый_ВывестиДанныеПоРазделу%1(МакетВывода)", ТекущийРазделУчета);
	
	Попытка
		Выполнить(ИмяПроцедурыОбработчика);
	Исключение
		МассивОписанийОшибок = Новый Массив;
		МассивОписанийОшибок.Добавить(НСтр(СтрШаблон("ru = 'Не удалось выполнить процедуру ""%1"".'", ИмяПроцедурыОбработчика)));
		МассивОписанийОшибок.Добавить(ОписаниеОшибки());
		ВывестиСтрокуОшибки(МассивОписанийОшибок);
	КонецПопытки;
	
	ВывестиСтрокуПереходаКСледующемуРазделу(МакетВывода);
	
	ВывестиГиперссылкуОписание(МакетВывода);
	
КонецПроцедуры

// Выводит в ДокументРезультат представление раздела проверяемого учета,
// а также дату послендних исправлений
//
&НаСервере
Процедура ВывестиЗаголовокРаздела(МакетВывода)
	
	ДокументРезультат.Очистить();
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.РАЗДЕЛ = ТекущийРазделУчетаПредствление;
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ТекущаяДатаПоследногоИсправления <> '00010101' Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ДатаПоследнихИсправлений");
		ОбластьМакета.Параметры.ДатаВыполнения = Формат(ТекущаяДатаПоследногоИсправления, "ДЛФ=DD");
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

// Выводит в ДокументРезультат область «ВыводДанных» во время заполнения данных по разделу.
//
&НаСервере
Процедура ВывестиИзображениеВыводДанных(МакетВывода)
	
	ДокументРезультат.Очистить();
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ВыводДанных");
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Выводит гиперссылку перехода к следующему разделу в конце каждой страницы раздела.
//
&НаСервере
Процедура ВывестиСтрокуПереходаКСледующемуРазделу(МакетВывода)
	
	Если НомерТекущегоРаздела = ВсегоРазделовДоступно Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаФинальныйОтчет");
		ОбластьМакета.Параметры.ФинальныйОтчет = "Финальный отчет";
		ОбластьМакета.Параметры.ПереходКФинальномуОтчету = "ВыполнитьПроцедуруНаКлиенте#ВывестиФинальныйОтчет()";
		ДокументРезультат.Вывести(ОбластьМакета);
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ЗаполнитьДанныеРаздела(НомерТекущегоРаздела + 1);	
	
	//ссылка на переход
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаПерейтиКРазделу");
	ОбластьМакета.Параметры.Раздел = ДанныеРаздела.РазделУчетаПредствление;
	ОбластьМакета.Параметры.ПереходСледующемуРазделу = "ВыполнитьПроцедуруНаКлиенте#ВыполнитьПереходКСледующемуРазделу(ВариантПереопределения, БылиИзмененыДанные)";
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Функция вызывается из процедуры  «ВывестиСтрокуПереходаКСледующемуРазделу(МакетВывода)» 
// для заполнения данных по следующему разделу относительно текущего.
//
&НаСервере
Функция ЗаполнитьДанныеРаздела(НомерРаздела)
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоРазделов");
	
	СтруктураДанныхРаздела = Новый Структура("РазделУчетаПредствление", "");
	
	Для каждого Строка_Уровень0 Из ДеревоДанных.Строки Цикл
		
		ПроверитьПодчиненныеСтроки(Строка_Уровень0, НомерРаздела, СтруктураДанныхРаздела);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхРаздела;
	
КонецФункции

// Обход строк дерева для получения данных по разделу.
//
&НаСервереБезКонтекста
Процедура ПроверитьПодчиненныеСтроки(СтрокаРодитель, НомерРаздела, СтруктураДанныхРаздела)
	
	Для каждого ТекущаяСтрока Из СтрокаРодитель.Строки Цикл
		
		Если ТекущаяСтрока.НомерРаздела = НомерРаздела Тогда
			ЗаполнитьЗначенияСвойств(СтруктураДанныхРаздела, ТекущаяСтрока);
			Возврат;
		Иначе
			ПроверитьПодчиненныеСтроки(ТекущаяСтрока, НомерРаздела, СтруктураДанныхРаздела);
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

// Процедура-обработчик нажатия на ячейку таб. документа, выполняется на сервере.
// Параметры:
//		ИмяОбласти – строка, имя области на которой было нажатие;
//		ВариантПереопределения – число;
//		ИмяПроцедурыДляВыполненияНаКлиенте – строка, переменная, в котурую будет помещено имя процедуры для выполнения на клиенте;
//		ЭтоРисунок – булево, признак того, что обрабатываемая область это рисунок;
//		БылиИзмененыДанные – булево, устанавливается в ИСТИНА в случае модификации объектов БД.
//
&НаСервере
Процедура ОбработатьНажатиеНаЯчейку(ИмяОбласти, ВариантПереопределения, ИмяПроцедурыДляВыполненияНаКлиенте, ЭтоРисунок = Ложь, БылиИзмененыДанные)
	
	Если ЭтоРисунок Тогда
		
		Попытка
			ТекОбласть = ДокументРезультат.Рисунки[ИмяОбласти];			
		Исключение
			Возврат;
		КонецПопытки;
		
	Иначе
		
		Попытка
			ТекОбласть = ДокументРезультат.Область(ИмяОбласти);
		Исключение
			Возврат;	
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТекОбласть.Расшифровка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаОбласти = ТекОбласть.Расшифровка;
	
	Если ТипЗнч(РасшифровкаОбласти) = Тип("Строка") Тогда
		
		Если Лев(РасшифровкаОбласти, 19) = "ВыполнитьПроцедуру#" Тогда
			
			Попытка
				Выполнить(ВыделитьИмяПроцедурыСервер(РасшифровкаОбласти));
			Исключение
				МассивОписанийОшибок = Новый Массив;
				МассивОписанийОшибок.Добавить("Не удалось выполнить процедуру " + ВыделитьИмяПроцедурыСервер(РасшифровкаОбласти));
				МассивОписанийОшибок.Добавить(ОписаниеОшибки());
				ВывестиСтрокуОшибки(МассивОписанийОшибок);
			КонецПопытки;
			
		ИначеЕсли Лев(РасшифровкаОбласти, 28) = "ВыполнитьПроцедуруНаКлиенте#" Тогда
			
			ПереопределитьТекущуюОбласть = Истина;
			ИмяПроцедурыДляВыполненияНаКлиенте = ВыделитьИмяПроцедурыКлиент(РасшифровкаОбласти);
			
		ИначеЕсли Лев(РасшифровкаОбласти, 15) = "ПерейтиКСтроке#" Тогда
			
			ИмяПроцедурыДляВыполненияНаКлиенте = РасшифровкаОбласти;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит в ДокументРезультат сообщение об ошибке. 
// 
&НаСервере
Процедура ВывестиСтрокуОшибки(МассивОписанийОшибок)
	
	ДокументРезультат.Вывести(ПолучитьОбластьМакета("СтрокаОшибка"));
	
	ОбластьОписанияОшибки = ПолучитьОбластьМакета("СтрокаСодержаниеОшибки"); 
	
	Для каждого ЭлементМассива Из МассивОписанийОшибок Цикл
		ОбластьОписанияОшибки.Параметры.СодежаниеОшибки = ЭлементМассива;
		ДокументРезультат.Вывести(ОбластьОписанияОшибки);
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает область макета с указанным именем.
//
&НаСервере
Функция ПолучитьОбластьМакета(ИмяОбласти)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетВывода");
	
	Возврат Макет.ПолучитьОбласть(ИмяОбласти);
	
КонецФункции

// Функция возвращает имя процедуры для выполнения на сервере.
//
&НаСервереБезКонтекста
Функция ВыделитьИмяПроцедурыСервер(ИсходныйТекст)
	
	Возврат Прав(ИсходныйТекст, СтрДлина(ИсходныйТекст) - 19);
	
КонецФункции

// Функция возвращает имя процедуры для выполнения на клиенте.
//
&НаСервереБезКонтекста
Функция ВыделитьИмяПроцедурыКлиент(ИсходныйТекст)
	
	Возврат Прав(ИсходныйТекст, СтрДлина(ИсходныйТекст) - 28);
	
КонецФункции

// Процедура-обработчик нажатия на гиперссылку перехода к следующему разделу.
//
&НаКлиенте
Процедура ВыполнитьПереходКСледующемуРазделу(ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 1;
	
	БылиИзмененыДанные = Истина;
	
	НомерСледующегоРаздела = НомерТекущегоРаздела + 1;
	
	Строки_Уровень0 = ДеревоРазделов.ПолучитьЭлементы();
	
	Для каждого Строка_Уровень0 Из Строки_Уровень0 Цикл
		
		ПолучитьУстановитьИдентификаторПодчиненнойСтроки(Строки_Уровень0, НомерСледующегоРаздела);
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура устанавливает новую текущую строку дерева разделов.
//
&НаКлиенте
Процедура ПолучитьУстановитьИдентификаторПодчиненнойСтроки(НаборСтрок, НомерРаздела)
	
	Для каждого Строка Из НаборСтрок Цикл
		
		Если Строка.НомерРаздела = НомерРаздела Тогда
			Элементы.ДеревоРазделов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Возврат;
		Иначе
			ПолучитьУстановитьИдентификаторПодчиненнойСтроки(Строка.ПолучитьЭлементы(), НомерРаздела);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//разделы

// Процедура инициализирует заполнение данных по разделу «Расчеты с поставщиками» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуРасчетыСПоставщиками(МакетВывода)
	
	Если Не РасчетыСПоставщикамиЗаполнялось Тогда
		
		ВывестиИзображениеВыводДанных(МакетВывода);
		
		ТаблицаРасчетыСПоставщиками = СформироватьТаблицуРасчетыСПоставщиками();
		ЗначениеВРеквизитФормы(ТаблицаРасчетыСПоставщиками, "РасчетыСПоставщиками");
		РасчетыСПоставщикамиЗаполнялось = Истина;
		
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если РасчетыСПоставщиками.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабЧасти Из РасчетыСПоставщиками Цикл
		
		Если СтрокаТабЧасти.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабРасчеты");
			ОбластьМакета.Параметры.РезультатАнализа = "Авансы были зачтены";
			
		Иначе
			
			Если СтрокаТабЧасти.БылиИсправления Тогда
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчетыБылиИсправления");
				
			ИначеЕсли СтрокаТабЧасти.ЕстьОборотыЗаПериод Тогда
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчеты");
				ОбластьМакета.Параметры.ВыполнитьДействие = "Выполнить зачет авансов";
				ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_ВыполнитьЗачетАвансовПоПоставщику(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
				
			Иначе
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчетыБезОборотов");
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.РезультатАнализа = "Обнаружены незачтенные авансы";
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.КонтрагентНаименование = СокрЛП(СтрокаТабЧасти.Контрагент.Наименование);
		ОбластьМакета.Параметры.Контрагент = СтрокаТабЧасти.Контрагент;
		
		ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетПоВзаиморасчетам(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Расчеты с поставщиками».
//
&НаСервере
Функция СформироватьТаблицуРасчетыСПоставщиками(КонтрагентОтбор = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВложенныйЗапрос.КоличествоТиповРасчетов,
	|	ВложенныйЗапрос.Контрагент
	|ПОМЕСТИТЬ ВТ_КонтрагентыАвансДолг
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.КоличествоТиповРасчетов) КАК КоличествоТиповРасчетов,
	|		ВложенныйЗапрос.Контрагент КАК Контрагент
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасчетыСПоставщикамиОстатки.ТипРасчетов КАК ТипРасчетов,
	|			1 КАК КоличествоТиповРасчетов,
	|			РасчетыСПоставщикамиОстатки.Контрагент КАК Контрагент
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаОстатков, Организация = &Организация
	|																			//#И Контрагент = &КонтрагентОтбор#
	|) КАК РасчетыСПоставщикамиОстатки
	|		ГДЕ
	|			РасчетыСПоставщикамиОстатки.СуммаВалОстаток <> 0) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Контрагент) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоТиповРасчетов > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтрагентыАвансДолг.Контрагент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.КоличествоРегистраторов, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОборотыЗаПериод,
	|	ЛОЖЬ КАК ОбработкаВыполнена,
	|	ЛОЖЬ КАК БылиИсправления
	|ИЗ
	|	ВТ_КонтрагентыАвансДолг КАК ВТ_КонтрагентыАвансДолг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетыСПоставщикамиОбороты.Контрагент КАК Контрагент,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСПоставщикамиОбороты.Регистратор) КАК КоличествоРегистраторов
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|					&ДатаНач,
	|					&ДатаОстатков,
	|					Регистратор,
	|					Организация = &Организация
	|						И Контрагент В
	|							(ВЫБРАТЬ
	|								ВТ_КонтрагентыАвансДолг.Контрагент
	|							ИЗ
	|								ВТ_КонтрагентыАвансДолг КАК ВТ_КонтрагентыАвансДолг)) КАК РасчетыСПоставщикамиОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПоставщикамиОбороты.Контрагент) КАК ВложенныйЗапрос
	|		ПО ВТ_КонтрагентыАвансДолг.Контрагент = ВложенныйЗапрос.Контрагент";
	
	Если КонтрагентОтбор <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//#И Контрагент = &КонтрагентОтбор#", "И Контрагент = &КонтрагентОтбор");
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонтрагентОтбор", КонтрагентОтбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Процедура инициализирует заполнение данных по разделу «Расчеты с покупателями» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуРасчетыСПокупателями(МакетВывода)
	
	Если Не РасчетыСПокупателямиЗаполнялось Тогда
		
		ВывестиИзображениеВыводДанных(МакетВывода);
		
		ТаблицаРасчетыСПокупателями = СформироватьТаблицуРасчетыСПокупателями();
		ЗначениеВРеквизитФормы(ТаблицаРасчетыСПокупателями, "РасчетыСПокупателями");
		РасчетыСПокупателямиЗаполнялось = Истина;
		
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если РасчетыСПокупателями.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабЧасти Из РасчетыСПокупателями Цикл
		
		Если СтрокаТабЧасти.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабРасчеты");
			
			ОбластьМакета.Параметры.КонтрагентНаименование = СокрЛП(СтрокаТабЧасти.Контрагент.Наименование);
			ОбластьМакета.Параметры.Контрагент = СтрокаТабЧасти.Контрагент;
			
			ОбластьМакета.Параметры.РезультатАнализа = "Авансы были зачтены";
			
		Иначе
			
			Если СтрокаТабЧасти.БылиИсправления Тогда
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчетыБылиИсправления");
				
			ИначеЕсли СтрокаТабЧасти.ЕстьОборотыЗаПериод Тогда
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчеты");
				ОбластьМакета.Параметры.ВыполнитьДействие = "Выполнить зачет авансов";
				ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_ВыполнитьЗачетАвансовПоПокупателю(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
				
			Иначе
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабРасчетыБезОборотов");
				
			КонецЕсли;
			
			ОбластьМакета.Параметры.РезультатАнализа = "Обнаружены незачтенные авансы";
			
			ОбластьМакета.Параметры.КонтрагентНаименование = СокрЛП(СтрокаТабЧасти.Контрагент.Наименование);
			ОбластьМакета.Параметры.Контрагент = СтрокаТабЧасти.Контрагент;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетПоВзаиморасчетам(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Расчеты с покупателями».
//
&НаСервере
Функция СформироватьТаблицуРасчетыСПокупателями(КонтрагентОтбор = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВложенныйЗапрос.КоличествоТиповРасчетов,
	|	ВложенныйЗапрос.Контрагент
	|ПОМЕСТИТЬ ВТ_КонтрагентыАвансДолг
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВложенныйЗапрос.КоличествоТиповРасчетов) КАК КоличествоТиповРасчетов,
	|		ВложенныйЗапрос.Контрагент КАК Контрагент
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасчетыСПокупателямиОстатки.ТипРасчетов КАК ТипРасчетов,
	|			1 КАК КоличествоТиповРасчетов,
	|			РасчетыСПокупателямиОстатки.Контрагент КАК Контрагент
	|		ИЗ
	|			РегистрНакопления.РасчетыСПокупателями.Остатки(&ДатаОстатков, Организация = &Организация
	|																			//#И Контрагент = &КонтрагентОтбор#
	|) КАК РасчетыСПокупателямиОстатки
	|		ГДЕ
	|			РасчетыСПокупателямиОстатки.СуммаВалОстаток <> 0) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Контрагент) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоТиповРасчетов > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КонтрагентыАвансДолг.Контрагент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВложенныйЗапрос.КоличествоРегистраторов, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОборотыЗаПериод,
	|	ЛОЖЬ КАК ОбработкаВыполнена,
	|	ЛОЖЬ КАК БылиИсправления
	|ИЗ
	|	ВТ_КонтрагентыАвансДолг КАК ВТ_КонтрагентыАвансДолг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РасчетыСПокупателямиОбороты.Контрагент КАК Контрагент,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетыСПокупателямиОбороты.Регистратор) КАК КоличествоРегистраторов
	|		ИЗ
	|			РегистрНакопления.РасчетыСПокупателями.Обороты(
	|					&ДатаНач,
	|					&ДатаОстатков,
	|					Регистратор,
	|					Организация = &Организация
	|						И Контрагент В
	|							(ВЫБРАТЬ
	|								ВТ_КонтрагентыАвансДолг.Контрагент
	|							ИЗ
	|								ВТ_КонтрагентыАвансДолг КАК ВТ_КонтрагентыАвансДолг)) КАК РасчетыСПокупателямиОбороты
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСПокупателямиОбороты.Контрагент) КАК ВложенныйЗапрос
	|		ПО ВТ_КонтрагентыАвансДолг.Контрагент = ВложенныйЗапрос.Контрагент";
	
	Если КонтрагентОтбор <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//#И Контрагент = &КонтрагентОтбор#", "И Контрагент = &КонтрагентОтбор");	
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоПериода, ВидГраницы.Включая));					  
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонтрагентОтбор", КонтрагентОтбор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Процедура инициализирует заполнение данных по разделу «Курсовые разницы» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуКурсовыеРазницы(МакетВывода)
	
	Если Не КурсовыеРазницыЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);		
		ЗаполнитьДанныеПоКурсовыхРазницам();
		КурсовыеРазницыЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы().Количество() = 0 И 
		НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы().Количество() = 0 И
		НекорректныеКурсовыеРазницыПоставщики.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
		
	КонецЕсли;
	
	ЕстьОшибкиПоКР = Ложь;
	
	СтрокиКассыСчета = НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы();
	
	Если СтрокиКассыСчета.Количество() > 0 Тогда
		
		ЕстьОшибкиПоКР = Истина;
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабКурсовыеРазницы_ДС");
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для каждого СтрокаДерева Из СтрокиКассыСчета Цикл
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("КР_КассыСчета");
			ОбластьМакета.Параметры.ОбъектКР_ДС = СокрЛП(СтрокаДерева.БанковскийСчетКасса.Наименование);
			ОбластьМакета.Параметры.ОбъектКР_ДС_Расшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетКурсовыеРазницыДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(2,1,2,1).Маска = Строка(СтрокаДерева.БанковскийСчетКасса.УникальныйИдентификатор());
			ДокументРезультат.Вывести(ОбластьМакета);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	СтрокиПокупатели = НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы();
	
	Если СтрокиПокупатели.Количество() > 0 Тогда
		
		ЕстьОшибкиПоКР = Истина;
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабКурсовыеРазницы_Покупатели");
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для каждого СтрокаДерева Из СтрокиПокупатели Цикл
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("КР_Покупатели");
			ОбластьМакета.Параметры.ОбъектКР_Покупатели = СокрЛП(СтрокаДерева.Контрагент.Наименование);
			ОбластьМакета.Параметры.ОбъектКР_Покупатели_Расшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетКурсовыеРазницыПокупатели(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(2,1,2,1).Маска = Строка(СтрокаДерева.Контрагент.УникальныйИдентификатор());
			ДокументРезультат.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокиПоставщики = НекорректныеКурсовыеРазницыПоставщики.ПолучитьЭлементы();
	
	Если СтрокиПоставщики.Количество() > 0 Тогда
		
		ЕстьОшибкиПоКР = Истина;
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабКурсовыеРазницы_Поставщики");
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для каждого СтрокаДерева Из СтрокиПоставщики Цикл
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("КР_Поставщики");
			ОбластьМакета.Параметры.ОбъектКР_Поставщики = СокрЛП(СтрокаДерева.Контрагент.Наименование);
			ОбластьМакета.Параметры.ОбъектКР_Поставщики_Расшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетКурсовыеРазницыПоставщики(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(2,1,2,1).Маска = Строка(СтрокаДерева.Контрагент.УникальныйИдентификатор());
			ДокументРезультат.Вывести(ОбластьМакета);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Если КурсовыеРазницыДокументыПерепроведены Тогда
		
		Если ЕстьОшибкиПоКР Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКурсовыеРазницы_ЕстьОшибкиПослеПерепров");
			ДокументРезультат.Вывести(ОбластьМакета);
			
		Иначе
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабКурсовыеРазницы");
			ДокументРезультат.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
	Иначе
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ВыполнитьПерепроведениеКурсовые");
		ОбластьМакета.Параметры.ВыполнитьДействие = "Выполнить перепроведение";
		ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_ВыполнитьПерепроведениеПоКурсовымРазницам(ВариантПереопределения, БылиИзмененыДанные)";
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура заполняет данные по разделу «Курсовые разницы».
//
&НаСервере
Процедура ЗаполнитьДанныеПоКурсовыхРазницам(МассивРезультатов = Неопределено)
	
	ТаблицаДней = Новый ТаблицаЗначений;
	ТаблицаДней.Колонки.Добавить("ДатаДень", Новый ОписаниеТипов("Дата"));
	
	ТекДата = НачалоПериода;
	ДатаОкончания = КонецПериода;
	
	Пока ТекДата <= ДатаОкончания Цикл
		НоваяСтрока = ТаблицаДней.Добавить();
		НоваяСтрока.ДатаДень = ТекДата;
		ТекДата = ТекДата + 24*60*60;
	КонецЦикла;
	
	НачалоМесяцаДата = НачалоПериода;
	КонецМесяцаДата = КонецДня(КонецПериода);
	
	НачалоМесяцаГраница = Новый Граница(НачалоМесяцаДата, ВидГраницы.Включая);
	КонецМесяцаГраница = Новый Граница(КонецМесяцаДата, ВидГраницы.Включая);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТаблицаДнейПериода.ДатаДень
	|ПОМЕСТИТЬ ВТ_ТаблицаДнейПериода
	|ИЗ
	|	&ТаблицаДнейПериода КАК ТаблицаДнейПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалютЗаПериод
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НачалоМесяцаДата, ) КАК КурсыВалютСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыУстановкиКурсовВалют.ДатаДень,
	|	ПериодыУстановкиКурсовВалют.Валюта,
	|	ВТ_КурсыВалютЗаПериод.Курс,
	|	ВТ_КурсыВалютЗаПериод.Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалютПоДатам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ТаблицаДнейПериода.ДатаДень КАК ДатаДень,
	|		ВТ_КурсыВалютЗаПериод.Валюта КАК Валюта,
	|		МАКСИМУМ(ВТ_КурсыВалютЗаПериод.Период) КАК Период
	|	ИЗ
	|		ВТ_ТаблицаДнейПериода КАК ВТ_ТаблицаДнейПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалютЗаПериод КАК ВТ_КурсыВалютЗаПериод
	|			ПО ВТ_ТаблицаДнейПериода.ДатаДень >= ВТ_КурсыВалютЗаПериод.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_ТаблицаДнейПериода.ДатаДень,
	|		ВТ_КурсыВалютЗаПериод.Валюта) КАК ПериодыУстановкиКурсовВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалютЗаПериод КАК ВТ_КурсыВалютЗаПериод
	|		ПО ПериодыУстановкиКурсовВалют.Валюта = ВТ_КурсыВалютЗаПериод.Валюта
	|			И ПериодыУстановкиКурсовВалют.Период = ВТ_КурсыВалютЗаПериод.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КурсыВалютПоДатам.ДатаДень КАК ДатаДень,
	|	ВТ_КурсыВалютПоДатам.Валюта,
	|	ВТ_КурсыВалютПоДатам.Курс,
	|	ВТ_КурсыВалютПоДатам.Кратность
	|ПОМЕСТИТЬ ВТ_КурсыУчетнойВалюты
	|ИЗ
	|	(ВЫБРАТЬ
	|		КонстантаВалютаУчета.Значение КАК ВалютаУчета
	|	ИЗ
	|		Константа.ВалютаУчета КАК КонстантаВалютаУчета) КАК КонстантаВалютаУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыВалютПоДатам КАК ВТ_КурсыВалютПоДатам
	|		ПО КонстантаВалютаУчета.ВалютаУчета = ВТ_КурсыВалютПоДатам.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.ДатаДень,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.КурсУчетной,
	|	КурсыВалют.КратностьУчетной,
	|	КурсыВалют.Курс / КурсыВалют.Кратность / (КурсыВалют.КурсУчетной / КурсыВалют.КратностьУчетной) КАК КурсВалютыПоКурсуУчетной
	|ПОМЕСТИТЬ ВТ_КурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_КурсыВалютПоДатам.ДатаДень КАК ДатаДень,
	|		ВТ_КурсыВалютПоДатам.Валюта КАК Валюта,
	|		ВТ_КурсыВалютПоДатам.Курс КАК Курс,
	|		ВТ_КурсыВалютПоДатам.Кратность КАК Кратность,
	|		ВТ_КурсыУчетнойВалюты.Курс КАК КурсУчетной,
	|		ВТ_КурсыУчетнойВалюты.Кратность КАК КратностьУчетной
	|	ИЗ
	|		ВТ_КурсыВалютПоДатам КАК ВТ_КурсыВалютПоДатам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыУчетнойВалюты КАК ВТ_КурсыУчетнойВалюты
	|			ПО ВТ_КурсыВалютПоДатам.ДатаДень = ВТ_КурсыУчетнойВалюты.ДатаДень) КАК КурсыВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭкстремумыКурсов.Валюта,
	|	ЭкстремумыКурсов.МакисмальныйКурс,
	|	ЭкстремумыКурсов.МинимальныйКурс,
	|	ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной КАК КурсНаНачалоМесяца,
	|	ВЫРАЗИТЬ((ЭкстремумыКурсов.МакисмальныйКурс - ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной) / ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной * 100 КАК ЧИСЛО(10, 2)) КАК ВерхнийПредел,
	|	ВЫРАЗИТЬ((ЭкстремумыКурсов.МинимальныйКурс - ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной) / ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной * 100 КАК ЧИСЛО(10, 2)) КАК НижнийПредел
	|ИЗ
	|	(ВЫБРАТЬ
	|		МаксимальныеКурсы.Валюта КАК Валюта,
	|		МаксимальныеКурсы.КурсВалютыПоКурсуУчетной КАК МакисмальныйКурс,
	|		МинимальныеКурсы.КурсВалютыПоКурсуУчетной КАК МинимальныйКурс
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВТ_КурсыВалют.Валюта КАК Валюта,
	|			МАКСИМУМ(ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной) КАК КурсВалютыПоКурсуУчетной
	|		ИЗ
	|			ВТ_КурсыВалют КАК ВТ_КурсыВалют
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_КурсыВалют.Валюта) КАК МаксимальныеКурсы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВТ_КурсыВалют.Валюта КАК Валюта,
	|				МИНИМУМ(ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной) КАК КурсВалютыПоКурсуУчетной
	|			ИЗ
	|				ВТ_КурсыВалют КАК ВТ_КурсыВалют
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ВТ_КурсыВалют.Валюта) КАК МинимальныеКурсы
	|			ПО МаксимальныеКурсы.Валюта = МинимальныеКурсы.Валюта
	|	ГДЕ
	|		МаксимальныеКурсы.КурсВалютыПоКурсуУчетной <> МинимальныеКурсы.КурсВалютыПоКурсуУчетной) КАК ЭкстремумыКурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
	|		ПО (ВТ_КурсыВалют.Валюта = ЭкстремумыКурсов.Валюта)
	|			И (ВТ_КурсыВалют.ДатаДень = &НачалоМесяцаДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КурсыВалют.ДатаДень КАК ДатаДень,
	|	ВТ_КурсыВалют.Валюта,
	|	ВТ_КурсыВалют.Курс,
	|	ВТ_КурсыВалют.Кратность,
	|	ВТ_КурсыВалют.КурсУчетной,
	|	ВТ_КурсыВалют.КратностьУчетной,
	|	ВТ_КурсыВалют.КурсВалютыПоКурсуУчетной
	|ИЗ
	|	ВТ_КурсыВалют КАК ВТ_КурсыВалют
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДень");
	
	
	Запрос.УстановитьПараметр("ТаблицаДнейПериода", ТаблицаДней);
	Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
	Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПределов = МассивРезультатов[5].Выгрузить();
	ТаблицаКурсов = МассивРезультатов[6].Выгрузить();
	
	Если ТаблицаПределов.Количество() = 0 Тогда //курс не менялся
		Возврат;
	КонецЕсли;
	
	КурсовыеРазницы_ДС(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата);
	
	КурсовыеРазницы_Покупатели(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата);
	
	КурсовыеРазницы_Поставщики(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата);
	
КонецПроцедуры

&НаСервере
Процедура КурсовыеРазницы_ДС(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата)
	
	МассивКассСчетов = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Регистратор,
	|	ДенежныеСредства.ТипДенежныхСредств,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Период КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1 * ДенежныеСредства.Сумма
	|			ИНАЧЕ ДенежныеСредства.Сумма
	|		КОНЕЦ) КАК СуммаКР
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Организация = &Организация
	|	И ДенежныеСредства.СодержаниеПроводки = ""Курсовая разница""
	|	И ДенежныеСредства.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.Регистратор,
	|	ДенежныеСредства.ТипДенежныхСредств,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
	Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаДвиженийКР = Запрос.Выполнить().Выгрузить();
	
	ЗапросПоОстаткам = Новый Запрос("ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК ОстатокДоПроведения
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(
	|			&МоментДокумента,
	|			Организация = &Организация
	|				И ТипДенежныхСредств = &ТипДенежныхСредств
	|				И БанковскийСчетКасса = &БанковскийСчетКасса
	|				И Валюта = &Валюта) КАК ДенежныеСредстваОстатки");
	
	
	Для каждого СтрокаДвиженийКР Из ТаблицаДвиженийКР Цикл
		
		ЗапросПоОстаткам.УстановитьПараметр("МоментДокумента", СтрокаДвиженийКР.Регистратор.МоментВремени());
		ЗапросПоОстаткам.УстановитьПараметр("Организация", Организация);
		ЗапросПоОстаткам.УстановитьПараметр("ТипДенежныхСредств", СтрокаДвиженийКР.ТипДенежныхСредств);
		ЗапросПоОстаткам.УстановитьПараметр("БанковскийСчетКасса", СтрокаДвиженийКР.БанковскийСчетКасса);
		ЗапросПоОстаткам.УстановитьПараметр("Валюта", СтрокаДвиженийКР.Валюта);
		
		ВыборкаОстатков = ЗапросПоОстаткам.Выполнить().Выбрать();
		
		Если ВыборкаОстатков.Следующий() Тогда
			
			Если ВыборкаОстатков.ОстатокДоПроведения = 0 Тогда
				ПроцентКРДвижений = 0;
			Иначе
				ПроцентКРДвижений = Окр(СтрокаДвиженийКР.СуммаКР / ВыборкаОстатков.ОстатокДоПроведения * 100, 2);
			КонецЕсли;
			
			СтрокаПределов = ТаблицаПределов.Найти(СтрокаДвиженийКР.Валюта);
			
			Если СтрокаПределов <> Неопределено Тогда
				
				Если ПроцентКРДвижений > 0 Тогда
					
					Если (ПроцентКРДвижений - СтрокаПределов.ВерхнийПредел) > 0.1 Тогда
						
						Если (МассивКассСчетов.Найти(СтрокаДвиженийКР.БанковскийСчетКасса) = Неопределено) Тогда
							МассивКассСчетов.Добавить(СтрокаДвиженийКР.БанковскийСчетКасса);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ПроцентКРДвижений < 0 Тогда
					
					Если (СтрокаПределов.НижнийПредел - ПроцентКРДвижений) > 0.1 Тогда
						
						Если (МассивКассСчетов.Найти(СтрокаДвиженийКР.БанковскийСчетКасса) = Неопределено) Тогда
							МассивКассСчетов.Добавить(СтрокаДвиженийКР.БанковскийСчетКасса);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКассСчетов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДенежныеСредства.БанковскийСчетКасса КАК БанковскийСчетКасса,
		|	ДенежныеСредства.Регистратор КАК Регистратор,
		|	ДенежныеСредства.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
		|ГДЕ
		|	ДенежныеСредства.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
		|	И ДенежныеСредства.БанковскийСчетКасса В(&МассивКассСчетов)
		|	И ДенежныеСредства.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	БанковскийСчетКасса,
		|	Регистратор");
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("МассивКассСчетов", МассивКассСчетов);
		Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
		Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "НекорректныеКурсовыеРазницыДС");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсовыеРазницы_Покупатели(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата)
	
	МассивПокупателей = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПокупателями.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1 * РасчетыСПокупателями.Сумма
	|			ИНАЧЕ РасчетыСПокупателями.Сумма
	|		КОНЕЦ) КАК СуммаКР,
	|	РасчетыСПокупателями.Период КАК Период,
	|	РасчетыСПокупателями.Договор.ВалютаРасчетов КАК Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
	|ГДЕ
	|	РасчетыСПокупателями.Организация = &Организация
	|	И РасчетыСПокупателями.СодержаниеПроводки = ""Курсовая разница""
	|	И РасчетыСПокупателями.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПокупателями.Регистратор,
	|	РасчетыСПокупателями.ТипРасчетов,
	|	РасчетыСПокупателями.Контрагент,
	|	РасчетыСПокупателями.Договор,
	|	РасчетыСПокупателями.Документ,
	|	РасчетыСПокупателями.Заказ,
	|	РасчетыСПокупателями.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");	
	
	Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
	Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаДвиженийКР = Запрос.Выполнить().Выгрузить();
	
	ЗапросПоОстаткам = Новый Запрос("ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК ОстатокДоПроведения
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(
	|			&МоментДокумента,
	|			Договор = &Договор
	|				И Документ = &Документ
	|				И Заказ = &Заказ
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация
	|				И ТипРасчетов = &ТипРасчетов) КАК РасчетыСПокупателямиОстатки");
	
	Для каждого СтрокаДвиженийКР Из ТаблицаДвиженийКР Цикл
		
		ЗапросПоОстаткам.УстановитьПараметр("МоментДокумента", СтрокаДвиженийКР.Регистратор.МоментВремени());
		ЗапросПоОстаткам.УстановитьПараметр("Договор", СтрокаДвиженийКР.Договор);
		ЗапросПоОстаткам.УстановитьПараметр("Документ", СтрокаДвиженийКР.Документ);
		ЗапросПоОстаткам.УстановитьПараметр("Заказ", СтрокаДвиженийКР.Заказ);
		ЗапросПоОстаткам.УстановитьПараметр("Контрагент", СтрокаДвиженийКР.Контрагент);
		ЗапросПоОстаткам.УстановитьПараметр("Организация", Организация);
		ЗапросПоОстаткам.УстановитьПараметр("ТипРасчетов", СтрокаДвиженийКР.ТипРасчетов);
		
		ВыборкаОстатков = ЗапросПоОстаткам.Выполнить().Выбрать();
		
		Если ВыборкаОстатков.Следующий() Тогда
			
			Если ВыборкаОстатков.ОстатокДоПроведения = 0 Тогда
				ПроцентКРДвижений = 0;
			Иначе
				ПроцентКРДвижений = Окр(СтрокаДвиженийКР.СуммаКР / ВыборкаОстатков.ОстатокДоПроведения * 100, 2);
			КонецЕсли;
			
			СтрокаПределов = ТаблицаПределов.Найти(СтрокаДвиженийКР.Валюта);
			
			Если СтрокаПределов <> Неопределено Тогда
				
				Если ПроцентКРДвижений > 0 Тогда
					
					Если (ПроцентКРДвижений - СтрокаПределов.ВерхнийПредел) > 0.1 Тогда
						
						Если (МассивПокупателей.Найти(СтрокаДвиженийКР.Контрагент) = Неопределено) Тогда
							МассивПокупателей.Добавить(СтрокаДвиженийКР.Контрагент);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ПроцентКРДвижений < 0 Тогда
					
					Если (СтрокаПределов.НижнийПредел - ПроцентКРДвижений) > 0.1 Тогда
						
						Если (МассивПокупателей.Найти(СтрокаДвиженийКР.Контрагент) = Неопределено) Тогда
							МассивПокупателей.Добавить(СтрокаДвиженийКР.Контрагент);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПокупателей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСПокупателями.Контрагент КАК Контрагент,
		|	РасчетыСПокупателями.Регистратор КАК Регистратор,
		|	РасчетыСПокупателями.Период КАК Период
		|ИЗ
		|	РегистрНакопления.РасчетыСПокупателями КАК РасчетыСПокупателями
		|ГДЕ
		|	РасчетыСПокупателями.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
		|	И РасчетыСПокупателями.Организация = &Организация
		|	И РасчетыСПокупателями.Контрагент В(&МассивПокупателей)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Контрагент,
		|	Регистратор");
		
		Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
		Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("МассивПокупателей", МассивПокупателей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "НекорректныеКурсовыеРазницыПокупатели");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсовыеРазницы_Поставщики(ТаблицаПределов, НачалоМесяцаДата, КонецМесяцаДата)
	
	МассивПоставщиков = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.ТипРасчетов,
	|	РасчетыСПоставщиками.Контрагент,
	|	РасчетыСПоставщиками.Договор,
	|	РасчетыСПоставщиками.Документ,
	|	РасчетыСПоставщиками.Заказ,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -1 * РасчетыСПоставщиками.Сумма
	|			ИНАЧЕ РасчетыСПоставщиками.Сумма
	|		КОНЕЦ) КАК СуммаКР,
	|	РасчетыСПоставщиками.Период КАК Период,
	|	РасчетыСПоставщиками.Договор.ВалютаРасчетов КАК Валюта
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|ГДЕ
	|	РасчетыСПоставщиками.Организация = &Организация
	|	И РасчетыСПоставщиками.СодержаниеПроводки = ""Курсовая разница""
	|	И РасчетыСПоставщиками.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.ТипРасчетов,
	|	РасчетыСПоставщиками.Контрагент,
	|	РасчетыСПоставщиками.Договор,
	|	РасчетыСПоставщиками.Документ,
	|	РасчетыСПоставщиками.Заказ,
	|	РасчетыСПоставщиками.Период,
	|	РасчетыСПоставщиками.Договор.ВалютаРасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");	
	
	Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
	Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаДвиженийКР = Запрос.Выполнить().Выгрузить();
	
	ЗапросПоОстаткам = Новый Запрос("ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстатки.СуммаОстаток КАК ОстатокДоПроведения
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&МоментДокумента,
	|			Договор = &Договор
	|				И Документ = &Документ
	|				И Заказ = &Заказ
	|				И Контрагент = &Контрагент
	|				И Организация = &Организация
	|				И ТипРасчетов = &ТипРасчетов) КАК РасчетыСПоставщикамиОстатки");
	
	Для каждого СтрокаДвиженийКР Из ТаблицаДвиженийКР Цикл
		
		ЗапросПоОстаткам.УстановитьПараметр("МоментДокумента", СтрокаДвиженийКР.Регистратор.МоментВремени());
		ЗапросПоОстаткам.УстановитьПараметр("Договор", СтрокаДвиженийКР.Договор);
		ЗапросПоОстаткам.УстановитьПараметр("Документ", СтрокаДвиженийКР.Документ);
		ЗапросПоОстаткам.УстановитьПараметр("Заказ", СтрокаДвиженийКР.Заказ);
		ЗапросПоОстаткам.УстановитьПараметр("Контрагент", СтрокаДвиженийКР.Контрагент);
		ЗапросПоОстаткам.УстановитьПараметр("Организация", Организация);
		ЗапросПоОстаткам.УстановитьПараметр("ТипРасчетов", СтрокаДвиженийКР.ТипРасчетов);
		
		ВыборкаОстатков = ЗапросПоОстаткам.Выполнить().Выбрать();
		
		Если ВыборкаОстатков.Следующий() Тогда
			
			Если ВыборкаОстатков.ОстатокДоПроведения = 0 Тогда
				ПроцентКРДвижений = 0;
			Иначе
				ПроцентКРДвижений = Окр(СтрокаДвиженийКР.СуммаКР / ВыборкаОстатков.ОстатокДоПроведения * 100, 2);
			КонецЕсли;
			
			СтрокаПределов = ТаблицаПределов.Найти(СтрокаДвиженийКР.Валюта);
			
			Если СтрокаПределов <> Неопределено Тогда
				
				Если ПроцентКРДвижений > 0 Тогда
					
					Если (ПроцентКРДвижений - СтрокаПределов.ВерхнийПредел) > 0.1 Тогда
						
						Если (МассивПоставщиков.Найти(СтрокаДвиженийКР.Контрагент) = Неопределено) Тогда
							МассивПоставщиков.Добавить(СтрокаДвиженийКР.Контрагент);
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ПроцентКРДвижений < 0 Тогда
					
					Если (СтрокаПределов.НижнийПредел - ПроцентКРДвижений) > 0.1 Тогда
						
						Если (МассивПоставщиков.Найти(СтрокаДвиженийКР.Контрагент) = Неопределено) Тогда
							МассивПоставщиков.Добавить(СтрокаДвиженийКР.Контрагент);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПоставщиков.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСПоставщиками.Контрагент КАК Контрагент,
		|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
		|	РасчетыСПоставщиками.Период КАК Период
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Период МЕЖДУ &НачалоМесяцаДата И &КонецМесяцаДата
		|	И РасчетыСПоставщиками.Организация = &Организация
		|	И РасчетыСПоставщиками.Контрагент В(&МассивПоставщиков)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ ПО
		|	Контрагент,
		|	Регистратор");
		
		Запрос.УстановитьПараметр("НачалоМесяцаДата", НачалоМесяцаДата);
		Запрос.УстановитьПараметр("КонецМесяцаДата", КонецМесяцаДата);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("МассивПоставщиков", МассивПоставщиков);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "НекорректныеКурсовыеРазницыПоставщики");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «Номенклатура без спецификаций» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуНоменклатураБезСпецификаций(МакетВывода)
	
	Если Не НоменклатураБезСпецификацийЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоНоменклатуреБезСпецификаций();
		НоменклатураБезСпецификацийЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если НоменклатураБезСпецификаций.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "В учетной системе были обнаружены записи справочника ""Номенклатура"", с созданными для них спецификациями. При этом для некоторых номенклатурных позиций спецификация по умолчанию не указана.";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	
	Для каждого СтрокаТаблицы Из НоменклатураБезСпецификаций Цикл
		
		Если СтрокаТаблицы.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабСпецификации");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьМакета.Параметры.РезультатАнализа = "Открыть спецификацию";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = СтрокаТаблицы.Спецификация;
			
		Иначе	
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабСпецификации");
			ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
			
			Если СтрокаТаблицы.КоличествоСпецификаций = 1 Тогда
				ОбластьМакета.Параметры.РезультатАнализа = "Открыть спецификацию";
				ОбластьМакета.Параметры.РезультатАнализаРасшифровка = СтрокаТаблицы.Спецификация;
				ОбластьМакета.Параметры.ВыполнитьДействие = "Установить спецификацию по умолчанию";
				ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_УстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			Иначе
				ОбластьМакета.Параметры.РезультатАнализа = "Обнаружено несколько спецификаций";
				ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ОткрытьСписокСпецификаций(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
				ОбластьМакета.Параметры.ВыполнитьДействие = "Выбрать и установить спецификацию";
				ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВыбратьУстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Номенклатура без спецификаций».
//
&НаСервере
Процедура ЗаполнитьДанныеПоНоменклатуреБезСпецификаций()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Спецификации.Владелец КАК Номенклатура,
	|	Спецификации.Ссылка КАК Спецификация,
	|	1 КАК КоличествоСпецификаций
	|ИЗ
	|	Справочник.Спецификации КАК Спецификации
	|ГДЕ
	|	Спецификации.Владелец.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|ИТОГИ
	|	СУММА(КоличествоСпецификаций)
	|ПО
	|	Номенклатура,
	|	Спецификация");
	
	ТаблицаДнных = РеквизитФормыВЗначение("НоменклатураБезСпецификаций");
	ТаблицаДнных.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоСпецификаций = 1 Тогда
			
			ВыборкаСцецификация = Выборка.Выбрать();
			
			ВыборкаСцецификация.Следующий();
			
			НоваяСтрока = ТаблицаДнных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСцецификация);
			
		Иначе
			
			НоваяСтрока = ТаблицаДнных.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.КоличествоСпецификаций = Выборка.КоличествоСпецификаций;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДнных, "НоменклатураБезСпецификаций"); 
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «Отчеты переработчиков без спецификаций» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуОтчетыПерерБезСпецификаций(МакетВывода)
	
	Если НЕ ОтчетыПерерБезСпецификацийЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоОтчетыПерерБезСпецификаций();
		ОтчетыПерерБезСпецификацийЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если ОтчетыПереработчиковСпецификации.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "За анализируемый период были обнаружены проведенные документы вида ""Отчет переработчика"", в которых не указана спецификация, при этом спецификация по умолчанию установлена для номенклатурных позиций, указанных в этих документах в качестве продукции.";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ТаблицаДанных = РеквизитФормыВЗначение("ОтчетыПереработчиковСпецификации");
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если НЕ СтрокаТаблицы.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабОтчетПерераб");
			
			ОбластьМакета.Параметры.ВыполнитьДействие = "Установить спецификацию";
			ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_УстановитьСпецификациюВОтчетПерер(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
		Иначе
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабОтчетПерераб");
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.РезультатАнализа = "Открыть спецификацию";
		ОбластьМакета.Параметры.РезультатАнализаРасшифровка = СтрокаТаблицы.Спецификация;
		
		ДокументПредставление = СформироватьПредставлениеДокумента(СтрокаТаблицы.ДокументСсылка);
		
		ОбластьМакета.Параметры.ДокументСсылка = СтрокаТаблицы.ДокументСсылка;
		ОбластьМакета.Параметры.ДокументПредставление = ДокументПредставление;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Отчеты переработчиков без спецификаций».
//
&НаСервере
Процедура ЗаполнитьДанныеПоОтчетыПерерБезСпецификаций()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ВестиУчетПоКомпании", ВестиУчетПоКомпании);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПереработчикаПродукция.Ссылка КАК ДокументСсылка,
	|	ОтчетПереработчикаПродукция.Номенклатура.Спецификация КАК Спецификация,
	|	ОтчетПереработчикаПродукция.Ссылка.Дата,
	|	ЛОЖЬ КАК ОбработкаВыполнена
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ОтчетПереработчикаПродукция
	|ГДЕ
	|	ОтчетПереработчикаПродукция.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОтчетПереработчикаПродукция.Ссылка.Проведен = ИСТИНА
	|	И ОтчетПереработчикаПродукция.Номенклатура.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ОтчетПереработчикаПродукция.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА НЕ &ВестиУчетПоКомпании
	|				ТОГДА ОтчетПереработчикаПродукция.Ссылка.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ОтчетыПереработчиковСпецификации");
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «Отчеты переработчиков - несоответствие списаний спецификациям» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуОтчетыПерерНесоответСписаний(МакетВывода)
	
	Если Не ОтчетыПереработчиковНесоответствияЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоОтчетыПерерНесоответСписаний();
		ОтчетыПереработчиковНесоответствияЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	ТаблицаДанных = РеквизитФормыВЗначение("ОтчетыПереработчиковНесоответствия");
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "За анализируемый период были обнаружены проведенные документы вида ""Отчет переработчика"", в которых списанные запасы не соответствуют указанной спецификации.";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Для каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если Не СтрокаТаблицы.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабОтчетПерераб");
			
			ОбластьМакета.Параметры.РезультатАнализа = "Обнаружено несоответствие";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетПоНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
			ОбластьМакета.Параметры.ВыполнитьДействие = "Перезаполнить и перепровести";
			ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_ИсправитьНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
		Иначе
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабОтчетПерераб");
			
			ОбластьМакета.Параметры.РезультатАнализа = "Исправлен";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = СтрокаТаблицы.ДокументСсылка;
			
		КонецЕсли;
		
		ДокументПредставление = СформироватьПредставлениеДокумента(СтрокаТаблицы.ДокументСсылка);
		
		ОбластьМакета.Параметры.ДокументСсылка = СтрокаТаблицы.ДокументСсылка;
		ОбластьМакета.Параметры.ДокументПредставление = ДокументПредставление;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Отчеты переработчиков - несоответствие списаний спецификациям».
//
&НаСервере
Процедура ЗаполнитьДанныеПоОтчетыПерерНесоответСписаний()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ВестиУчетПоКомпании", ВестиУчетПоКомпании);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПереработчикаПродукция.Ссылка КАК ДокументСсылка,
	|	ОтчетПереработчикаПродукция.ЕдиницаИзмерения,
	|	ОтчетПереработчикаПродукция.Спецификация,
	|	ОтчетПереработчикаПродукция.Количество
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ОтчетПереработчикаПродукция
	|ГДЕ
	|	ОтчетПереработчикаПродукция.Ссылка.Проведен = ИСТИНА
	|	И ВЫБОР
	|			КОГДА НЕ &ВестиУчетПоКомпании
	|				ТОГДА ОтчетПереработчикаПродукция.Ссылка.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ОтчетПереработчикаПродукция.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ОтчетПереработчикаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетПереработчикаПродукция.Ссылка.Дата";
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
		
		ТаблицаЗапасы = СтрокаТаблицы.ДокументСсылка.Запасы.Выгрузить();
		ТаблицаЗапасы.Свернуть("Номенклатура,Характеристика", "Количество");
		
		ТаблицаЗапасы.Колонки.Количество.Имя = "КоличествоПоФакту";
		
		ТаблицаЗапасы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		ЗаполнитьТаблицуПоСпецификацииОтчетПерераб(СтрокаТаблицы.Спецификация, СтрокаТаблицы.Количество, СтрокаТаблицы.ЕдиницаИзмерения);
		
		ТаблицаЗапасы.Свернуть("Номенклатура, Характеристика", "Количество, КоличествоПоФакту");
		
		ТаблицаЗапасы.Колонки.Количество.Имя = "КоличествоПоСпецификации";
		
		СтрокаТаблицыДанных = Неопределено;
		
		Для каждого СтрокаТаблицыЗапасы Из ТаблицаЗапасы Цикл
			
			Если СтрокаТаблицыЗапасы.КоличествоПоФакту <> СтрокаТаблицыЗапасы.КоличествоПоСпецификации Тогда
				
				Если СтрокаТаблицыДанных = Неопределено Тогда
					СтрокаТаблицыДанных = ОтчетыПереработчиковНесоответствия.Добавить();
					СтрокаТаблицыДанных.ДокументСсылка = СтрокаТаблицы.ДокументСсылка;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТаблицыДанных.ТаблицаРасхождений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗапасы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура из модуля документа ОтчетПереработчика,
// помещает в переменную ТаблицаЗапасы таблицу списания запасов согласно спецификации.
//
&НаСервере
Процедура ЗаполнитьТаблицуПоСпецификацииОтчетПерераб(ПоСпецификации, ТребуемоеКоличество, ИспользуемаяЕдиницаИзмерения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпецификацииСостав.НомерСтроки) КАК СпецификацииСоставНомерСтроки,
	|	СпецификацииСостав.Номенклатура КАК Номенклатура,
	|	СпецификацииСостав.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СпецификацииСостав.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация КАК Спецификация,
	|	СУММА(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				ТОГДА СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &Количество
	|			ИНАЧЕ СпецификацииСостав.Количество / СпецификацииСостав.КоличествоПродукции * &Коэффициент * &Количество
	|		КОНЕЦ) КАК Количество,
	|	СпецификацииСостав.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.Спецификации.Состав КАК СпецификацииСостав
	|ГДЕ
	|	СпецификацииСостав.Ссылка = &Спецификация
	|	И СпецификацииСостав.Номенклатура.ТипНоменклатуры = &ТипНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	СпецификацииСостав.Номенклатура,
	|	ВЫБОР
	|		КОГДА &ИспользоватьХарактеристики
	|			ТОГДА СпецификацииСостав.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	СпецификацииСостав.ЕдиницаИзмерения,
	|	СпецификацииСостав.Спецификация,
	|	СпецификацииСостав.ТипСтрокиСостава,
	|	СпецификацииСостав.Номенклатура.ЕдиницаИзмерения,
	|	СпецификацииСостав.Номенклатура.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииСоставНомерСтроки");
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристики", Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить());
	
	Запрос.УстановитьПараметр("Спецификация", ПоСпецификации);
	Запрос.УстановитьПараметр("Количество", ТребуемоеКоличество);
	
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ИспользуемаяЕдиницаИзмерения);
	
	Если ТипЗнч(ИспользуемаяЕдиницаИзмерения) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		Запрос.УстановитьПараметр("Коэффициент", 1);
	Иначе
		Запрос.УстановитьПараметр("Коэффициент", ИспользуемаяЕдиницаИзмерения.Коэффициент);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			
			ЗаполнитьТаблицуПоСпецификацииОтчетПерераб(Выборка.Спецификация, Выборка.Количество, Выборка.ЕдиницаИзмерения);
			
		Иначе
			
			НоваяСтрока = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «док. ""Производство"" без спецификаций» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуДокПроизводствоБезСпецификаций(МакетВывода)
	
	Если Не ДокПроизводствоСпецификацииЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоДокПроизводствоБезСпецификаций();
		ДокПроизводствоСпецификацииЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если ДокПроизводствоСпецификации.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "За анализируемый период были обнаружены проведенные документы вида ""Производство"", в которых (в табличных частях ""Продукция"") не указаны спецификации.";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Для каждого ЭлементКоллекции Из ДокПроизводствоСпецификации Цикл
		
		Если НЕ ЭлементКоллекции.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабОтчетПерераб");
			
			ОбластьМакета.Параметры.РезультатАнализа = "Предлагаемые спецификации";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетДокПроизводствоСпецификации(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
			ОбластьМакета.Параметры.ВыполнитьДействие = "Установить специфицикации";
			ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_УстановитьСпецификацииВДокПроизоводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
		Иначе
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабОтчетПерераб");
			ОбластьМакета.Параметры.РезультатАнализа = "Спецификации заполнены";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = ЭлементКоллекции.ДокументСсылка;
			
		КонецЕсли;
		
		ДокументПредставление = СформироватьПредставлениеДокумента(ЭлементКоллекции.ДокументСсылка);
		
		ОбластьМакета.Параметры.ДокументСсылка = ЭлементКоллекции.ДокументСсылка;
		ОбластьМакета.Параметры.ДокументПредставление = ДокументПредставление;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «док. ""Производство"" без спецификаций».
//
&НаСервере
Процедура ЗаполнитьДанныеПоДокПроизводствоБезСпецификаций()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаЗапасовПродукция.Ссылка,
	|	СборкаЗапасовПродукция.Номенклатура,
	|	СборкаЗапасовПродукция.Номенклатура.Спецификация
	|ПОМЕСТИТЬ ВТ_ПроизводствоБезСпецификаций
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка.Проведен = ИСТИНА
	|	И СборкаЗапасовПродукция.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВЫБОР
	|			КОГДА НЕ &ВестиУчетПоКомпании
	|				ТОГДА СборкаЗапасовПродукция.Ссылка.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СборкаЗапасовПродукция.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроизводствоБезСпецификаций.Ссылка
	|ПОМЕСТИТЬ ВТ_СсылкиИсключения
	|ИЗ
	|	ВТ_ПроизводствоБезСпецификаций КАК ВТ_ПроизводствоБезСпецификаций
	|ГДЕ
	|	ВТ_ПроизводствоБезСпецификаций.НоменклатураСпецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПроизводствоБезСпецификаций.Ссылка КАК ДокументСсылка,
	|	ЛОЖЬ КАК ОбработкаВыполнена
	|ИЗ
	|	ВТ_ПроизводствоБезСпецификаций КАК ВТ_ПроизводствоБезСпецификаций
	|ГДЕ
	|	НЕ ВТ_ПроизводствоБезСпецификаций.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_СсылкиИсключения.Ссылка
	|				ИЗ
	|					ВТ_СсылкиИсключения КАК ВТ_СсылкиИсключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПроизводствоБезСпецификаций.Ссылка.Дата");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ВестиУчетПоКомпании", ВестиУчетПоКомпании);
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(), "ДокПроизводствоСпецификации");
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «док. ""Производство"" - несоответствие списаний спецификациям» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуДокПроизводствоНесоответСписаний(МакетВывода)
	
	Если Не ДокПроизводствоНесоответствияЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоДокПроизводствоНесоответСписаний();
		ДокПроизводствоНесоответствияЗаполнялось = Истина;	
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если ДокПроизводствоНесоответствия.Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "За анализируемый период были обнаружены проведенные документы вида ""Производство"", в которых списанные запасы не соответствуют указанным спецификациям.";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Для каждого СтрокаТаблицы Из ДокПроизводствоНесоответствия Цикл
		
		Если Не СтрокаТаблицы.ОбработкаВыполнена Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНеобрабОтчетПерераб");
			
			ОбластьМакета.Параметры.РезультатАнализа = "Обнаружено несоответствие";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетПоНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
			ОбластьМакета.Параметры.ВыполнитьДействие = "Перезаполнить и перепровести";
			ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуру#Подключаемый_ИсправитьНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			
		Иначе
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаОбрабОтчетПерераб");
			
			ОбластьМакета.Параметры.РезультатАнализа = "Исправлен";
			ОбластьМакета.Параметры.РезультатАнализаРасшифровка = СтрокаТаблицы.ДокументСсылка;
			
		КонецЕсли;
		
		ДокументПредставление = СформироватьПредставлениеДокумента(СтрокаТаблицы.ДокументСсылка);
		
		ОбластьМакета.Параметры.ДокументСсылка = СтрокаТаблицы.ДокументСсылка;
		ОбластьМакета.Параметры.ДокументПредставление = ДокументПредставление;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «док. ""Производство"" - несоответствие списаний спецификациям».
//
&НаСервере
Процедура ЗаполнитьДанныеПоДокПроизводствоНесоответСписаний()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаЗапасовПродукция.Ссылка КАК ДокументСсылка,
	|	СборкаЗапасовПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВТ_ПроизводстваЗаПериод
	|ИЗ
	|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
	|ГДЕ
	|	СборкаЗапасовПродукция.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И СборкаЗапасовПродукция.Ссылка.Проведен = ИСТИНА
	|	И ВЫБОР
	|			КОГДА НЕ &ВестиУчетПоКомпании
	|				ТОГДА СборкаЗапасовПродукция.Ссылка.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПроизводстваЗаПериод.ДокументСсылка
	|ПОМЕСТИТЬ ВТ_СсылкиИсключения
	|ИЗ
	|	ВТ_ПроизводстваЗаПериод КАК ВТ_ПроизводстваЗаПериод
	|ГДЕ
	|	ВТ_ПроизводстваЗаПериод.Спецификация = ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПроизводстваЗаПериод.ДокументСсылка
	|ИЗ
	|	ВТ_ПроизводстваЗаПериод КАК ВТ_ПроизводстваЗаПериод
	|ГДЕ
	|	НЕ ВТ_ПроизводстваЗаПериод.ДокументСсылка В
	|				(ВЫБРАТЬ
	|					ВТ_СсылкиИсключения.ДокументСсылка
	|				ИЗ
	|					ВТ_СсылкиИсключения КАК ВТ_СсылкиИсключения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ПроизводстваЗаПериод.ДокументСсылка.Дата");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("ВестиУчетПоКомпании", ВестиУчетПоКомпании);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
		
		ТаблицаЗапасы = СтрокаТаблицыДокументов.ДокументСсылка.Запасы.Выгрузить();
		ТаблицаЗапасы.Свернуть("Номенклатура,Характеристика", "Количество");
		ТаблицаЗапасы.Колонки.Количество.Имя = "КоличествоПоФакту";
		ТаблицаЗапасы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		СтекСпецификацийУзлов = Новый Массив;
		ЗаполнитьТаблицуПоСпецификацииПроизводство(СтрокаТаблицыДокументов.ДокументСсылка, СтекСпецификацийУзлов);
		
		ТаблицаЗапасы.Свернуть("Номенклатура,Характеристика", "КоличествоПоФакту, Количество");
		
		ТаблицаЗапасы.Колонки.Количество.Имя = "КоличествоПоСпецификации";
		
		СтрокаТаблицыДанных = Неопределено;
		
		Для каждого СтрокаТаблицыЗапасов Из ТаблицаЗапасы Цикл
			
			Если СтрокаТаблицыЗапасов.КоличествоПоФакту <> СтрокаТаблицыЗапасов.КоличествоПоСпецификации Тогда
				
				Если СтрокаТаблицыДанных = Неопределено Тогда
					СтрокаТаблицыДанных = ДокПроизводствоНесоответствия.Добавить();
					СтрокаТаблицыДанных.ДокументСсылка = СтрокаТаблицыДокументов.ДокументСсылка;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТаблицыДанных.ТаблицаРасхождений.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыЗапасов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура из модуля документа СборкаЗапасов,
// помещает в переменную ТаблицаЗапасы таблицу списания запасов согласно спецификациям.
//
&НаСервере
Процедура ЗаполнитьТаблицуПоСпецификацииПроизводство(ДокументСсылка, СтекСпецификацийУзлов, ТаблицаУзлы = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукция.Количество КАК Количество,
	|	ТаблицаПродукция.Коэффициент КАК Коэффициент,
	|	ТаблицаПродукция.Спецификация КАК Спецификация
	|ПОМЕСТИТЬ ВременнаяТаблицаПродукция
	|ИЗ
	|	&ТаблицаПродукция КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)";
	
	Если ТаблицаУзлы = Неопределено Тогда
		ТаблицаПродукция = ДокументСсылка.Продукция.Выгрузить();
		Массив = Новый Массив();
		Массив.Добавить(Тип("Число"));
		ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(10,3));
		ТаблицаПродукция.Колонки.Добавить("Коэффициент", ОписаниеТиповЧ);
		Для каждого СтрокаПродукция Из ТаблицаПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПродукция.ЕдиницаИзмерения)
				И ТипЗнч(СтрокаПродукция.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				СтрокаПродукция.Коэффициент = СтрокаПродукция.ЕдиницаИзмерения.Коэффициент;
			Иначе
				СтрокаПродукция.Коэффициент = 1;
			КонецЕсли;
		КонецЦикла;
		ТаблицаУзлы = ТаблицаПродукция.СкопироватьКолонки("НомерСтроки,Количество,Коэффициент,Спецификация");
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукция);
	Иначе
		Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаУзлы);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПродукция.НомерСтроки) КАК НомерСтрокиПродукции,
	|	ТаблицаПродукция.Спецификация КАК СпецификацияПродукции,
	|	МИНИМУМ(ТаблицаМатериалы.НомерСтроки) КАК НомерСтрокиСостава,
	|	ТаблицаМатериалы.ТипСтрокиСостава КАК ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Характеристика,
	|	СУММА(ТаблицаМатериалы.Количество / ТаблицаМатериалы.КоличествоПродукции * ТаблицаПродукция.Коэффициент * ТаблицаПродукция.Количество) КАК Количество,
	|	ТаблицаМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаМатериалы.ДоляСтоимости КАК ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация КАК Спецификация
	|ИЗ
	|	ВременнаяТаблицаПродукция КАК ТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Спецификации.Состав КАК ТаблицаМатериалы
	|		ПО ТаблицаПродукция.Спецификация = ТаблицаМатериалы.Ссылка,
	|	Константа.ФункциональнаяОпцияИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ГДЕ
	|	ТаблицаМатериалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаМатериалы.ТипСтрокиСостава,
	|	ТаблицаМатериалы.Номенклатура,
	|	ТаблицаМатериалы.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТаблицаМатериалы.ТипСтрокиСостава = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокСоставаСпецификации.Узел)
	|				И ТИПЗНАЧЕНИЯ(ТаблицаМатериалы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|				И ТаблицаМатериалы.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаМатериалы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ТаблицаМатериалы.ДоляСтоимости,
	|	ТаблицаМатериалы.Спецификация,
	|	ВЫБОР
	|		КОГДА ИспользоватьХарактеристики.Значение
	|			ТОГДА ТаблицаМатериалы.Характеристика
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиПродукции,
	|	НомерСтрокиСостава";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипСтрокиСостава = Перечисления.ТипыСтрокСоставаСпецификации.Узел Тогда
			ТаблицаУзлы.Очистить();
			Если НЕ СтекСпецификацийУзлов.Найти(Выборка.Спецификация) = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'При попытке заполнить табличную часть Материалы по спецификации,
				|обнаружено рекурсивное вхождение элемента'")+" "+Выборка.Номенклатура+" "+НСтр("ru = 'в спецификации'")+" "+Выборка.СпецификацияПродукции+"
				|Операция не выполнена!";
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			СтекСпецификацийУзлов.Добавить(Выборка.Спецификация);
			НоваяСтрока = ТаблицаУзлы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			ЗаполнитьТаблицуПоСпецификацииПроизводство(ДокументСсылка, СтекСпецификацийУзлов, ТаблицаУзлы);
		Иначе
			НоваяСтрока = ТаблицаЗапасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	СтекСпецификацийУзлов.Очистить();
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «Анализ закупочных цен» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуАнализЗакупочныхЦен(МакетВывода)
	
	Если Не АнализЗакупочныхЦенЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоАнализЗакупочныхЦен();
		АнализЗакупочныхЦенЗаполнялось = Истина;	
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если АнализЗакупочныхЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаКомментарийВерх");
	ОбластьМакета.Параметры.Комментарий = "За анализируемый период для некоторых номенклатурных позиций были обнаружены резкие изменения закупочных цен (в 5 и более раз).";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	СтрокиНоменклатура = АнализЗакупочныхЦен.ПолучитьЭлементы();
	
	Для каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаАнализЦен");
		ОбластьМакета.Параметры.Номенклатура = СокрЛП(СтрокаНоменклатура.Номенклатура.Наименование);
		ОбластьМакета.Параметры.НоменклатураРасшифровка = СтрокаНоменклатура.Номенклатура;
		ОбластьМакета.Параметры.РезультатАнализа = "Результат анализа";
		ОбластьМакета.Параметры.РезультатАнализаРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетАнализЦенПоНоменклатуре(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Анализ закупочных цен».
//
&НаСервере
Процедура ЗаполнитьДанныеПоАнализЗакупочныхЦен()
	
	НачалоПрошлогоМесяца = ДобавитьМесяц(НачалоПериода, -1);
	КонецПрошлогоМесяца = КонецМесяца(НачалоПрошлогоМесяца);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗакупкиЗаТекущийПериод.Номенклатура,
	|	ЗакупкиЗаТекущийПериод.Характеристика,
	|	ЗакупкиЗаТекущийПериод.Количество,
	|	ЗакупкиЗаТекущийПериод.Сумма,
	|	ЗакупкиЗаТекущийПериод.Регистратор,
	|	ВЫБОР
	|		КОГДА ЗакупкиЗаТекущийПериод.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗакупкиЗаТекущийПериод.Сумма / ЗакупкиЗаТекущийПериод.Количество
	|	КОНЕЦ КАК ЦенаТекущийПериод
	|ПОМЕСТИТЬ ВТ_ЗакупкиЗаТекущийПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	|		ЗакупкиОбороты.Характеристика КАК Характеристика,
	|		СУММА(ЗакупкиОбороты.КоличествоОборот) КАК Количество,
	|		СУММА(ЗакупкиОбороты.СуммаОборот) КАК Сумма,
	|		ЗакупкиОбороты.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.Закупки.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				Организация = &Организация
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)) КАК ЗакупкиОбороты
	|	ГДЕ
	|		ЗакупкиОбороты.Регистратор ССЫЛКА Документ.ПриходнаяНакладная
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗакупкиОбороты.Номенклатура,
	|		ЗакупкиОбороты.Характеристика,
	|		ЗакупкиОбороты.Регистратор) КАК ЗакупкиЗаТекущийПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакупкиПрошлыйПериод.Регистратор,
	|	ЗакупкиПрошлыйПериод.Период,
	|	ЗакупкиПрошлыйПериод.Номенклатура,
	|	ЗакупкиПрошлыйПериод.Характеристика,
	|	ЗакупкиПрошлыйПериод.Количество,
	|	ЗакупкиПрошлыйПериод.Сумма,
	|	ВЫБОР
	|		КОГДА ЗакупкиПрошлыйПериод.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЗакупкиПрошлыйПериод.Сумма / ЗакупкиПрошлыйПериод.Количество
	|	КОНЕЦ КАК ЦенаПрошлыйПериод
	|ПОМЕСТИТЬ ВТ_ЗакупкиПрошлыйПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗакупкиОбороты.Регистратор КАК Регистратор,
	|		ЗакупкиОбороты.Период КАК Период,
	|		ЗакупкиОбороты.Номенклатура КАК Номенклатура,
	|		ЗакупкиОбороты.Характеристика КАК Характеристика,
	|		СУММА(ЗакупкиОбороты.КоличествоОборот) КАК Количество,
	|		СУММА(ЗакупкиОбороты.СуммаОборот) КАК Сумма
	|	ИЗ
	|		РегистрНакопления.Закупки.Обороты(
	|				&ДатаНачПрошлый,
	|				&ДатаКонПрошлый,
	|				Регистратор,
	|				Организация = &Организация
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТ_ЗакупкиЗаТекущийПериод.Номенклатура
	|						ИЗ
	|							ВТ_ЗакупкиЗаТекущийПериод КАК ВТ_ЗакупкиЗаТекущийПериод)
	|					И Характеристика В
	|						(ВЫБРАТЬ
	|							ВТ_ЗакупкиЗаТекущийПериод.Характеристика
	|						ИЗ
	|							ВТ_ЗакупкиЗаТекущийПериод КАК ВТ_ЗакупкиЗаТекущийПериод)) КАК ЗакупкиОбороты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗакупкиОбороты.Регистратор,
	|		ЗакупкиОбороты.Период,
	|		ЗакупкиОбороты.Номенклатура,
	|		ЗакупкиОбороты.Характеристика) КАК ЗакупкиПрошлыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗакупкиПрошлыйПериод.Номенклатура,
	|	ВТ_ЗакупкиПрошлыйПериод.Характеристика,
	|	ВТ_ЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод,
	|	ПоследнийРегистратор.Регистратор КАК РегистраторПрошлыйПериод
	|ПОМЕСТИТЬ ВТ_ПоследниеЗакупкиПрошлыйПериод
	|ИЗ
	|	ВТ_ЗакупкиПрошлыйПериод КАК ВТ_ЗакупкиПрошлыйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТ_ЗакупкиПрошлыйПериод.Номенклатура КАК Номенклатура,
	|			ВТ_ЗакупкиПрошлыйПериод.Характеристика КАК Характеристика,
	|			МАКСИМУМ(ВТ_ЗакупкиПрошлыйПериод.Регистратор) КАК Регистратор
	|		ИЗ
	|			ВТ_ЗакупкиПрошлыйПериод КАК ВТ_ЗакупкиПрошлыйПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ВТ_ЗакупкиПрошлыйПериод.Номенклатура КАК Номенклатура,
	|					ВТ_ЗакупкиПрошлыйПериод.Характеристика КАК Характеристика,
	|					МАКСИМУМ(ВТ_ЗакупкиПрошлыйПериод.Период) КАК Период
	|				ИЗ
	|					ВТ_ЗакупкиПрошлыйПериод КАК ВТ_ЗакупкиПрошлыйПериод
	|				
	|				СГРУППИРОВАТЬ ПО
	|					ВТ_ЗакупкиПрошлыйПериод.Номенклатура,
	|					ВТ_ЗакупкиПрошлыйПериод.Характеристика) КАК ПоследнийПериод
	|				ПО ВТ_ЗакупкиПрошлыйПериод.Номенклатура = ПоследнийПериод.Номенклатура
	|					И ВТ_ЗакупкиПрошлыйПериод.Характеристика = ПоследнийПериод.Характеристика
	|					И ВТ_ЗакупкиПрошлыйПериод.Период = ПоследнийПериод.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТ_ЗакупкиПрошлыйПериод.Номенклатура,
	|			ВТ_ЗакупкиПрошлыйПериод.Характеристика) КАК ПоследнийРегистратор
	|		ПО ВТ_ЗакупкиПрошлыйПериод.Номенклатура = ПоследнийРегистратор.Номенклатура
	|			И ВТ_ЗакупкиПрошлыйПериод.Характеристика = ПоследнийРегистратор.Характеристика
	|			И ВТ_ЗакупкиПрошлыйПериод.Регистратор = ПоследнийРегистратор.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтклоненияЦен.Номенклатура,
	|	ОтклоненияЦен.Характеристика
	|ПОМЕСТИТЬ ВТ_НоменклатураДляОтбора
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_ЗакупкиЗаТекущийПериод.Номенклатура КАК Номенклатура,
	|		ВТ_ЗакупкиЗаТекущийПериод.Характеристика КАК Характеристика
	|	ИЗ
	|		ВТ_ЗакупкиЗаТекущийПериод КАК ВТ_ЗакупкиЗаТекущийПериод
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗакупкиПрошлыйПериод КАК ВТ_ПоследниеЗакупкиПрошлыйПериод
	|			ПО ВТ_ЗакупкиЗаТекущийПериод.Номенклатура = ВТ_ПоследниеЗакупкиПрошлыйПериод.Номенклатура
	|				И ВТ_ЗакупкиЗаТекущийПериод.Характеристика = ВТ_ПоследниеЗакупкиПрошлыйПериод.Характеристика
	|	ГДЕ
	|		(ВТ_ЗакупкиЗаТекущийПериод.ЦенаТекущийПериод / ВТ_ПоследниеЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод >= &ПорогПревышения
	|				ИЛИ ВТ_ПоследниеЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод / ВТ_ЗакупкиЗаТекущийПериод.ЦенаТекущийПериод >= &ПорогПревышения)) КАК ОтклоненияЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.Номенклатура КАК Номенклатура,
	|	ИтоговаяТаблица.Характеристика,
	|	ИтоговаяТаблица.ДатаЗакупки КАК ДатаЗакупки,
	|	ИтоговаяТаблица.ЗакупочнаяЦена,
	|	ИтоговаяТаблица.ЕстьОтклонение,
	|	ИтоговаяТаблица.ДокументЗакупки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ЗакупкиЗаТекущийПериод.Номенклатура КАК Номенклатура,
	|		ВТ_ЗакупкиЗаТекущийПериод.Характеристика КАК Характеристика,
	|		ВТ_ЗакупкиЗаТекущийПериод.Регистратор.Дата КАК ДатаЗакупки,
	|		ВТ_ЗакупкиЗаТекущийПериод.ЦенаТекущийПериод КАК ЗакупочнаяЦена,
	|		ВЫБОР
	|			КОГДА ВТ_ЗакупкиЗаТекущийПериод.ЦенаТекущийПериод / ВТ_ПоследниеЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод >= &ПорогПревышения
	|					ИЛИ ВТ_ПоследниеЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод / ВТ_ЗакупкиЗаТекущийПериод.ЦенаТекущийПериод >= &ПорогПревышения
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьОтклонение,
	|		ВТ_ЗакупкиЗаТекущийПериод.Регистратор КАК ДокументЗакупки
	|	ИЗ
	|		ВТ_НоменклатураДляОтбора КАК ВТ_НоменклатураДляОтбора
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗакупкиЗаТекущийПериод КАК ВТ_ЗакупкиЗаТекущийПериод
	|			ПО ВТ_НоменклатураДляОтбора.Номенклатура = ВТ_ЗакупкиЗаТекущийПериод.Номенклатура
	|				И ВТ_НоменклатураДляОтбора.Характеристика = ВТ_ЗакупкиЗаТекущийПериод.Характеристика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗакупкиПрошлыйПериод КАК ВТ_ПоследниеЗакупкиПрошлыйПериод
	|			ПО ВТ_НоменклатураДляОтбора.Номенклатура = ВТ_ПоследниеЗакупкиПрошлыйПериод.Номенклатура
	|				И ВТ_НоменклатураДляОтбора.Характеристика = ВТ_ПоследниеЗакупкиПрошлыйПериод.Характеристика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод.Номенклатура,
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод.Характеристика,
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод.РегистраторПрошлыйПериод.Дата,
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод.ЦенаПрошлыйПериод,
	|		ЛОЖЬ,
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод.РегистраторПрошлыйПериод
	|	ИЗ
	|		ВТ_НоменклатураДляОтбора КАК ВТ_НоменклатураДляОтбора,
	|		ВТ_ПоследниеЗакупкиПрошлыйПериод КАК ВТ_ПоследниеЗакупкиПрошлыйПериод) КАК ИтоговаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТаблица.Номенклатура,
	|	ИтоговаяТаблица.Характеристика,
	|	ИтоговаяТаблица.ДатаЗакупки,
	|	ИтоговаяТаблица.ЕстьОтклонение,
	|	ИтоговаяТаблица.ЗакупочнаяЦена,
	|	ИтоговаяТаблица.ДокументЗакупки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗакупки
	|ИТОГИ ПО
	|	Номенклатура");
	
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаНачПрошлый", Новый Граница(НачалоПрошлогоМесяца, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКонПрошлый", Новый Граница(КонецДня(КонецПрошлогоМесяца), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПорогПревышения", 5);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "АнализЗакупочныхЦен");
	
КонецПроцедуры

// Процедура инициализирует заполнение данных по разделу «Контроль организаций и договоров в документах» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуКонтрольДоговоровОрганизаций(МакетВывода)
	
	Если НЕ ДеревоДокументовДоговораОрганизацииЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеПоКонтрольДоговоровОрганизаций();
		ДеревоДокументовДоговораОрганизацииЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	Если ДеревоДокументовДоговораОрганизации.ПолучитьЭлементы().Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	ТаблицаДоговорОрганизация = Новый ТаблицаЗначений;
	ТаблицаДоговорОрганизация.Колонки.Добавить("Договор");
	ТаблицаДоговорОрганизация.Колонки.Добавить("ОрганизацияВДоговоре");
	ТаблицаДоговорОрганизация.Колонки.Добавить("ОрганизацияВШапке");
	
	ТаблицаПодчиненныйДокумент = Новый ТаблицаЗначений;
	ТаблицаПодчиненныйДокумент.Колонки.Добавить("ПодчиненныйДокумент");
	ТаблицаПодчиненныйДокумент.Колонки.Добавить("ТекстСообщения");
	
	Для каждого СтрокаУровень0 Из ДеревоДокументовДоговораОрганизации.ПолучитьЭлементы() Цикл
		
		СтрокаСсылка = СтрЗаменить(Строка(СтрокаУровень0.ОсновнойДокумент.УникальныйИдентификатор()), "-", "");
		
		ТаблицаДоговорОрганизация.Очистить();
		ТаблицаПодчиненныйДокумент.Очистить();
		
		Для каждого СтрокаУровень1 Из СтрокаУровень0.ПолучитьЭлементы() Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУровень1.ПодчиненныйДокумент) Тогда
				
				НоваяСтрока = ТаблицаДоговорОрганизация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУровень1);
				
			Иначе
				
				НоваяСтрока = ТаблицаПодчиненныйДокумент.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУровень1);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаНесоответсвиеДоговорОрганизация");
		ОбластьМакета.Параметры.ОсновнойДокумент = СформироватьПредставлениеДокумента(СтрокаУровень0.ОсновнойДокумент);
		ОбластьМакета.Параметры.ОсновнойДокументРасшифровка = СтрокаУровень0.ОсновнойДокумент;
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Если ТаблицаДоговорОрганизация.Количество() > 0 Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СсылкаНесоответствиеДоговорОрагнизация");
			ОбластьМакета.Параметры.РазличияОрганизацийВШапкеИДоговоре = "ВыполнитьПроцедуру#Подключаемый_ИзменитьВидимостьОбластиЯчеек(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(1,3,1,5).Маска = СтрокаСсылка + "-1";
			ОбластьЯчеек = ДокументРезультат.Вывести(ОбластьМакета);
			
			ПромТабДок = Новый ТабличныйДокумент;
			
			Для каждого СтрокаТаблицы Из ТаблицаДоговорОрганизация Цикл
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("НесоответствиеДоговорОрагнизация");
				
				ОбластьМакета.Параметры.Договор	= СокрЛП(СтрокаТаблицы.Договор.Наименование);
				ОбластьМакета.Параметры.ДоговорРасшифровка = СтрокаТаблицы.Договор;
				
				ОбластьМакета.Параметры.ОрганизацияВДоговоре	= СокрЛП(СтрокаТаблицы.ОрганизацияВДоговоре.Наименование);
				ОбластьМакета.Параметры.ОрганизацияВДоговореРасшифровка = СтрокаТаблицы.ОрганизацияВДоговоре;
				
				ОбластьМакета.Параметры.ОрганизацияВШапке	= СокрЛП(СтрокаТаблицы.ОрганизацияВШапке.Наименование);
				ОбластьМакета.Параметры.ОрганизацияВШапкеРасшифровка = СтрокаТаблицы.ОрганизацияВШапке;
				
				ПромТабДок.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			Если ТаблицаПодчиненныйДокумент.Количество() > 0 Тогда
				ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбластьОтступ");
				ПромТабДок.Вывести(ОбластьМакета);
			КонецЕсли;
			
			ОбластьЯчеек = ДокументРезультат.Вывести(ПромТабДок);
			ОбластьЯчеек.Имя = СтрокаСсылка + "-1";
			ОбластьЯчеек.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ТаблицаПодчиненныйДокумент.Количество() > 0 Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СсылкаНесоответствиеПодчиненныйДокумент");
			ОбластьМакета.Параметры.РазличияПодчиненныйДокумент = "ВыполнитьПроцедуру#Подключаемый_ИзменитьВидимостьОбластиЯчеек(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(1,3,1,5).Маска = СтрокаСсылка + "-2";
			ДокументРезультат.Вывести(ОбластьМакета);
			
			ПромТабДок = Новый ТабличныйДокумент;
			
			Для каждого СтрокаТаблицы Из ТаблицаПодчиненныйДокумент Цикл
				
				ОбластьМакета = МакетВывода.ПолучитьОбласть("НесоответствиеПодчиненныйДокумент");
				
				ОбластьМакета.Параметры.ПодчиненныйДокумент	= СформироватьПредставлениеДокумента(СтрокаТаблицы.ПодчиненныйДокумент);
				ОбластьМакета.Параметры.ПодчиненныйДокументРасшифровка = СтрокаТаблицы.ПодчиненныйДокумент;
				
				ОбластьМакета.Параметры.ТекстСообщения = СтрокаТаблицы.ТекстСообщения;
				
				ПромТабДок.Вывести(ОбластьМакета);
				
			КонецЦикла;
			
			ОбластьЯчеек = ДокументРезультат.Вывести(ПромТабДок);
			ОбластьЯчеек.Имя = СтрокаСсылка + "-2";
			ОбластьЯчеек.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Контроль организаций и договоров в документах».
// 
&НаСервере
Процедура ЗаполнитьДанныеПоКонтрольДоговоровОрганизаций()
	
	ТаблицаРасположенияДоговоров = СформироватьТаблицуРасположенияДоговоров();
	
	МакетПравил = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПравилаКонтроляОрганизацийДоговоров");
	
	СтруктураПравил = СформироватьСтруктуруПравил(МакетПравил);
	
	Если СтруктураПравил.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаПоДокументам(СтруктураПравил);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("ОсновнойДокумент");
	ТаблицаРезультатов.Колонки.Добавить("ПодчиненныйДокумент");
	ТаблицаРезультатов.Колонки.Добавить("ТекстСообщения");
	ТаблицаРезультатов.Колонки.Добавить("ОрганизацияВШапке");
	ТаблицаРезультатов.Колонки.Добавить("Договор");
	ТаблицаРезультатов.Колонки.Добавить("ОрганизацияВДоговоре");
	
	КонтролироватьСоответствиеОрагнизацийВДоговорах = УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов();
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаПравилДокумента = Неопределено;
		ИмяДокумента = Выборка.ДокументСсылка.Метаданные().Имя;
		
		Если СтруктураПравил.Свойство(ИмяДокумента, ТаблицаПравилДокумента) Тогда
			
			Попытка
				ПроверитьСоответствияВДокументе(ИмяДокумента, Выборка.ДокументСсылка, ТаблицаРасположенияДоговоров, ТаблицаПравилДокумента, ТаблицаРезультатов, КонтролироватьСоответствиеОрагнизацийВДоговорах);			
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось проверить документ " + Строка(Выборка.ДокументСсылка) + Символы.ПС + ОписаниеОшибки();
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоДокументовДоговораОрганизации");
	
	ДеревоДанных.Строки.Очистить();
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		ТаблицаРезультатов.Свернуть("ОсновнойДокумент,ПодчиненныйДокумент,ТекстСообщения,ОрганизацияВШапке,Договор,ОрганизацияВДоговоре");
		
		ТаблицаОсновныхДокументов = ТаблицаРезультатов.Скопировать();
		ТаблицаОсновныхДокументов.Свернуть("ОсновнойДокумент");
		
		Для каждого СтрокаТаблицыОсн Из ТаблицаОсновныхДокументов Цикл
			
			Строка_Уровень0 = ДеревоДанных.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Строка_Уровень0, СтрокаТаблицыОсн);
			
			МассивПодчиенныхСтрок = ТаблицаРезультатов.НайтиСтроки(Новый Структура("ОсновнойДокумент", СтрокаТаблицыОсн.ОсновнойДокумент));
			
			Для каждого ПодчиненнаяСтрока Из МассивПодчиенныхСтрок Цикл
				Строка_Уровень1 = Строка_Уровень0.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(Строка_Уровень1, ПодчиненнаяСтрока);
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоДанных, "ДеревоДокументовДоговораОрганизации");
	
КонецПроцедуры

// Функция формирует таблицу значений, в которой содержится располежение реквизитов с именем "Договор"
// и типом СправочникСсылка.ДоговорыКонтрагентов - реквизит или табличная части.
// Заполнение производится на основании метаданных документов.
//
&НаСервереБезКонтекста
Функция СформироватьТаблицуРасположенияДоговоров()
	
	ТипДоговор = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	ТаблицаРасположенияДоговоров = Новый ТаблицаЗначений;
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ИмяДокумента");
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ТипРеквизита");
	ТаблицаРасположенияДоговоров.Колонки.Добавить("ИмяТабличнойЧасти");
	
	Для каждого Документ Из Метаданные.Документы Цикл
		
		ДоговорВШапке = Ложь;
		
		Для каждого Реквизит Из Документ.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(ТипДоговор) И Реквизит.Имя = "Договор" Тогда
				
				НоваяСтрока = ТаблицаРасположенияДоговоров.Добавить();
				НоваяСтрока.ИмяДокумента = Документ.Имя;
				НоваяСтрока.ТипРеквизита = "Реквизит";
				ДоговорВШапке = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ДоговорВШапке Тогда
			
			Для каждого ТабличнаяЧасть Из Документ.ТабличныеЧасти Цикл
				
				Для каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если РеквизитТабличнойЧасти.Тип.СодержитТип(ТипДоговор) И РеквизитТабличнойЧасти.Имя = "Договор" Тогда
						
						НоваяСтрока = ТаблицаРасположенияДоговоров.Добавить();
						НоваяСтрока.ИмяДокумента = Документ.Имя;
						НоваяСтрока.ТипРеквизита = "ТабличнаяЧасть";
						НоваяСтрока.ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаРасположенияДоговоров;
	
КонецФункции // ()

// Функция считывает правила контроля документов из макета ПравилаКонтроляОрганизацийДоговоров
// и формирует структуру, в которой ключ - имя документа, значение - таблица правил.
//
&НаСервереБезКонтекста
Функция СформироватьСтруктуруПравил(МакетПравил)
	
	СтруктураПравил = Новый Структура;
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("ИмяДокумента");
	ТаблицаПравил.Колонки.Добавить("ТипРеквизита");
	ТаблицаПравил.Колонки.Добавить("ИмяРеквизита_ТабЧасти");
	ТаблицаПравил.Колонки.Добавить("СинонимРеквизитаТабЧасти");
	ТаблицаПравил.Колонки.Добавить("ИмяРеквизитаВТабЧасти");
	
	КоличествоСтрокМакета = МакетПравил.ВысотаТаблицы;
	
	Для Сч = 2 По КоличествоСтрокМакета Цикл
		
		ИмяДокумента = "";
		ТипРеквизита = "";
		ИмяРеквизита_ТабЧасти = "";
		ИмяРеквизитаВТабЧасти = "";
		СинонимРеквизитаТабЧасти = "";
		
		ИмяДокумента = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 1, Сч, 1).Текст), " ", "");
		
		Если ИмяДокумента = "" ИЛИ ИмяДокумента = "ВводНачальныхОстатков" Тогда
			Продолжить;
		КонецЕсли;
		
		ТипРеквизита = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 2, Сч, 2).Текст), " ", "");
		
		Если ТипРеквизита = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита_ТабЧасти = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 3, Сч, 3).Текст), " ", "");
		
		Если ИмяРеквизита_ТабЧасти = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипРеквизита = "Реквизит" Тогда
			
			СинонимРеквизитаТабЧасти = Метаданные.Документы[ИмяДокумента].Реквизиты[ИмяРеквизита_ТабЧасти].Синоним;
			
		Иначе
			
			ИмяРеквизитаВТабЧасти = СтрЗаменить(СокрЛП(МакетПравил.Область(Сч, 4, Сч, 4).Текст), " ", "");
			
			Если ИмяРеквизитаВТабЧасти = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СинонимРеквизитаТабЧасти = Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяРеквизита_ТабЧасти].Синоним;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПравил.Добавить();
		НоваяСтрока.ИмяДокумента = ИмяДокумента;
		НоваяСтрока.ТипРеквизита = ТипРеквизита;
		НоваяСтрока.ИмяРеквизита_ТабЧасти = ИмяРеквизита_ТабЧасти;
		НоваяСтрока.СинонимРеквизитаТабЧасти = СинонимРеквизитаТабЧасти;
		НоваяСтрока.ИмяРеквизитаВТабЧасти = ИмяРеквизитаВТабЧасти;
		
	КонецЦикла;
	
	ТаблицаПравилПоДокументу = ТаблицаПравил.СкопироватьКолонки();
	ТаблицаПравилПоДокументу.Колонки.Удалить("ИмяДокумента");
	
	ТаблицаИменДокументов = ТаблицаПравил.Скопировать();
	ТаблицаИменДокументов.Свернуть("ИмяДокумента");
	
	Для каждого СтрокаТаблицыИмен Из ТаблицаИменДокументов Цикл
		
		МассивСтрокПравил = ТаблицаПравил.НайтиСтроки(Новый Структура("ИмяДокумента", СтрокаТаблицыИмен.ИмяДокумента));
		
		СтруктураПравил.Вставить(СтрокаТаблицыИмен.ИмяДокумента, ТаблицаПравилПоДокументу.СкопироватьКолонки());
		
		Для каждого СтрокаМассива Из МассивСтрокПравил Цикл
			
			НоваяСтрока = СтруктураПравил[СтрокаТаблицыИмен.ИмяДокумента].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураПравил;
	
КонецФункции // ()

// Функция формирует текст запроса на основании данных структуры правил.
//
&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаПоДокументам(СтруктураПравил)
	
	ТекстЗапроса = "";
	
	Для каждого КлючИЗначение Из СтруктураПравил Цикл
		
		Если ТекстЗапроса = "" Тогда
			
			ТекстЗапроса =  "ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК ДокументСсылка,
			|	ТаблицаДокумента.Дата КАК Дата
			|ИЗ
			|	Документ." + КлючИЗначение.Ключ + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И ТаблицаДокумента.Проведен = ИСТИНА";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС;
			
			ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
			|	ТаблицаДокумента.Ссылка КАК ДокументСсылка,
			|	ТаблицаДокумента.Дата КАК Дата
			|ИЗ
			|	Документ." + КлючИЗначение.Ключ + " КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И ТаблицаДокумента.Проведен = ИСТИНА";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстЗапроса <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + Символы.Таб + "Дата";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ()

// В процедуре производится подготовка данных и инициализация сравнения данных документа с данными того же типа в подчиненных документах.
// В случае обнаружения различий оба документа помещаются в  ТаблицаРезультатов.
//
&НаСервереБезКонтекста
Процедура ПроверитьСоответствияВДокументе(ИмяДокумента, ДокументСсылка, ТаблицаРасположенияДоговоров, ТаблицаПравил, ТаблицаРезультатов, КонтролироватьСоответствиеОрагнизацийВДоговорах)
	
	РасположениеДоговора = ТаблицаРасположенияДоговоров.Найти(ИмяДокумента);
	
	ТекОрганизация = ДокументСсылка.Организация;
	ТекДоговор = Неопределено;
	
	Если РасположениеДоговора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасположениеДоговора.ТипРеквизита = "Реквизит" Тогда
		
		ТекДоговор = ДокументСсылка.Договор;
		
		Если КонтролироватьСоответствиеОрагнизацийВДоговорах Тогда
			
			Если ЗначениеЗаполнено(ТекДоговор) И ТекОрганизация <> ТекДоговор.Организация Тогда
				
				НоваяСтрока = ТаблицаРезультатов.Добавить();
				НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
				НоваяСтрока.ПодчиненныйДокумент = Неопределено;
				НоваяСтрока.ТекстСообщения = "Не совпадают организация, указанная в документе с организацией, указанной в договоре " + СокрЛП(ТекДоговор.Наименование);
				НоваяСтрока.ОрганизацияВШапке = ТекОрганизация;
				НоваяСтрока.Договор = ТекДоговор;
				НоваяСтрока.ОрганизацияВДоговоре = ТекДоговор.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицыПравил Из ТаблицаПравил Цикл
			
			ОбъектПроверки = Неопределено;
			
			Если СтрокаТаблицыПравил.ТипРеквизита = "Реквизит" Тогда
				
				ОбъектПроверки = ДокументСсылка[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти];
				
				Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
					
					СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, ТекДоговор, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, "поле");	
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыПравил.ТипРеквизита = "ТабличнаяЧасть" Тогда
				
				Для каждого СтрокаТабЧасти Из ДокументСсылка[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти] Цикл
					
					ОбъектПроверки = Неопределено;
					
					ОбъектПроверки = СтрокаТабЧасти[СтрокаТаблицыПравил.ИмяРеквизитаВТабЧасти];
					
					Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
						
						СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, ТекДоговор, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, "таб. часть");	
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли РасположениеДоговора.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		МассивДоговоров = ДокументСсылка[РасположениеДоговора.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		
		Если КонтролироватьСоответствиеОрагнизацийВДоговорах Тогда
			
			Для каждого ТекДоговор Из МассивДоговоров Цикл
				
				Если ЗначениеЗаполнено(ТекДоговор) И ТекОрганизация <> ТекДоговор.Организация Тогда
					
					НоваяСтрока = ТаблицаРезультатов.Добавить();
					НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
					НоваяСтрока.ПодчиненныйДокумент = Неопределено;
					НоваяСтрока.ТекстСообщения = "Не совпадают организация, указанная в документе с организацией, указанной в договоре " + СокрЛП(ТекДоговор.Наименование);
					НоваяСтрока.ОрганизацияВШапке = ТекОрганизация;
					НоваяСтрока.Договор = ТекДоговор;
					НоваяСтрока.ОрганизацияВДоговоре = ТекДоговор.Организация;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаТаблицыПравил Из ТаблицаПравил Цикл
			
			ОбъектПроверки = Неопределено;
			
			Если СтрокаТаблицыПравил.ТипРеквизита = "Реквизит" Тогда
				
				ОбъектПроверки = ДокументСсылка[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти];
				
				Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
					
					СравнитьДанныеДокументов_ДоговорВТабЧасти(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, МассивДоговоров, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, "поле");	
					
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыПравил.ТипРеквизита = "ТабличнаяЧасть" Тогда	
				
				Если РасположениеДоговора.ИмяТабличнойЧасти <> СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти Тогда
					//нет смысла сравнивать договора и документы из разных табличных частей
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаТабЧастиВладелец Из ДокументСсылка[СтрокаТаблицыПравил.ИмяРеквизита_ТабЧасти] Цикл
					//будем рассматривать каждую строку отдельно, т.е. сравнивать договор в строке с документом
					//проверять можно так, как если бы это был отдельный документ с договором в шапке
					ОбъектПроверки = Неопределено;
					
					ОбъектПроверки = СтрокаТабЧастиВладелец[СтрокаТаблицыПравил.ИмяРеквизитаВТабЧасти];
					
					Если ЗначениеЗаполнено(ОбъектПроверки) Тогда
						
						НесовпадениеОрганизаций = Ложь;
						НесовпадениеДоговоров = Ложь;
						
						СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, СтрокаТабЧастиВладелец.Договор, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, "таб. часть");
						
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

// В процедуре происходит сравнение данных документов для случаев,
// когда в документе-владельце договор находится в шапке.
//
&НаСервереБезКонтекста
Процедура СравнитьДанныеДокументов_ДоговорВРеквизите(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, ТекДоговор, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, РасположениеПодчиненного)
	
	ИмяПодчиненногоДокумента = ОбъектПроверки.Метаданные().Имя;
	
	РасположениеДоговораПодчиненный = ТаблицаРасположенияДоговоров.Найти(ИмяПодчиненногоДокумента);
	
	Если РасположениеДоговораПодчиненный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасположениеДоговораПодчиненный.ТипРеквизита = "Реквизит" Тогда
		
		НесовпадениеОрганизаций = Ложь;
		НесовпадениеДоговоров = Ложь;
		
		Если ТекОрганизация <> ОбъектПроверки.Организация Тогда
			НесовпадениеОрганизаций = Истина;
		КонецЕсли;
		
		Если ТекДоговор <> ОбъектПроверки.Договор Тогда
			НесовпадениеДоговоров = Истина;
		КонецЕсли;
		
		Если НесовпадениеОрганизаций ИЛИ НесовпадениеДоговоров Тогда
			
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
			НоваяСтрока.ПодчиненныйДокумент = ОбъектПроверки;
			НоваяСтрока.ТекстСообщения = СформироватьТекстСообщенияПоНесоответствию(НесовпадениеОрганизаций, НесовпадениеДоговоров) 
			+ ". Расположение: " + РасположениеПодчиненного + " " + СтрокаТаблицыПравил.СинонимРеквизитаТабЧасти;
			
		КонецЕсли;
		
	ИначеЕсли РасположениеДоговораПодчиненный.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		НесовпадениеОрганизаций = Ложь;
		НесовпадениеДоговоров = Ложь;
		
		Если ТекОрганизация <> ОбъектПроверки.Организация Тогда
			НесовпадениеОрганизаций = Истина;
		КонецЕсли;
		
		МассивДоговорПодчиненный = ОбъектПроверки[РасположениеДоговораПодчиненный.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		
		Если МассивДоговорПодчиненный.Найти(ТекДоговор) = Неопределено Тогда
			НесовпадениеДоговоров = Истина;
		КонецЕсли;
		
		Если НесовпадениеОрганизаций ИЛИ НесовпадениеДоговоров Тогда
			
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
			НоваяСтрока.ПодчиненныйДокумент = ОбъектПроверки;
			НоваяСтрока.ТекстСообщения = СформироватьТекстСообщенияПоНесоответствию(НесовпадениеОрганизаций, НесовпадениеДоговоров) 
			+ ". Расположение: " + РасположениеПодчиненного + " " + СтрокаТаблицыПравил.СинонимРеквизитаТабЧасти;
			
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецПроцедуры

// В процедуре происходит сравнение данных документов для случаев,
// когда в документе-владельце договор находится в таб. части.
//
&НаСервереБезКонтекста
Процедура СравнитьДанныеДокументов_ДоговорВТабЧасти(ОбъектПроверки, ТаблицаРасположенияДоговоров, ТекОрганизация, МассивДоговоров, ТаблицаРезультатов, ДокументСсылка, СтрокаТаблицыПравил, РасположениеПодчиненного)
	
	ИмяПодчиненногоДокумента = ОбъектПроверки.Метаданные().Имя;
	
	РасположениеДоговораПодчиненный = ТаблицаРасположенияДоговоров.Найти(ИмяПодчиненногоДокумента);
	
	Если РасположениеДоговораПодчиненный = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РасположениеДоговораПодчиненный.ТипРеквизита = "Реквизит" Тогда
		
		НесовпадениеОрганизаций = Ложь;
		НесовпадениеДоговоров = Ложь;
		
		Если ТекОрганизация <> ОбъектПроверки.Организация Тогда
			НесовпадениеОрганизаций = Истина;
		КонецЕсли;
		
		НесовпадениеДоговоров = (МассивДоговоров.Найти(ОбъектПроверки.Договор) = Неопределено);
		
		Если НесовпадениеОрганизаций ИЛИ НесовпадениеДоговоров Тогда
			
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
			НоваяСтрока.ПодчиненныйДокумент = ОбъектПроверки;
			НоваяСтрока.ТекстСообщения = СформироватьТекстСообщенияПоНесоответствию(НесовпадениеОрганизаций, НесовпадениеДоговоров) 
			+ ". Расположение: " + РасположениеПодчиненного + " " + СтрокаТаблицыПравил.СинонимРеквизитаТабЧасти;
			
		КонецЕсли;
		
	ИначеЕсли РасположениеДоговораПодчиненный.ТипРеквизита = "ТабличнаяЧасть" Тогда
		
		НесовпадениеОрганизаций = Ложь;
		НесовпадениеДоговоров = Ложь;
		
		Если ТекОрганизация <> ОбъектПроверки.Организация Тогда
			НесовпадениеОрганизаций = Истина;
		КонецЕсли;
		
		МассивДоговорПодчиненный = ОбъектПроверки[РасположениеДоговораПодчиненный.ИмяТабличнойЧасти].ВыгрузитьКолонку("Договор");
		
		НесовпадениеДоговоров = (НЕ ЕстьСовпаденияДоговоровВМассивах(МассивДоговоров, МассивДоговорПодчиненный));
		
		Если НесовпадениеОрганизаций ИЛИ НесовпадениеДоговоров Тогда
			
			НоваяСтрока = ТаблицаРезультатов.Добавить();
			НоваяСтрока.ОсновнойДокумент = ДокументСсылка;
			НоваяСтрока.ПодчиненныйДокумент = ОбъектПроверки;
			НоваяСтрока.ТекстСообщения = СформироватьТекстСообщенияПоНесоответствию(НесовпадениеОрганизаций, НесовпадениеДоговоров) 
			+ ". Расположение: " + РасположениеПодчиненного + " " + СтрокаТаблицыПравил.СинонимРеквизитаТабЧасти;
			
		КонецЕсли;
		
	КонецЕсли;	 
	
КонецПроцедуры

// Функция формирует текст сообщения пользователю о несоответствии согласно переданным флагам.
//
&НаСервереБезКонтекста
Функция СформироватьТекстСообщенияПоНесоответствию(НесовпадениеОрганизаций, НесовпадениеДоговоров)
	
	ТекстСообщения = "";
	
	Если НесовпадениеОрганизаций И НесовпадениеДоговоров Тогда
		
		ТекстСообщения = "Обнаружены несовпадения организаций и договоров";
		
	ИначеЕсли НесовпадениеОрганизаций Тогда
		
		ТекстСообщения = "Обнаружено несовпадение организаций";
		
	ИначеЕсли НесовпадениеДоговоров Тогда
		
		ТекстСообщения = "Обнаружено несовпадение договоров";
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции // ()

// Функция проверяет наличие одного и того же договора в массивах
//
&НаСервереБезКонтекста
Функция ЕстьСовпаденияДоговоровВМассивах(МассивДоговоров, МассивДоговорПодчиненный)
	
	Результат = Ложь;
	
	Для каждого ПодчиненныйДоговор Из МассивДоговорПодчиненный Цикл
		Если МассивДоговоров.Найти(ПодчиненныйДоговор) <> Неопределено Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ()

// Процедура инициализирует заполнение данных по разделу «Статьи движения денежных средств» 
// и выводит данные в ДокументРезультат.
//
&НаСервере
Процедура Подключаемый_ВывестиДанныеПоРазделуСтатьиДДС(МакетВывода)
	
	Если Не СтатьиДДСЗаполнялось Тогда
		ВывестиИзображениеВыводДанных(МакетВывода);
		ЗаполнитьДанныеСтатьиДДС();
		СтатьиДДСЗаполнялось = Истина;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(МакетВывода);
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбластьОтступ");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ГруппаДДСПустая(Справочники.СтатьиДвиженияДенежныхСредств.Платежи) Тогда
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ДДСПлатежиНеЗаполнены");
		ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ОткрытьСправочникСтатьиДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
		ДокументРезультат.Вывести(ОбластьМакета);
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбластьОтступ");
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	Если ГруппаДДСПустая(Справочники.СтатьиДвиженияДенежныхСредств.Поступления) Тогда
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ДДСПоступленияНеЗаполнены");
		ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ОткрытьСправочникСтатьиДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
		ДокументРезультат.Вывести(ОбластьМакета);
		
		ОбластьМакета = МакетВывода.ПолучитьОбласть("ОбластьОтступ");
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	Если СтатьиДДС.ПолучитьЭлементы().Количество() = 0 Тогда
		ВывестиОбластьНетДанных(МакетВывода);
		ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
		Возврат;
	КонецЕсли;
	
	Для каждого Строка_Уровень1 Из СтатьиДДС.ПолучитьЭлементы() Цикл
		
		Если Строка_Уровень1.ГруппаСтатей = "Платежи" Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтатьиДДС_Платежи");
			
		ИначеЕсли Строка_Уровень1.ГруппаСтатей = "Поступления" Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтатьиДДС_Поступления");
			
		ИначеЕсли Строка_Уровень1.ГруппаСтатей = "Прочее" Тогда
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтатьиДДС_Прочее");
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтатьяДДС");
			ОбластьМакета.Параметры.СтатьяДДС = СокрЛП(Строка_Уровень2.Статья.Наименование);
			ОбластьМакета.Параметры.СтатьяДДСРасшифровка = "ВыполнитьПроцедуруНаКлиенте#ВывестиОтчетСтатьяДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)";
			ОбластьМакета.Область(2,1,2,1).Маска = Строка(Строка_Уровень2.Статья.УникальныйИдентификатор());
			ДокументРезультат.Вывести(ОбластьМакета);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ВывестиОбластьОбновитьДанныеПоСформированномуРазделу(МакетВывода);
	
КонецПроцедуры

// Процедура реализует механизм контроля данных по разделу «Статьи движения денежных средств».
//
&НаСервере
Процедура ЗаполнитьДанныеСтатьиДДС()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Регистратор,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДенежныеСредства.СуммаВал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДенежныеСредства.СуммаВал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_ДетальныеЗаписи
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДенежныеСредства.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредства.Статья,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДетальныеЗаписи.Статья КАК Статья,
	|	ВТ_ДетальныеЗаписи.Валюта КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДетальныеЗаписи.Статья = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.ПоступлениеВКассу
	|								И ВТ_ДетальныеЗаписи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВКассу.ОтПоставщика)
	|							ТОГДА 0
	|						КОГДА ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.ПоступлениеНаСчет
	|								И ВТ_ДетальныеЗаписи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеНаСчет.ОтПоставщика)
	|							ТОГДА 0
	|						ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаПриход
	|					КОНЕЦ
	|			ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаПриход
	|		КОНЕЦ) КАК СуммаПриход,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДетальныеЗаписи.Статья = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.РасходИзКассы
	|								И ВТ_ДетальныеЗаписи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходИзКассы.Покупателю)
	|							ТОГДА 0
	|						КОГДА ВТ_ДетальныеЗаписи.Регистратор ССЫЛКА Документ.РасходСоСчета
	|								И ВТ_ДетальныеЗаписи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходСоСчета.Покупателю)
	|							ТОГДА 0
	|						ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаРасход
	|					КОНЕЦ
	|			ИНАЧЕ ВТ_ДетальныеЗаписи.СуммаРасход
	|		КОНЕЦ) КАК СуммаРасход
	|ПОМЕСТИТЬ ВТ_ОборотыПоСтатьямВалюте
	|ИЗ
	|	ВТ_ДетальныеЗаписи КАК ВТ_ДетальныеЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДетальныеЗаписи.Статья,
	|	ВТ_ДетальныеЗаписи.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ГруппаСтатей КАК ГруппаСтатей,
	|	Платежи.Статья КАК Статья,
	|	Платежи.Валюта КАК Валюта,
	|	Платежи.Регистратор КАК Регистратор,
	|	Платежи.РегистраторДата КАК РегистраторДата,
	|	Платежи.СуммаПриход КАК СуммаПриход,
	|	Платежи.СуммаРасход КАК СуммаРасход
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ГруппаСтатей КАК ГруппаСтатей,
	|		ВложенныйЗапрос.Статья КАК Статья,
	|		ВложенныйЗапрос.Валюта КАК Валюта,
	|		ВТ_ДетальныеЗаписи.Регистратор КАК Регистратор,
	|		ВТ_ДетальныеЗаписи.Регистратор.Дата КАК РегистраторДата,
	|		ВТ_ДетальныеЗаписи.СуммаПриход КАК СуммаПриход,
	|		ВТ_ДетальныеЗаписи.СуммаРасход КАК СуммаРасход
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			""Платежи"" КАК ГруппаСтатей,
	|			ВТ_ОборотыПоСтатьямВалюте.Статья КАК Статья,
	|			ВТ_ОборотыПоСтатьямВалюте.Валюта КАК Валюта
	|		ИЗ
	|			ВТ_ОборотыПоСтатьямВалюте КАК ВТ_ОборотыПоСтатьямВалюте
	|		ГДЕ
	|			ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Платежи))
	|			И ВТ_ОборотыПоСтатьямВалюте.СуммаПриход <> 0) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДетальныеЗаписи КАК ВТ_ДетальныеЗаписи
	|			ПО ВложенныйЗапрос.Статья = ВТ_ДетальныеЗаписи.Статья
	|				И ВложенныйЗапрос.Валюта = ВТ_ДетальныеЗаписи.Валюта) КАК Платежи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Поступления.ГруппаСтатей,
	|	Поступления.Статья,
	|	Поступления.Валюта,
	|	Поступления.Регистратор,
	|	Поступления.РегистраторДата,
	|	Поступления.СуммаПриход,
	|	Поступления.СуммаРасход
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ГруппаСтатей КАК ГруппаСтатей,
	|		ВложенныйЗапрос.Статья КАК Статья,
	|		ВложенныйЗапрос.Валюта КАК Валюта,
	|		ВТ_ДетальныеЗаписи.Регистратор КАК Регистратор,
	|		ВТ_ДетальныеЗаписи.Регистратор.Дата КАК РегистраторДата,
	|		ВТ_ДетальныеЗаписи.СуммаПриход КАК СуммаПриход,
	|		ВТ_ДетальныеЗаписи.СуммаРасход КАК СуммаРасход
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			""Поступления"" КАК ГруппаСтатей,
	|			ВТ_ОборотыПоСтатьямВалюте.Статья КАК Статья,
	|			ВТ_ОборотыПоСтатьямВалюте.Валюта КАК Валюта
	|		ИЗ
	|			ВТ_ОборотыПоСтатьямВалюте КАК ВТ_ОборотыПоСтатьямВалюте
	|		ГДЕ
	|			ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Поступления))
	|			И ВТ_ОборотыПоСтатьямВалюте.СуммаРасход <> 0) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДетальныеЗаписи КАК ВТ_ДетальныеЗаписи
	|			ПО ВложенныйЗапрос.Статья = ВТ_ДетальныеЗаписи.Статья
	|				И ВложенныйЗапрос.Валюта = ВТ_ДетальныеЗаписи.Валюта) КАК Поступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Прочее.ГруппаСтатей,
	|	Прочее.Статья,
	|	Прочее.Валюта,
	|	Прочее.Регистратор,
	|	Прочее.РегистраторДата,
	|	Прочее.СуммаПриход,
	|	Прочее.СуммаРасход
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ГруппаСтатей КАК ГруппаСтатей,
	|		ВложенныйЗапрос.Статья КАК Статья,
	|		ВложенныйЗапрос.Валюта КАК Валюта,
	|		ВТ_ДетальныеЗаписи.Регистратор КАК Регистратор,
	|		ВТ_ДетальныеЗаписи.Регистратор.Дата КАК РегистраторДата,
	|		ВТ_ДетальныеЗаписи.СуммаПриход КАК СуммаПриход,
	|		ВТ_ДетальныеЗаписи.СуммаРасход КАК СуммаРасход
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			""Прочее"" КАК ГруппаСтатей,
	|			ВТ_ОборотыПоСтатьямВалюте.Статья КАК Статья,
	|			ВТ_ОборотыПоСтатьямВалюте.Валюта КАК Валюта
	|		ИЗ
	|			ВТ_ОборотыПоСтатьямВалюте КАК ВТ_ОборотыПоСтатьямВалюте
	|		ГДЕ
	|			НЕ ВТ_ОборотыПоСтатьямВалюте.Статья В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Платежи), ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.Поступления))
	|			И ВТ_ОборотыПоСтатьямВалюте.СуммаПриход <> ВТ_ОборотыПоСтатьямВалюте.СуммаРасход) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДетальныеЗаписи КАК ВТ_ДетальныеЗаписи
	|			ПО ВложенныйЗапрос.Статья = ВТ_ДетальныеЗаписи.Статья
	|				И ВложенныйЗапрос.Валюта = ВТ_ДетальныеЗаписи.Валюта) КАК Прочее
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппаСтатей,
	|	РегистраторДата
	|ИТОГИ
	|	СУММА(СуммаПриход),
	|	СУММА(СуммаРасход)
	|ПО
	|	ГруппаСтатей,
	|	Статья,
	|	Валюта,
	|	Регистратор");
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗначениеВРеквизитФормы(РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам), "СтатьиДДС");
	
КонецПроцедуры

// Функция проверяет наличие подчиненных элементов в переданной группе.
// Параметры - СсылкаНаГруппу - группа в которой необходимо выполнить поиск элементов
//
&НаСервереБезКонтекста
Функция ГруппаДДСПустая(СсылкаНаГруппу)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиДвиженияДенежныхСредств.Ссылка
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.ЭтоГруппа = ЛОЖЬ
	|	И СтатьиДвиженияДенежныхСредств.Ссылка <> &СсылкаНаГруппу
	|	И СтатьиДвиженияДенежныхСредств.Ссылка В ИЕРАРХИИ(&СсылкаНаГруппу)");
	
	Запрос.УстановитьПараметр("СсылкаНаГруппу", СсылкаНаГруппу);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции // ()

//разделы

// Процедура выводит первую страницу с перечнем разделов и описанием,
// вызывается единожды, при открытии.
//
&НаСервере
Процедура ВывестиПервуюСтраницу()
	
	МакетВывода = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетВывода");
	
	ДокументРезультат.Очистить();
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ЗаголовокОсновной");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоРазделов");
	
	Для каждого Строка_Уровень0 Из ДеревоДанных.Строки Цикл
		
		Для каждого Строка_Уровень1 Из Строка_Уровень0.Строки Цикл
			
			ОбластьМакета = МакетВывода.ПолучитьОбласть("СтрокаПерейтиКРазделу");
			ОбластьМакета.Параметры.Раздел = Строка_Уровень1.РазделУчетаПредствление;
			ОбластьМакета.Параметры.ПереходСледующемуРазделу = "ПерейтиКСтроке#" + Строка(Строка_Уровень1.НомерСтрокиДерева);
			ДокументРезультат.Вывести(ОбластьМакета);
			
			Попытка
				ОбластьМакета = МакетВывода.ПолучитьОбласть("Описание" + Строка_Уровень1.РазделУчета);
				ДокументРезультат.Вывести(ОбластьМакета);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено описание к разделу " + Строка_Уровень1.РазделУчета;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ВывестиГиперссылкуОписание(МакетВывода);
	
КонецПроцедуры

//Процедура выводит в табличный документ гиперссылку на описание выполняемых разделов. 
//
&НаСервере
Процедура ВывестиГиперссылкуОписание(МакетВывода)
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ИформацияПодробно");
	ОбластьМакета.Параметры.ПараметрРасшифровкиОткрытьОписание = "ВыполнитьПроцедуруНаКлиенте#ВывестиПодробноеОписание(ВариантПереопределения, БылиИзмененыДанные)";	
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Вывод финального отчета.
// Процедура-обработчик нажатия на гиперссылку "Финальный отчет"
//
&НаКлиенте
Процедура ВывестиФинальныйОтчет()
	
	ВывестиФинальныйОтчет_НаСервере();
	
КонецПроцедуры

// Формирование и вывод финального отчета на сервере.
//
&НаСервере
Процедура ВывестиФинальныйОтчет_НаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетВывода = ОбработкаОбъект.ПолучитьМакет("МакетВывода");
	
	ДокументРезультат.Очистить();
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("ЗаголовокФинальныйОтчет");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ДеревоДанных = РеквизитФормыВЗначение("ДеревоРазделов");
	
	Для каждого Строка_Уровень0 Из ДеревоДанных.Строки Цикл
		
		Для каждого Строка_Уровень1 Из Строка_Уровень0.Строки Цикл
			
			ВывестиОтчетПоРазделу(Строка_Уровень1, МакетВывода);
			
			ВывестиРезультатыПодчиненныхРазделов(Строка_Уровень1, МакетВывода);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ОбластьМакета = МакетВывода.ПолучитьОбласть("Выход");
	ОбластьМакета.Параметры.Выход = "ВЫХОД";
	ОбластьМакета.Параметры.ВыполнитьДействиеРасшифровка = "ВыполнитьПроцедуруНаКлиенте#Закрыть()";
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ВывестиГиперссылкуОписание(МакетВывода);
	
КонецПроцедуры

// Обход подчиненных строк дерева,
// вызывается из  ВывестиФинальныйОтчет_НаСервере().
//
&НаСервере
Процедура ВывестиРезультатыПодчиненныхРазделов(СтрокаРодитель, МакетВывода)
	
	Для каждого ТекущаяСтрока Из СтрокаРодитель.Строки Цикл
		
		ВывестиОтчетПоРазделу(ТекущаяСтрока, МакетВывода);
		
		ВывестиРезультатыПодчиненныхРазделов(ТекущаяСтрока, МакетВывода);
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура выводит отчет о выполнении анализа по каждому разделу,
// согласно данным, находящимся в реквизите строки ИндексКартинки.
//
&НаСервере
Процедура ВывестиОтчетПоРазделу(ТекущаяСтрока, МакетВывода)
	
	Если ТекущаяСтрока.ИндексКартинки = 0 Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("РазделНеАнализировался");
	ИначеЕсли ТекущаяСтрока.ИндексКартинки = 1 Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("РазделНеИсправлялся");
	ИначеЕсли ТекущаяСтрока.ИндексКартинки = 2 Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("РазделНеПлностьюИсправлен");
	ИначеЕсли ТекущаяСтрока.ИндексКартинки = 3 Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("РазделНетОшибок");
	ИначеЕсли ТекущаяСтрока.ИндексКартинки = 4 Тогда
		ОбластьМакета = МакетВывода.ПолучитьОбласть("РазделИсправлялся");
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Раздел = ТекущаяСтрока.РазделУчетаПредствление;
	ДокументРезультат.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Выполняется очистка таб. документа (реквизит ДокументРезультат).
//
&НаСервере
Процедура ОчиститьДокументРезультат()
	
	ДокументРезультат.Очистить();	
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку результатов анализа для разделов: «Расчеты с поставщиками» и «Расчеты с покупателями».
// Формирует отчет по взаиморасчетам в отдельном окне.
// Параметры
//		ТекОбласть - область ячеек табличного документа, по которой было произведено нажатие;
//		ВариантПереопределения - число;
//		БылиИзмененыДанные - булево.
//
&НаКлиенте
Процедура ВывестиОтчетПоВзаиморасчетам(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	КонтрагентСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	ПараметрыФормы = Новый Структура("ВидОтчета, КонтрагентСсылка, НачалоПериода, КонецПериода, Организация", "Взаиморасчеты", КонтрагентСсылка, НачалоПериода, КонецПериода, Организация);
	
	ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	
КонецПроцедуры

//Процедура-обработчик нажатия на гиперссылку «Выполнить зачет авансов» в разделе «Расчеты с поставщиками».
//
&НаСервере
Процедура Подключаемый_ВыполнитьЗачетАвансовПоПоставщику(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	КонтрагентСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	Для каждого СтрокаТабЧасти Из РасчетыСПоставщиками Цикл
		
		Если (СтрокаТабЧасти.Контрагент = КонтрагентСсылка) И (НЕ СтрокаТабЧасти.ОбработкаВыполнена) И СтрокаТабЧасти.ЕстьОборотыЗаПериод Тогда
			
			ПерезаполнитьДокументыПоставщика(КонтрагентСсылка);
			
			СтрокаТабЧасти.БылиИсправления = Истина;
			
			ТаблицаРасчетов = СформироватьТаблицуРасчетыСПоставщиками(КонтрагентСсылка);
			
			Если ТаблицаРасчетов.Количество() = 0 Тогда
				СтрокаТабЧасти.ОбработкаВыполнена = Истина;
			Иначе
				СтрокаТабЧасти.ЕстьОборотыЗаПериод = ТаблицаРасчетов[0].ЕстьОборотыЗаПериод
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// В процедуре выполняется заполнение табличных частей "Предоплата" и "РасшифровкаПлатежа"
// а также проведение документов, т.е. производит программный зачет авансов по разделу "Расчеты с поставщиками"
//
&НаСервере
Процедура ПерезаполнитьДокументыПоставщика(КонтрагентСсылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасчетыСПоставщикамиОбороты.Регистратор КАК Регистратор,
	|	РасчетыСПоставщикамиОбороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент) КАК РасчетыСПоставщикамиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор");
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоДокументОплаты(Выборка.Регистратор) Тогда//перезаполнение расшифровки
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект(); 
			
			Попытка
				ДокументОбъект.ЗаполнитьРасшифровкуПлатежа();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ЗаписатьИсториюИзмененияОбъекта(Выборка.Регистратор, "Проведение", "Проведение документа.");
			Исключение
				СтрокаОшибки = "Не удалось обработать  документ " + Строка(Выборка.Регистратор);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрокаОшибки;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		ИначеЕсли Выборка.Регистратор.Метаданные().ТабличныеЧасти.Найти("Предоплата") <> Неопределено Тогда
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.ЗаполнитьПредоплату();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ЗаписатьИсториюИзмененияОбъекта(Выборка.Регистратор, "Проведение", "Проведение документа.");
			Исключение
				СтрокаОшибки = "Не удалось обработать  документ " + Строка(Выборка.Регистратор);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрокаОшибки;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку «Выполнить зачет авансов» в разделе «Расчеты с покупателями».
//
&НаСервере
Процедура Подключаемый_ВыполнитьЗачетАвансовПоПокупателю(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	КонтрагентСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	Для каждого СтрокаТабЧасти Из РасчетыСПокупателями Цикл
		
		Если (СтрокаТабЧасти.Контрагент = КонтрагентСсылка) И (НЕ СтрокаТабЧасти.ОбработкаВыполнена) И СтрокаТабЧасти.ЕстьОборотыЗаПериод Тогда
			
			ПерезаполнитьДокументыПокупателя(КонтрагентСсылка);
			
			СтрокаТабЧасти.БылиИсправления = Истина;
			
			ТаблицаРасчетов = СформироватьТаблицуРасчетыСПокупателями(КонтрагентСсылка);
			
			Если ТаблицаРасчетов.Количество() = 0 Тогда
				СтрокаТабЧасти.ОбработкаВыполнена = Истина;
			Иначе
				СтрокаТабЧасти.ЕстьОборотыЗаПериод = ТаблицаРасчетов[0].ЕстьОборотыЗаПериод
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// В процедуре выполняется заполнение табличных частей "Предоплата" и "РасшифровкаПлатежа"
// а также проведение документов, т.е. производит программный зачет авансов по разделу "Расчеты с покупателями"
//
&НаСервере
Процедура ПерезаполнитьДокументыПокупателя(КонтрагентСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РасчетыСПокупателямиОбороты.Регистратор КАК Регистратор,
	|	РасчетыСПокупателямиОбороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент) КАК РасчетыСПокупателямиОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор");
	
	Запрос.УстановитьПараметр("ДатаНач", Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоДокументОплаты(Выборка.Регистратор) Тогда//перезаполнение расшифровки
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект(); 
			
			Попытка
				ДокументОбъект.ЗаполнитьРасшифровкуПлатежа();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ЗаписатьИсториюИзмененияОбъекта(Выборка.Регистратор, "Проведение", "Проведение документа.");
			Исключение
				СтрокаОшибки = "Не удалось обработать  документ " + Строка(Выборка.Регистратор);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрокаОшибки;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		ИначеЕсли Выборка.Регистратор.Метаданные().ТабличныеЧасти.Найти("Предоплата") <> Неопределено Тогда
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.ЗаполнитьПредоплату();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				ЗаписатьИсториюИзмененияОбъекта(Выборка.Регистратор, "Проведение", "Проведение документа.");
			Исключение
				СтрокаОшибки = "Не удалось обработать  документ " + Строка(Выборка.Регистратор);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрокаОшибки;
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить(); 
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перепроведение документов,
// содержащихся в реквизите "ТаблицаДокументовДляПерепроведения".
//
&НаСервере
Процедура Подключаемый_ВыполнитьПерепроведениеПоКурсовымРазницам(ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 1;
	
	БылиИзмененыДанные = Истина;
	
	ТаблицаДляПерепроведения = Новый ТаблицаЗначений;
	ТаблицаДляПерепроведения.Колонки.Добавить("ДокументСсылка");
	ТаблицаДляПерепроведения.Колонки.Добавить("Дата");
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы() Цикл
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаДляПерепроведения.Добавить();
			НоваяСтрока.ДокументСсылка = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
		КонецЦикла; 
		
	КонецЦикла;
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы() Цикл
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаДляПерепроведения.Добавить();
			НоваяСтрока.ДокументСсылка = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
		КонецЦикла; 
		
	КонецЦикла;
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыПоставщики.ПолучитьЭлементы() Цикл
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаДляПерепроведения.Добавить();
			НоваяСтрока.ДокументСсылка = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
		КонецЦикла; 
		
	КонецЦикла;
	
	ТаблицаДляПерепроведения.Свернуть("ДокументСсылка, Дата");
	ТаблицаДляПерепроведения.Сортировать("Дата");
	
	Для каждого СтрокаТаблицы Из ТаблицаДляПерепроведения Цикл
		
		ДокументОбъект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			
			ЗаписатьИсториюИзмененияОбъекта(СтрокаТаблицы.ДокументСсылка, "Проведение", "Проведение документа.");
			
		Исключение
			
			ТекстОшибки = "Не удалось перепровести документ " + Строка(СтрокаТаблицы.ДокументСсылка) + Символы.ПС + ОписаниеОшибки();
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы().Очистить();
	НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы().Очистить();
	НекорректныеКурсовыеРазницыПоставщики.ПолучитьЭлементы().Очистить();
	
	КурсовыеРазницыЗаполнялось = Ложь;
	
	КурсовыеРазницыДокументыПерепроведены = Истина;
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Установить спецификацию по умолчанию".
// Инициализация заполнения реквизита "Спецификация" для конкретной номенклатуры.
//
&НаСервере
Процедура Подключаемый_УстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ТекущаяНоменклатура = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	ТекущаяСпецификация = ДокументРезультат.Область(ТекущаяСтрока + "C5").Расшифровка;
	
	ТаблицаДанных = РеквизитФормыВЗначение("НоменклатураБезСпецификаций");
	
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("Номенклатура, Спецификация", ТекущаяНоменклатура, ТекущаяСпецификация));
	
	Если МассивСтрок.Количество() > 0 Тогда
		Попытка
			УстановитьСпецификациюВНоменклатуру(ТекущаяНоменклатура, ТекущаяСпецификация);
			ЗаписатьИсториюИзмененияОбъекта(ТекущаяНоменклатура, "Запись", "Запись элемента справочника.");
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось установить спецификацию." + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Возврат;
		КонецПопытки;
		
		МассивСтрок[0].ОбработкаВыполнена = Истина;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДанных, "НоменклатураБезСпецификаций");
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Выбрать и установить спецификацию.".
// Открытие формы выбора справочника "Спецификации".
//
&НаКлиенте
Процедура ВыбратьУстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ТекущаяНоменклатура = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	Отбор = Новый Структура("Владелец", ТекущаяНоменклатура);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.Спецификации.ФормаВыбора", ПараметрыФормы, ЭтаФорма);	
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Обнаружено несколько спецификаций.".
// Открытие формы списка справочника "Спецификации".
//
&НаКлиенте
Процедура ОткрытьСписокСпецификаций(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ТекущаяНоменклатура = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	Отбор = Новый Структура("Владелец", ТекущаяНоменклатура);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.Спецификации.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

// Обработка выбора спецификации из формы выбора.
// Вызывается из предопределенной процедуры ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
// Параметры:
//	ВыбраннаяСпецификация - соответствует значению переменной ВыбранноеЗначение из процедуры ОбработкаВыбора.
//
&НаСервере
Процедура ОбработатьВыборСпецификации(ВыбраннаяСпецификация)
	
	ТаблицаДанных = РеквизитФормыВЗначение("НоменклатураБезСпецификаций");
	
	ТекущаяНоменклатура = ВыбраннаяСпецификация.Владелец;
	
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("Номенклатура, Спецификация", ТекущаяНоменклатура, Справочники.Спецификации.ПустаяСсылка()));
	
	Если МассивСтрок.Количество() > 0 Тогда
		Попытка
			УстановитьСпецификациюВНоменклатуру(ТекущаяНоменклатура, ВыбраннаяСпецификация);
			ЗаписатьИсториюИзмененияОбъекта(ТекущаяНоменклатура, "Запись", "Запись элемента справочника.");
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось установить спецификацию." + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			Возврат;
		КонецПопытки;
		
		МассивСтрок[0].Спецификация = ВыбраннаяСпецификация;
		МассивСтрок[0].ОбработкаВыполнена = Истина;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДанных, "НоменклатураБезСпецификаций");
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита "Спецификация" указанным значением и запись
// элемента справочник "Номенклатура".
//
&НаСервереБезКонтекста
Процедура УстановитьСпецификациюВНоменклатуру(НоменклатураСсылка, СпецификацияСсылка)
	
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	НоменклатураОбъект.Спецификация = СпецификацияСсылка;
	НоменклатураОбъект.Записать();
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Установить спецификацию"
// в разделе "Отчеты переработчиков без спецификаций".
//
&НаСервере
Процедура Подключаемый_УстановитьСпецификациюВОтчетПерер(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ТекущаяСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	ТекущаяСпецификация = ДокументРезультат.Область(ТекущаяСтрока + "C5").Расшифровка;
	
	ТаблицаДанных = РеквизитФормыВЗначение("ОтчетыПереработчиковСпецификации");
	
	МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ДокументСсылка, Спецификация", ТекущаяСсылка, ТекущаяСпецификация));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ДокументОбъект = ТекущаяСсылка.ПолучитьОбъект();
		ДокументОбъект.Спецификация = ТекущаяСпецификация;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписатьИсториюИзмененияОбъекта(ТекущаяСсылка, "Запись", "Запись документа."); 
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать """ + Строка(ТекущаяСсылка) + """" + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Возврат;
		КонецПопытки;
		
		МассивСтрок[0].ОбработкаВыполнена = Истина;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаДанных, "ОтчетыПереработчиковСпецификации");
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Функция определяет, есть ли тип переданного документа в списке МассивТиповДокументыОплаты
// Параметры:
//	ДокументСсылка - ссылка определяемого документа
//
&НаСервере
Функция ЭтоДокументОплаты(ДокументСсылка)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Возврат МассивТиповДокументыОплаты.НайтиПоЗначению(ТипДокумента) <> Неопределено;
	
КонецФункции

// Процедура выполняет запись даты исправления для каждого раздела в регистр сведений ДатыВыполненияИсправленийПоРазделам.
// Вызывается при модификации данных.
//
&НаСервере
Процедура ЗаписатьДатуВыполненияПоРазделу()
	
	НаборЗаписей = РегистрыСведений.ДатыВыполненияИсправленийПоРазделам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РазделУчета.Установить(ТекущийРазделУчета);
	
	Запись = НаборЗаписей.Добавить();
	Запись.РазделУчета = ТекущийРазделУчета;
	Запись.ДатаВыполнения = ТекущаяДата();
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "С подробным описанием каждого этапа проверки можно ознакомиться здесь..."
// Выводит подробное описание механизмов данной обработки в отдельном окне.
//
&НаКлиенте
Процедура ВывестиПодробноеОписание(ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	КлючФормы = "КонтрольПравильностиУчета_ФормаПобробноеОписание";
	
	ПараметрыФормы = Новый Структура("СсылкаДляПерехода", ТекущаяСсылкаНаСправку);
	ФормаОписания = ПолучитьФорму("Обработка.КонтрольПравильностиУчета.Форма.ФормаПобробноеОписание", ПараметрыФормы, ЭтаФорма, КлючФормы);
	
	Если ФормаОписания.Открыта() Тогда
		ФормаОписания.Закрыть();
		ФормаОписания = Неопределено;
		ФормаОписания = ПолучитьФорму("Обработка.КонтрольПравильностиУчета.Форма.ФормаПобробноеОписание", ПараметрыФормы, ЭтаФорма, КлючФормы);
	КонецЕсли;
	
	ОткрытьФорму(ФормаОписания);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Обнаружено несоответствие" в разделе 
// "Отчеты переработчиков - несоответствие списаний спецификациям".
// Выводит отчет по несоответствиям в отдельном окне.
//
&НаКлиенте
Процедура ВывестиОтчетПоНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	ТаблицаРасхождений = Неопределено;
	
	Для каждого СтрокаТаблицы Из ОтчетыПереработчиковНесоответствия Цикл
		Если СтрокаТаблицы.ДокументСсылка = ДокументСсылка Тогда
			ТаблицаРасхождений = СтрокаТаблицы.ТаблицаРасхождений;
			Прервать;
		КонецЕсли;	
	КонецЦикла; 
	
	ПараметрыФормы = Новый Структура("ВидОтчета, ДокументСсылка, ТаблицаРасхождений", "НесоответствияСписанийСпецификациям", ДокументСсылка, ТаблицаРасхождений);
	
	ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Перезаполнить и перепровести" в разделе 
// "Отчеты переработчиков - несоответствие списаний спецификациям".
// Выполняет перезаполнение конкретного отчета переработчика по спецификации
// путем вызова экспортной процедуры ЗаполнитьТабличнуюЧастьПоСпецификации из модуля объекта
// и перепроведение документа.
//
&НаСервере
Процедура Подключаемый_ИсправитьНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	МассивСтрок = ОтчетыПереработчиковНесоответствия.НайтиСтроки(Новый Структура("ДокументСсылка", ДокументСсылка));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		ДокументОбъект.ЗаполнитьТабличнуюЧастьПоСпецификации(ДокументОбъект.Спецификация, ДокументОбъект.Количество, ДокументОбъект.ЕдиницаИзмерения);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ЗаписатьИсториюИзмененияОбъекта(ДокументСсылка, "Проведение", "Проведение документа.");
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось перепровести документ " + Строка(ДокументСсылка) + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить(); 
			Возврат;
		КонецПопытки;
		
		МассивСтрок[0].ОбработкаВыполнена = Истина;
		
		ЗаписатьДатуВыполненияПоРазделу();
		
		ВывестиДанныеПоРазделу();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Предлагаемые спецификации." в разделе "док. "Производство" без спецификаций".
// Выводит в отдельном отчет с предлагаемыми спецификациями.
&НаКлиенте
Процедура ВывестиОтчетДокПроизводствоСпецификации(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	ПараметрыФормы = Новый Структура("ВидОтчета, ДокументСсылка", "ПредлагаемаяСпецификацииПроизводство", ДокументСсылка);
	
	ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Установить специфицикации" в разделе "док. "Производство" без спецификаций".
// Выполняет заполнение специфкаций в таб. части Продукция документа СборкаЗапасов и запись документа
//
&НаСервере
Процедура Подключаемый_УстановитьСпецификацииВДокПроизоводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	
	МассивСтрок = ДокПроизводствоСпецификации.НайтиСтроки(Новый Структура("ДокументСсылка", ДокументСсылка));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Для каждого СтрокаТабЧасти Из ДокументОбъект.Продукция Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабЧасти.Спецификация) Тогда
				
				СтрокаТабЧасти.Спецификация = СтрокаТабЧасти.Номенклатура.Спецификация;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗаписатьИсториюИзмененияОбъекта(ДокументСсылка, "Запись", "Запись документа.");
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать """ + Строка(ДокументСсылка) + """" + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить();
			
			Возврат;
		КонецПопытки;		
		
		МассивСтрок[0].ОбработкаВыполнена = Истина;
		
	КонецЕсли;
	
	ЗаписатьДатуВыполненияПоРазделу();
	
	ВывестиДанныеПоРазделу();
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Обнаружено несоответствие" в разделе "док. "Производство" - несоответствие списаний спецификациям".
// Выводит в отдельном окне отчет о несоответствиях.
//
&НаКлиенте
Процедура ВывестиОтчетПоНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	ТаблицаРасхождений = Неопределено;
	
	Для каждого СтрокаТаблицы Из ДокПроизводствоНесоответствия Цикл
		Если СтрокаТаблицы.ДокументСсылка = ДокументСсылка Тогда
			ТаблицаРасхождений = СтрокаТаблицы.ТаблицаРасхождений;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("ВидОтчета, ДокументСсылка, ТаблицаРасхождений", "НесоответствияСписанийСпецификациям", ДокументСсылка, ТаблицаРасхождений);
	
	ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Перезаполнить и перепровести" в разделе "док. "Производство" - несоответствие списаний спецификациям".
// Выполняет перезаполнение табл. части Запасы документа СборкаЗапасов по спецификациям и перепроведение документа.
//
&НаСервере
Процедура Подключаемый_ИсправитьНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	БылиИзмененыДанные = Истина;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	ДокументСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	МассивСтрок = ДокПроизводствоНесоответствия.НайтиСтроки(Новый Структура("ДокументСсылка", ДокументСсылка));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		СтекСпецификацийУзлов = Новый Массив;		
		ДокументОбъект.ЗаполнитьТабличнуюЧастьПоСпецификации(СтекСпецификацийУзлов);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ЗаписатьИсториюИзмененияОбъекта(ДокументСсылка, "Проведение", "Проведение документа.");
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось перепровести документ " + Строка(ДокументСсылка) + Символы.ПС + ОписаниеОшибки();
			Сообщение.УстановитьДанные(Объект);
			Сообщение.Сообщить(); 
			Возврат;
		КонецПопытки;
		
		МассивСтрок[0].ОбработкаВыполнена = Истина;
		
		ЗаписатьДатуВыполненияПоРазделу();
		
		ВывестиДанныеПоРазделу();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Результат анализа" раздела "Анализ закупочных цен" 
// 
&НаКлиенте
Процедура ВывестиОтчетАнализЦенПоНоменклатуре(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ТекущаяСтрока = ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя);
	НоменклатураСсылка = ДокументРезультат.Область(ТекущаяСтрока + "C3:" + ТекущаяСтрока + "C4").Расшифровка;
	
	АдресВХранилище = СформироватьТаблицуДанныхОтчетаАнализЗакупочныхЦен(НоменклатураСсылка);
	
	Если АдресВХранилище <> "" Тогда		
		ПараметрыФормы = Новый Структура("ВидОтчета, АдресВХранилище", "АнализЗакупочныхЦен", АдресВХранилище);		
		ОткрытьФормуОтчета(ПараметрыФормы, Истина);		
	КонецЕсли;
	
КонецПроцедуры

// Формирование таблицы данных о закупочных ценах для конкретной номенклатуры 
//
&НаСервере
Функция СформироватьТаблицуДанныхОтчетаАнализЗакупочныхЦен(НоменклатураСсылка)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("Характеристика");
	ТаблицаДанных.Колонки.Добавить("ДокументЗакупки");
	ТаблицаДанных.Колонки.Добавить("ЗакупочнаяЦена");
	ТаблицаДанных.Колонки.Добавить("ЕстьОтклонение");
	
	АдресВХранилище = "";
	
	СтрокиНоменклатура = АнализЗакупочныхЦен.ПолучитьЭлементы();
	
	Для каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
		
		Если СтрокаНоменклатура.Номенклатура = НоменклатураСсылка Тогда
			
			СтрокиДетальныеЗаписи = СтрокаНоменклатура.ПолучитьЭлементы();
			
			Для каждого СтрокаДетальнаяЗапись Из СтрокиДетальныеЗаписи Цикл
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДетальнаяЗапись);
				
			КонецЦикла;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных);
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции // ()

// Процедура-обработчик нажатия на гиперссылку касса/р. счет раздела "Курсовые разницы".
//
&НаКлиенте
Процедура ВывестиОтчетКурсовыеРазницыДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	СтрокаЯчейкиСсылки = СтрЗаменить(ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя), "R", "");
	
	СтрокаСсылкаСтатья = ДокументРезультат.Область(СтрокаЯчейкиСсылки, 1, СтрокаЯчейкиСсылки, 1).Маска;
	
	АдресВХранилище = СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыДС(СтрокаСсылкаСтатья);
	
	Если АдресВХранилище <> "" Тогда
		ПараметрыФормы = Новый Структура("ВидОтчета, АдресВХранилище", "КурсовыеРазницы", АдресВХранилище);
		ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	КонецЕсли;
	
КонецПроцедуры

//Функция формирует таблицу данных для отчета о курсовых разницах по денежным средствам.
//
&НаСервере
Функция СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыДС(СтрокаСсылкаСтатья = "")
	
	Если СтрокаСсылкаСтатья = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ОбъектУчета");
	ТаблицаДанных.Колонки.Добавить("Регистратор");
	ТаблицаДанных.Колонки.Добавить("Дата");
	
	ТекСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылкаСтатья));
	
	Если (ТекСсылка.ПолучитьОбъект() = Неопределено) Тогда
		ТекСсылка = Справочники.Кассы.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылкаСтатья));
	КонецЕсли;
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы() Цикл
		
		Если Строка_Уровень1.БанковскийСчетКасса <> ТекСсылка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ОбъектУчета = Строка_Уровень2.БанковскийСчетКасса;
			НоваяСтрока.Регистратор = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("Дата");
	
	АдресВХранилище = "";	
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных);
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции // ()

// Процедура-обработчик нажатия на гиперссылку-контрагента раздела "Курсовые разницы".
//
&НаКлиенте
Процедура ВывестиОтчетКурсовыеРазницыПокупатели(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	СтрокаЯчейкиСсылки = СтрЗаменить(ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя), "R", "");
	
	СтрокаСсылкаСтатья = ДокументРезультат.Область(СтрокаЯчейкиСсылки, 1, СтрокаЯчейкиСсылки, 1).Маска;
	
	АдресВХранилище = СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыПокупатели(СтрокаСсылкаСтатья);
	
	Если АдресВХранилище <> "" Тогда
		ПараметрыФормы = Новый Структура("ВидОтчета, АдресВХранилище", "КурсовыеРазницы", АдресВХранилище);
		ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	КонецЕсли;	
	
КонецПроцедуры

//Функция формирует таблицу данных для отчета о курсовых разницах по расчетам с покупателями.
//
&НаСервере
Функция СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыПокупатели(СтрокаСсылкаСтатья = "")
	
	Если СтрокаСсылкаСтатья = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ОбъектУчета");
	ТаблицаДанных.Колонки.Добавить("Регистратор");
	ТаблицаДанных.Колонки.Добавить("Дата");
	
	ТекСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылкаСтатья));
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы() Цикл
		
		Если Строка_Уровень1.Контрагент <> ТекСсылка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ОбъектУчета = Строка_Уровень2.Контрагент;
			НоваяСтрока.Регистратор = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("Дата");
	
	АдресВХранилище = "";	
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных);
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции // ()

// Процедура-обработчик нажатия на гиперссылку-контрагента раздела "Курсовые разницы".
//
&НаКлиенте
Процедура ВывестиОтчетКурсовыеРазницыПоставщики(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	СтрокаЯчейкиСсылки = СтрЗаменить(ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя), "R", "");
	
	СтрокаСсылкаСтатья = ДокументРезультат.Область(СтрокаЯчейкиСсылки, 1, СтрокаЯчейкиСсылки, 1).Маска;
	
	АдресВХранилище = СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыПоставщики(СтрокаСсылкаСтатья);
	
	Если АдресВХранилище <> "" Тогда
		ПараметрыФормы = Новый Структура("ВидОтчета, АдресВХранилище", "КурсовыеРазницы", АдресВХранилище);	
		ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	КонецЕсли;	
	
КонецПроцедуры

// Функция формирует таблицу данных для отчета о курсовых разницах по расчетам с поставщиками.
//
&НаСервере
Функция СформироватьТаблицуДанныхОтчетаКурсвоыеРазницыПоставщики(СтрокаСсылкаСтатья)
	
	Если СтрокаСсылкаСтатья = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ОбъектУчета");
	ТаблицаДанных.Колонки.Добавить("Регистратор");
	ТаблицаДанных.Колонки.Добавить("Дата");
	
	ТекСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылкаСтатья));
	
	Для каждого Строка_Уровень1 Из НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы() Цикл
		
		Если Строка_Уровень1.Контрагент <> ТекСсылка Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.ОбъектУчета = Строка_Уровень2.Контрагент;
			НоваяСтрока.Регистратор = Строка_Уровень2.Регистратор;
			НоваяСтрока.Дата = Строка_Уровень2.Регистратор.Дата;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	ТаблицаДанных.Сортировать("Дата");
	
	АдресВХранилище = "";	
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных);
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции // ()

// Процедура изменяет реквизит строки ИндексКартинки в зависимости от 
// состава данных по каждому разделу.
//
&НаКлиенте
Процедура УстановитьКартинкуСтрокиДерева()
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	Если ТекущаяСтрокаДерева.Уровень = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийРазделУчета = "РасчетыСПоставщиками" ИЛИ ТекущийРазделУчета = "РасчетыСПокупателями" Тогда
		
		ФлагВыполнения = Неопределено;
		ТабЧасть = Неопределено;
		
		ОпределитьФлагИТабЧастьПоРазделу(ФлагВыполнения, ТабЧасть);
		
		Если ФлагВыполнения Тогда
			
			Если ТабЧасть.Количество() = 0 Тогда
				
				ТекущаяСтрокаДерева.ИндексКартинки = 3;
				
			Иначе
				
				ЕстьОбработанные = Ложь;
				ЕстьНеОбработанные = Ложь;
				
				ОпределитьСостояниеВыполненияПоРасчетам(ЕстьОбработанные, ЕстьНеОбработанные);
				
				Если ЕстьОбработанные И ЕстьНеОбработанные Тогда//что-то исправили, но не все
					
					ТекущаяСтрокаДерева.ИндексКартинки = 2;	
					
				ИначеЕсли ЕстьОбработанные И НЕ ЕстьНеОбработанные Тогда//исправили все
					
					ТекущаяСтрокаДерева.ИндексКартинки = 4;
					
				ИначеЕсли НЕ ЕстьОбработанные И ЕстьНеОбработанные Тогда//ничего не исправили
					
					ТекущаяСтрокаДерева.ИндексКартинки = 1;
					
				ИначеЕсли НЕ ЕстьОбработанные И НЕ ЕстьНеОбработанные Тогда//строк нет
					
					ТекущаяСтрокаДерева.ИндексКартинки = 3;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе
			
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделУчета = "КурсовыеРазницы" Тогда
		
		НетОшибокКР = ((НекорректныеКурсовыеРазницыДС.ПолучитьЭлементы().Количество() = 0) И 
		(НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы().Количество() = 0) И 
		(НекорректныеКурсовыеРазницыПокупатели.ПолучитьЭлементы().Количество() = 0));
		
		Если КурсовыеРазницыЗаполнялось Тогда
			
			Если КурсовыеРазницыДокументыПерепроведены Тогда
				
				Если НетОшибокКР Тогда
					ТекущаяСтрокаДерева.ИндексКартинки = 4;
				Иначе
					ТекущаяСтрокаДерева.ИндексКартинки = 1;
				КонецЕсли;
				
			Иначе
				
				Если НетОшибокКР Тогда
					ТекущаяСтрокаДерева.ИндексКартинки = 3;
				Иначе
					ТекущаяСтрокаДерева.ИндексКартинки = 1;
				КонецЕсли;
				
			КонецЕсли;		
		Иначе
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделУчета = "НоменклатураБезСпецификаций" ИЛИ ТекущийРазделУчета = "ОтчетыПерерБезСпецификаций" ИЛИ
		ТекущийРазделУчета = "ОтчетыПерерНесоответСписаний" ИЛИ ТекущийРазделУчета = "ДокПроизводствоБезСпецификаций" ИЛИ
		ТекущийРазделУчета = "ДокПроизводствоНесоответСписаний" Тогда
		
		ФлагВыполнения = Неопределено;
		ТабЧасть = Неопределено;
		
		ОпределитьФлагИТабЧастьПоРазделу(ФлагВыполнения, ТабЧасть);
		
		Если ФлагВыполнения Тогда
			
			ЕстьОбработанные = Ложь;
			ЕстьНеОбработанные = Ложь;
			
			ОпределитьСостояниеВыполненияПоТабЧасти(ЕстьОбработанные, ЕстьНеОбработанные, ТабЧасть);
			
			Если ЕстьОбработанные И ЕстьНеОбработанные Тогда//что-то исправили, но не все
				
				ТекущаяСтрокаДерева.ИндексКартинки = 2;	
				
			ИначеЕсли ЕстьОбработанные И НЕ ЕстьНеОбработанные Тогда//исправили все
				
				ТекущаяСтрокаДерева.ИндексКартинки = 4;
				
			ИначеЕсли НЕ ЕстьОбработанные И ЕстьНеОбработанные Тогда//ничего не исправили
				
				ТекущаяСтрокаДерева.ИндексКартинки = 1;
				
			ИначеЕсли НЕ ЕстьОбработанные И НЕ ЕстьНеОбработанные Тогда//строк нет
				
				ТекущаяСтрокаДерева.ИндексКартинки = 3;
				
			КонецЕсли;
			
		Иначе
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделУчета = "АнализЗакупочныхЦен" Тогда
		
		Если АнализЗакупочныхЦенЗаполнялось Тогда
			
			Если АнализЗакупочныхЦен.ПолучитьЭлементы().Количество() = 0 Тогда				
				ТекущаяСтрокаДерева.ИндексКартинки = 3;
			Иначе
				ТекущаяСтрокаДерева.ИндексКартинки = 1;				
			КонецЕсли;
			
		Иначе
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделУчета = "КонтрольДоговоровОрганизаций" Тогда
		
		Если ДеревоДокументовДоговораОрганизацииЗаполнялось Тогда
			
			Если ДеревоДокументовДоговораОрганизации.ПолучитьЭлементы().Количество() = 0 Тогда				
				ТекущаяСтрокаДерева.ИндексКартинки = 3;
			Иначе
				ТекущаяСтрокаДерева.ИндексКартинки = 1;				
			КонецЕсли;
			
		Иначе
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущийРазделУчета = "СтатьиДДС" Тогда
		
		Если СтатьиДДСЗаполнялось Тогда
			
			Если СтатьиДДС.ПолучитьЭлементы().Количество() = 0 Тогда				
				ТекущаяСтрокаДерева.ИндексКартинки = 3;
			Иначе
				ТекущаяСтрокаДерева.ИндексКартинки = 1;				
			КонецЕсли;
			
		Иначе
			ТекущаяСтрокаДерева.ИндексКартинки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура анализирует состояние данных по разделам
// "Расчеты с покупателями" и "Расчеты с поставщикам".
//
&НаСервере
Процедура ОпределитьСостояниеВыполненияПоРасчетам(ЕстьОбработанные, ЕстьНеОбработанные)
	
	ТабЧасть = Неопределено;
	
	Если ТекущийРазделУчета = "РасчетыСПоставщиками" Тогда
		ТабЧасть = РасчетыСПоставщиками;
	ИначеЕсли ТекущийРазделУчета = "РасчетыСПокупателями" Тогда
		ТабЧасть = РасчетыСПокупателями;
	КонецЕсли;	
	
	
	Для каждого СтрокаТабЧасти Из ТабЧасть Цикл
		
		Если СтрокаТабЧасти.ОбработкаВыполнена Тогда
			ЕстьОбработанные = Истина;
		Иначе
			ЕстьНеОбработанные = Истина;	
		КонецЕсли;
		
		Если ЕстьОбработанные И ЕстьНеОбработанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура помещает в переменные ФлагВыполнения, ТабЧасть и признак заполнения данных 
// и реквизит-источник данных (ТаблицаЗначений, ДеревоЗначений).
//
&НаСервере
Процедура ОпределитьФлагИТабЧастьПоРазделу(ФлагВыполнения, ТабЧасть)
	
	Если ТекущийРазделУчета = "РасчетыСПоставщиками" Тогда
		
		ФлагВыполнения = РасчетыСПоставщикамиЗаполнялось;
		ТабЧасть = РасчетыСПоставщиками;
		
	ИначеЕсли ТекущийРазделУчета = "РасчетыСПокупателями" Тогда
		
		ФлагВыполнения = РасчетыСПокупателямиЗаполнялось;
		ТабЧасть = РасчетыСПокупателями;
		
	ИначеЕсли ТекущийРазделУчета = "НоменклатураБезСпецификаций" Тогда
		
		ФлагВыполнения = НоменклатураБезСпецификацийЗаполнялось;
		ТабЧасть = НоменклатураБезСпецификаций;
		
	ИначеЕсли ТекущийРазделУчета = "ОтчетыПерерБезСпецификаций" Тогда
		
		ФлагВыполнения = ОтчетыПерерБезСпецификацийЗаполнялось;
		ТабЧасть = ОтчетыПереработчиковСпецификации;
		
	ИначеЕсли ТекущийРазделУчета = "ОтчетыПерерНесоответСписаний" Тогда
		
		ФлагВыполнения = ОтчетыПереработчиковНесоответствияЗаполнялось;
		ТабЧасть = ОтчетыПереработчиковНесоответствия;
		
	ИначеЕсли ТекущийРазделУчета = "ДокПроизводствоБезСпецификаций" Тогда
		
		ФлагВыполнения = ДокПроизводствоСпецификацииЗаполнялось;
		ТабЧасть = ДокПроизводствоСпецификации;
		
	ИначеЕсли ТекущийРазделУчета = "ДокПроизводствоНесоответСписаний" Тогда
		
		ФлагВыполнения = ДокПроизводствоНесоответствияЗаполнялось;
		ТабЧасть = ДокПроизводствоНесоответствия;
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура анализирует состояние данных по переданному реквизиту-источнику данных.
//
&НаСервере
Процедура ОпределитьСостояниеВыполненияПоТабЧасти(ЕстьОбработанные, ЕстьНеОбработанные, ТабЧасть)
	
	Для каждого СтрокаТабЧасти Из ТабЧасть Цикл
		
		Если СтрокаТабЧасти.ОбработкаВыполнена Тогда
			ЕстьОбработанные = Истина;
		Иначе
			ЕстьНеОбработанные = Истина;	
		КонецЕсли;
		
		Если ЕстьОбработанные И ЕстьНеОбработанные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Функция формирует представление документа из ссылки.
//
&НаСервереБезКонтекста
Функция СформироватьПредставлениеДокумента(ДокументСсылка)
	
	ПредставлениеДокумента = ДокументСсылка.Метаданные().Синоним;
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДокументСсылка.Номер);
	
	ПредставлениеДокумента = ПредставлениеДокумента + " № "
	+ НомерДокумента
	+ " от "
	+ Формат(ДокументСсылка.Дата, "ДЛФ=DD");
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

// Функция возвращает номер строки табличного из имени выделенной области.
//
&НаСервереБезКонтекста
Функция ПолучитьТекСтрокуИзИмениОбласти(ИмяОбласти)
	
	ИмяСтроки = "";
	
	Для Сч = 1 По СтрДлина(ИмяОбласти) Цикл
		
		ТекСимвол = Сред(ИмяОбласти, Сч, 1);
		
		Если ТекСимвол <> "C" Тогда
			ИмяСтроки = ИмяСтроки + ТекСимвол;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяСтроки;
	
КонецФункции // ()

// Обработка строк-разделов, подчиненных разделу "Номенклатура без спецификаций".
// Вызывается при модификации данных по вышеукзанному разделу
//
&НаКлиенте
Процедура ИзменитьПодчиненныеНоменклатураБезСпецификаций()
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	Строки_Уровень1 = ТекущаяСтрокаДерева.ПолучитьЭлементы();
	
	Для каждого Строка_Уровень1 Из Строки_Уровень1 Цикл
		
		Строка_Уровень1.АнализВыполнен = Ложь;
		
		Строка_Уровень1.ИндексКартинки = 0; 
		
		Строки_Уровень2 = Строка_Уровень1.ПолучитьЭлементы();
		
		Для каждого Строка_Уровень2 Из Строки_Уровень2 Цикл
			Строка_Уровень2.АнализВыполнен = Ложь;
			Строка_Уровень2.РазделРодительВыведен = Ложь;
			Строка_Уровень2.ИндексКартинки = 0;
		КонецЦикла; 
		
	КонецЦикла; 
	
	Если ОтчетыПерерБезСпецификацийЗаполнялось Тогда
		
		ОтчетыПереработчиковСпецификации.Очистить();
		ОтчетыПерерБезСпецификацийЗаполнялось = Ложь;
		
		Если ОтчетыПереработчиковНесоответствияЗаполнялось Тогда
			ОтчетыПереработчиковНесоответствия.Очистить();
			ОтчетыПереработчиковНесоответствияЗаполнялось = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокПроизводствоСпецификацииЗаполнялось Тогда
		
		ДокПроизводствоСпецификации.Очистить();
		ДокПроизводствоСпецификацииЗаполнялось = Ложь;
		
		Если ДокПроизводствоНесоответствияЗаполнялось Тогда
			
			ДокПроизводствоНесоответствия.Очистить();
			ДокПроизводствоНесоответствияЗаполнялось = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка строк-разделов, подчиненных разделу "Отчеты переработчиков без спецификаций".
// Вызывается при модификации данных по вышеукзанному разделу
//
&НаКлиенте
Процедура ИзменитьПодчиненныеОтчетыПерерБезСпецификаций()
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	Строки_Уровень2 = ТекущаяСтрокаДерева.ПолучитьЭлементы();
	
	Для каждого Строка_Уровень2 Из Строки_Уровень2 Цикл
		Строка_Уровень2.АнализВыполнен = Ложь;
		Строка_Уровень2.ИндексКартинки = 0;
	КонецЦикла;
	
	Если ОтчетыПереработчиковНесоответствияЗаполнялось Тогда
		ОтчетыПереработчиковНесоответствия.Очистить();
		ОтчетыПереработчиковНесоответствияЗаполнялось = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработка строк-разделов, подчиненных разделу "Документы ""Производство"" без спецификаций".
// Вызывается при модификации данных по вышеукзанному разделу
//
&НаКлиенте
Процедура ИзменитьПодчиненныеДокПроизводствоБезСпецификаций()
	
	ТекущаяСтрокаДерева = Элементы.ДеревоРазделов.ТекущиеДанные;
	
	Строки_Уровень2 = ТекущаяСтрокаДерева.ПолучитьЭлементы();
	
	Для каждого Строка_Уровень2 Из Строки_Уровень2 Цикл
		Строка_Уровень2.АнализВыполнен = Ложь;
		Строка_Уровень2.ИндексКартинки = 0;
	КонецЦикла;
	
	Если ДокПроизводствоНесоответствияЗаполнялось Тогда
		ДокПроизводствоНесоответствия.Очистить();
		ДокПроизводствоНесоответствияЗаполнялось = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура сохраняет дату и событие изменения (запись, проведение) конкретного объекта
// информационной базы
//
&НаСервере
Процедура ЗаписатьИсториюИзмененияОбъекта(ОбъектСсылка, Событие, Комментарий)
	
	ЗаписьЖурналаРегистрации("КонтрольПравильностиУчета. " + Событие, УровеньЖурналаРегистрации.Информация, ,ОбъектСсылка, Комментарий);
	
КонецПроцедуры

// Процедура инвертирует видимость области ячеек табличного документа.
// Имя области должно содержаться в поле "Маска" передаваемой области, т.е. той, по которой
// было выполнено нажатие.
//
&НаСервере
Процедура Подключаемый_ИзменитьВидимостьОбластиЯчеек(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	Если ТекОбласть.Маска <> "" Тогда
		ДокументРезультат.Область(ТекОбласть.Маска).Видимость = (НЕ ДокументРезультат.Область(ТекОбласть.Маска).Видимость);
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает новое окно формы ФормаОтчета
//
&НаКлиенте
Процедура ОткрытьФормуОтчета(ПараметрыФормы, ОбрабатыватьРасшифровки = Ложь)
	
	КлючФормы = "КонтрольПравильностиУчета_ФормаОтчета";
	
	ПараметрыФормы.Вставить("ОбрабатыватьРасшифровки", ОбрабатыватьРасшифровки);
	
	ФормаОтчета = ПолучитьФорму("Обработка.КонтрольПравильностиУчета.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, КлючФормы);
	
	Если ФормаОтчета.Открыта() Тогда
		ФормаОтчета.Закрыть();
		ФормаОтчета = Неопределено;
		ФормаОтчета = ПолучитьФорму("Обработка.КонтрольПравильностиУчета.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, КлючФормы);
	КонецЕсли;
	
	ОткрытьФорму(ФормаОтчета);
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку "Открыть справочник "Статьи ДДС"" раздела «Статьи движения денежных средств».
//
&НаКлиенте
Процедура ОткрытьСправочникСтатьиДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2;
	
	ОткрытьФорму("Справочник.СтатьиДвиженияДенежныхСредств.ФормаСписка");	
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку статьи ДДС для формирования отчета по конкретной статье.
//
&НаКлиенте
Процедура ВывестиОтчетСтатьяДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	ВариантПереопределения = 2; 
	
	СтрокаЯчейкиСсылки = СтрЗаменить(ПолучитьТекСтрокуИзИмениОбласти(ТекОбласть.Имя), "R", "");	
	
	АдресВХранилище = СформироватьТаблицуДанныхОтчетаСтатьиДДС(СтрокаЯчейкиСсылки);
	
	Если АдресВХранилище <> "" Тогда
		ПараметрыФормы = Новый Структура("ВидОтчета, АдресВХранилище", "СтатьиДДС", АдресВХранилище);
		ОткрытьФормуОтчета(ПараметрыФормы, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует таблицу данных для отчета о движениях по конкретной статье ДДС.
//
&НаСервере
Функция СформироватьТаблицуДанныхОтчетаСтатьиДДС(СтрокаЯчейкиСсылки = "")
	
	Если СтрокаЯчейкиСсылки = "" Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСсылкаСтатья = ДокументРезультат.Область(СтрокаЯчейкиСсылки, 1, СтрокаЯчейкиСсылки, 1).Маска;
	
	Если СтрокаСсылкаСтатья = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Статья");
	ТаблицаДанных.Колонки.Добавить("Регистратор");
	ТаблицаДанных.Колонки.Добавить("СуммаПриход");
	ТаблицаДанных.Колонки.Добавить("СуммаРасход");
	ТаблицаДанных.Колонки.Добавить("Валюта");
	
	ТекСтатья = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаСсылкаСтатья));
	
	Для каждого Строка_Уровень1 Из СтатьиДДС.ПолучитьЭлементы() Цикл
		
		Для каждого Строка_Уровень2 Из Строка_Уровень1.ПолучитьЭлементы() Цикл
			
			Если Строка_Уровень2.Статья = ТекСтатья Тогда
				
				Для каждого Строка_Уровень3 Из Строка_Уровень2.ПолучитьЭлементы() Цикл //Валюта
					
					Для каждого Строка_Уровень4 Из Строка_Уровень3.ПолучитьЭлементы() Цикл //Регистратор
						
						НоваяСтрока = ТаблицаДанных.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка_Уровень4);
						
					КонецЦикла;	
					
				КонецЦикла; 
				
			КонецЕсли;
			
		КонецЦикла; 	
		
	КонецЦикла; 
	
	АдресВХранилище = "";	
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаДанных);
	КонецЕсли;
	
	Возврат АдресВХранилище;	
	
КонецФункции // ()

&НаСервере
Процедура ИзменитьПериод(КоличествоМесяцев)
	
	НачалоПериода = ДобавитьМесяц(НачалоПериода, КоличествоМесяцев);
	КонецПериода = КонецМесяца(НачалоПериода);
	
	УстановитьПредставлениеПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроцедуруНаВебКлиенте(ТекстВызоваПроцедуры, ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)
	
	Если ТекстВызоваПроцедуры = "ВыполнитьОбновлениеДанных(ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВыполнитьОбновлениеДанных(ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВыполнитьПереходКСледующемуРазделу(ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВыполнитьПереходКСледующемуРазделу(ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетПоВзаиморасчетам(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетПоВзаиморасчетам(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетКурсовыеРазницыДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетКурсовыеРазницыДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетКурсовыеРазницыПокупатели(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетКурсовыеРазницыПокупатели(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетКурсовыеРазницыПоставщики(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетКурсовыеРазницыПоставщики(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ОткрытьСписокСпецификаций(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ОткрытьСписокСпецификаций(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВыбратьУстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВыбратьУстановитьСпецификациюПоУмолчанию(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетПоНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетПоНесоотвОтчетПереаб(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетДокПроизводствоСпецификации(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетДокПроизводствоСпецификации(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетПоНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетПоНесоотвДокПроизводство(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетАнализЦенПоНоменклатуре(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетАнализЦенПоНоменклатуре(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ОткрытьСправочникСтатьиДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ОткрытьСправочникСтатьиДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиОтчетСтатьяДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные)" Тогда
		
		ВывестиОтчетСтатьяДДС(ТекОбласть, ВариантПереопределения, БылиИзмененыДанные);
		
	ИначеЕсли ТекстВызоваПроцедуры = "ВывестиПодробноеОписание(ВариантПереопределения, БылиИзмененыДанные)" Тогда 
		
		ВывестиПодробноеОписание(ВариантПереопределения, БылиИзмененыДанные);
		
	Иначе
		
		ВызватьИсключение ТекстВызоваПроцедуры + " - обработчик не определен для веб-клиента";
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

