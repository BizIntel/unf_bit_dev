
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбрабатыватьРасшифровки = Параметры.ОбрабатыватьРасшифровки;
	
	Если Параметры.ВидОтчета = "Взаиморасчеты" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: взаиморасчеты";
		ВывестиОтчетВзаиморасчеты();
	ИначеЕсли Параметры.ВидОтчета = "НесоответствияСписанийСпецификациям" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: несоответствия фактических списаний спецификациям";
		ВывестиНесоответствияСписанийСпецификациям();
	ИначеЕсли Параметры.ВидОтчета = "ПредлагаемаяСпецификацииПроизводство" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: предлагаемые спецификации для установки в таб. часть ""Продукция""";
		ВывестиПредлагаемаяСпецификацииПроизводство();
	ИначеЕсли Параметры.ВидОтчета = "АнализЗакупочныхЦен" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: анализ закупочных цен";
		ВывестиАнализЗакупочныхЦен();
	ИначеЕсли Параметры.ВидОтчета = "КурсовыеРазницы" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: курсовые разницы";
		ВывестиКурсовыеРазницы();
	ИначеЕсли Параметры.ВидОтчета = "СтатьиДДС" Тогда
		ЭтаФорма.Заголовок = "Помощник анализа ведения учета: перечень документов за период";
		ВывестиСтатьиДДС();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события ОбработкаРасшифровки табличного документа ДокументРезультат.
//
&НаКлиенте
Процедура ДокументРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОбрабатыватьРасшифровки Тогда
		
		ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Расшифровка);
		
		Если ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ПоказатьЗначение(Неопределено, ЗначениеРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТОВ

// Формирует и выводит отчет по взаиморасчетам.
//
&НаСервере
Процедура ВывестиОтчетВзаиморасчеты()

	ОтчетОбъектВзаиморасчеты = Отчеты.Взаиморасчеты.Создать();
	СхемаКомпоновки = ОтчетОбъектВзаиморасчеты.СхемаКомпоновкиДанных;
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", Параметры.НачалоПериода);
	НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", КонецДня(Параметры.КонецПериода));
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Параметры.КонтрагентСсылка;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Параметры.Организация;
	ЭлементОтбора.Использование = Истина;
	
	НастройкиКомпоновки.Структура.Очистить();
	
	ГруппировкаКонтрагент = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКонтрагент.Использование = Истина;
	ПолеКонтрагент = ГруппировкаКонтрагент.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеКонтрагент.Использование = Истина;
	ПолеКонтрагент.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
	ВыбранныеПоляДляКонтрагента = ГруппировкаКонтрагент.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	
	ГруппировкаВалюта = НастройкиКомпоновки.Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаВалюта.Использование = Истина;
	ПолеВалюта = ГруппировкаВалюта.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеВалюта.Использование = Истина;
	ПолеВалюта.Поле = Новый ПолеКомпоновкиДанных("Валюта");
	ВыбранныеПоляДляВалюты = ГруппировкаВалюта.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ГруппировкаДоговор = НастройкиКомпоновки.Структура[0].Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДоговор.Использование = Истина;
	ПолеДоговор = ГруппировкаДоговор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеДоговор.Использование = Истина;
	ПолеДоговор.Поле = Новый ПолеКомпоновкиДанных("Договор");
	ВыбранныеПоляДляДоговора = ГруппировкаДоговор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ГруппировкаЗаказ = НастройкиКомпоновки.Структура[0].Структура[0].Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаЗаказ.Использование = Истина;
	ПолеЗаказ = ГруппировкаЗаказ.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеЗаказ.Использование = Истина;
	ПолеЗаказ.Поле = Новый ПолеКомпоновкиДанных("Заказ");
	ВыбранныеПоляДляЗаказа = ГруппировкаЗаказ.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ГруппировкаТипРасчетов = НастройкиКомпоновки.Структура[0].Структура[0].Структура[0].Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаТипРасчетов.Использование = Истина;
	ПолеТипРасчетов = ГруппировкаТипРасчетов.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеТипРасчетов.Использование = Истина;
	ПолеТипРасчетов.Поле = Новый ПолеКомпоновкиДанных("ТипРасчетов");
	ВыбранныеПоляДляТипРасчетов = ГруппировкаТипРасчетов.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	
	ГруппировкаДокумент = НастройкиКомпоновки.Структура[0].Структура[0].Структура[0].Структура[0].Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДокумент.Использование = Истина;
	ПолеДокумент = ГруппировкаДокумент.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеДокумент.Использование = Истина;
	ПолеДокумент.Поле = Новый ПолеКомпоновкиДанных("Документ");
	ВыбранныеПоляДляДокумента = ГруппировкаДокумент.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ГруппировкаРегистратор = НастройкиКомпоновки.Структура[0].Структура[0].Структура[0].Структура[0].Структура[0].Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаРегистратор.Использование = Истина;
	ПолеРегистратор = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеРегистратор.Использование = Истина;
	ПолеРегистратор.Поле = Новый ПолеКомпоновкиДанных("Регистратор");
	ВыбранныеПоляДляРегистратор = ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);

КонецПроцедуры

// Формирует и выводит отчет по несоответствиям фактических списаний спецификациям.
//
&НаСервере
Процедура ВывестиНесоответствияСписанийСпецификациям()
	
	ТаблицаРасхождений = ДанныеФормыВЗначение(Параметры.ТаблицаРасхождений, Тип("ТаблицаЗначений"));
	ТаблицаРасхождений.Колонки.Добавить("ДокументСсылка");
	
	Для каждого СтрокаТаблицы Из ТаблицаРасхождений Цикл
		СтрокаТаблицы.ДокументСсылка = Параметры.ДокументСсылка;	
	КонецЦикла; 

	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("НесоответствияСписанийСпецификациям");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаВнешнихДанных", ТаблицаРасхождений);
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);

КонецПроцедуры

// Выводит перечень предлагаемых спецификаций по конкретному документу "СборкаЗапасов"
//
&НаСервере
Процедура ВывестиПредлагаемаяСпецификацииПроизводство()

	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПредлагаемаяСпецификацииПроизводство");
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	МакетКомпоновки.ЗначенияПараметров["ДокументСсылка"].Значение = Параметры.ДокументСсылка;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ,ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);

КонецПроцедуры

// Формирует и выводит отчет по истории закупочных цен 
// для определенной номенклатуры.
//
&НаСервере
Процедура ВывестиАнализЗакупочныхЦен()
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
	
	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("АнализЗакупочныхЦен");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаВнешнихДанных", ТаблицаДанных);
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);

КонецПроцедуры

// Формирует и выводит отчет, содержащий документы, в рамках которых обнаружены
// ошибки по курсовым разницам.
//
&НаСервере
Процедура ВывестиКурсовыеРазницы()
	
	ТаблицаДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
	
	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КурсовыеРазницы");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаВнешнихДанных", ТаблицаДанных);
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура ВывестиСтатьиДДС()

	ТаблицаДанных = ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище);
	
	СхемаКомпоновки = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СтатьиДДС");
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаВнешнихДанных", ТаблицаДанных);
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	АдресРасшифровок = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);	

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Функция возвращает значение расшифровки по переданному идентификатору.
//
&НаСервере
Функция ПолучитьЗначениеРасшифровки(Расшифровка)
	
	ЗначениеРасшифровки = Неопределено;
	
	Если ЗначениеЗаполнено(АдресРасшифровок) Тогда
		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровок);
		
		ПоляРасшифроки = ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
		ЗначениеРасшифровки = ?(ПоляРасшифроки.Количество() = 0, Неопределено, ПоляРасшифроки[0].Значение);
		
	КонецЕсли;
	
    Возврат ЗначениеРасшифровки;
	
КонецФункции

