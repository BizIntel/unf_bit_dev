

#Область ОбработчикиСобытийФормы

&НаКлиенте
Перем ФормаДлительнойОперации, 
	ИнтервалПроверкиИмениСайта, 
	ИнтервалПроверкиСозданияСайта, 
	РазрешенныеСимволыИмениСайта,
	ДанныеСозданияСайтаСтруктура;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	
	//Получить организацию для формирования имени сайта
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ТекПользователь,
		"ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	//Получить email для регистрации сайта
	EmailРегистрацииСайта = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(
		ТекПользователь, 
		Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
	ВидЦен = Справочники.ВидыЦен.Оптовая;
	ИмяСайта = ПолучитьИмяСайтаИзИмениОрганизации();
	ПринимаюСоглашение = Истина;
	ЗаполнитьГруппыКатегории();
	
	ТипСайта = 4;
	Элементы["КартинкаТипСайта"+ТипСайта].Ширина	= 27;
	Элементы["КартинкаТипСайта"+ТипСайта].Высота	= 15;
	Элементы["КартинкаТипСайта"+ТипСайта].Картинка = БиблиотекаКартинок["Сайт"+ТипСайта+"_2"];
	
	НадписьИмяСайтаДоступно = ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно);
	
	//Загрузить виды бизнеса
	ПараметрыОткрытия = Новый Структура;
	НачалоРаботыСПрограммойПереопределяемый.ДозаполнитьПараметрыОткрытияФормы(ПараметрыОткрытия,);
	ВидыБизнесаТЗ = ПолучитьИзВременногоХранилища(ПараметрыОткрытия.ВидыБизнесаАдресВХранилище);
	ВидыБизнеса.Загрузить(ВидыБизнесаТЗ);
	
	//Загрузить шаблоны сайтов
	ЗагрузитьШаблоныССайта();
	
	Элементы.ШаблонСайтаКартинка.Видимость = Ложь;
	
	ВидБизнесаКонстанта = Константы.ВидБизнесаОрганизации.Получить();
	Если ЗначениеЗаполнено(ВидБизнесаКонстанта) Тогда
		ВидБизнесаМассив = ВидыБизнеса.НайтиСтроки(Новый Структура("Идентификатор",ВидБизнесаКонстанта));
		Если ВидБизнесаМассив.Количество()>0 Тогда
			ШаблонСайтаОписание = ВидБизнесаМассив[0].Наименование;
			ДанныеВыбора = ОбновитьСписокШаблоновСайтов(ШаблонСайтаОписание);
			Если ДанныеВыбора.Количество()>0 Тогда
				ШаблонСайтаОписание = ДанныеВыбора[0].Значение;
				ПодгрузитьКартинку(ШаблонСайтаОписание);
			Иначе
				ШаблонСайтаОписание = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипСайтаПоНомеру(Номер)
	
	Если Номер=4 Тогда
		ОтборТипСайта = 11;
	ИначеЕсли Номер=3 Тогда
		ОтборТипСайта = 2;
	ИначеЕсли Номер=2 Тогда
		ОтборТипСайта = 10;
	ИначеЕсли Номер=1 Тогда
		ОтборТипСайта = 1;
	КонецЕсли;
	
	Возврат ОтборТипСайта; 
	
КонецФункции

Функция ОбновитьСписокШаблоновСайтов(ВыбранноеЗначение)
	
	Если СтрДлина(СокрЛП(ВыбранноеЗначение))<3 Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыБизнеса.Наименование,
	|	ВидыБизнеса.Синонимы
	|ПОМЕСТИТЬ ВТВидыБизнеса
	|ИЗ
	|	&ВидыБизнеса КАК ВидыБизнеса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТВидыБизнеса.Синонимы
	|ИЗ
	|	ВТВидыБизнеса КАК ВТВидыБизнеса
	|ГДЕ
	|	Истина";
	
	Запрос.УстановитьПараметр("ВведенныйТекст", ВыбранноеЗначение);
	Запрос.УстановитьПараметр("ВидыБизнеса", ВидыБизнеса.Выгрузить());
	
	ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, ","," ");
	ВыбранноеЗначение = СтрЗаменить(ВыбранноеЗначение, "."," ");
	МассивСлов = СтрРазделить(ВыбранноеЗначение, " ", Ложь);
	
	Для н=1 По МассивСлов.Количество() Цикл
		Если СтрДлина(МассивСлов[н-1])<4 Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Парам"+н, "%"+МассивСлов[н-1]+"%");
		
		Запрос.Текст = Запрос.Текст + ?(н=1, " И ", " ИЛИ ")+ "ВТВидыБизнеса.Синонимы ПОДОБНО &Парам"+н;
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СловаСинономы = Новый Соответствие;
	
	//Если синонимов очень много, значит введенный текст не релевантен (подходит сразу для всех бизнесов), тогда синонимы не используем, ищем по прямому вхождению введенного текста в имя шаблона
	Если Выборка.Количество()<100 Тогда
		Пока Выборка.Следующий() Цикл
			МассивСловВыборки = СтрРазделить(Выборка.Синонимы, " ", Ложь);
			Для каждого стр Из МассивСловВыборки Цикл
				Если ТипСайта=4 И НРег(стр)="интернет" ИЛИ НРег(стр)="магазин" Тогда
					//эти слова есть в каждом шаблоне интернет-магазина
					Продолжить;
				ИначеЕсли НРег(стр)="сайт" ИЛИ НРег(стр)="адаптивный" Тогда
					//эти слова есть в каждом шаблоне
					Продолжить;
				КонецЕсли;
				
				Если СтрДлина(стр)>2 Тогда
					СловаСинономы.Вставить(стр);	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	
	СписокВыбранныхСлов = СтрРазделить(ВыбранноеЗначение, " ", Ложь);
	Для каждого ВыбСлово Из СписокВыбранныхСлов Цикл
		Если СтрДлина(ВыбСлово)<3 Тогда
			Продолжить;
		КонецЕсли;
		
		СловаСинономы.Вставить(ВыбСлово);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШАблоныСайтов.Идентификатор,
	|	ШАблоныСайтов.Наименование,
	|	ШАблоныСайтов.Картинка,
	|	ШАблоныСайтов.ТипСайта
	|ПОМЕСТИТЬ ВТШАблоныСайтов
	|ИЗ
	|	&ШАблоныСайтов КАК ШАблоныСайтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТШАблоныСайтов.Идентификатор,
	|	ВТШАблоныСайтов.Наименование,
	|	ВТШАблоныСайтов.Картинка,
	|	ВТШАблоныСайтов.ТипСайта
	|ИЗ
	|	ВТШАблоныСайтов КАК ВТШАблоныСайтов
	|ГДЕ
	|	ВТШАблоныСайтов.ТипСайта = &ТипСайта";
	
	Запрос.УстановитьПараметр("ТипСайта", ТипСайтаПоНомеру(ТипСайта));
	Запрос.УстановитьПараметр("ШАблоныСайтов", ШаблоныСайтов.Выгрузить());
	
	н=1;
	Для каждого стр Из СловаСинономы Цикл
		
		Если н>300 Тогда
			Прервать;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Парам"+н, "%"+стр.Ключ+"%");
		Запрос.Текст = Запрос.Текст + ?(н=1, " И (", " ИЛИ ")+ "ВТШАблоныСайтов.Наименование ПОДОБНО &Парам"+н;
		
		н=н+1;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + ?(н=1, "", " )");
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	СписокШаблонов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокШаблонов.Добавить(Выборка.Наименование);
	КонецЦикла;
	
	Возврат СписокШаблонов;
	
КонецФункции

Процедура ЗагрузитьШаблоныССайта()

	АдресЗапроса = "http://api.umi.ru/get_design_templates_list";
		
	ОписаниеОшибки = "";
	ОтветСервера = "";
	Соединение = Неопределено;
	
	ПараметрыПодключения = Новый Структура("АдресСайта, ИмяПользователя, Пароль", АдресЗапроса,"","");
	ОбменССайтом.ПолучитьНастройкиПодключения(ПараметрыПодключения, ОписаниеОшибки);
	
	ОбменССайтом.ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки);
	Если ЗначениеЗаполнено(ОтветСервера) И Лев(ОтветСервера,2)="{""" Тогда 
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ОтветСервера);
		Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Если ТипЗнч(Результат)=Тип("Соответствие") Тогда
			
			РезультатДанные = Результат.Получить("result");
			
			Шаблоны = РезультатДанные.Получить("templates");
			ТаблицаШаблонов = СоответствиеВТЗ(Шаблоны);
			
			Для каждого стр Из ТаблицаШаблонов Цикл
			
				НовСтр = ШаблоныСайтов.Добавить();
				НовСтр.Наименование = стр.description;
				НовСтр.Идентификатор = стр.data;
				НовСтр.ТипСайта = стр.appId;
				НовСтр.Картинка = стр.img;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СоответствиеВТЗ(МассивЗначений) 
	
	ТЗ = Новый ТаблицаЗначений;
	
	Если МассивЗначений.Количество()=0 Тогда
		возврат ТЗ;
	КонецЕсли;
	
	Для каждого элСоответствия Из МассивЗначений[0] Цикл
		ТЗ.Колонки.Добавить(элСоответствия.Ключ);
	КонецЦикла; 
	Для каждого стр Из МассивЗначений Цикл
		НовСтр=ТЗ.Добавить();
		Для каждого ЭлКлюч Из стр Цикл
			НовСтр[ЭлКлюч.Ключ] = ЭлКлюч.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура ШаблонСайтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И СтрДлина(СокрЛП(Текст))>=3 Тогда
		СтандартнаяОбработка = Ложь;
		Элементы.ШаблонСайтаКартинка.Видимость = Ложь;
		ШаблонСайтаНомер = 0;
		
		ДанныеВыбора = ОбновитьСписокШаблоновСайтов(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяСайтаИзИмениОрганизации()
	
	ИмяСайтаТекст = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ОсновнаяОрганизация.Наименование);
	ИмяСайтаТекст = УбратьЗапрещенныеСимволы(ИмяСайтаТекст, "qwertyuiopasdfghjklzxcvbnm01234567890-");
	
	Возврат ИмяСайтаТекст;

КонецФункции

&НаСервере
Функция УбратьЗапрещенныеСимволы(Текст, Разрешенные)
	
	Результат = Текст;
	Для Сч = 1 По СтрДлина(Текст) Цикл
		ТекСимвол = Сред(Текст, Сч, 1);
		Если СтрНайти(Разрешенные, НРег(ТекСимвол))=0 Тогда
			Результат = СтрЗаменить(Результат, ТекСимвол,"");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппыКатегории()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) КАК КоличествоГрупп,
	|	0 КАК КоличествоКатегорий
	|ПОМЕСТИТЬ втКоличества
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КатегорииНоменклатуры.Ссылка)
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК КатегорииНоменклатуры
	|ГДЕ
	|	КатегорииНоменклатуры.Ссылка <> ЗНАЧЕНИЕ(Справочник.КатегорииНоменклатуры.БезКатегории)
	|	И НЕ КатегорииНоменклатуры.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втКоличества.КоличествоГрупп) КАК КоличествоГрупп,
	|	СУММА(втКоличества.КоличествоКатегорий) КАК КоличествоКатегорий
	|ИЗ
	|	втКоличества КАК втКоличества";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КоличествоГрупп = Выборка.КоличествоГрупп;
		КоличествоКатегорий = Выборка.КоличествоКатегорий;
		ВсегоГруппКатегорий = КоличествоКатегорий + КоличествоГрупп;
	КонецЦикла;
	
	Если ВсегоГруппКатегорий = 0 Тогда
		ОтборКатегорииГруппыПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
		Элементы.ГруппаВыбратьНоменклатуру.Видимость = Ложь;
		Элементы.ОтборКатегорииГруппыПереключатель.Видимость = Ложь;
		Элементы.СтраницыКатегорииИерархия.Видимость = Ложь;
		Элементы.ГруппаВыбратьНоменклатуру.ОтображатьЗаголовок = Ложь;
	ИначеЕсли КоличествоГрупп = 0 Тогда
	    ОтборКатегорииГруппыПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
		Элементы.ОтборКатегорииГруппыПереключатель.Видимость = Ложь;
		Элементы.ГруппаВыбратьНоменклатуру.Заголовок = НСтр("ru = 'Выберите категории номенклатуры для переноса на сайт'");
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		
		ЗаполнитьДеревоКатегорий();
		
		ВысотаКатегорий = ОтборКатегории.ПолучитьЭлементы().Количество();
		ВысотаКатегорий = Макс(5, ВысотаКатегорий);
		ВысотаКатегорий = Мин(12, ВысотаКатегорий);
		Элементы.ОтборКатегории.ВысотаВСтрокахТаблицы = ВысотаКатегорий;
		
	ИначеЕсли КоличествоКатегорий = 0 Тогда
	    ОтборКатегорииГруппыПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры;
		Элементы.ОтборКатегорииГруппыПереключатель.Видимость = Ложь;
		Элементы.ГруппаВыбратьНоменклатуру.Заголовок = НСтр("ru = 'Выберите группы номенклатуры для переноса на сайт'");
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ГруппыОтбор;
		
		ЗаполнитьДеревоГрупп();
		
	Иначе
		//всё показываем, открываем страницу с категориями
		ОтборКатегорииГруппыПереключатель = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры;
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
		
		ЗаполнитьДеревоГрупп();
		ЗаполнитьДеревоКатегорий();
		
		ВысотаКатегорий = ОтборКатегории.ПолучитьЭлементы().Количество();
		ВысотаКатегорий = Макс(5, ВысотаКатегорий);
		ВысотаКатегорий = Мин(12, ВысотаКатегорий);
		Элементы.ОтборКатегории.ВысотаВСтрокахТаблицы = ВысотаКатегорий;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазрешенныеСимволыИмениСайта = Новый Соответствие;
	СтрСимволы = "qwertyuiopasdfghjklzxcvbnm01234567890-";
	Для н=1 По СтрДлина(СтрСимволы) Цикл
		РазрешенныеСимволыИмениСайта.Вставить(Сред(СтрСимволы, н, 1), Истина);
	КонецЦикла;
	
	ИнтервалПроверкиИмениСайта = 2;
	ИнтервалПроверкиСозданияСайта = 4;
	ПодключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта", 0.1, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоГрупп()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Значение,
	|	Номенклатура.Наименование КАК Представление,
	|	ВЫБОР
	|		КОГДА Номенклатура.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Картинка,
	|	ИСТИНА КАК Флаг
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Наименование ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокаВсеГруппы = Дерево.Строки.Вставить(0);
	СтрокаВсеГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаВсеГруппы.Представление= НСтр("ru = '<Все группы>'");
	СтрокаВсеГруппы.Флаг = Истина;
	
	СтрокаВсеГруппы = Дерево.Строки.Добавить();
	СтрокаВсеГруппы.Значение	 = Справочники.Номенклатура.ПустаяСсылка();
	СтрокаВсеГруппы.Представление= НСтр("ru = '<Нет группы>'");
	СтрокаВсеГруппы.Флаг = Истина;
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборИерархия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоКатегорий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Значение,
	|	Номенклатура.Наименование КАК Представление,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	Истина КАК Флаг
	|ИЗ
	|	Справочник.КатегорииНоменклатуры КАК Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура.Наименование ИЕРАРХИЯ";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокаВсеГруппы = Дерево.Строки.Вставить(0);
	СтрокаВсеГруппы.Значение	 = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
	СтрокаВсеГруппы.Представление= НСтр("ru = '<Все категории>'");
	СтрокаВсеГруппы.Флаг = Истина;
	
	ЗначениеВРеквизитФормы(Дерево,"ОтборКатегории");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииВыбранПриИзменении()
	
	ПометкаИерархииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаИерархииПриИзменении()
	
	ТекущиеДанные = Элементы.ОтборИерархия.ТекущиеДанные;
	Если ТекущиеДанные.Представление = НСтр("ru = '<Все группы>'") Тогда
		//Все элементы дерева
		РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ОтборИерархия.ПолучитьЭлементы(), "Флаг", ТекущиеДанные.Флаг);
	Иначе	
		РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ТекущиеДанные.ПолучитьЭлементы(), "Флаг", ТекущиеДанные.Флаг);
		Если ТекущиеДанные.Флаг = Ложь Тогда
			РаботаСНоменклатуройКлиентСервер.УстановитьФлагУРодителей(ТекущиеДанные, "Флаг", Ложь);
			ЭлементВсеГруппы = ОтборИерархия.НайтиПоИдентификатору(0);
			ЭлементВсеГруппы.Флаг = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорииВыбранПриИзменении()
	
	ПометкаКатегорииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаКатегорииПриИзменении()
	
	ТекущиеДанные = Элементы.ОтборКатегории.ТекущиеДанные;
	Если ТекущиеДанные.Значение = ПредопределенноеЗначение("Справочник.КатегорииНоменклатуры.ПустаяСсылка") Тогда
		//Все элементы дерева
		РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ОтборКатегории.ПолучитьЭлементы(), "Флаг", ТекущиеДанные.Флаг);
	Иначе	
		РаботаСНоменклатуройКлиентСервер.УстановитьФлагУПодчиненных(ТекущиеДанные.ПолучитьЭлементы(), "Флаг", ТекущиеДанные.Флаг);
		Если ТекущиеДанные.Флаг = Ложь Тогда
			РаботаСНоменклатуройКлиентСервер.УстановитьФлагУРодителей(ТекущиеДанные, "Флаг", Ложь);
			ЭлементВсеКатегории = ОтборКатегории.НайтиПоИдентификатору(0);
			ЭлементВсеКатегории.Флаг = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорииИерархияПереключательПриИзменении(Элемент)
	
	Если ОтборКатегорииГруппыПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.КатегорииНоменклатуры") Тогда
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.КатегорииОтбор;
	ИначеЕсли ОтборКатегорииГруппыПереключатель = ПредопределенноеЗначение("Перечисление.ВидыОтборовНоменклатуры.ГруппыНоменклатуры") Тогда
		Элементы.СтраницыКатегорииИерархия.ТекущаяСтраница = Элементы.ГруппыОтбор;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьСайтВФоне()
	
	ИдентификаторКоманды = "Обработки.СоздатьСайт.СоздатьСайт";
	Заголовок = НСтр("ru = 'Создание сайта'");
	
	ПараметрыСозданияСайта = ПараметрыСозданияСайта();
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ЭтаФорма.УникальныйИдентификатор, ИдентификаторКоманды, ПараметрыСозданияСайта, Заголовок);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПараметрыСозданияСайта = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресХранилища);
	Иначе
		ФоновоеЗаданиеИдентификатор  = РезультатВыполнения.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Возврат ПараметрыСозданияСайта;
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияСайта(ПараметрыВызоваСервера = Неопределено)
	
	АдресСайта = ИмяСайта+".umi.ru";	
	
	Если ПараметрыВызоваСервера = Неопределено Тогда
		ПараметрыВызоваСервера = Новый Структура;
	КонецЕсли;
	ПараметрыВызоваСервера.Вставить("ТипСайта", ТипСайта);
	Если ШаблонСайтаНомер=0 Тогда
		Если ТипСайта=1 Тогда
			ПараметрыВызоваСервера.Вставить("desID", "1063");
		ИначеЕсли ТипСайта=2 Тогда
			ПараметрыВызоваСервера.Вставить("desID", "1813");
		ИначеЕсли ТипСайта=3 Тогда
			ПараметрыВызоваСервера.Вставить("desID", "1095");
		КонецЕсли;
	Иначе
		ПараметрыВызоваСервера.Вставить("desID", Формат(ШаблонСайтаНомер,"ЧГ=0"));
	КонецЕсли; 
	
	ПараметрыВызоваСервера.Вставить("ОсновнаяОрганизация", ОсновнаяОрганизация);
	ПараметрыВызоваСервера.Вставить("ИмяСайта", ИмяСайта);
	ПараметрыВызоваСервера.Вставить("АдресСайта", АдресСайта);
	ПараметрыВызоваСервера.Вставить("EmailРегистрацииСайта", EmailРегистрацииСайта);
	ПараметрыВызоваСервера.Вставить("ОтборКатегорииГруппыПереключатель", ОтборКатегорииГруппыПереключатель);
	ПараметрыВызоваСервера.Вставить("ВидЦен", ВидЦен);
	ПараметрыВызоваСервера.Вставить("ВыгружатьОстатки", ВыгружатьОстатки);
	
	ПараметрыВызоваСервера.Вставить("ОтборКатегорииГруппыПереключатель", ОтборКатегорииГруппыПереключатель);
	Если ТипСайта=4 И (АдресТаблицыКаталогов = "") Тогда
		АдресТаблицыКаталогов = ПоместитьВоВременноеХранилище(ПолучитьТаблицуКаталогов(), Новый УникальныйИдентификатор);
		ПараметрыВызоваСервера.Вставить("ТаблицаКаталогов", АдресТаблицыКаталогов);
	Иначе
		ПараметрыВызоваСервера.Вставить("ТаблицаКаталогов", АдресТаблицыКаталогов);
	КонецЕсли;

	возврат ПараметрыВызоваСервера;
	
КонецФункции

&НаСервере
Функция СоздатьСайтВФонеПродолжить(ПараметрыСозданияСайта)
	
	ИдентификаторКоманды = "Обработки.СоздатьСайт.СоздатьСайтПродолжить";
	Заголовок = НСтр("ru = 'Заполнение сайта'");
	
	Если ТипСайта=4 Тогда
		ХранилищеСистемныхНастроек.Сохранить("ТаблицаКаталоговСозданияСайта",,ПолучитьТаблицуКаталогов());
	КонецЕсли;
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ЭтаФорма.УникальныйИдентификатор, ИдентификаторКоманды, ПараметрыСозданияСайта, Заголовок);
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ПараметрыСозданияСайта = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресХранилища);
	Иначе
		ФоновоеЗаданиеИдентификатор  = РезультатВыполнения.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Возврат ПараметрыСозданияСайта;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуКаталогов()

	// Таблица каталогов.
	ВсеГруппы = Ложь;
	СписокГрупп = Новый СписокЗначений;
	Если ОтборКатегорииГруппыПереключатель = Перечисления.ВидыОтборовНоменклатуры.ГруппыНоменклатуры Тогда
		ГруппыВДереве = ОтборИерархия.ПолучитьЭлементы();
		Если ГруппыВДереве.Количество()=0 Тогда
			//Выгружаем все товары, если категории не введены
			ВсеГруппы = Истина;
			СписокГрупп.Добавить(Справочники.Номенклатура.ПустаяСсылка(),"(Все)");
		Иначе
			НайтиВыделенныеСтроки(ГруппыВДереве, СписокГрупп);
		КонецЕсли;
	Иначе	
		КатегорииВДереве = ОтборКатегории.ПолучитьЭлементы();
		Если КатегорииВДереве.Количество()=0 Тогда
			//Выгружаем все товары, если категории не введены
			ВсеГруппы = Истина;
			СписокГрупп.Добавить(Справочники.КатегорииНоменклатуры.ПустаяСсылка(),"(Все)");
		Иначе
			НайтиВыделенныеСтроки(КатегорииВДереве, СписокГрупп);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ВсеГруппы Тогда
		
		// Удаляем дубли и подчиненные элементы.
		МассивУдалить = Новый Массив;
		Для Каждого ЭлементСЗ Из СписокГрупп Цикл
			Если НЕ МассивУдалить.Найти(ЭлементСЗ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекГруппа = ЭлементСЗ.Значение;
			Если ЭлементСЗ.Представление = НСтр("ru = '<Все группы>'") Тогда
				МассивУдалить.Добавить(ЭлементСЗ);
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл
				Если НЕ МассивУдалить.Найти(ЭлементСЗВлож) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЭлементСЗВлож.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЭлементСЗВлож = ЭлементСЗ
					И ЭлементСЗВлож.Значение = ТекГруппа Тогда
					МассивУдалить.Добавить(ЭлементСЗВлож);
				Иначе
					Если ЭлементСЗВлож.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
						МассивУдалить.Добавить(ЭлементСЗВлож);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ЭлементМУ Из МассивУдалить Цикл
			СписокГрупп.Удалить(ЭлементМУ);
		КонецЦикла;
	
	КонецЕсли; 
	
	ТаблицаКаталоговТЗ = Новый ТаблицаЗначений;
	ТаблицаКаталоговТЗ.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка", ,
												   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ТаблицаКаталоговТЗ.Колонки.Добавить("Группы",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаКаталоговТЗ.Колонки.Добавить("ИдентификаторКаталога", Новый ОписаниеТипов("Строка", ,
												   Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
    ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	НовСтр = ТаблицаКаталоговТЗ.Добавить();
	НовСтр.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НовСтр.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	НовСтр.Группы = СписокГрупп;
	
	Возврат ТаблицаКаталоговТЗ;

КонецФункции

&НаСервере
Функция НайтиВыделенныеСтроки(СписокЭлементов, СписокВыделенных)
	
	Для каждого стрДерева Из СписокЭлементов Цикл
		Если стрДерева.Флаг Тогда
			СписокВыделенных.Добавить(стрДерева.Значение, стрДерева.Представление);
		КонецЕсли;
		
		ДочерниеСтроки = стрДерева.ПолучитьЭлементы();
		Если ДочерниеСтроки.Количество()>0 Тогда
			НайтиВыделенныеСтроки(ДочерниеСтроки,СписокВыделенных);
		КонецЕсли;
	КонецЦикла;
	
	возврат СписокВыделенных;
	
КонецФункции

&НаСервере
Процедура ДобавитьПараметрыЗапроса(АдресЗапроса, ПараметрыЗапроса)
	
	РазделительПараметров = "?";
	Для каждого стр Из ПараметрыЗапроса Цикл
		АдресЗапроса = АдресЗапроса + РазделительПараметров + стр.Ключ+"="+стр.Значение;
		РазделительПараметров = "&";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИмяСайтаНаСервере(Знач ИмяСайтаДляПроверки = "")

	Если ИмяСайтаДляПроверки = "" Тогда
		ИмяСайтаДляПроверки = ИмяСайта;
	КонецЕсли;
	
	РеквизитыАвторизации = Обработки.СоздатьСайт.ДанныеДляАвторизации();
	
	АдресЗапроса = РеквизитыАвторизации.Получить("АдресЗапроса");
	РеквизитыАвторизации.Вставить("host", ИмяСайтаДляПроверки+".umi.ru");
	РеквизитыАвторизации.Вставить("action", "check_free");
	ДобавитьПараметрыЗапроса(АдресЗапроса, РеквизитыАвторизации);
		
	СтруктураДанныхСоздания = Новый Структура;
	СтруктураДанныхСоздания.Вставить("ТелоЗапроса", Неопределено);
	
	СтруктураДанныхСоздания.Вставить("АдресЗапроса",
		ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресЗапроса));
		
	ТекстОшибки = "";
	ДанныеСтрока = ПолучитьДанныеЗапросом("GET", СтруктураДанныхСоздания.ТелоЗапроса, СтруктураДанныхСоздания.АдресЗапроса, Новый Структура,,,,ТекстОшибки);
	Если ТекстОшибки="" Тогда
		ИмяСайтаСвободно = ПрочитатьРеквизитJSON(ДанныеСтрока, "result");
		ИмяСайтаПроверено = Истина;
	Иначе
		Сообщить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСайт(Команда)
	
	Если ТипСайта=0 Тогда
		Сообщить(НСтр("ru = 'Выберите тип сайта!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПринимаюСоглашение Тогда
		Сообщить(НСтр("ru = 'Чтобы создать сайт, нужно принять лицензионное соглашение!'"));
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(EmailРегистрацииСайта)="" Тогда
		Сообщить(НСтр("ru = 'Укажите e-mail, на который будет зарегистрирован сайт!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмяСайтаПроверено Тогда
		 ПроверитьИмяСайтаНаСервере(Элементы.ИмяСайта.ТекстРедактирования);
	КонецЕсли;
	 
	Если НЕ ИмяСайтаСвободно Тогда
		Сообщить(НСтр("ru = 'Предложенное имя сайта занято, выберите другое!'"));
		Возврат;
	КонецЕсли;
	
	ФормаДлительнойОперации = ПолучитьФорму("Обработка.СоздатьСайт.Форма.ДлительнаяОперация");
	ФормаДлительнойОперации.ВладелецФормы = ЭтотОбъект;
	ФормаДлительнойОперации.Открыть();
	
	СчетчикОжиданияСозданияСайта = ТекущаяДата();
	
	Попытка
	
		ДанныеСозданияСайтаСтруктура = СоздатьСайтВФоне();	
	
	Исключение
		ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ДанныеСозданияСайтаСтруктура.Свойство("ОжиданиеСозданияСайта") И ДанныеСозданияСайтаСтруктура.ОжиданиеСозданияСайта = Истина Тогда
		
		ФормаДлительнойОперации.ФоновоеЗаданиеИдентификатор = ФоновоеЗаданиеИдентификатор;
		ПодключитьОбработчикОжидания("СоздатьСайтПродолжить", 2, Истина);
		
	ИначеЕсли ДанныеСозданияСайтаСтруктура.Свойство("Ошибка") Тогда
		ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Сообщить(ДанныеСозданияСайтаСтруктура.Ошибка);
	Иначе
		ФормаДлительнойОперации.ФоновоеЗаданиеИдентификатор = ФоновоеЗаданиеИдентификатор;
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ИнтервалПроверкиСозданияСайта, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСайтПродолжить()

	ДанныеСайтаСтруктура = ПроверитьГотовностьСайтаНаСервере();
	
	Если ДанныеСайтаСтруктура.Свойство("Ошибка") Тогда
		 Сообщить(ДанныеСайтаСтруктура.Ошибка);
	ИначеЕсли ДанныеСайтаСтруктура.Свойство("СайтСоздан") И ДанныеСайтаСтруктура.СайтСоздан = Истина Тогда
		
		ДанныеСозданияСайтаСтруктура.СайтСоздан = Истина;
		РезультатСозданияПослеЗаполнения = СоздатьСайтВФонеПродолжить(ДанныеСозданияСайтаСтруктура);
		
		Если РезультатСозданияПослеЗаполнения.Свойство("ОбменВыполнен") И РезультатСозданияПослеЗаполнения.ОбменВыполнен=Истина Тогда
			ОткрытьСозданныйСайт(РезультатСозданияПослеЗаполнения);
		Иначе
			ПодключитьОбработчикОжидания("ПроверитьВыполнение", ИнтервалПроверкиСозданияСайта, Истина);
		КонецЕсли;
	ИначеЕсли ДанныеСайтаСтруктура.Свойство("СайтСоздан") И ДанныеСайтаСтруктура.СайтСоздан = Ложь Тогда
		
		Если (ТекущаяДата() - СчетчикОжиданияСозданияСайта)>300 Тогда // ждем создания сайта не более 5 мин, потом выдаем ошибку
			ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Сообщить(НСтр("ru = 'Время ответа от сайта превышено, попробуйте повторить операцию позже'"));
			Возврат;
		Иначе	
			ПодключитьОбработчикОжидания("СоздатьСайтПродолжить", 2, Истина);
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнение()
	
	Попытка
		РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища, Ложь);
	Исключение
		ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Сообщить(ОписаниеОшибки());
		возврат;
	КонецПопытки;
	
	Если РезультатПроверки.ЗаданиеВыполнено Тогда
		
		ДействияЗаданиеВыполнено(РезультатПроверки);
		
	ИначеЕсли ДанныеСозданияСайтаСтруктура.Свойство("Ошибка") Тогда
		ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Сообщить(ДанныеСозданияСайтаСтруктура.Ошибка);
		
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ИнтервалПроверкиСозданияСайта, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьГотовностьСайтаНаСервере()

	ПараметрыСозданияСайта = ПараметрыСозданияСайта();
	ДанныеСайта = Обработки.СоздатьСайт.ПолучитьДанныеСозданияСайта(ПараметрыСозданияСайта);
	
	ДанныеСайтаСтруктура = Новый Структура;
	Если ТипЗнч(ДанныеСайта)= Тип("Соответствие") Тогда
		СайтСоздан = ДанныеСайта.Получить("ready");
		ОжиданиеСозданияСайта = ДанныеСайта.Получить("waiting");
		
		ДанныеСайтаСтруктура.Вставить("СайтСоздан", СайтСоздан);
		ДанныеСайтаСтруктура.Вставить("ОжиданиеСозданияСайта", ОжиданиеСозданияСайта);
		
		возврат ДанныеСайтаСтруктура;
	Иначе
		возврат Новый Структура("Ошибка", ДанныеСайта);
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ДанныеДляАвторизации() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("partner", "Test1C");
	Результат.Вставить("code", "26a63f89a737125b418492ff70ae1567");
	Результат.Вставить("АдресЗапроса", "http://gate.umi.ru/partnerapi");
					 
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДействияЗаданиеВыполнено(РезультатПроверки)
	
	Если ТипЗнч(РезультатПроверки.Значение) = Тип("Структура") Тогда
		
		Если РезультатПроверки.Значение.Свойство("Ошибка") Тогда
			
			ТекстОшибки = РезультатПроверки.Значение.Ошибка;
			Если ТипЗнч(ТекстОшибки)=Тип("Массив") Тогда
				Для каждого стр Из ТекстОшибки Цикл
					Сообщить(стр);
				КонецЦикла;
			Иначе
				Сообщить(ТекстОшибки);
			КонецЕсли;
			
		Иначе	
			
			ДанныеСозданияСайтаСтруктура = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
			
			Если ТипЗнч(ДанныеСозданияСайтаСтруктура) = Тип("Структура") И ДанныеСозданияСайтаСтруктура.Свойство("ОбменВыполнен") 
				И ДанныеСозданияСайтаСтруктура.Свойство("СсылкаАдминЗоны") Тогда
				
				//сайт создан и заполнен данными
				ОткрытьСозданныйСайт(ДанныеСозданияСайтаСтруктура);
				
			ИначеЕсли ТипЗнч(ДанныеСозданияСайтаСтруктура) = Тип("Структура") И ДанныеСозданияСайтаСтруктура.Свойство("СсылкаАдминЗоны") Тогда
				 //сайт создан, нужно запустить обмен
				
				 СоздатьСайтПродолжить();
				
			ИначеЕсли ТипЗнч(ДанныеСозданияСайтаСтруктура) = Тип("Структура") И ДанныеСозданияСайтаСтруктура.Свойство("Ошибка") Тогда
				ТекстОшибки = ДанныеСозданияСайтаСтруктура.Ошибка;
				Если ТипЗнч(ТекстОшибки)=Тип("Массив") Тогда
					Для каждого стр Из ТекстОшибки Цикл
						Сообщить(стр);
					КонецЦикла;
				Иначе
					Сообщить(ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСозданныйСайт(ДанныеСозданияСайтаСтруктура)
	
	ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	
	ПерейтиПоНавигационнойСсылке(СтрЗаменить(ДанныеСозданияСайтаСтруктура.СсылкаАдминЗоны, "/adminzone/","/adminzone/main/"));
	ПерейтиПоНавигационнойСсылке("http://"+ДанныеСозданияСайтаСтруктура.АдресСайта);
	
	ПоказатьОповещениеПользователя(,,НСтр("ru = 'Создан сайт: '")+ДанныеСозданияСайтаСтруктура.АдресСайта,БиблиотекаКартинок.Информация32);
	ОбновитьИнтерфейс();
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища, ПрерватьЕслиНеВыполнено)
	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение", Ложь, Неопределено);
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		РезультатПроверки.ЗаданиеВыполнено = Истина;
		РезультатПроверки.Значение         = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ИначеЕсли ПрерватьЕслиНеВыполнено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗапросом(HTTPМетод, ТелоЗапроса, АдресЗапроса, ЗаголовкиЗапроса, 
	ContentType="", РазмерФайлаОтправки="", ИмяФайлаОтправки="", ТекстОшибки="")
	
	HTTPСоединение = Новый HTTPСоединение(
		АдресЗапроса.Хост,
		АдресЗапроса.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL
		);
	
	Если ContentType="" Тогда
		ContentType = "application/json;charset=utf-8";
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]	= ContentType;
	Для каждого стр Из ЗаголовкиЗапроса Цикл
		ЗапросHTTP.Заголовки[стр.Ключ]	= стр.Значение;
	КонецЦикла;
	
	Если ТипЗнч(ТелоЗапроса)=Тип("Строка") Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса,"UTF-8",ИспользованиеByteOrderMark.НеИспользовать);
	ИначеЕсли ТипЗнч(ТелоЗапроса)=Тип("ДвоичныеДанные") Тогда
		ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
	ИначеЕсли ИмяФайлаОтправки<>"" Тогда
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
	Иначе
		
	КонецЕсли; 
	
	Попытка
		Если HTTPМетод="GET" Тогда
		    ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP);
		ИначеЕсли HTTPМетод="POST" Тогда
			ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		ИначеЕсли HTTPМетод="PUT" Тогда
			ОтветHTTP = HTTPСоединение.Записать(ЗапросHTTP);
		ИначеЕсли HTTPМетод="DELETE" Тогда	
			ОтветHTTP = HTTPСоединение.Удалить(ЗапросHTTP);
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если СтрНайти(ТекстОшибки, "Couldn't resolve host name")<>0 Тогда
		    ТекстОшибки = НСтр("ru = 'Ошибка: Не могу подключиться к интернету!'");
		КонецЕсли;
		Возврат "";
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния<>200 Тогда
		Сообщить(ОтветHTTP.КодСостояния);
	КонецЕсли;

	ОтветКакСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	Возврат ОтветКакСтрока;	
	
КонецФункции

&НаСервере
Функция ПрочитатьРеквизитJSON(ДанныеСтрока, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтрока) Тогда
		возврат 0;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ДанныеСтрока);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	РеквизитЗначение = Результат.Получить(ИмяРеквизита);
	
	Возврат РеквизитЗначение;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации)
	
	Если ФормаДлительнойОперации.Открыта() Тогда
		ФормаДлительнойОперации.ЗакрытиеПодтверждено = Истина;
		ФормаДлительнойОперации.Закрыть();
	КонецЕсли;
	ФормаДлительнойОперации = Неопределено;	
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	ОновитьРамкиКартинок(1);
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ОновитьРамкиКартинок(2);
	ЭтотОбъект.ТекущийЭлемент = Элементы.EmailРегистрацииСайта;
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	ОновитьРамкиКартинок(3);
КонецПроцедуры

&НаКлиенте
Процедура Декорация4Нажатие(Элемент)
	ОновитьРамкиКартинок(4);
КонецПроцедуры

&НаКлиенте
Процедура ОновитьРамкиКартинок(ВыбТипСайта)
	
	ТипСайта = ВыбТипСайта;
	Для номерТипСайта=1 По 4 Цикл
		Если номерТипСайта = ТипСайта Тогда
			Элементы["КартинкаТипСайта"+номерТипСайта].Ширина	= 27;
			Элементы["КартинкаТипСайта"+номерТипСайта].Высота	= 15;
			Элементы["КартинкаТипСайта"+номерТипСайта].Картинка = БиблиотекаКартинок["Сайт"+номерТипСайта+"_2"];
		Иначе
			Элементы["КартинкаТипСайта"+номерТипСайта].Ширина	= 22;
			Элементы["КартинкаТипСайта"+номерТипСайта].Высота	= 12;
			Элементы["КартинкаТипСайта"+номерТипСайта].Картинка = БиблиотекаКартинок["Сайт"+номерТипСайта];
		КонецЕсли;
	КонецЦикла;
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.EmailРегистрацииСайта;
	
	ОбновитьВидимостьНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьНастроек()
	
	ШаблонСайтаОписание = "";
	ШаблонСайтаНомер = 0;
	Элементы.ШаблонСайтаКартинка.Видимость = Ложь;
	
	Если ТипСайта=4 Тогда
		Элементы.ГруппаЦеныОстатки.Видимость = Истина;
		Элементы.ГруппаВыбратьНоменклатуру.Видимость = Истина;
	Иначе
		Элементы.ГруппаЦеныОстатки.Видимость = Ложь;
		Элементы.ГруппаВыбратьНоменклатуру.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяСайтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СокрЛП(Текст)="" И СокрЛП(Элемент.ТекстРедактирования="") Тогда
		НадписьИмяСайтаДоступно = "";
		ИмяСайтаПроверено = Ложь;
		ОтключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта");
	ИначеЕсли ИмяСайта<>Элемент.ТекстРедактирования Тогда
		
		ИмяСайтаПроверено = Ложь;
		
		Если НЕ ПроверитьИмяСайтаТекст(Текст) Тогда
			Возврат;
		КонецЕсли;
		
		НадписьИмяСайтаДоступно = ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно);
		ОтключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта");
		ПодключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта", ИнтервалПроверкиИмениСайта, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьИмяСайтаТекст(Текст)
	
	н=1;
	Пока н <= СтрДлина(Текст) Цикл
		ПроверСимвол = Сред(Текст, н, 1);
		Если РазрешенныеСимволыИмениСайта.Получить(НРег(ПроверСимвол)) = Неопределено Тогда
			НадписьИмяСайтаДоступно = НСтр("ru = 'Разрешены латинские буквы и цифры'");
			Возврат Ложь;
		Иначе
			н=н+1;
		КонецЕсли;
	КонецЦикла;
	
	возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДоступностьИмениСайта() Экспорт
	
	Если ИмяСайтаПроверено Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Элементы.ИмяСайта.ТекстРедактирования)="" Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьИмяСайтаТекст(Элементы.ИмяСайта.ТекстРедактирования) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьИмяСайтаНаСервере(Элементы.ИмяСайта.ТекстРедактирования);
	НадписьИмяСайтаДоступно = ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензионноеСоглашениеСсылкаНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://umi.ru/servicelicense/");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТип2(Команда)
	ОновитьРамкиКартинок(2);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТип3(Команда)
	ОновитьРамкиКартинок(3);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТип1(Команда)
	ОновитьРамкиКартинок(1);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТип4(Команда)
	ОновитьРамкиКартинок(4);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЦены(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://umi.ru/price/");

КонецПроцедуры

&НаКлиенте
Процедура ИмяСайтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ИмяСайтаПроверено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИмяСайта(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИмяСайта(Текст)
	
	Если Текст="" Тогда
		НадписьИмяСайтаДоступно = "";
		ИмяСайтаПроверено = Ложь;
		ОтключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта");
		Возврат;
	ИначеЕсли НЕ ПроверитьИмяСайтаТекст(Текст) Тогда
		ИмяСайтаПроверено = Ложь;
		ОтключитьОбработчикОжидания("ПроверитьДоступностьИмениСайта");
		Возврат;
	КонецЕсли;
	
	НадписьИмяСайтаДоступно = ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно);
	ПроверитьИмяСайтаНаСервере(Элементы.ИмяСайта.ТекстРедактирования);
	НадписьИмяСайтаДоступно = ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьНадписьИмяСайтаДоступно(ИмяСайтаПроверено, ИмяСайтаСвободно)
	
	Если НЕ ИмяСайтаПроверено Тогда
		Возврат НСтр("ru = 'Проверяется ...'");
	ИначеЕсли ИмяСайтаСвободно Тогда
		Возврат НСтр("ru = 'Имя свободно!'");
	Иначе
		Возврат НСтр("ru = 'Имя занято!'");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИмяСайтаПриИзменении(Элемент)
	
	ИмяСайтаИзмененоВручную = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнаяОрганизацияПриИзменении(Элемент)
	
	Если НЕ ИмяСайтаИзмененоВручную Тогда
		ИмяСайта = ПолучитьИмяСайтаИзИмениОрганизации();
		ОбновитьИмяСайта(ИмяСайта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУправленияФормы

&НаКлиенте
Процедура ПроверитьИмяСайта(Команда)
	ПроверитьИмяСайтаНаСервере(Элементы.ИмяСайта.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСайтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("НачатьЗагрузкуКартинки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуКартинки()
	
	ПодгрузитьКартинку(ШаблонСайтаОписание);
	
КонецПроцедуры

Процедура ПодгрузитьКартинку(ВыбранноеЗначение)

	ШаблонСайтаМассив = ШаблоныСайтов.НайтиСтроки(Новый Структура("Наименование",ВыбранноеЗначение));
	Если ШаблонСайтаМассив.Количество()>0 Тогда
		АдресКартинки = ШаблонСайтаМассив[0].Картинка;
		ШаблонСайтаНомер = ШаблонСайтаМассив[0].Идентификатор;
	Иначе
		Элементы.ШаблонСайтаКартинка.Видимость = Ложь;
		ШаблонСайтаНомер = 0;
		возврат;
	КонецЕсли;
		
	СтруктураДанныхСоздания = Новый Структура;
	АдресЗапроса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресКартинки);
	
	ТекстОшибки = "";
	HTTPСоединение = Новый HTTPСоединение(
		АдресЗапроса.Хост,
		АдресЗапроса.Порт,,,,,
		Новый ЗащищенноеСоединениеOpenSSL
		);
	
	ЗапросHTTP = Новый HTTPЗапрос(АдресЗапроса.ПутьНаСервере);
	ЗапросHTTP.Заголовки["Cache-Control"]	= "no-cache";
	ЗапросHTTP.Заголовки["Content-type"]	= "application/json;charset=utf-8";
	
	Попытка
		ИмяВыходногоФайла = ПолучитьИмяВременногоФайла("jpg");
		ОтветHTTP = HTTPСоединение.Получить(ЗапросHTTP, ИмяВыходногоФайла);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если СтрНайти(ТекстОшибки, "Couldn't resolve host name")<>0 Тогда
		    ТекстОшибки = НСтр("ru = 'Ошибка: Не могу подключиться к интернету!'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ТекстОшибки);
		
		Возврат;
		
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния<>200 Тогда
		Сообщить(ОтветHTTP.КодСостояния);
		Элементы.ШаблонСайтаКартинка.Видимость = Ложь;
	Иначе
		Элементы.ШаблонСайтаКартинка.Видимость = Истина;
	КонецЕсли;

	Картинка = Новый Картинка(ИмяВыходногоФайла);
	ШаблонСайтаКартинка = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСайтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОтборТипСайта = ТипСайтаПоНомеру(ТипСайта);
	ШаблоныОтбор = Новый Структура("ТипСайта", ОтборТипСайта);
	ВыбранныеШаблоны = ШаблоныСайтов.НайтиСтроки(ШаблоныОтбор);
	СписокШаблонов = Новый СписокЗначений;
	Для каждого стр Из ВыбранныеШаблоны Цикл
		СписокШаблонов.Добавить(стр.Наименование, стр.Наименование);
	КонецЦикла;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеВыбораШаблонаИзСписка", ЭтотОбъект, ШаблонСайтаОписание);
	НачальноеЗначениеСписка = СписокШаблонов.НайтиПоЗначению(ШаблонСайтаОписание);
	ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, СписокШаблонов,,НачальноеЗначениеСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораШаблонаИзСписка(Результат, Параметр) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ШаблонСайтаОписание = Результат.Значение;
	ПодгрузитьКартинку(Результат.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСайтаОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ШаблонСайтаКартинка.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ШаблонСайтаКартинкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти
