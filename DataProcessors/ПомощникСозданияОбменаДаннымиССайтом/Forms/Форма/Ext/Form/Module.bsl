////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаКлиенте
Перем ТекущийНомерСтраницы;

&НаКлиенте
Перем СтраницыМастера;

&НаКлиенте
Перем КнопкиМастера;

&НаКлиенте
Перем ЗакрытьФормуБезусловно;

&НаКлиенте
Перем ПредставлениеПустогоРасписания;

&НаКлиенте
Перем КомпоновщикНастроекИнициализирован;

&НаКлиенте
Перем НеСоздаватьКонтрагентовПриЗагрузкеЗаказа;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ИнициализироватьКомпоновщикСервер()
	
	СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаВыгрузкиТоваров, УникальныйИдентификатор);
	
	Объект.КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаВыгрузкиТоваров.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательНазначениеОбмена()
	
	УстановитьВидимостьНастроекТиповОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастроекТиповОбмена()
	
	Если ПереключательНазначениеОбмена = 0 Тогда
		
		Объект.ВыгружатьНаСайт = Истина;
		
		Элементы.ГруппаНастроекПодключения.Доступность = Истина;
		Элементы.ГруппаВыбораКаталоговНаДиске.Доступность = Ложь;
		Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.Доступность = Ложь;
		
		Элементы.КнопкиМастера.ТекущаяСтраница = КнопкиМастера[2];
		
	ИначеЕсли ПереключательНазначениеОбмена = 1 Тогда
		
		Объект.ВыгружатьНаСайт = Ложь;
		
		Элементы.ГруппаНастроекПодключения.Доступность = Ложь;
		Элементы.ГруппаВыбораКаталоговНаДиске.Доступность = Истина;
		Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.Доступность = Ложь;
		
		Если Объект.ОбменЗаказами Тогда
			Элементы.КаталогЗагрузки.Доступность = Истина;
		Иначе
			Элементы.КаталогЗагрузки.Доступность = Ложь;
		КонецЕсли;
		
		Элементы.КнопкиМастера.ТекущаяСтраница = КнопкиМастера[2];
		
	Иначе
		
		Объект.ВыгружатьНаСайт = Ложь;
		
		Элементы.ГруппаНастроекПодключения.Доступность = Ложь;
		Элементы.ГруппаВыбораКаталоговНаДиске.Доступность = Ложь;
		Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.Доступность = Истина;
		
		Если ЭтоЛокальныйРежим Тогда
			Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.ТекущаяСтраница = Элементы.СтраницаИнформацияОбменаЧерезВебСервисЛокально;
		Иначе
			Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.ТекущаяСтраница = Элементы.СтраницаИнформацияОбменаЧерезВебСервисРежимСервиса;
			АдресВебСервиса = ПолучитьАдресВебСервисаВРежимеСервиса();
		КонецЕсли;
		
		Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.ТекущаяСтраница.Доступность = Истина;
		Элементы.КнопкиМастера.ТекущаяСтраница = КнопкиМастера[5];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте()
	
	// устанавливаем текущую страницу мастера
	Элементы.СтраницыМастера.ТекущаяСтраница = СтраницыМастера[ТекущийНомерСтраницы];
	
	// устанавливаем текущую страницу кнопок мастера
	Элементы.КнопкиМастера.ТекущаяСтраница = КнопкиМастера[ТекущийНомерСтраницы];
	
	Если ТекущийНомерСтраницы = 2 Тогда
		
		Если Объект.ВыгружатьНаСайт Тогда 
			ПереключательНазначениеОбмена = 0;
		Иначе
			ПереключательНазначениеОбмена = 1;
		КонецЕсли;
		
		УстановитьВидимостьНастроекТиповОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастроекОбменаЗаказами()
	
	СпособИдентификации = ПредопределенноеЗначение("Перечисление.СпособыИдентификацииКонтрагентов.ПредопределенноеЗначение");
	
	Если Объект.СпособИдентификацииКонтрагентов = СпособИдентификации Тогда
		
		Если НЕ Элементы.КонтрагентДляПодстановкиВЗаказы.Доступность Тогда
			Элементы.КонтрагентДляПодстановкиВЗаказы.Доступность = Истина;
			Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Ложь;
		КонецЕсли;
		
		НеСоздаватьКонтрагентовПриЗагрузкеЗаказа = Истина;
		
	Иначе
		
		Если Элементы.КонтрагентДляПодстановкиВЗаказы.Доступность Тогда
			Элементы.КонтрагентДляПодстановкиВЗаказы.Доступность = Ложь;
			Элементы.ГруппаДляНовыхКонтрагентов.Доступность = Истина;
		КонецЕсли;
		
		НеСоздаватьКонтрагентовПриЗагрузкеЗаказа = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерСтраницы(Итератор)
	
	Отказ = Ложь;
	
	// Изменяем номер текущей страницы.
	Инкремент(ТекущийНомерСтраницы, Итератор);
	
	// Обработчики событий при смене страницы мастера.
	ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, Итератор > 0);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Отображаем новую страницу мастера.
	УстановитьВидимостьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, ЭтоУвеличениеНомераСтраницы)
	
	Если ЭтоУвеличениеНомераСтраницы Тогда
		
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Инкремент(ТекущийНомерСтраницы, ?(ЭтоУвеличениеНомераСтраницы, -1, +1));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияМастераНаКлиенте()
	
	ТекущийНомерСтраницы = 1;
	
	СтраницыМастера = Новый Соответствие;
	КнопкиМастера   = Новый Соответствие;
	
	// СТРАНИЦЫ МАСТЕРА
	
	СтраницыМастера.Вставить(1, Элементы.СтраницаМастераНачало);
	СтраницыМастера.Вставить(2, Элементы.СтраницаМастераНастройкиТранспортаСообщений);
	СтраницыМастера.Вставить(3, Элементы.СтраницаМастераНастройкиВыгрузкиНоменклатуры);
	СтраницыМастера.Вставить(4, Элементы.СтраницаМастераНастройкиОбменаЗаказами);
	СтраницыМастера.Вставить(5, Элементы.СтраницыМастераНастройкиАвтоматическогоОбмена);
	
	// КНОПКИ МАСТЕРА
	
	КнопкиМастера.Вставить(1, Элементы.КнопкиНачала);
	КнопкиМастера.Вставить(2, Элементы.КнопкиПродолжения);
	КнопкиМастера.Вставить(3, Элементы.КнопкиПродолжения);
	КнопкиМастера.Вставить(4, Элементы.КнопкиПродолжения);
	КнопкиМастера.Вставить(5, Элементы.КнопкиОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое.
	Если Объект.РасписаниеРегламентногоЗадания = Неопределено Тогда
		
		Объект.РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Объект.РасписаниеРегламентногоЗадания);
	Оповещение = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение",ЭтаФорма);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Результат,Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.РасписаниеРегламентногоЗадания = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает ПериодПовтораВТечениеДня в секундах
//
Функция ПолучитьПериодПовтораВТечениеДня()
	
	ЗначенияВыбора = СоответствиеЗначенийВыбораККоличествуСекунд();
	
	ПериодПовтораВТечениеДня = ЗначенияВыбора.Получить(ИнтервалОбменаССайтом);
	Возврат ?(ПериодПовтораВТечениеДня = Неопределено, 1800, ПериодПовтораВТечениеДня);
	
КонецФункции //ПолучитьПериодПовтораВТечениеДня()

&НаКлиенте
// Функция возвращает соответствие надписей выбора к количеству секунд
// 
Функция СоответствиеЗначенийВыбораККоличествуСекунд()
	
	СоответствиеНадписей = Новый Соответствие;
	СоответствиеНадписей.Вставить("Один раз в 5 минут", 300);
	СоответствиеНадписей.Вставить("Один раз в 15 минут", 900);
	СоответствиеНадписей.Вставить("Один раз в 30 минут", 1800);
	СоответствиеНадписей.Вставить("Один раз в час", 3600);
	СоответствиеНадписей.Вставить("Один раз в 3 часа", 10800);
	СоответствиеНадписей.Вставить("Один раз в 6 часов", 21600);
	СоответствиеНадписей.Вставить("Один раз в 12 часов", 43200);
	
	Возврат СоответствиеНадписей;
	
КонецФункции //СоответствиеЗначенийВыбораККоличествуСекунд()

&НаКлиенте
// Заполняет значения расписания регламентного задания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);

	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПериодПовтораВТечениеДня = ПолучитьПериодПовтораВТечениеДня();
	
	Если ПериодПовтораВТечениеДня > 0 Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.Месяцы					= Месяцы;
		Расписание.ДниНедели				= ДниНедели;
		Расписание.ПериодПовтораВТечениеДня = ПериодПовтораВТечениеДня; // секунды
		Расписание.ПериодПовтораДней		= 1; // каждый день
		
		Объект.РасписаниеРегламентногоЗадания = Расписание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	Если Не РазделениеВключено Тогда
		
		ПредставлениеРасписания = Строка(Объект.РасписаниеРегламентногоЗадания);
		
		Если ПредставлениеРасписания = ПредставлениеПустогоРасписания Тогда
			ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		КонецЕсли;
		
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
		
	Иначе
		
		Если Объект.РасписаниеРегламентногоЗадания = Неопределено Тогда
			
			ИнтервалОбменаССайтом = "Один раз в 30 минут"; 
			
		Иначе
			
			ЗначениеПериода = Объект.РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня;
			Если ЗначениеПериода = 0 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 300 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 5 минут";
				
			ИначеЕсли ЗначениеПериода <= 900 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 15 минут";
				
			ИначеЕсли ЗначениеПериода <= 1800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 30 минут";
				
			ИначеЕсли ЗначениеПериода <= 3600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в час";
				
			ИначеЕсли ЗначениеПериода <= 10800 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 3 часа";
				
			ИначеЕсли ЗначениеПериода <= 21600 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 6 часов";
				
			ИначеЕсли ЗначениеПериода <= 43200 Тогда
				
				ИнтервалОбменаССайтом = "Один раз в 12 часов";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	
	Если Не РазделениеВключено Тогда
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	Иначе
		Элементы.ИнтервалОбменаССайтом.Доступность = Объект.ИспользоватьРегламентныеЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталог(КаталогВыгрузки = Истина)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыбратьКаталогЗавершение1", ЭтаФорма, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗавершение1(Подключено, ДополнительныеПараметры) Экспорт
    
    Если Не Подключено Тогда
        ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
        Возврат;
    КонецЕсли;
    
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    
    Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
    Диалог.Каталог   = ?(ДополнительныеПараметры.КаталогВыгрузки, Объект.КаталогВыгрузки, Объект.КаталогЗагрузки);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Диалог", Диалог);
	ПараметрыОповещения.Вставить("КаталогВыгрузки", ДополнительныеПараметры.КаталогВыгрузки);
    
    Диалог.Показать(Новый ОписаниеОповещения("ВыбратьКаталогЗавершение", ЭтаФорма, ПараметрыОповещения));

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Если ДополнительныеПараметры.КаталогВыгрузки Тогда
			Объект.КаталогВыгрузки = Диалог.Каталог;
		Иначе
			Объект.КаталогЗагрузки = Диалог.Каталог;
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиПриНажатииГотово(Отказ)
	
	ОчиститьСообщения();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Объект.РасписаниеРегламентногоЗадания = Неопределено
			ИЛИ Строка(Объект.РасписаниеРегламентногоЗадания) = ПредставлениеПустогоРасписания Тогда
			
			Сообщение = НСтр("ru = 'При использовании автоматического обмена расписание должно быть установлено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,,Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйОбменДаннымиНаКлиенте(Отказ)
	
	Состояние(НСтр("ru = 'Выполняется создание настройки обмена данными с web-сайтом'"));
	
	СоздатьНовыйОбменДаннымиНаСервере(КомпоновщикНастроекИнициализирован, Отказ);
	
	Если Отказ Тогда
		
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'При создании настройки обмена данными возникли ошибки!'"));
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1""'"), Объект.СсылкаНаУзелОбмена),,
			НСтр("ru = 'Новый узел обмена с WEB - сайтом создан успешно!'"),
			БиблиотекаКартинок.Информация32);
		
		ОповеститьОЗаписиНового(Объект.СсылкаНаУзелОбмена);
		
		Если ВыполнитьОбменДаннымиСейчас Тогда
			
			ИнициализацияОбменаДаннымиНаКлиенте();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйОбменДаннымиНаСервере(КомпоновщикНастроекИнициализирован, Отказ)
	
	// Сохраняем список видов цен.
	
	ВидыЦен = Объект.ВидыЦен;
	ВидыЦен.Очистить();
	
	Для каждого ЭлементСЗ Из СписокВидовЦен Цикл 
		
		НоваяСтрока = ВидыЦен.Добавить();
		НоваяСтрока.ВидЦен = ЭлементСЗ.Значение;
		
	КонецЦикла;
	
	//Инициализируем компоновщик настроек, если он не был инициализирован.
	
	Если НЕ КомпоновщикНастроекИнициализирован Тогда
		
		СхемаВыгрузкиТоваров = ПланыОбмена.ОбменУправлениеНебольшойФирмойСайт.ПолучитьМакет("СхемаВыгрузкиТоваров");
		
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаВыгрузкиТоваров, УникальныйИдентификатор);
		Объект.КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
		Объект.КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаВыгрузкиТоваров.НастройкиПоУмолчанию);
		
	КонецЕсли;
	
	// Создаем и сохраняем таблицу каталогов.
	
	ТаблицаКаталогов = Новый ТаблицаЗначений;
	
	ТаблицаКаталогов.Колонки.Добавить("Каталог");
	ТаблицаКаталогов.Колонки.Добавить("Группы");
	ТаблицаКаталогов.Колонки.Добавить("ИдентификаторКаталога");
	ТаблицаКаталогов.Колонки.Добавить("ХранилищеНастроекКомпоновки");
	
	ОбработатьВыбранныеГруппыНаСервереБезКонтекста(СписокГруппНоменклатуры);
	
	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы = СписокГруппНоменклатуры;
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	НоваяСтрока.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(Объект.КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
	
	Объект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталогов);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыполнитьДействияПоСозданиюНовогоОбменаДанными(Отказ);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьВыбранныеГруппыНаСервереБезКонтекста(СписокГрупп)
	
	// Удаляем дубли и подчиненные элементы.
	
	МассивУдалить = Новый Массив;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если НЕ МассивУдалить.Найти(ЭлементСЗ) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл
			
			Если НЕ МассивУдалить.Найти(ЭлементСЗВлож) = Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если НЕ ЭлементСЗВлож = ЭлементСЗ
				И ЭлементСЗВлож.Значение = ТекГруппа Тогда
				
				МассивУдалить.Добавить(ЭлементСЗВлож);
				
			Иначе
			
				Если ЭлементСЗВлож.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
				
					МассивУдалить.Добавить(ЭлементСЗВлож);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияОбменаДаннымиНаКлиенте()
	
	УзелОбмена = Объект.СсылкаНаУзелОбмена;
	
	Состояние(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 начат обмен данными с сайтом'"),
			Формат(ТекущаяДата(), "ДЛФ=DT"))
		,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'по узлу обмена ""%1""...'"),
			УзелОбмена));
	
	ОбменССайтом.ВыполнитьОбмен(УзелОбмена, НСтр("ru = 'Интерактивный обмен'"));
	
	ПоказатьОповещениеПользователя(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 ""%2""'"),
			Формат(ТекущаяДата(), "ДЛФ=DT"),
			УзелОбмена) 
		,,
		НСтр("ru = 'Обмен с сайтом завершен'"),
		БиблиотекаКартинок.Информация32);
		
	Оповестить("ЗавершенСеансОбменаССайтом");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокСпискаГруппНоменклатуры(СписокГруппНоменклатуры)
	
	СписокГруппСтрока = "";
	Для каждого ЭлементСписка Из СписокГруппНоменклатуры Цикл
		
		СписокГруппСтрока = СписокГруппСтрока + ?(СписокГруппСтрока = "","","; ") + ЭлементСписка.Представление;
		
	КонецЦикла;
	
	Возврат СписокГруппСтрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьАдресВебСервисаВРежимеСервиса()
	
	АдресВебСервиса = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/ws/SiteExchange?wsdl";
	Возврат АдресВебСервиса;
	
КонецФункции

// ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ МАСТЕРА

&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
	
	ОчиститьСообщения();
	
	Если ТекущийНомерСтраницы = 2 Тогда 
		
		Если НЕ Объект.ОбменТоварами
			И НЕ Объект.ОбменЗаказами Тогда 
			
			Сообщение = НСтр("ru = 'Для продолжения настроек должен быть выбран хотя бы один из режимов обмена данными!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
			
		КонецЕсли;
		
		Если ЭтоЛокальныйРежим Тогда
			Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.ТекущаяСтраница = Элементы.СтраницаИнформацияОбменаЧерезВебСервисЛокально;
		Иначе
			Элементы.СтраницыИнформацияПоОбменуЧерезВебСервис.ТекущаяСтраница = Элементы.СтраницаИнформацияОбменаЧерезВебСервисРежимСервиса;
		КонецЕсли;
		
	ИначеЕсли ТекущийНомерСтраницы = 3 Тогда 
		
		Если Объект.ВыгружатьНаСайт Тогда 
			
			Если ПустаяСтрока(Объект.АдресСайта) Тогда 
				
				Сообщение = НСтр("ru = 'Укажите адрес сайта'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.АдресСайта",, Отказ);
				
			КонецЕсли;
			
			Если ПустаяСтрока(Объект.ИмяПользователя) Тогда 
				
				Сообщение = НСтр("ru = 'Укажите имя пользователя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.ИмяПользователя",, Отказ);
				
			КонецЕсли;
			
		Иначе
			
			Если ПустаяСтрока(Объект.КаталогВыгрузки) Тогда 
				
				Сообщение = НСтр("ru = 'Укажите каталог выгрузки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.КаталогВыгрузки",, Отказ);
				
			КонецЕсли;
			
			Если Объект.ОбменЗаказами И ПустаяСтрока(Объект.КаталогЗагрузки) Тогда 
				
				Сообщение = НСтр("ru = 'Укажите каталог загрузки'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.КаталогЗагрузки",, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не КомпоновщикНастроекИнициализирован Тогда
			ИнициализироватьКомпоновщикСервер();
			КомпоновщикНастроекИнициализирован = Истина;
		КонецЕсли;
		Элементы.ТаблицаНастроекКомпоновки.Обновить();
		
	ИначеЕсли ТекущийНомерСтраницы = 5 Тогда 
		
		Если Объект.ОбменЗаказами Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.СпособИдентификацииКонтрагентов) Тогда
				
				Сообщение = НСтр("ru = 'Укажите способ идентификации контрагентов'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.СпособИдентификацииКонтрагентов",, Отказ);
				
			ИначеЕсли НеСоздаватьКонтрагентовПриЗагрузкеЗаказа 
				И НЕ ЗначениеЗаполнено(Объект.КонтрагентДляПодстановкиВЗаказы) Тогда
				
				Сообщение = НСтр("ru = 'Выберите контрагента для подстановки в заказы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.КонтрагентДляПодстановкиВЗаказы",, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Инкремент(Число, Знач Итератор = 1)
	
	Число = Число + Итератор;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РольДоступнаДобавлениеИзменениеОбменовДанными = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	
	Если НЕ РольДоступнаДобавлениеИзменениеОбменовДанными Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Недостаточно прав доступа!'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ВызовИзПланаОбмена") Тогда
		
		Сообщение = НСтр("ru = 'Работа помощника поддерживается только при вызове из командного интерфейса! Работа помощника завершена.'");
		ОбменДаннымиСервер.СообщитьОбОшибке(Сообщение, Отказ);
		
	КонецЕсли;
	
	Объект.ОбменТоварами     = Истина;
	Объект.ОбменЗаказами     = Истина;
	Объект.ВыгружатьНаСайт   = Истина;
	Объект.ВыгружатьКартинки = Истина;
	
	ВыполнитьОбменПослеЗакрытияФормы = Истина;
	
	Объект.ДатаНачалаВыгрузкиЗаказов = НачалоМесяца(ТекущаяДата());
	Объект.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.Наименование;
	Объект.ВидЗаказа = Справочники.ВидыЗаказовПокупателей.Основной;
	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	
	Если Не ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		Элементы.ГруппаОбменаЧерезКаталогНаДиске.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.КонтрагентДляПодстановкиВЗаказы.Доступность = Ложь;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Элементы.ГруппаНастроекАвтоматическогоОбменаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастроекАвтоматическогоОбменаСтраница1;
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = Ложь;
		Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = НСтр("ru = 'Расписание не задано'");
	Иначе
		Элементы.ГруппаНастроекАвтоматическогоОбменаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастроекАвтоматическогоОбменаСтраница2;
		Элементы.ИнтервалОбменаССайтом.Доступность = Ложь;
		ИнтервалОбменаССайтом = "Один раз в 30 минут";
	КонецЕсли;
	
	ЭтоЛокальныйРежим = ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме");
	
	РазделениеВключено = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецПроцедуры

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КомпоновщикНастроекИнициализирован = Ложь;
	ЗакрытьФормуБезусловно = Ложь;
	НеСоздаватьКонтрагентовПриЗагрузкеЗаказа = Ложь;
	
	ИнициализацияМастераНаКлиенте();
	
	ПредставлениеПустогоРасписания = Строка(Новый РасписаниеРегламентногоЗадания);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗакрытием.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отменить настройку обмена данными с web-сайтом и выйти из помощника?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события ПриИзменении поля переключателя ПереключательНазначениеОбменаВыгружатьНаСайт.
//
&НаКлиенте
Процедура ПереключательНазначениеОбменаВыгружатьНаСайтПриИзменении(Элемент)
	
	ПриИзмененииПереключательНазначениеОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля переключателя ПереключательНазначениеОбменаВыгружатьВКаталогНаДиске.
//
&НаКлиенте
Процедура ПереключательНазначениеОбменаВыгружатьВКаталогНаДискеПриИзменении(Элемент)
	
	ПриИзмененииПереключательНазначениеОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля переключателя ПереключательНазначениеОбменаОбменЧерезВебСервис.
//
&НаКлиенте
Процедура ПереключательНазначениеОбменаОбменЧерезВебСервисПриИзменении(Элемент)
	
	ПриИзмененииПереключательНазначениеОбмена();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля флажка ИспользоватьАвтоматическийОбменДанными.
//
&НаКлиенте
Процедура ИспользоватьАвтоматическийОбменДаннымиПриИзменении(Элемент)
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		
		Если Не РазделениеВключено Тогда
			РедактированиеРасписанияРегламентногоЗадания();
		Иначе
			УстановитьРасписаниеРегламентногоЗадания();
		КонецЕсли;
		
		ОбновитьПредставлениеРасписания();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКаталог(Истина);
	
КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода КаталогВыгрузки.
//
&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Неопределено, ПолноеИмяФайла);
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода КаталогЗагрузки.
//
&НаКлиенте
Процедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКаталог(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода КаталогЗагрузки.
//
&НаКлиенте
Процедура КаталогЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогЗагрузки;
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьЗапускПриложения(Неопределено, ПолноеИмяФайла);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СпособИдентификацииКонтрагентов.
//
&НаКлиенте
Процедура СпособИдентификацииКонтрагентовПриИзменении(Элемент)
	
	УстановитьВидимостьНастроекОбменаЗаказами();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	Объект.СостояниеЗаказа = ПолучитьСостояниеЗаказаПокупателя(Объект.ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.ВидыЗаказовПокупателей"), ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗаказаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПолученияДанных.Вставить("ВидЗаказа", Объект.ВидЗаказа);
	ДанныеВыбораСостояния = ПолучитьДанныеВыбора(Тип("СправочникСсылка.СостоянияЗаказовПокупателей"), ПараметрыПолученияДанных);
	
	ДанныеВыбора = ДанныеВыбораСостояния;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа)
	
	Возврат ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик команды ВыбратьВидыЦенНоменклатуры.
//
&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокВидовЦен", СписокВидовЦен);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьВидыЦенНоменклатурыЗавершение",ЭтаФорма);
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДаннымиССайтом.Форма.ФормаВыбораВидовЦен", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦенНоменклатурыЗавершение(Результат,Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СписокВидовЦен = Результат;
		
		СписокВидовЦенСтрока = "";
		Для каждого ЭлементСЗ Из СписокВидовЦен Цикл
			
			СписокВидовЦенСтрока = СписокВидовЦенСтрока + ?(СписокВидовЦенСтрока = "","","; ") + ЭлементСЗ.Представление;
			
		КонецЦикла;
		
		Элементы.ВыбратьВидыЦенНоменклатуры.Заголовок = СписокВидовЦенСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды ВыбратьГруппыНоменклатуры.
//
&НаКлиенте
Процедура ВыбратьГруппыНоменклатуры(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьГруппыНоменклатурыЗавершение",ЭтаФорма);
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДаннымиССайтом.Форма.ФормаВыбораГруппНоменклатуры", ПараметрыФормы, ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппыНоменклатурыЗавершение(Результат,Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СписокГруппНоменклатуры = Результат;
		Элементы.ВыбратьГруппыНоменклатуры.Заголовок = ПолучитьЗаголовокСпискаГруппНоменклатуры(СписокГруппНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КомандаДалее.
//
&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если (ТекущийНомерСтраницы = 2 И НЕ Объект.ОбменТоварами)
		ИЛИ (ТекущийНомерСтраницы = 3 И НЕ объект.ОбменЗаказами) Тогда
		
		ИзменитьНомерСтраницы(+2);
		
	Иначе
		
		ИзменитьНомерСтраницы(+1);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КомандаНазад.
//
&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если (ТекущийНомерСтраницы = 5 И НЕ Объект.ОбменЗаказами)
		ИЛИ (ТекущийНомерСтраницы = 4 И НЕ объект.ОбменТоварами) Тогда
		
		ИзменитьНомерСтраницы(-2);
		
	Иначе
		
		ИзменитьНомерСтраницы(-1);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КомандаГотово.
//
&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Если ПереключательНазначениеОбмена = 2 Тогда
		
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
		
	Иначе
		
		Отказ = Ложь;
		
		ВыполнитьПроверкиПриНажатииГотово(Отказ);
		
		Если Не Отказ Тогда
			
			СоздатьНовыйОбменДаннымиНаКлиенте(Отказ);
			
			ЗакрытьФормуБезусловно = Истина;
			Закрыть();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды КомандаОтмена.
//
&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	ЗакрытьФормуБезусловно = Ложь;
	Закрыть();
	
КонецПроцедуры

// Процедура - обработчик команды КомандаПроверитьСоединение.
//
&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	НастройкиПодключения = Новый Структура;
	
	НастройкиПодключения.Вставить("АдресСайта", Объект.АдресСайта);
	НастройкиПодключения.Вставить("ИмяПользователя", Объект.ИмяПользователя);
	НастройкиПодключения.Вставить("Пароль", Объект.Пароль);
	
	ТекстПредупреждения = "";
	ОбменССайтом.ВыполнитьТестовоеПодключениеКСайту(НастройкиПодключения, ТекстПредупреждения);
	
	ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
	
КонецПроцедуры

// Процедура - обработчик команды НастроитьРасписаниеРегламентногоЗадания.
//
&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбменаССайтомПриИзменении(Элемент)
	
	УстановитьРасписаниеРегламентногоЗадания();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

// Процедура - обработчик команды КакОпубликоватьВебСервис.
//
&НаКлиенте
Процедура КакОпубликоватьВебСервис(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", "Публикация на web-сервере");
	ПараметрыОткрытия.Вставить("КлючПодсказки", "ПомощникНастроекОбменаССайтом_ОбменЧерезВебСервис");
	ОткрытьФорму("Обработка.МенеджерПодсказок.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

