#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

//Процедура получения данных по расходной накладной
//
Процедура ПолучитьДанныеПоРасходнойНакладной(ДанныеДокумента, ТекущийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходнаяНакладная.Номер,
	|	РасходнаяНакладная.Ссылка КАК ТекущийДокумент,
	|	РасходнаяНакладная.Дата КАК ДатаДокумента,
	|	РасходнаяНакладная.СрокДоставки КАК СрокДоставки,
	|	РасходнаяНакладная.Организация,
	|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
	|	РасходнаяНакладная.Организация КАК ЮрФизЛицо,
	|	РасходнаяНакладная.Организация КАК Поставщик,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладная.Руководитель КАК Руководитель,
	|	РасходнаяНакладная.РуководительДолжность КАК РуководительДолжность,
	|	РасходнаяНакладная.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	РасходнаяНакладная.Отпустил КАК Отпустил,
	|	РасходнаяНакладная.ОтпустилДолжность КАК ОтпустилДолжность,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Организация
	|		ИНАЧЕ РасходнаяНакладная.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладная.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РасходнаяНакладная.Контрагент
	|		ИНАЧЕ РасходнаяНакладная.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	РасходнаяНакладная.Контрагент КАК Покупатель,
	|	РасходнаяНакладная.Контрагент КАК Плательщик,
	|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетПлательщика,
	|	РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	РасходнаяНакладная.Перевозчик КАК Перевозчик,
	|	РасходнаяНакладная.ВалютаДокумента,
	|	РасходнаяНакладная.Курс КАК Курс,
	|	РасходнаяНакладная.Кратность КАК Кратность,
	|	РасходнаяНакладная.НДСВключатьВСтоимость,
	|	РасходнаяНакладная.СуммаВключаетНДС,
	|	РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	РасходнаяНакладная.СтруктурнаяЕдиница.МОЛ КАК Кладовщик,
	|	РасходнаяНакладная.Автомобиль,
	|	РасходнаяНакладная.Автомобиль.Марка КАК МаркаАвтомобиля,
	|	РасходнаяНакладная.Автомобиль.Код КАК ГосНомерАвтомобиля,
	|	РасходнаяНакладная.Прицеп КАК Прицеп,
	|	РасходнаяНакладная.Прицеп.Марка КАК МаркаПрицепа,
	|	РасходнаяНакладная.Прицеп.Код КАК ГосНомерПрицепа,
	|	РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка КАК ДействующаяЛицензионнаяКарточка,
	|	РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.РегистрационныйНомерВГосударственномОргане КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.СерияЛицензионнойКарты КАК ЛицензионнаяКарточкаСерия,
	|	РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.НомерЛицензионнойКарты КАК ЛицензионнаяКарточкаНомер,
	|	РасходнаяНакладная.Автомобиль.ДействующаяЛицензионнаяКарточка.ВидДеятельности КАК ЛицензионнаяКарточкаВидДеятельности,
	|	РасходнаяНакладная.Водитель КАК Водитель,
	|	РасходнаяНакладная.Запасы.(
	|		НомерСтроки КАК Номер,
	|		Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА РасходнаяНакладная.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладная.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНаименование,
	|		Номенклатура.Код КАК КодПродукции,
	|		Количество КАК Количество,
	|		0 КАК КоличествоМест,
	|		Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		Выбор Когда НацВалюта.Значение = РасходнаяНакладная.ВалютаДокумента Тогда РасходнаяНакладная.Запасы.Цена Иначе РасходнаяНакладная.Запасы.Цена * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность Конец КАК Цена,
	|		Выбор Когда НацВалюта.Значение = РасходнаяНакладная.ВалютаДокумента Тогда РасходнаяНакладная.Запасы.Сумма Иначе РасходнаяНакладная.Запасы.Сумма * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность Конец КАК Сумма,
	|		Выбор Когда НацВалюта.Значение = РасходнаяНакладная.ВалютаДокумента Тогда РасходнаяНакладная.Запасы.СуммаНДС Иначе РасходнаяНакладная.Запасы.СуммаНДС * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность Конец КАК СуммаНДС,
	|		Выбор Когда НацВалюта.Значение = РасходнаяНакладная.ВалютаДокумента Тогда РасходнаяНакладная.Запасы.Всего Иначе РасходнаяНакладная.Запасы.Всего * РасходнаяНакладная.Курс / РасходнаяНакладная.Кратность Конец КАК Всего,
	|		Сумма КАК СуммаВВалютеДокумента,
	|		СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|		Всего КАК ВсегоВВалютеДокумента,
	|		СтавкаНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Характеристика,
	|		Содержание
	|	)
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная, Константа.НациональнаяВалюта КАК НацВалюта
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Документ";
	
	ВыборкаДанныхДокумента = Запрос.Выполнить().Выбрать();
	
	ВыборкаДанныхДокумента.Следующий();
	ДанныеДокумента.Вставить("Шапка", ВыборкаДанныхДокумента);
	
	ТабличнаяЧастьДокумента = ВыборкаДанныхДокумента.Запасы.Выгрузить();
	ДанныеДокумента.Вставить("ТабличнаяЧастьДокумента", ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьДанныеПоРасходнойНакладной()

//Процедура получения данных по расходной накладной
//
Процедура ПолучитьДанныеПоКорректировкеРеализации(ДанныеДокумента, ТекущийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Ссылка КАК ТекущийДокумент,
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.СрокДоставки КАК СрокДоставки,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
	|	КорректировкаРеализации.Организация КАК ЮрФизЛицо,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	КорректировкаРеализации.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КорректировкаРеализации.Руководитель КАК Руководитель,
	|	КорректировкаРеализации.РуководительДолжность КАК РуководительДолжность,
	|	КорректировкаРеализации.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	КорректировкаРеализации.Отпустил КАК Отпустил,
	|	КорректировкаРеализации.ОтпустилДолжность КАК ОтпустилДолжность,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Организация
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	КорректировкаРеализации.Контрагент КАК Плательщик,
	|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетПлательщика,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.Перевозчик КАК Перевозчик,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.Курс КАК Курс,
	|	КорректировкаРеализации.Кратность КАК Кратность,
	|	КорректировкаРеализации.НДСВключатьВСтоимость,
	|	КорректировкаРеализации.СуммаВключаетНДС,
	|	КорректировкаРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
	|	КорректировкаРеализации.ДоверенностьДата КАК ДоверенностьДата,
	|	КорректировкаРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	КорректировкаРеализации.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	КорректировкаРеализации.СтруктурнаяЕдиница.МОЛ КАК Кладовщик,
	|	КорректировкаРеализации.Автомобиль,
	|	КорректировкаРеализации.Автомобиль.Марка КАК МаркаАвтомобиля,
	|	КорректировкаРеализации.Автомобиль.Код КАК ГосНомерАвтомобиля,
	|	КорректировкаРеализации.Прицеп КАК Прицеп,
	|	КорректировкаРеализации.Прицеп.Марка КАК МаркаПрицепа,
	|	КорректировкаРеализации.Прицеп.Код КАК ГосНомерПрицепа,
	|	КорректировкаРеализации.Автомобиль.ДействующаяЛицензионнаяКарточка КАК ДействующаяЛицензионнаяКарточка,
	|	КорректировкаРеализации.Автомобиль.ДействующаяЛицензионнаяКарточка.РегистрационныйНомерВГосударственномОргане КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	КорректировкаРеализации.Автомобиль.ДействующаяЛицензионнаяКарточка.СерияЛицензионнойКарты КАК ЛицензионнаяКарточкаСерия,
	|	КорректировкаРеализации.Автомобиль.ДействующаяЛицензионнаяКарточка.НомерЛицензионнойКарты КАК ЛицензионнаяКарточкаНомер,
	|	КорректировкаРеализации.Автомобиль.ДействующаяЛицензионнаяКарточка.ВидДеятельности КАК ЛицензионнаяКарточкаВидДеятельности,
	|	КорректировкаРеализации.Водитель КАК Водитель,
	|	КорректировкаРеализации.Запасы.(
	|		НомерСтроки КАК Номер,
	|		Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|				ТОГДА КорректировкаРеализации.Запасы.Номенклатура.Наименование
	|			ИНАЧЕ ВЫРАЗИТЬ(КорректировкаРеализации.Запасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|		КОНЕЦ КАК ЗапасНаименование,
	|		Номенклатура.Код КАК КодПродукции,
	|		Количество КАК Количество,
	|		0 КАК КоличествоМест,
	|		Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		КорректировкаРеализации.Запасы.Цена * КорректировкаРеализации.Курс / КорректировкаРеализации.Кратность КАК Цена,
	|		КорректировкаРеализации.Запасы.Сумма * КорректировкаРеализации.Курс / КорректировкаРеализации.Кратность КАК Сумма,
	|		КорректировкаРеализации.Запасы.СуммаНДС * КорректировкаРеализации.Курс / КорректировкаРеализации.Кратность КАК СуммаНДС,
	|		КорректировкаРеализации.Запасы.Всего * КорректировкаРеализации.Курс / КорректировкаРеализации.Кратность КАК Всего,
	|		Сумма КАК СуммаВВалютеДокумента,
	|		СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|		Всего КАК ВсегоВВалютеДокумента,
	|		СтавкаНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Характеристика,
	|		Содержание
	|	)
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Документ";
	
	ВыборкаДанныхДокумента = Запрос.Выполнить().Выбрать();
	
	ВыборкаДанныхДокумента.Следующий();
	ДанныеДокумента.Вставить("Шапка", ВыборкаДанныхДокумента);
	
	ТабличнаяЧастьДокумента = ВыборкаДанныхДокумента.Запасы.Выгрузить();
	ДанныеДокумента.Вставить("ТабличнаяЧастьДокумента", ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьДанныеПоРасходнойНакладной()

//Процедура получения данных по перемещению запасов
//
Процедура ПолучитьДанныеПоПеремещениюЗапасов(ДанныеДокумента, ТекущийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента",	ТекущийДокумент.Дата);
	Запрос.УстановитьПараметр("Документ",  		ТекущийДокумент);
	
	// Если перемещение имеет дело с розницей, попробуем заполнить суммы по розн. ценам
	// иначе заполняем по учетной цене
	Если ЗначениеЗаполнено(ТекущийДокумент.СтруктурнаяЕдиница.РозничныйВидЦен) Тогда
		Запрос.УстановитьПараметр("ВидЦен",  		ТекущийДокумент.СтруктурнаяЕдиница.РозничныйВидЦен);
		Запрос.УстановитьПараметр("ВалютаВидаЦен", ?(ЗначениеЗаполнено(ТекущийДокумент.СтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены), ТекущийДокумент.СтруктурнаяЕдиница.РозничныйВидЦен.ВалютаЦены, Константы.НациональнаяВалюта.Получить()));
	ИначеЕсли ЗначениеЗаполнено(ТекущийДокумент.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен) Тогда
		Запрос.УстановитьПараметр("ВидЦен",  		ТекущийДокумент.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен);
		Запрос.УстановитьПараметр("ВалютаВидаЦен", ?(ЗначениеЗаполнено(ТекущийДокумент.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен.ВалютаЦены), ТекущийДокумент.СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен.ВалютаЦены, Константы.НациональнаяВалюта.Получить()));
	Иначе
		Запрос.УстановитьПараметр("ВидЦен",  		Справочники.ВидыЦен.Учетная);
		Запрос.УстановитьПараметр("ВалютаВидаЦен", ?(ЗначениеЗаполнено(Справочники.ВидыЦен.Учетная.ВалютаЦены), Справочники.ВидыЦен.Учетная.ВалютаЦены, Константы.НациональнаяВалюта.Получить()));
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПеремещениеЗапасов.Номер,
	|	ПеремещениеЗапасов.Ссылка КАК ТекущийДокумент,
	|	ПеремещениеЗапасов.Дата КАК ДатаДокумента,
	|	ПеремещениеЗапасов.Организация,
	|	ПеремещениеЗапасов.Организация.Префикс КАК Префикс,
	|	ПеремещениеЗапасов.Организация КАК ЮрФизЛицо,
	|	ПеремещениеЗапасов.Организация КАК Поставщик,
	|	ПеремещениеЗапасов.Организация КАК Контрагент,
	|	ПеремещениеЗапасов.Организация КАК Руководители,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница.Организация КАК Грузоотправитель,
	|	ПеремещениеЗапасов.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчет,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.Организация КАК Грузополучатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель.Организация КАК Покупатель,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница.Организация КАК Плательщик,
	|	ПеремещениеЗапасов.Организация.БанковскийСчетПоУмолчанию КАК БанковскийСчетПлательщика,
	|	ПеремещениеЗапасов.СтруктурнаяЕдиница,
	|	ПеремещениеЗапасов.Ячейка,
	|	ПеремещениеЗапасов.ЗаказПокупателя,
	|	ПеремещениеЗапасов.СчетЗатрат,
	|	ПеремещениеЗапасов.НаправлениеДеятельности,
	|	ПеремещениеЗапасов.Отпустил КАК Кладовщик,
	|	ПеремещениеЗапасов.АдресДоставки КАК АдресДоставки,
	|	ПеремещениеЗапасов.Автомобиль,
	|	ПеремещениеЗапасов.Автомобиль.Марка КАК МаркаАвтомобиля,
	|	ПеремещениеЗапасов.Автомобиль.Код КАК ГосНомерАвтомобиля,
	|	ПеремещениеЗапасов.БанковскийСчетПеревозчика,
	|	ПеремещениеЗапасов.Водитель,
	|	ПеремещениеЗапасов.ГлавныйБухгалтер,
	|	ПеремещениеЗапасов.ДоверенностьВыдана,
	|	ПеремещениеЗапасов.ДоверенностьДата,
	|	ПеремещениеЗапасов.ДоверенностьЛицо,
	|	ПеремещениеЗапасов.ДоверенностьНомер,
	|	ПеремещениеЗапасов.Отпустил,
	|	ПеремещениеЗапасов.ОтпустилДолжность,
	|	ПеремещениеЗапасов.Перевозчик,
	|	ПеремещениеЗапасов.Прицеп,
	|	ПеремещениеЗапасов.Прицеп.Марка КАК МаркаПрицепа,
	|	ПеремещениеЗапасов.Прицеп.Код КАК ГосНомерПрицепа,
	|	ПеремещениеЗапасов.Автомобиль.ДействующаяЛицензионнаяКарточка КАК ДействующаяЛицензионнаяКарточка,
	|	ПеремещениеЗапасов.Автомобиль.ДействующаяЛицензионнаяКарточка.РегистрационныйНомерВГосударственномОргане КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ПеремещениеЗапасов.Автомобиль.ДействующаяЛицензионнаяКарточка.СерияЛицензионнойКарты КАК ЛицензионнаяКарточкаСерия,
	|	ПеремещениеЗапасов.Автомобиль.ДействующаяЛицензионнаяКарточка.НомерЛицензионнойКарты КАК ЛицензионнаяКарточкаНомер,
	|	ПеремещениеЗапасов.Автомобиль.ДействующаяЛицензионнаяКарточка.ВидДеятельности КАК ЛицензионнаяКарточкаВидДеятельности,
	|	ПеремещениеЗапасов.Руководитель,
	|	ПеремещениеЗапасов.РуководительДолжность,
	|	ПеремещениеЗапасов.СрокДоставки,
	|	ПеремещениеЗапасов.ОснованиеПечати
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Ссылка,
	|	ПеремещениеЗапасовЗапасы.НомерСтроки,
	|	ПеремещениеЗапасовЗапасы.Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.НаименованиеПолное КАК ЗапасНаименование,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.Код КАК КодПродукции,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.Артикул КАК Артикул,
	|	ПеремещениеЗапасовЗапасы.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения КАК ВидУпаковки,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ПеремещениеЗапасовЗапасы.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	0 КАК КоличествоМест,
	|	ПеремещениеЗапасовЗапасы.Количество КАК Количество,
	|	ПеремещениеЗапасовЗапасы.Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия,
	|	ПеремещениеЗапасовЗапасы.Резерв,
	|	ПеремещениеЗапасовЗапасы.ЗаказПокупателя,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютаВидаЦен = КонстантаНациональнаяВалюта.Значение
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * ПеремещениеЗапасовЗапасы.Количество, 0)
	|			ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена * ПеремещениеЗапасовЗапасы.Количество, 0) * КурсыВалютСрезПоследних.Курс / ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
	|						ТОГДА 1
	|					ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаДокумента,
	|				ВидЦен = &ВидЦен
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ПеремещениеЗапасовЗапасы.Номенклатура
	|						ИЗ
	|							Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|						ГДЕ
	|							ПеремещениеЗапасовЗапасы.Ссылка = &Документ)
	|					И Характеристика В
	|						(ВЫБРАТЬ
	|							ПеремещениеЗапасовЗапасы.Характеристика
	|						ИЗ
	|							Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|						ГДЕ
	|							ПеремещениеЗапасовЗапасы.Ссылка = &Документ)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ПеремещениеЗапасовЗапасы.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаВидаЦен) КАК КурсыВалютСрезПоследних,
	|	Константа.НациональнаяВалюта КАК КонстантаНациональнаяВалюта
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &Документ";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДанныхДокумента = РезультатЗапроса[0].Выбрать();
	
	ВыборкаДанныхДокумента.Следующий();
	ДанныеДокумента.Вставить("Шапка", ВыборкаДанныхДокумента);
	
	ТабличнаяЧастьДокумента = РезультатЗапроса[1].Выгрузить();
	ДанныеДокумента.Вставить("ТабличнаяЧастьДокумента", ТабличнаяЧастьДокумента);
	
КонецПроцедуры // ПолучитьДанныеПоПеремещениюЗапасов()

// Процедура получения данных о отчет о переработке
//
Процедура ПолучитьДанныеПоОтчетуОПереработке(ДанныеДокумента, ТекущийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОПереработке.Номер,
	|	ОтчетОПереработке.Ссылка КАК ТекущийДокумент,
	|	ОтчетОПереработке.Дата КАК ДатаДокумента,
	|	ОтчетОПереработке.Организация,
	|	ОтчетОПереработке.Организация.Префикс КАК Префикс,
	|	ОтчетОПереработке.Организация КАК ЮрФизЛицо,
	|	ОтчетОПереработке.Организация КАК Поставщик,
	|	ОтчетОПереработке.Организация КАК Контрагент,
	|	ОтчетОПереработке.Контрагент КАК Покупатель,
	|	ОтчетОПереработке.Контрагент КАК Плательщик,
	|	ОтчетОПереработке.БанковскийСчетКонтрагента КАК БанковскийСчетПлательщика,
	|	ОтчетОПереработке.ВалютаДокумента,
	|	ОтчетОПереработке.Курс КАК Курс,
	|	ОтчетОПереработке.Кратность КАК Кратность,
	|	ОтчетОПереработке.НДСВключатьВСтоимость,
	|	ОтчетОПереработке.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ОтчетОПереработке.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтчетОПереработке.Организация
	|		ИНАЧЕ ОтчетОПереработке.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА ОтчетОПереработке.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ОтчетОПереработке.Контрагент
	|		ИНАЧЕ ОтчетОПереработке.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетОПереработке.БанковскийСчет КАК БанковскийСчет,
	|	ОтчетОПереработке.АдресДоставки КАК АдресДоставки,
	|	ОтчетОПереработке.Автомобиль,
	|	ОтчетОПереработке.Автомобиль.Марка КАК МаркаАвтомобиля,
	|	ОтчетОПереработке.Автомобиль.Код КАК ГосНомерАвтомобиля,
	|	ОтчетОПереработке.БанковскийСчетПеревозчика,
	|	ОтчетОПереработке.Водитель,
	|	ОтчетОПереработке.ГлавныйБухгалтер,
	|	ОтчетОПереработке.ДоверенностьВыдана,
	|	ОтчетОПереработке.ДоверенностьДата,
	|	ОтчетОПереработке.ДоверенностьЛицо,
	|	ОтчетОПереработке.ДоверенностьНомер,
	|	ОтчетОПереработке.Отпустил КАК Кладовщик,
	|	ОтчетОПереработке.Отпустил,
	|	ОтчетОПереработке.ОтпустилДолжность,
	|	ОтчетОПереработке.Перевозчик,
	|	ОтчетОПереработке.Прицеп,
	|	ОтчетОПереработке.Прицеп.Марка КАК МаркаПрицепа,
	|	ОтчетОПереработке.Прицеп.Код КАК ГосНомерПрицепа,
	|	ОтчетОПереработке.Автомобиль.ДействующаяЛицензионнаяКарточка КАК ДействующаяЛицензионнаяКарточка,
	|	ОтчетОПереработке.Автомобиль.ДействующаяЛицензионнаяКарточка.РегистрационныйНомерВГосударственномОргане КАК ЛицензионнаяКарточкаРегистрационныйНомер,
	|	ОтчетОПереработке.Автомобиль.ДействующаяЛицензионнаяКарточка.СерияЛицензионнойКарты КАК ЛицензионнаяКарточкаСерия,
	|	ОтчетОПереработке.Автомобиль.ДействующаяЛицензионнаяКарточка.НомерЛицензионнойКарты КАК ЛицензионнаяКарточкаНомер,
	|	ОтчетОПереработке.Автомобиль.ДействующаяЛицензионнаяКарточка.ВидДеятельности КАК ЛицензионнаяКарточкаВидДеятельности,
	|	ОтчетОПереработке.Руководитель,
	|	ОтчетОПереработке.РуководительДолжность,
	|	ОтчетОПереработке.СрокДоставки,
	|	ОтчетОПереработке.ОснованиеПечати,
	|	ОтчетОПереработке.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтчетОПереработке.Продукция.(
	|		НомерСтроки КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ЗапасНаименование,
	|		Содержание КАК Содержание,
	|		Номенклатура.Код КАК КодПродукции,
	|		Количество КАК Количество,
	|		0 КАК КоличествоМест,
	|		Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		ОтчетОПереработке.Продукция.Цена * ОтчетОПереработке.Курс / ОтчетОПереработке.Кратность КАК Цена,
	|		ОтчетОПереработке.Продукция.Сумма * ОтчетОПереработке.Курс / ОтчетОПереработке.Кратность КАК Сумма,
	|		ОтчетОПереработке.Продукция.СуммаНДС * ОтчетОПереработке.Курс / ОтчетОПереработке.Кратность КАК СуммаНДС,
	|		ОтчетОПереработке.Продукция.Всего * ОтчетОПереработке.Курс / ОтчетОПереработке.Кратность КАК Всего,
	|		Сумма КАК СуммаВВалютеДокумента,
	|		СуммаНДС КАК СуммаНДСВВалютеДокумента,
	|		Всего КАК ВсегоВВалютеДокумента,
	|		СтавкаНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Характеристика
	|	),
	|	ОтчетОПереработке.Отходы.(
	|		НомерСтроки КАК Номер,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК ЗапасНаименование,
	|		Номенклатура.Код КАК КодПродукции,
	|		Количество,
	|		0 КАК КоличествоМест,
	|		Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		ЕдиницаИзмерения КАК ВидУпаковки,
	|		ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|		0 КАК Цена,
	|		0 КАК Сумма,
	|		0 КАК СуммаНДС,
	|		0 КАК Всего,
	|		0 КАК СуммаВВалютеДокумента,
	|		0 КАК СуммаНДСВВалютеДокумента,
	|		0 КАК ВсегоВВалютеДокумента,
	|		NULL КАК СтавкаНДС,
	|		Номенклатура.Артикул КАК Артикул,
	|		Характеристика КАК Характеристика
	|	)
	|ИЗ
	|	Документ.ОтчетОПереработке КАК ОтчетОПереработке
	|ГДЕ
	|	ОтчетОПереработке.Ссылка = &Документ";
	
	ВыборкаДанныхДокумента = Запрос.Выполнить().Выбрать();
	
	ВыборкаДанныхДокумента.Следующий();
	ДанныеДокумента.Вставить("Шапка", ВыборкаДанныхДокумента);
	
	ТабличнаяЧастьПродукция = ВыборкаДанныхДокумента.Продукция.Выгрузить();
	ДанныеДокумента.Вставить("ТабличнаяЧастьПродукция", ТабличнаяЧастьПродукция);
	
	ТабличнаяЧастьОтходы = ВыборкаДанныхДокумента.Продукция.Выгрузить();
	ДанныеДокумента.Вставить("ТабличнаяЧастьОтходы", ТабличнаяЧастьОтходы);
	
КонецПроцедуры // ПолучитьДанныеПоОтчетуОПереработке()

Функция ПредставлениеОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
	
		Возврат "";
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		Возврат Нстр("ru = 'Договор: '") + Строка(ОснованиеПечатиСсылка.Наименование);
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		Тогда
		
		Возврат Строка(ОснованиеПечатиСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

// Функция возвращает табличный документ для печати ТТН
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ДанныеДокумента		= Новый Структура;
	ТабличныйДокумент	= Новый ТабличныйДокумент;
	ПервыйДокумент 		= Истина;
	
	Для каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьТТН_ТТН";
		
		ДанныеДокумента.Очистить();
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
			
			ПолучитьДанныеПоРасходнойНакладной(ДанныеДокумента, ТекущийДокумент);
			Шапка = ДанныеДокумента.Шапка;
			ТабличнаяЧастьДокумента = ДанныеДокумента.ТабличнаяЧастьДокумента;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			ПолучитьДанныеПоКорректировкеРеализации(ДанныеДокумента, ТекущийДокумент);
			Шапка = ДанныеДокумента.Шапка;
			ТабличнаяЧастьДокумента = ДанныеДокумента.ТабличнаяЧастьДокумента;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			
			ПолучитьДанныеПоПеремещениюЗапасов(ДанныеДокумента, ТекущийДокумент);
			Шапка = ДанныеДокумента.Шапка;
			ТабличнаяЧастьДокумента = ДанныеДокумента.ТабличнаяЧастьДокумента;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ОтчетОПереработке") Тогда
			
			ПолучитьДанныеПоОтчетуОПереработке(ДанныеДокумента, ТекущийДокумент);
			Шапка = ДанныеДокумента.Шапка;
			ТабличнаяЧастьПродукция = ДанныеДокумента.ТабличнаяЧастьПродукция;
			ТабличнаяЧастьОтходы = ДанныеДокумента.ТабличнаяЧастьОтходы;
			
		КонецЕсли; 
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_ТТН");
		
		// Выводим общие реквизиты шапки
		СведенияОПоставщике       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента, , Шапка.БанковскийСчет);
		СведенияОГрузоотправителе = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента, , ?(Шапка.Грузоотправитель = Шапка.ЮрФизЛицо, Шапка.БанковскийСчет, Неопределено));
		СведенияОПокупателе       = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента, , Шапка.БанковскийСчетПлательщика);
		СведенияОГрузополучателе  = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
		
		Если Шапка.ДатаДокумента < Дата('20110101') Тогда
			НомерДокумента = УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(Шапка.Номер, Шапка.Префикс);
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.НомерДокумента                = НомерДокумента;
		ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
		ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
		ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
		ОбластьМакета.Параметры.ГрузоотправительПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.ГрузополучательПредставление  = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		ОбластьМакета.Параметры.ПлательщикПредставление       = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОГрузоотправителе.КодПоОКПО;
		ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
		ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		// инициализация итогов по странице
		ИтогоКоличествоНаСтранице = 0;
		ИтогоСуммаНаСтранице      = 0;
		ИтогоНДСНаСтранице        = 0;
		ИтогоСуммаСНДСНаСтранице  = 0;
		
		// инициализация итогов по документу
		ИтогоМест		= 0;
		ИтогоКоличество = 0;
		ИтогоСуммаСНДС	= 0;
		ИтогоСумма		= 0;
		ИтогоНДС		= 0;
		Ном				= 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.РасходнаяНакладная")
			ИЛИ ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			КоличествоСтрок = ТабличнаяЧастьДокумента.Количество();
			
			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом		= Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала		= Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку	= ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;
			
			Для каждого ВыборкаСтрокЗапасы Из ТабличнаяЧастьДокумента Цикл
				
				Если ВыборкаСтрокЗапасы.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Ном				= Ном + 1;
				ЦелаяСтраница	= (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
					ИЛИ ((ПереноситьПоследнююСтроку = 1) И (Ном = КоличествоСтрок)) Тогда
				
					ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
					
					ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;
					
					// очистим итоги по странице
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
					
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				Если ЗначениеЗаполнено(ВыборкаСтрокЗапасы.Содержание) Тогда
					ОбластьМакета.Параметры.ЗапасНаименование = ВыборкаСтрокЗапасы.Содержание;
				Иначе
					ОбластьМакета.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.ЗапасНаименование, 
																		ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				КонецЕсли;
				
				СуммаСНДС	= ВыборкаСтрокЗапасы.Всего;
				
				Мест		= ВыборкаСтрокЗапасы.КоличествоМест;
				
				Коэффициент = 1;
				Если ТипЗнч(ВыборкаСтрокЗапасы.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = ВыборкаСтрокЗапасы.Коэффициент;
					
				КонецЕсли;
				Количество = ВыборкаСтрокЗапасы.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				
				СуммаНДС	= ВыборкаСтрокЗапасы.СуммаНДС;
				СуммаБезНДС = ВыборкаСтрокЗапасы.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокЗапасы.СуммаНДС, 0);
				
				ОбластьМакета.Параметры.Сумма = СуммаСНДС;
				ОбластьМакета.Параметры.Цена  = СуммаСНДС / ?(Количество = 0, 1, Количество);
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// увеличим итоги по странице
				ИтогоКоличествоНаСтранице	= ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице		+ СуммаБезНДС;
				ИтогоНДСНаСтранице 			= ИтогоНДСНаСтранице		+ СуммаНДС;
				ИтогоСуммаСНДСНаСтранице 	= ИтогоСуммаСНДСНаСтранице	+ СуммаСНДС;
				
				// увеличим итоги по документу
				ИтогоМест		= ИтогоМест			+ Мест;
				ИтогоКоличество = ИтогоКоличество	+ Количество;
				ИтогоСумма		= ИтогоСумма		+ СуммаБезНДС;
				ИтогоНДС		= ИтогоНДС			+ СуммаНДС;
				ИтогоСуммаСНДС	= ИтогоСуммаСНДС	+ СуммаСНДС;
			
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
			
			КоличествоСтрок = ТабличнаяЧастьДокумента.Количество();
			
			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;
			
			
			Для каждого ВыборкаСтрокЗапасы Из ТабличнаяЧастьДокумента Цикл
				
				Ном				= Ном + 1;
				ЦелаяСтраница	= (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
					ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
					
					ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;
					
					// очистим итоги по странице
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокЗапасы);
				
				ОбластьМакета.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокЗапасы.ЗапасНаименование, 
																		ВыборкаСтрокЗапасы.Характеристика, ВыборкаСтрокЗапасы.Артикул);
				
				Мест		= ВыборкаСтрокЗапасы.КоличествоМест;
				
				Коэффициент = 1;
				Если ТипЗнч(ВыборкаСтрокЗапасы.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = ВыборкаСтрокЗапасы.Коэффициент;
					
				КонецЕсли;
				Количество	= ВыборкаСтрокЗапасы.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				
				ОбластьМакета.Параметры.Цена  = ВыборкаСтрокЗапасы.Сумма / ?(Количество = 0, 1, Количество);
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// увеличим итоги по странице
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + ВыборкаСтрокЗапасы.Сумма;
				ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + 0;
				ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + ВыборкаСтрокЗапасы.Сумма;
				
				// увеличим итоги по документу
				ИтогоМест       = ИтогоМест       + Мест;
				ИтогоКоличество = ИтогоКоличество + Количество;
				ИтогоСумма      = ИтогоСумма      + ВыборкаСтрокЗапасы.Сумма; 	//СуммаБезНДС;
				ИтогоНДС        = ИтогоНДС        + 0;							//СуммаНДС;
				ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + ВыборкаСтрокЗапасы.Сумма; 	//СуммаСНДС;
			
			КонецЦикла;
			
		Иначе
			
			КоличествоСтрок = ТабличнаяЧастьПродукция.Количество() + ТабличнаяЧастьОтходы.Количество();
			
			Если КоличествоСтрок = 1 Тогда
				ПереноситьПоследнююСтроку = 0;
			Иначе
				ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
				ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
				ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
			КонецЕсли;
			
			Для каждого ВыборкаСтрокПродукция Из ТабличнаяЧастьПродукция Цикл
			
				Ном           = Ном + 1;
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
					ИЛИ ((ПереноситьПоследнююСтроку = 1) И (Ном = КоличествоСтрок)) Тогда
				
					ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
					
					ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;
					
					// очистим итоги по странице
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокПродукция);
				
				Если НЕ ПустаяСтрока(ВыборкаСтрокПродукция.Содержание) Тогда
					
					ОбластьМакета.Параметры.ЗапасНаименование = ВыборкаСтрокПродукция.Содержание;
					
				Иначе
					
					ОбластьМакета.Параметры.ЗапасНаименование =
						УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокПродукция.ЗапасНаименование, ВыборкаСтрокПродукция.Характеристика);
					
				КонецЕсли;
				
				СуммаСНДС	= ВыборкаСтрокПродукция.Всего;
				Мест		= ВыборкаСтрокПродукция.КоличествоМест;
				
				Коэффициент = 1;
				Если ТипЗнч(ВыборкаСтрокПродукция.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = ВыборкаСтрокПродукция.Коэффициент;
					
				КонецЕсли;
				Количество	= ВыборкаСтрокПродукция.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				
				СуммаНДС	= ВыборкаСтрокПродукция.СуммаНДС;
				СуммаБезНДС = ВыборкаСтрокПродукция.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокПродукция.СуммаНДС, 0);
				
				ОбластьМакета.Параметры.Сумма = СуммаСНДС;
				ОбластьМакета.Параметры.Цена  = СуммаСНДС / ?(Количество = 0, 1, Количество);
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// увеличим итоги по странице
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
				ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
				ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;
				
				// увеличим итоги по документу
				ИтогоМест       = ИтогоМест       + Мест;
				ИтогоКоличество = ИтогоКоличество + Количество;
				ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
				ИтогоНДС        = ИтогоНДС        + СуммаНДС;
				ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
			
			КонецЦикла;
			
			Для каждого ВыборкаСтрокОтходы Из ТабличнаяЧастьОтходы Цикл
			
				Ном = Ном + 1;
				ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
				
				Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				Или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
					
					ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
					
					ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;
					
					// очистим итоги по странице
					ИтогоКоличествоНаСтранице = 0;
					ИтогоСуммаСНДСНаСтранице  = 0;
					
					НомерСтраницы = НомерСтраницы + 1;
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
					ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
				КонецЕсли;
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокОтходы);
				
				ОбластьМакета.Параметры.ЗапасНаименование = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(ВыборкаСтрокОтходы.ЗапасНаименование, ВыборкаСтрокОтходы.Характеристика);
					
				Мест		= ВыборкаСтрокОтходы.КоличествоМест;
				
				Коэффициент = 1;
				Если ТипЗнч(ВыборкаСтрокОтходы.ЕдиницаИзмеренияДокумент) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					
					Коэффициент = ВыборкаСтрокОтходы.Коэффициент;
					
				КонецЕсли;
				Количество	= ВыборкаСтрокОтходы.Количество * Коэффициент;
				
				ОбластьМакета.Параметры.Количество = Количество;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				// увеличим итоги по странице
				ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
				
				// увеличим итоги по документу
				ИтогоМест		= ИтогоМест			+ Мест;
				ИтогоКоличество = ИтогоКоличество	+ Количество;
			
			КонецЦикла;
			
		КонецЕсли;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ЗначенияПараметров = Новый Структура;
		
		ФИООтпускРазрешил = "";
		УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИООтпускРазрешил, Строка(Шапка.Руководитель));
		ЗначенияПараметров.Вставить("ФИООтпускРазрешил", ФИООтпускРазрешил);
		ЗначенияПараметров.Вставить("ОтпускРазрешилДолжность", Шапка.РуководительДолжность);
		
		ФИОГлавногоБухгалтера = "";
		УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИОГлавногоБухгалтера, Строка(Шапка.ГлавныйБухгалтер));
		ЗначенияПараметров.Вставить("ФИОГлавногоБухгалтера", ФИОГлавногоБухгалтера);
		
		ФИООтпускПроизвел = "";
		УправлениеНебольшойФирмойСервер.ФамилияИнициалыПоНаименованию(ФИООтпускПроизвел, Строка(Шапка.Отпустил));
		ЗначенияПараметров.Вставить("ФИООтпускПроизвел", ФИООтпускПроизвел);
		ЗначенияПараметров.Вставить("ОтпускПроизвелДолжность", Шапка.ОтпустилДолжность);
		
		ЗначенияПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
		ЗначенияПараметров.Вставить("ОтпущеноНаСуммуПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.НациональнаяВалюта.Получить()));
		ЗначенияПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтогоМест, ,",,,,,,,,0"));
		ЗначенияПараметров.Вставить("ВсегоНаименований", ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0"));
		
		ЗначенияПараметров.Вставить("ДоверенностьНомер", Шапка.ДоверенностьНомер);
		ЗначенияПараметров.Вставить("ДоверенностьДата", Формат(Шапка.ДоверенностьДата,"ДФ=dd.MM.yyyy"));
		ЗначенияПараметров.Вставить("ДоверенностьВыдана", Шапка.ДоверенностьВыдана);
		ЗначенияПараметров.Вставить("ДоверенностьЛицо", Шапка.ДоверенностьЛицо);
		
		ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Выводим транспортный раздел
		ОбластьМакета = Макет.ПолучитьОбласть("ТранспортныйРаздел");
		ЗначенияПараметров.Очистить();
		
		ЗначенияПараметров.Вставить("Номер", НомерДокумента);
		ЗначенияПараметров.Вставить("СрокДоставки", Формат(Шапка.СрокДоставки, "ДФ=dd.MM.yyyy"));
		
		СведенияОПеревозчике = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Шапка.Перевозчик,  Шапка.ДатаДокумента);
		ПеревозчикПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны, НомерСчета, Банк, БИК, КоррСчет");
		ЗначенияПараметров.Вставить("Перевозчик", ПеревозчикПредставление);
		
		ЗначенияПараметров.Вставить("МаркаАвтомобиля", Шапка.МаркаАвтомобиля);
		ЗначенияПараметров.Вставить("ГосНомерАвтомобиля", Шапка.ГосНомерАвтомобиля);
		
		ЗаказчикПеревозокПредставление = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование, ИНН, ФактическийАдрес, Телефоны, НомерСчета, Банк, БИК, КоррСчет");
		ЗначенияПараметров.Вставить("ЗаказчикПеревозок", ЗаказчикПеревозокПредставление);
		
		Если ЗначениеЗаполнено(Шапка.Водитель) Тогда
			
			ДанныеВодителя = УправлениеНебольшойФирмойСервер.ДанныеФизЛица(Шапка.Организация, Шапка.Водитель, Шапка.ДатаДокумента, Истина);
			ЗначенияПараметров.Вставить("Водитель", ДанныеВодителя.Представление);
			
			ДокументыФизическихЛиц = Справочники.ФизическиеЛица.ДокументФизЛицаПоВиду(Шапка.ДатаДокумента, Шапка.Водитель, Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
			Если ДокументыФизическихЛиц.Количество() > 0 Тогда
				
				ВодительскоеУдостоверение = Нстр("ru = 'Серия '") + Строка(ДокументыФизическихЛиц[0].Серия) + Нстр("ru = ' № '") + Строка(ДокументыФизическихЛиц[0].Номер);
				ЗначенияПараметров.Вставить("ВодительскоеУдостоверение", ВодительскоеУдостоверение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДействующаяЛицензионнаяКарточка) Тогда
			
			ЛицензионнаяКарточка = Шапка.ДействующаяЛицензионнаяКарточка.ВидЛицензионнойКарты;
			ЗначенияПараметров.Вставить("ВидПеревозки", Шапка.ЛицензионнаяКарточкаВидДеятельности);
			ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаРегистрационныйНомер", Шапка.ЛицензионнаяКарточкаРегистрационныйНомер);
			ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаСерия", Шапка.ЛицензионнаяКарточкаСерия);
			ЗначенияПараметров.Вставить("ЛицензионнаяКарточкаНомер", Шапка.ЛицензионнаяКарточкаНомер);
			
		Иначе
			
			ЛицензионнаяКарточка = "Стандартная";
			
		КонецЕсли;
		
		ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка = "Ограниченная");
		ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Ограничено.Шрифт, , , , , , НЕ ЛицензионнаяКарточка = "Ограниченная");
		
		ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
		ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;
		
		ПунктПогрузки = "";
		Если ЗначениеЗаполнено(Шапка.СтруктурнаяЕдиница) Тогда
			
			МассивВладельцев = Новый Массив;
			МассивВладельцев.Добавить(Шапка.СтруктурнаяЕдиница);
			Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , Справочники.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы);
			Если Адреса.Количество() > 0 Тогда
				
				ПунктПогрузки = Адреса[0].Представление;
				
			КонецЕсли;
		
			Телефоны = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , Справочники.ВидыКонтактнойИнформации.ТелефонСтруктурнойЕдиницы);
			Если Телефоны.Количество() > 0 Тогда
				
				Для каждого Телефон Из Телефоны Цикл
					
					ПунктПогрузки = ПунктПогрузки + ?(ПустаяСтрока(ПунктПогрузки), "", ", ") + Телефон.Представление;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		ЗначенияПараметров.Вставить("ПунктПогрузки", ПунктПогрузки);
		
		ПунктРазгрузки = "";
		Если НЕ ПустаяСтрока(Шапка.АдресДоставки) Тогда
			
			ПунктРазгрузки = Шапка.АдресДоставки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Покупатель) Тогда
			
			ВидКИПоДокументу = ?(ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ПеремещениеЗапасов"), 
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
				
			МассивВладельцев.Очистить();
			МассивВладельцев.Добавить(Шапка.Покупатель);
			
			ТелефоныКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивВладельцев, , ВидКИПоДокументу);
			Если ТелефоныКонтрагента.Количество() > 0 Тогда
				
				Для каждого Телефон Из ТелефоныКонтрагента Цикл
					
					ПунктПогрузки = ПунктПогрузки + ?(ПустаяСтрока(ПунктПогрузки), "", ", ") + Телефон.Представление;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		ЗначенияПараметров.Вставить("ПунктРазгрузки", ПунктРазгрузки);
		
		ЗначенияПараметров.Вставить("МаркаПрицепа", Шапка.МаркаПрицепа);
		ЗначенияПараметров.Вставить("ГосНомерПрицепа", Шапка.ГосНомерПрицепа);
		
		ОбластьМакета.Параметры.Заполнить(ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура печати ТТН
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", "Товарно-транспортная накладная", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	// параметры отправки печатных форм по электронной почте
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли