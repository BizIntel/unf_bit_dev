
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьТранспортныйМодуль(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	ЗаполнитьДокументыЗапросаОстатковНаСервере(Объект.ОрганизацияЕГАИС, Объект.ОстаткиВРегистре1, Объект.ОстаткиВРегистре2);
	
	ИнициализироватьПомощник();
	
	// Устанавливаем текущую таблицу переходов
	СценарийКорректировкиОстатковЕГАИС();
	
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
	Объект.КорректироватьОстаткиНемаркируемойПродукции = Константы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Получить();
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если НЕ Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ОпределитьТипТорговогоОбъектаНаСервере(Объект.ОрганизацияЕГАИС, Объект.ЭтоСклад, Объект.ЭтоТорговыйЗал);
	КонецЕсли;
	
	УстановитьВидимостьПриИзмененииТорговогоОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииОкончание
		ИЛИ ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Перед завершением работы помощника требуется удалить созданные документы'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеФормы_Подтверждение", ЭтотОбъект),
			ТекстВопроса,
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	КорректировкаОстатковЕГАИСКлиентПереопределяемый.ОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПоказатьНезагруженныеДокументы") Тогда
		СтандартнаяОбработка = Ложь;
		
		НачатьЗапускПриложения(
			Новый ОписаниеОповещения("ЗапускПриложения_Завершение", ЭтотОбъект),
			"http://" + ТранспортныйМодуль.АдресУТМ + ":" + Формат(ТранспортныйМодуль.ПортУТМ, "ЧГ=0") + "/opt/out");
		
	ИначеЕсли СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеподтвержденныеДокументы")) <> 0
		ИЛИ СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеоформленныеДокументы")) <> 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ИмяДокумента = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "_") + 1);
		
		ТипЗначения = ПредопределенноеЗначение("Документ." + ИмяДокумента + ".ПустаяСсылка");
		
		Если СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеподтвержденныеДокументы")) <> 0 Тогда
			МассивСтрок = НеподтвержденныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		Иначе
			МассивСтрок = НеоформленныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		КонецЕсли;
		
		МассивСсылок = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			МассивСсылок.Добавить(СтрокаТЧ.ДокументСсылка);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", МассивСсылок);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ВыполнитьОбмен") Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьОбмен();
		
	ИначеЕсли ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ЗапроситьОстаткиЕГАИС") Тогда
		СтандартнаяОбработка = Ложь;
		ЗапроситьОстаткиЕГАИС();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроверку(Команда)
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТаблицыОстатков(Команда)
	
	ЗаполнитьНесопоставленнуюПродукцию();
	
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКорректировки(Команда)
	
	РассчитатьКоличествоКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличество(Команда)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ТаблицаКорректировки.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ТаблицаКорректировки.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.ПередатьВРегистр2 = 0;
		ДанныеСтроки.ПоставитьНаБалансВРегистр1 = 0;
		ДанныеСтроки.ПоставитьНаБалансВРегистр2 = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЕГАИС(Команда)
	
	МассивСсылок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.ДокументСсылка);
	КонецЦикла;
	
	СписокДокументов = ПолучитьПроведенныеДокументыДляВыгрузки(МассивСсылок);
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокДокументов", СписокДокументов);
	ДополнительныеПараметры.Вставить("ТекущийИндекс", 0);
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(СписокДокументов[0].ВидДокумента);
	ВходныеПараметры.ДокументСсылка = СписокДокументов[0].ДокументСсылка;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента", ЭтотОбъект, ДополнительныеПараметры),
		СписокДокументов[0].ВидДокумента,
		ВходныеПараметры,
		ТранспортныйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВНачало(Команда)
	
	ИнициализироватьПомощник();
	
	ОчиститьСлужебныеРеквизиты();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКлассификаторы(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВХранилище", ПоместитьНесопоставленныеТоварыВоВремененноеХранилище());
	
	ОткрытьФорму(
		"Обработка.СопоставлениеНоменклатурыЕГАИС.Форма.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект,
		Новый УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("ПриЗавершенииСопоставленияКлассификаторов", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияЕГАИСПриИзменении(Элемент)
	
	ОчиститьСлужебныеРеквизиты();
	
	ОпределитьТранспортныйМодуль(ЭтотОбъект);
	
	ОпределитьТипТорговогоОбъекта();
	
	ЗаполнитьДокументыЗапросаОстатков();
	
	УстановитьВидимостьПриИзмененииТорговогоОбъекта(ЭтотОбъект);
	
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьТекущиеОстаткиПриИзменении(Элемент)
	
	ПриИзмененииВариантаКорректировкиОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре1ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре2ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораСтрокОстатковПриИзменении(Элемент)
	
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Объект.ТаблицаКорректировки.Количество() > 0 Тогда
		Объект.ТаблицаКорректировки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ТекущиеДанные);
		
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокРегистр1 = 0 И ТекущиеДанные.ОстатокРегистр2 = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокРегистр1 = 0 И ТекущиеДанные.ОстатокРегистр2 = 0 Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТекущиеДанные.ОстатокСкладБазЕд <> 0 ИЛИ ТекущиеДанные.ОстатокТорговыйЗалБазЕд <> 0 Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные.Номенклатура = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтроки = Новый Массив;
	ПроверяемыеСтроки.Добавить(ТекущиеДанные);
	
	ДобавитьСтроку = НЕ ТекущиеДанные.Номенклатура.Пустая()
		И (ТекущиеДанные.ОстатокСкладБазЕд <> 0 ИЛИ ТекущиеДанные.ОстатокТорговыйЗалБазЕд <> 0);
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ВыбранноеЗначение, ПустоеЗначение("ХарактеристикаНоменклатуры")));
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если СтрокаТаблицы.АлкогольнаяПродукция.Пустая() Тогда
			Если ДобавитьСтроку Тогда
				ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
				
				ДобавитьСтроку = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ТекущиеДанные,
				СтрокаТаблицы,,
				"АлкогольнаяПродукция, ТипПродукции, ОстатокРегистр1, ОстатокРегистр2");
				
			СтандартнаяОбработка = Ложь;
			Объект.ТаблицаОстатков.Удалить(СтрокаТаблицы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавитьСтроку Тогда
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
	КонецЕсли;
	
	Если ПроверяемыеСтроки.Количество() > 0 Тогда
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокРегистр1 = 0 И ТекущиеДанные.ОстатокРегистр2 = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокРегистр1 = 0 И ТекущиеДанные.ОстатокРегистр2 = 0 Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТекущиеДанные.ОстатокСкладБазЕд <> 0 ИЛИ ТекущиеДанные.ОстатокТорговыйЗалБазЕд <> 0 Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные.Номенклатура = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтроки = Новый Массив;
	ПроверяемыеСтроки.Добавить(ТекущиеДанные);
	
	ДобавитьСтроку = НЕ ТекущиеДанные.Номенклатура.Пустая() И НЕ ТекущиеДанные.Характеристика.Пустая()
		И (ТекущиеДанные.ОстатокСкладБазЕд <> 0 ИЛИ ТекущиеДанные.ОстатокТорговыйЗалБазЕд <> 0);
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ТекущиеДанные.Номенклатура, ВыбранноеЗначение));
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если СтрокаТаблицы.АлкогольнаяПродукция.Пустая() Тогда
			Если ДобавитьСтроку Тогда
				ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
				
				ДобавитьСтроку = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ТекущиеДанные,
				СтрокаТаблицы,,
				"АлкогольнаяПродукция, ТипПродукции, ОстатокРегистр1, ОстатокРегистр2");
				
			СтандартнаяОбработка = Ложь;
			Объект.ТаблицаОстатков.Удалить(СтрокаТаблицы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавитьСтроку Тогда
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииНоменклатуры());
	КонецЕсли;
	
	Если ПроверяемыеСтроки.Количество() > 0 Тогда
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ТекущиеДанные);
		
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокСкладБазЕд = 0 И ТекущиеДанные.ОстатокТорговыйЗалБазЕд = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияОчистка(Элемент, СтандартнаяОбработка)
	
	ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.ОстатокСкладБазЕд = 0 И ТекущиеДанные.ОстатокТорговыйЗалБазЕд = 0 Тогда
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ТекущиеДанные.ОстатокРегистр1 <> 0 ИЛИ ТекущиеДанные.ОстатокРегистр2 <> 0 Тогда
		ПроверяемыеСтроки = Новый Массив;
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииАлкогольнойПродукции());
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковАлкогольнаяПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	Если ТекущиеДанные.АлкогольнаяПродукция = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтроки = Новый Массив;
	ПроверяемыеСтроки.Добавить(ТекущиеДанные);
	
	ДобавитьСтроку = НЕ ТекущиеДанные.АлкогольнаяПродукция.Пустая()
		И (ТекущиеДанные.ОстатокРегистр1 <> 0 ИЛИ ТекущиеДанные.ОстатокРегистр2 <> 0);
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", ВыбранноеЗначение));
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если СтрокаТаблицы.Номенклатура.Пустая() Тогда
			
			Если ДобавитьСтроку Тогда
				ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииАлкогольнойПродукции());
				
				ДобавитьСтроку = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ТекущиеДанные,
				СтрокаТаблицы,,
				"Номенклатура, Характеристика, ОстатокСклад, ОстатокТорговыйЗал, ОстатокСкладБазЕд, ОстатокТорговыйЗалБазЕд");
				
			СтандартнаяОбработка = Ложь;
			Объект.ТаблицаОстатков.Удалить(СтрокаТаблицы);
			Прервать;
		Иначе
			ВызватьИсключение НСтр("ru='Выбранная алкогольная продукция имеет связку с другой номенклатурой.'");
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавитьСтроку Тогда
		ПроверяемыеСтроки.Добавить(ВставитьСтрокуПриИзмененииАлкогольнойПродукции());
	КонецЕсли;
	
	Если ПроверяемыеСтроки.Количество() > 0 Тогда
		ПроверитьКорректностьОстатков(ПроверяемыеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКорректировкиХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму(
			"Документ." + ИмяДокумента(Элемент.ТекущиеДанные.Ссылка) + ".ФормаОбъекта",
			Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка),
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПросмотрДокумента_Завершение", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСтраницПомощника

&НаКлиенте
Функция Подключаемый_СтраницаНачальныеДанные_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана организация ЕГАИС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
	КонецЕсли;
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре1) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №1.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре1",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре2) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №2.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре2",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТранспортныйМодуль) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить транспортный модуль.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьДатуУчетныхОстатков();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоПереходДалее Тогда
		Если ВыполнитьПредварительнуюПроверкуДанных Тогда
			ВыполнитьПредварительнуюПроверкуДанных();
		КонецЕсли;
		
		Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов
			И Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов
			И (Объект.ОстаткиВРегистре1.Пустая() ИЛИ Объект.ОстаткиВРегистре2.Пустая()) Тогда
			ЗапроситьОстаткиЕГАИС();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПроверкаДанных_ПриПереходеДалее(Отказ)
	
	ЗаполнитьТаблицуОстатков();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПроверитьКорректностьОстатков();
	
	МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Если МассивСтрок.Количество() = 0 Тогда
		ПропуститьСтраницу = Истина;
	Иначе
		ТекущийЭлемент = Элементы.ТаблицаОстатков;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПросмотрОстатков_ПриПереходеДалее(Отказ)
	
	Если Объект.ТаблицаКорректировки.Количество() = 0 Тогда
		РассчитатьКоличествоКорректировки();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаСозданиеДокументов_ПриПереходеДалее(Отказ)
	
	Если НЕ СозданиеДокументовЗавершено Тогда
		СоздатьДокументыКорректировкиОстатков();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОкончание_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Объект.СозданныеДокументы.Очистить();
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОкончание_ПриПереходеНазад(Отказ)
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		Отказ = Истина;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УдалениеДокументов_Подтверждение", ЭтотОбъект),
			НСтр("ru='Созданные документы будут удалены'"),
			Кнопки);
	Иначе
		СозданиеДокументовЗавершено = Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НачальныеДанные

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииВариантаКорректировкиОстатков(Форма)
	
	Форма.Объект.ТаблицаОстатков.Очистить();
	Форма.Объект.ТаблицаКорректировки.Очистить();
	Форма.Объект.СозданныеДокументы.Очистить();
	
	Если Форма.КорректироватьТекущиеОстатки = 1 Тогда
		Форма.Элементы.ПанельВариантКорректировкиОстатков.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаТекущуюДату;
	Иначе
		Форма.Элементы.ПанельВариантКорректировкиОстатков.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаДатуОстатковЕГАИС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПомощник()
	
	КорректироватьТекущиеОстатки = 1;
	ПриИзмененииВариантаКорректировкиОстатков(ЭтотОбъект);
	
	ВариантОтбораСтрокОстатков = "Ошибочные";
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуУчетныхОстатков()
	
	Объект.ДатаУчетныхОстатков = '00010101';
	
	Если КорректироватьТекущиеОстатки = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаУчетныхОстатков = ДатаОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеДатыОстатковЕГАИС()
	
	ПредставлениеЭлемента = НСтр("ru='На дату получения остатков из ЕГАИС (%1)'");
	
	ДатаОстатковЕГАИС = ДатаОстатковЕГАИС();
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатковЕГАИС) Тогда
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, НСтр("ru='не определена'"));
	Иначе
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, ДатаОстатковЕГАИС);
	КонецЕсли;
	
	ЭлементСписка = Элементы.КорректироватьТекущиеОстатки.СписокВыбора.НайтиПоЗначению(0);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ПредставлениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДатаОстатковЕГАИС()
	
	МассивСсылок = Новый Массив;
	Если НЕ Объект.ОстаткиВРегистре1.Пустая() Тогда
		МассивСсылок.Добавить(Объект.ОстаткиВРегистре1);
	КонецЕсли;
	
	Если НЕ Объект.ОстаткиВРегистре2.Пустая() Тогда
		МассивСсылок.Добавить(Объект.ОстаткиВРегистре2);
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ДатаОстатковРегистра1 = '00010101';
	ДатаОстатковРегистра2 = '00010101';
	
	РеквизитыОбъектов = ЗначенияРеквизитовОбъектов(МассивСсылок, "Дата");
	
	Если Объект.ЭтоСклад И РеквизитыОбъектов[Объект.ОстаткиВРегистре1] <> Неопределено Тогда
		ДатаОстатковРегистра1 = РеквизитыОбъектов[Объект.ОстаткиВРегистре1].Дата;
	КонецЕсли;
	Если Объект.ЭтоТорговыйЗал И РеквизитыОбъектов[Объект.ОстаткиВРегистре2] <> Неопределено Тогда
		ДатаОстатковРегистра2 = РеквизитыОбъектов[Объект.ОстаткиВРегистре2].Дата;
	КонецЕсли;
	
	Возврат Макс(ДатаОстатковРегистра1, ДатаОстатковРегистра2);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументыЗапросаОстатков()
	
	Если НЕ Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ЗаполнитьДокументыЗапросаОстатковНаСервере(Объект.ОрганизацияЕГАИС, Объект.ОстаткиВРегистре1, Объект.ОстаткиВРегистре2);
	Иначе
		Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
		Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДокументыЗапросаОстатковНаСервере(ОрганизацияЕГАИС, ОстаткиПоРегистру1, ОстаткиПоРегистру2)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОстаткиЕГАИС.Дата КАК Дата,
	|	ОстаткиЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ОстаткиЕГАИС.Проведен
	|	И ОстаткиЕГАИС.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки)
	|	И ОстаткиЕГАИС.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОстаткиПоРегистру1 = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ОстаткиПоРегистру2 = РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДанных

&НаКлиенте
Процедура ВыполнитьПредварительнуюПроверкуДанных()
	
	ВыполнитьПредварительнуюПроверкуДанныхНаСервере();
	
	Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов Тогда
		Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов;
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Истина;
		
		Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса();
		Результат.Результат = Истина;
		ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Результат, Новый Структура);
	Иначе
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов", ЭтотОбъект);
		ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении);
	КонецЕсли;
	
	ВыполнитьПредварительнуюПроверкуДанных = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПредварительнуюПроверкуДанныхНаСервере()
	
	ПроверитьНаличиеИнвентаризации();
	
	НайтиДокументыТребующиеОформления();
	
	НайтиДокументыОжидающиеПодтверждения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнвентаризации()
	
	Если КорректироватьТекущиеОстатки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиСклад = "";
	ТекстОшибкиТорговыйЗал = "";
	
	ПроверитьНаличиеИнвентаризацииНаСервере(Объект.ОрганизацияЕГАИС, ТекстОшибкиСклад, ТекстОшибкиТорговыйЗал);
		
	Если НЕ ПустаяСтрока(ТекстОшибкиСклад) Тогда
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Предупреждение;
		Если ТипЗнч(ТекстОшибкиСклад) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = ТекстОшибкиСклад;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = Новый ФорматированнаяСтрока(ТекстОшибкиСклад);
		КонецЕсли;
	Иначе
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Успешно;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиТорговыйЗал) Тогда
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Предупреждение;
		Если ТипЗнч(ТекстОшибкиТорговыйЗал) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = ТекстОшибкиТорговыйЗал;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = Новый ФорматированнаяСтрока(ТекстОшибкиТорговыйЗал);
		КонецЕсли;
	Иначе
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Успешно;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеИнвентаризацииНаСервере(ОрганизацияЕГАИС, ТекстОшибкиСклад, ТекстОшибкиТорговыйЗал)
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПроверитьНаличиеИнвентаризации(ОрганизацияЕГАИС, ТекстОшибкиСклад, ТекстОшибкиТорговыйЗал);
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыТребующиеОформления()
	
	НеоформленныеДокументы.Очистить();
	
	ТаблицаДокументов = НеоформленныеДокументы.Выгрузить();
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриПроверкеНеоформленныхДокументов(ТаблицаДокументов, Объект.ОрганизацияЕГАИС);
	
	НеоформленныеДокументы.Загрузить(ТаблицаДокументов);
	
	Если НеоформленныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеоформленныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеоформленныеДокументы, "НеоформленныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыОжидающиеПодтверждения()
	
	НеподтвержденныеДокументы.Очистить();
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПередаетсяЗапросНаОтменуПроведения);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяВЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиАктаОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиОтказаОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиПодтвержденияАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяАктОтказа);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяОтказОтАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПередаетсяПодтверждениеАктаРасхождений);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктРасхождений);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.Ссылка КАК ДокументСсылка,
	|	ЗНАЧЕНИЕ(Документ.АктПостановкиНаБалансЕГАИС.ПустаяСсылка) КАК ТипЗначения
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Проведен
	|	И АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктПостановкиНаБалансЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктСписанияЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.АктСписанияЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Проведен
	|	И АктСписанияЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АктСписанияЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратИзРегистра2ЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ВозвратИзТорговогоЗалаЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ВозвратИзТорговогоЗалаЕГАИС КАК ВозвратИзРегистра2ЕГАИС
	|ГДЕ
	|	ВозвратИзРегистра2ЕГАИС.Проведен
	|	И ВозвратИзРегистра2ЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ВозвратИзРегистра2ЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаВРегистр2ЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ПередачаВТорговыйЗалЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ПередачаВТорговыйЗалЕГАИС КАК ПередачаВРегистр2ЕГАИС
	|ГДЕ
	|	ПередачаВРегистр2ЕГАИС.Проведен
	|	И ПередачаВРегистр2ЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ПередачаВРегистр2ЕГАИС.СтатусОбработки В(&СписокСтатусов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка,
	|	ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Проведен
	|	И ТТНИсходящаяЕГАИС.Грузоотправитель = &ОрганизацияЕГАИС
	|	И ТТНИсходящаяЕГАИС.СтатусОбработки В(&СписокСтатусов)";
	
	ТаблицаДокументов = НеподтвержденныеДокументы.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриПроверкеНеподтвержденныхДокументов(ТаблицаДокументов, Объект.ОрганизацияЕГАИС);
	
	НеПодтвержденныеДокументы.Загрузить(ТаблицаДокументов);
	
	Если НеПодтвержденныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеподтвержденныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеподтвержденныеДокументы, "НеподтвержденныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстОшибкиИзТаблицыДокументов(ТаблицаДокументов, ИмяТаблицы)
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ВозвратИзТорговогоЗалаЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ПередачаВТорговыйЗалЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ВидыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("ТипЗначения", Документы[ТипДокумента.Имя].ПустаяСсылка()));
		Если МассивСтрок.Количество() > 0 Тогда
			Если ВидыДокументов.Количество() > 0 Тогда
				ВидыДокументов.Добавить(", ");
			КонецЕсли;
			ВидыДокументов.Добавить(
			Новый ФорматированнаяСтрока(ТипДокумента.ПредставлениеСписка + " (" + МассивСтрок.Количество() + ")",,,,
			ИмяТаблицы + "_" + ТипДокумента.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ВидыДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	Если ТранспортныйМодуль.ОбменНаСервере Тогда
		РезультатОперации = ЗапроситьВходящиеДокументыНаСервере(ТранспортныйМодуль);
		ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов(РезультатОперации, ДополнительныеПараметры);
	Иначе
		ЗапроситьВходящиеДокументыНаКлиенте(Новый ОписаниеОповещения("ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ДоступностьКомандыДалее()
	
	Элементы.ПерейтиВпередПроверкаДанных.Доступность = 
		Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_Ошибка
		И Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНезагруженныхДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		СтрокиПроверки = Новый Массив;
		СтрокиПроверки.Добавить(НСтр("ru='Ошибка получения списка входящих документов:'"));
		СтрокиПроверки.Добавить(Символы.ПС);
		СтрокиПроверки.Добавить(Результат.ОписаниеОшибки);
		
		Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_Ошибка;
		ТекстОшибкиНезагруженныеДокументы = Новый ФорматированнаяСтрока(СтрокиПроверки,, ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийОшибкуТекст"));
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Ложь;
	Иначе
		#Если ВебКлиент Тогда
			СписокURL = ПолучитьСписокURLДокументовНаСервере(Результат.ОтветМодуляЕГАИС);
		#Иначе
			СписокURL = ПолучитьСписокURLДокументов(Результат.ОтветМодуляЕГАИС);
		#КонецЕсли
		
		Если СписокURL.Количество() > 0 Тогда
			
			СтрокиПроверки = Новый Массив;
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='В УТМ присутствуют незагруженные'"),, ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст")));
			СтрокиПроверки.Добавить(" ");
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='документы ('") + СписокURL.Количество() + ")",,,, "ПоказатьНезагруженныеДокументы"));
			СтрокиПроверки.Добавить(". ");
			СтрокиПроверки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Выполнить обмен с ЕГАИС'"),,,, "ВыполнитьОбмен"));
			
			Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_ЕстьДокументы;
			ТекстОшибкиНезагруженныеДокументы = Новый ФорматированнаяСтрока(СтрокиПроверки);
		
		Иначе
			Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНезагруженныеДокументы_НетДокументов;
		КонецЕсли;
		
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокURLДокументов(ОтветМодуляЕГАИС)
	
	Результат = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("url");
	
	Для Каждого УзелURL Из УзлыURL Цикл
		Результат.Добавить(УзелURL.ТекстовоеСодержимое);
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокURLДокументовНаСервере(ОтветМодуляЕГАИС)
	
	Возврат ПолучитьСписокURLДокументов(ОтветМодуляЕГАИС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапроситьВходящиеДокументыНаСервере(ТранспортныйМодуль)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	Возврат ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьВходящиеДокументыНаКлиенте(ОповещениеПриЗавершении)
	
	ДанныеЗапроса = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET");
	ДанныеЗапроса.АдресЗапроса = "/opt/out";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	
	#Если ВебКлиент Тогда
		ИнтеграцияЕГАИСВебКлиент.НачатьФормированиеHTTPЗапроса(
			Новый ОписаниеОповещения("ЗапросДокументов_ПослеПолученияСпискаДокументов", ЭтотОбъект, ДополнительныеПараметры),
			ТранспортныйМодуль,
			ДанныеЗапроса);
	#Иначе
		Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
		ЗапросДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросДокументов_ПослеПолученияСпискаДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УТМ", ТранспортныйМодуль);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПриЗавершенииВыполненияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтеграцияЕГАИСКлиент.НачатьОбработкуОтветов(ОповещениеПриЗавершении, ТранспортныйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВыполненияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложения_Завершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОстатковЕГАИС

&НаКлиенте
Процедура ЗапроситьОстаткиЕГАИС()
	
	Если Элементы.ПанельНеподтвержденныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНеподтвержденныеДокументы_НетДокументов
		ИЛИ Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_НетДокументов Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Запросить остатки'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапросОстатковЕГАИС_Подтверждение", ЭтотОбъект),
			НСтр("ru='Обнаружены ошибки в ходе предварительной проверки данных ЕГАИС'"), Кнопки);
		
	Иначе
		
		ЗапросОстатковЕГАИС_Подтверждение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковЕГАИС_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОжиданиеПолученияОстатков;
	Элементы.ПерейтиНазадПроверкаДанных.Доступность = Ложь;
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	СоздатьДокументыЗапросаОстатков();
	
	ТекстОшибкиПолученияОстатковЕГАИС = "";
	
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатков");
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ВходныеПараметры.ДокументСсылка = Объект.ОстаткиВРегистре1;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ЗапросОстатковЕГАИС_ПослеФормированияЗапросаОстатковВРегистре1", ЭтотОбъект),
		ВидДокумента,
		ВходныеПараметры,
		ТранспортныйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковЕГАИС_ПослеФормированияЗапросаОстатковВРегистре1(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковЕГАИС = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале");
	
	ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ВходныеПараметры.ДокументСсылка = Объект.ОстаткиВРегистре2;
	
	ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
		Новый ОписаниеОповещения("ЗапросОстатковЕГАИС_ПослеФормированияЗапросаОстатковВРегистре2", ЭтотОбъект),
		ВидДокумента,
		ВходныеПараметры,
		ТранспортныйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковЕГАИС_ПослеФормированияЗапросаОстатковВРегистре2(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковЕГАИС = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверкаПолученияОстатковЕГАИС", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверкаПолученияОстатковЕГАИС()
	
	ПолученыОстаткиПоРегистру1 = Ложь;
	ПолученыОстаткиПоРегистру2 = Ложь;
	
	Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		Если НЕ Объект.ОстаткиВРегистре1.Пустая() Тогда
			СтатусОбработки = ЗначениеРеквизитаОбъекта(Объект.ОстаткиВРегистре1, "СтатусОбработки");
			
			Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиВРегистре1);
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру1 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Объект.ОстаткиВРегистре2.Пустая() Тогда
			СтатусОбработки = ЗначениеРеквизитаОбъекта(Объект.ОстаткиВРегистре2, "СтатусОбработки");
			
			Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПолученияОстатков") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиВРегистре2);
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученыОстаткиПоРегистру1 И ПолученыОстаткиПоРегистру2 Тогда
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
	ИначеЕсли НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОшибкаПолученияОстатков;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
	КонецЕсли;
	
	Если (НЕ ПолученыОстаткиПоРегистру1 ИЛИ НЕ ПолученыОстаткиПоРегистру2) И ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверкаПолученияОстатковЕГАИС", 5, Истина);
		
		Если НЕ ПодключенОбработчикОтветов Тогда
			ПодключенОбработчикОтветов = Истина;
			
			Если ТранспортныйМодуль.ОбменНаСервере Тогда
				ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 1, Истина);
			Иначе
				ПодключитьОбработчикОжидания("ЗапуститьОбработкуОтветовНаКлиенте", 15, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументыЗапросаОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Объект.ОстаткиВРегистре1.Пустая() Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатков);
	КонецЕсли;
	
	Если Объект.ОстаткиВРегистре2.Пустая() Тогда
		ОбработкаОбъект.СоздатьДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВТорговомЗале);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбработкуОтветовНаКлиенте()
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ОбработкаОтветов_Завершение", ЭтотОбъект);
	
	ИнтеграцияЕГАИСКлиент.НачатьОбработкуОтветов(ОповещениеПриЗавершении, ТранспортныйМодуль, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		ТекстОшибкиПолученияОстатковЕГАИС = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ПодключенОбработчикОтветов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФоновоеЗаданиеОбработкиОтветов()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторФоновогоЗадания) Тогда
		ИдентификаторФоновогоЗадания = СоздатьФоновоеЗаданиеНаСервере();
		ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 15, Истина);
	Иначе
		Если ЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
			ПодключенОбработчикОтветов = Ложь;
			ИдентификаторФоновогоЗадания = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Иначе
			ПодключитьОбработчикОжидания("СоздатьФоновоеЗаданиеОбработкиОтветов", 15, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторФоновогоЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьФоновоеЗаданиеНаСервере()
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("ИнтеграцияЕГАИС.ЗапуститьОбработкуОтветовЕГАИС");
	Возврат ФоновоеЗадание.УникальныйИдентификатор;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстПоследнейОшибкиОбмена(ДокументСсылка)
	
	Возврат РегистрыСведений.ПротоколОбменаЕГАИС.ТекстПоследнейОшибки(ДокументСсылка);
	
КонецФункции

#КонецОбласти

#Область ПросмотрОстатков

&НаКлиенте
Процедура ЗаполнитьТаблицуОстатков()
	
	ЗаполнитьТаблицуОстатковНаСервере();
	
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОстатковНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьОстатков(ПроверяемыеСтроки = Неопределено)
	
	Если ПроверяемыеСтроки = Неопределено Тогда
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина));
	Иначе
		МассивСтрок = ПроверяемыеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.ЕстьОшибка = Ложь;
		СтрокаТаблицы.ТекстОшибки = "";
		СтрокаТаблицы.ИндексКартинкиСтрок = 0;
	КонецЦикла;
	
	
	// Проверка заполнения реквизита ОбъемДАЛ для разливной продукции.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура("ПродаетсяВРозлив, ОбъемДАЛ", Истина, 0);
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если СтрокаТаблицы.ПродаетсяВРозлив И СтрокаТаблицы.ОбъемДАЛ = 0 Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан объем в декалитрах базовой единицы измерения.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка заполнения признака продажи в розлив.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура("ПродаетсяВРозлив, ТипПродукции",
			Ложь, ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.Неупакованная"));
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если НЕ СтрокаТаблицы.ПродаетсяВРозлив
				И СтрокаТаблицы.ТипПродукции = ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.Неупакованная") Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Не указан признак продажи в розлив.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	// Проверка отсутствия несопоставленной номенклатуры.
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура("АлкогольнаяПродукция", ПредопределенноеЗначение("Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка"));
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если СтрокаТаблицы.АлкогольнаяПродукция.Пустая() Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ПроверяемыеСтроки = Неопределено Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика", ПустоеЗначение("Номенклатура"), ПустоеЗначение("ХарактеристикаНоменклатуры"));
		МассивСтрок = Объект.ТаблицаОстатков.НайтиСтроки(Отбор);
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПроверяемыеСтроки Цикл
			Если СтрокаТаблицы.Номенклатура.Пустая() И СтрокаТаблицы.Характеристика.Пустая() Тогда
				МассивСтрок.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрок.Количество() <> 0 Тогда
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			СтрокаТаблицы.ЕстьОшибка = Истина;
			СтрокаТаблицы.ТекстОшибки = НСтр("ru='Номенклатура не сопоставлена с классификатором алкогольной продукции.'");
			СтрокаТаблицы.ИндексКартинкиСтрок = 1;
		КонецЦикла;
	КонецЕсли;
	
	
	Если Объект.ТаблицаОстатков.Количество() = 0 Тогда
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковОшибка;
	ИначеЕсли Объект.ТаблицаОстатков.НайтиСтроки(Новый Структура("ЕстьОшибка", Истина)).Количество() > 0 Тогда
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковПредупреждение;
	Иначе
		НоваяСтраница = Элементы.СтраницаПроверкаОстатковУспешно;
	КонецЕсли;
	
	Если Элементы.ПанельПроверкаОстатков.ТекущаяСтраница <> НоваяСтраница Тогда
		Элементы.ПанельПроверкаОстатков.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСопоставлениеСКлассификатором(СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	Если ТекущиеДанные.Сопоставлено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВставитьСтрокуПриИзмененииНоменклатуры()
	
	НезаполняемыеПоля = "АлкогольнаяПродукция, ТипПродукции, ОстатокРегистр1, ОстатокРегистр2";
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	НоваяСтрока = Объект.ТаблицаОстатков.Вставить(ТекущиеДанные.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,, НезаполняемыеПоля);
	
	ТекущиеДанные.Номенклатура = ПустоеЗначение("Номенклатура");
	ТекущиеДанные.Характеристика = ПустоеЗначение("ХарактеристикаНоменклатуры");
	ТекущиеДанные.ОстатокСклад = 0;
	ТекущиеДанные.ОстатокТорговыйЗал = 0;
	ТекущиеДанные.ОстатокСкладБазЕд = 0;
	ТекущиеДанные.ОстатокТорговыйЗалБазЕд = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Функция ВставитьСтрокуПриИзмененииАлкогольнойПродукции()
	
	НезаполняемыеПоля = "Номенклатура, Характеристика, ОстатокСклад, ОстатокТорговыйЗал, ОстатокСкладБазЕд, ОстатокТорговыйЗалБазЕд";
	
	ТекущиеДанные = Элементы.ТаблицаОстатков.ТекущиеДанные;
	
	НоваяСтрока = Объект.ТаблицаОстатков.Вставить(ТекущиеДанные.НомерСтроки);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные,, НезаполняемыеПоля);
	
	ТекущиеДанные.ТипПродукции = ПредопределенноеЗначение("Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка");
	ТекущиеДанные.ОстатокРегистр1 = 0;
	ТекущиеДанные.ОстатокРегистр2 = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборТаблицыОстатков(Форма)
	
	Если Форма.ВариантОтбораСтрокОстатков = "Ошибочные" Тогда
		Форма.Элементы.ТаблицаОстатков.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибка", Истина);
	Иначе
		Форма.Элементы.ТаблицаОстатков.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНесопоставленнуюПродукцию()
	
	ТаблицаОстатков = Объект.ТаблицаОстатков.Выгрузить();
	
	КорректировкаОстатковЕГАИСПереопределяемый.ЗаполнитьНесопоставленнуюПродукцию(ТаблицаОстатков);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатков Цикл
		ОтборПустаяНоменклатура = Новый Структура("Номенклатура, Характеристика, АлкогольнаяПродукция",
			ПустоеЗначение("Номенклатура"), ПустоеЗначение("ХарактеристикаНоменклатуры"), СтрокаТаблицы.АлкогольнаяПродукция);
		
		ОтборПустаяАлкогольнаяПродукция = Новый Структура("Номенклатура, Характеристика, АлкогольнаяПродукция",
			СтрокаТаблицы.Номенклатура, ПустоеЗначение("ХарактеристикаНоменклатуры"), Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
		
		СтрокиАлкогольнаяПродукция = Объект.ТаблицаОстатков.НайтиСтроки(ОтборПустаяНоменклатура);
		Для Каждого СтрокаАлкогольнаяПродукция Из СтрокиАлкогольнаяПродукция Цикл
			
			СтрокиНоменклатура = Объект.ТаблицаОстатков.НайтиСтроки(ОтборПустаяАлкогольнаяПродукция);
			
			Для Каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
					
				ЗаполнитьЗначенияСвойств(
					СтрокаАлкогольнаяПродукция,
					СтрокаНоменклатура,,
					"АлкогольнаяПродукция, ТипПродукции, ОстатокРегистр1, ОстатокРегистр2");
				
				Объект.ТаблицаОстатков.Удалить(СтрокаНоменклатура);
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
		
		СтрокиНоменклатура = Объект.ТаблицаОстатков.НайтиСтроки(ОтборПустаяАлкогольнаяПродукция);
		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
			
			СтрокиАлкогольнаяПродукция = Объект.ТаблицаОстатков.НайтиСтроки(ОтборПустаяНоменклатура);
			
			Для Каждого СтрокаАлкогольнаяПродукция Из СтрокиАлкогольнаяПродукция Цикл
					
				ЗаполнитьЗначенияСвойств(
					СтрокаНоменклатура,
					СтрокаАлкогольнаяПродукция,,
					"Номенклатура, Характеристика, ОстатокСклад, ОстатокТорговыйЗал, ОстатокСкладБазЕд, ОстатокТорговыйЗалБазЕд");
				
				Объект.ТаблицаОстатков.Удалить(СтрокаАлкогольнаяПродукция);
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеДокументов

&НаСервере
Процедура РассчитатьКоличествоКорректировки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РассчитатьКоличествоКорректировки();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеДокументов_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДокументыКорректировкиОстатков();
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыКорректировкиОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СоздатьДокументыКорректировкиОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СозданныеДокументы,
		"СписокДокументов",
		Объект.СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка"),
		Истина);
		
	СозданиеДокументовЗавершено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыКорректировкиОстатков()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		Док = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		Док.Удалить();
	КонецЦикла;
	
	Объект.СозданныеДокументы.Очистить();
	
	СозданиеДокументовЗавершено = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Метаданные().Имя;
	
КонецФункции

&НаКлиенте
Процедура ПросмотрДокумента_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.СозданныеДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат.Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ТекущийИндекс = ДополнительныеПараметры.СписокДокументов.ВГраница() Тогда
		ИзменитьПорядковыйНомерПерехода(+1);
	Иначе
		СписокДокументов = ДополнительныеПараметры.СписокДокументов;
		ДополнительныеПараметры.ТекущийИндекс = ДополнительныеПараметры.ТекущийИндекс + 1;
		
		ВходныеПараметры = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ВидДокумента);
		ВходныеПараметры.ДокументСсылка = СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ДокументСсылка;
		
		ИнтеграцияЕГАИСКлиент.НачатьФормированиеИсходящегоЗапроса(
			Новый ОписаниеОповещения("ВыгрузкаВЕГАИС_ПослеВыгрузкиДокумента", ЭтотОбъект, ДополнительныеПараметры),
			СписокДокументов[ДополнительныеПараметры.ТекущийИндекс].ВидДокумента,
			ВходныеПараметры,
			ТранспортныйМодуль);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПроведенныеДокументыДляВыгрузки(МассивДокументов)
	
	Результат = Новый Массив;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен, СтатусОбработки");
		
		Если НЕ РеквизитыДокумента.Проведен
			ИЛИ РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиВозвратаИзТорговогоЗалаЕГАИС.Новый
				И РеквизитыДокумента.СтатусОбработки <> Перечисления.СтатусыОбработкиПередачиВТорговыйЗалЕГАИС.Новый Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратИзТорговогоЗалаЕГАИС") Тогда
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ВозвратИзТорговогоЗала;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаВТорговыйЗалЕГАИС") Тогда
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ПередачаВТорговыйЗал;
		Иначе
			ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидДокумента");
		КонецЕсли;
		
		Результат.Добавить(Новый Структура("ВидДокумента, ДокументСсылка", ВидДокумента, ДокументСсылка));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СопоставлениеКлассификаторов

&НаСервере
Функция ПоместитьНесопоставленныеТоварыВоВремененноеХранилище()
	
	Товары = Объект.ТаблицаОстатков.Выгрузить().ВыгрузитьКолонку("АлкогольнаяПродукция");
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("АлкогольнаяПродукция", Товары);
	СтруктураДанных.Вставить("ВариантОтбораСоответствийАлкогольнаяПродукция", "НеСвязанные");
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииСопоставленияКлассификаторов(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуОстатковПослеСопоставленияКлассификаторов();
	
	ПроверитьКорректностьОстатков();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОстатковПослеСопоставленияКлассификаторов()
	
	ЗаполнитьТаблицуОстатковНаСервере();
	
	ЗаполнитьНесопоставленнуюПродукцию();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СценарийКорректировкиОстатковЕГАИС()
	
	ТаблицаПереходов.Очистить();
	
	// 1. Исходные данные.
	ТаблицаПереходовНоваяСтрока(
		1,                                           // Порядковый номер перехода.
		"СтраницаНачальныеДанные",                   // Основная страница.
		"СтраницаНавигацииНачало",                   // Страница панели навигации.
		,                                            // Обработчик, вызываемый при открытии страницы.
		"СтраницаНачальныеДанные_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 2. Проверка данных.
	ТаблицаПереходовНоваяСтрока(
		2,                                          // Порядковый номер перехода.
		"СтраницаПроверкаДанных",                   // Основная страница.
		"СтраницаНавигацииПроверкаДанных",          // Страница панели навигации.
		"СтраницаПроверкаДанных_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПроверкаДанных_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 3. Просмотр остатков.
	ТаблицаПереходовНоваяСтрока(
		3,                                            // Порядковый номер перехода.
		"СтраницаПросмотрОстатков",                   // Основная страница.
		"СтраницаНавигацииПросмотрОстатков",          // Страница панели навигации.
		"СтраницаПросмотрОстатков_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПросмотрОстатков_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 4. Создание корректировочных документов.
	ТаблицаПереходовНоваяСтрока(
		4,                                              // Порядковый номер перехода.
		"СтраницаСозданиеДокументов",                   // Основная страница.
		"СтраницаНавигацииСозданиеДокументов",          // Страница панели навигации.
		"",                                             // Обработчик, вызываемый при открытии страницы.
		"СтраницаСозданиеДокументов_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
	// 5. Выгрузка созданных документов.
	ТаблицаПереходовНоваяСтрока(
		5,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииВыгрузкаДокументов", // Страница панели навигации.
		,                                      // Обработчик, вызываемый при открытии страницы.
		,                                      // Обработчик, вызываемый перед переходом на следующую страницу.
		"СтраницаОкончание_ПриПереходеНазад"); // Обработчик, вызываемый перед переходом на предыдущую страницу.
		
	// 6. Просмотр результатов.
	ТаблицаПереходовНоваяСтрока(
		6,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииОкончание",          // Страница панели навигации.
		"СтраницаОкончание_ПриОткрытии");      // Обработчик, вызываемый при открытии страницы.
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("ПерейтиВперед");
	ИменаКоманд.Добавить("ВыгрузитьВЕГАИС");
	ИменаКоманд.Добавить("Готово");
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		Кнопка = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, ИмяКоманды);
		
		Если Кнопка <> Неопределено Тогда
			Кнопка.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьТипТорговогоОбъекта()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ОпределитьТипТорговогоОбъектаНаСервере(Объект.ОрганизацияЕГАИС, Объект.ЭтоСклад, Объект.ЭтоТорговыйЗал);
	Иначе
		Объект.ЭтоСклад = Ложь;
		Объект.ЭтоТорговыйЗал = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипТорговогоОбъектаНаСервере(ОрганизацияЕГАИС, ЭтоСклад, ЭтоТорговыйЗал)
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриОпределенииТипаТорговогоОбъекта(ОрганизацияЕГАИС, ЭтоСклад, ЭтоТорговыйЗал);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьТранспортныйМодуль(Форма)
	
	Форма.ТранспортныйМодуль = Неопределено;
	
	ОтборМассив = Новый Массив;
	Если НЕ Форма.Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ИдентификаторФСРАР = ЗначениеРеквизитаОбъекта(Форма.Объект.ОрганизацияЕГАИС, "Код");
		
		Отбор = Новый Структура;
		Отбор.Вставить("Поле", "ИдентификаторФСРАР");
		Отбор.Вставить("Значение", ИдентификаторФСРАР);
		ОтборМассив.Добавить(Отбор);
	КонецЕсли;
	
	// При открытии помощника из форм документов, например, из формы документа "Пересортица запасов".
	Если Форма.Параметры.Свойство("Организация") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Поле", "Организация");
		Отбор.Вставить("Значение", Форма.Параметры.Организация);
		ОтборМассив.Добавить(Отбор);
	КонецЕсли;
	Если Форма.Параметры.Свойство("ТорговаяТочка") Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Поле", "ТорговаяТочка");
		Отбор.Вставить("Значение", Форма.Параметры.ТорговаяТочка);
		ОтборМассив.Добавить(Отбор);
	КонецЕсли;
	// Конец При открытии помощника из форм документов
	
	ДоступныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(ОтборМассив);
	Если ДоступныеМодули.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.ОрганизацияЕГАИС.СписокВыбора;
	Если СписокВыбора.Количество() = 0 Тогда
		Для Каждого ДоступныйМодуль Из ДоступныеМодули Цикл
			СписокВыбора.Добавить(ДоступныйМодуль.ОрганизацияЕГАИС);
		КонецЦикла;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ОрганизацияЕГАИС") Тогда
		Индекс = ДоступныеМодули.Найти(Форма.Параметры.ОрганизацияЕГАИС);
		Если Индекс = Неопределено Тогда
			Индекс = 0;
		КонецЕсли;
		Форма.ТранспортныйМодуль = ДоступныеМодули[Индекс];
	Иначе
		Форма.ТранспортныйМодуль = ДоступныеМодули[0];
	КонецЕсли;
	
	Если Форма.Объект.ОрганизацияЕГАИС.Пустая() Тогда
		Форма.Объект.ОрганизацияЕГАИС = Форма.ТранспортныйМодуль.ОрганизацияЕГАИС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПриИзмененииТорговогоОбъекта(Форма)
	
	Форма.Элементы.ПанельПроверкаИнвентаризацииНаСкладе.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
	Форма.Элементы.ТаблицаОстатковОстатокСклад.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ТаблицаОстатковОстатокТорговыйЗал.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
	Форма.Элементы.ТаблицаКорректировкиОстатокСклад.Видимость = Форма.Объект.ЭтоСклад;
	Форма.Элементы.ТаблицаКорректировкиОстатокТорговыйЗал.Видимость = Форма.Объект.ЭтоТорговыйЗал;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Несопоставленная номенклатура
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаОстатковНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаОстатков.Номенклатура",
		ПустоеЗначение("Номенклатура"),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Несопоставленная алкогольная продукция
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаОстатковАлкогольнаяПродукция");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаОстатков.АлкогольнаяПродукция",
		Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Единица измерения в таблице сопоставления.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСопоставленияЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"ТаблицаСопоставления.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Единица измерения в таблице корректировки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаКорректировкиНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.ТаблицаКорректировки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустоеЗначение(ИмяТипа)
	
	МассивТипов = Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.Типы();
	
	Если МассивТипов.Количество() = 1 Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Возврат Справочники[ОбъектМетаданных.Имя].ПустаяСсылка();
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Возврат Документы[ОбъектМетаданных.Имя].ПустаяСсылка();
		ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
			Возврат Перечисления[ОбъектМетаданных.Имя].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытиеФормы_Подтверждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		УдалитьДокументыКорректировкиОстатков();
	КонецЕсли;
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	КорректировкаОстатковЕГАИСПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТаблицаОстатков);
	КорректировкаОстатковЕГАИСПереопределяемый.ЗаполнитьПризнакИспользованияХарактеристик(Объект.ТаблицаКорректировки);
	
	ВремТаблица = Объект.ТаблицаОстатков.Выгрузить();
	ВремТаблица.ЗаполнитьЗначения(Истина, "Сопоставлено");
	
	МассивСтрок = ВремТаблица.НайтиСтроки(Новый Структура("Номенклатура", ПустоеЗначение("Номенклатура")));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Сопоставлено = Ложь;
	КонецЦикла;
	
	МассивСтрок = ВремТаблица.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка()));
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Сопоставлено = Ложь;
	КонецЦикла;
	
	Объект.ТаблицаОстатков.Загрузить(ВремТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСлужебныеРеквизиты()
	
	Объект.ТаблицаОстатков.Очистить();
	Объект.ТаблицаКорректировки.Очистить();
	Объект.СозданныеДокументы.Очистить();
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	ТекстОшибкиПолученияОстатковЕГАИС = "";
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ЗапроситьОстатки;
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

#КонецОбласти