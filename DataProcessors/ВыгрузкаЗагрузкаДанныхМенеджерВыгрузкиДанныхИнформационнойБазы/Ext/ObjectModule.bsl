#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ВнутреннееСостояние

Перем ТекущийКонтейнер;
Перем ТекущийОбъектМетаданных;
Перем ТекущиеОбработчики;
Перем ТекущийПотокЗаписиПересоздаваемыхСсылок;
Перем ТекущийПотокЗаписиСопоставляемыхСсылок;
Перем ТекущийСериализатор;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Контейнер, ОбъектМетаданных, Обработчики, Сериализатор, ПотокЗаписиПересоздаваемыхСсылок, ПотокЗаписиСопоставляемыхСсылок) Экспорт
	
	ТекущийКонтейнер = Контейнер;
	ТекущийОбъектМетаданных = ОбъектМетаданных;
	ТекущиеОбработчики = Обработчики;
	ТекущийСериализатор = Сериализатор;
	ТекущийПотокЗаписиПересоздаваемыхСсылок = ПотокЗаписиПересоздаваемыхСсылок;
	ТекущийПотокЗаписиСопоставляемыхСсылок = ПотокЗаписиСопоставляемыхСсылок;
	
КонецПроцедуры

Процедура ВыгрузитьДанные() Экспорт
	
	Отказ = Ложь;
	ТекущиеОбработчики.ПередВыгрузкойТипа(ТекущийКонтейнер, ТекущийСериализатор, ТекущийОбъектМетаданных, Отказ);
	
	Если Не Отказ Тогда
		ВыгрузитьДанныеОбъектаМетаданных();
	КонецЕсли;
	
	ТекущиеОбработчики.ПослеВыгрузкиТипа(ТекущийКонтейнер, ТекущийСериализатор, ТекущийОбъектМетаданных);
	
КонецПроцедуры

// Выполняет действия для пересоздания ссылки при загрузке.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	Ссылка - ЛюбаяСсылка - ссылка на объект.
//
Процедура ТребуетсяПересоздатьСсылкуПриЗагрузке(Знач Ссылка) Экспорт
	
	ТекущийПотокЗаписиПересоздаваемыхСсылок.ПересоздатьСсылкуПриЗагрузке(Ссылка);
	
КонецПроцедуры

// Выполняет действия для сопоставления ссылки при загрузке.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	Ссылка - ЛюбаяСсылка - ссылка на объект.
//	ЕстественныйКлюч - Структура:
//		Ключ - Строка - имя естественного ключа.
//		Значение - ЛюбойТип - значение естественного ключа.
//
Процедура ТребуетсяСопоставитьСсылкуПриЗагрузке(Знач Ссылка, Знач ЕстественныйКлюч) Экспорт
	
	ТекущийПотокЗаписиСопоставляемыхСсылок.СопоставитьСсылкуПриЗагрузке(Ссылка, ЕстественныйКлюч);
	
КонецПроцедуры

Процедура Закрыть() Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыгрузитьДанныеОбъектаМетаданных()
	
	ИмяФайла = ТекущийКонтейнер.СоздатьФайл(
		ВыгрузкаЗагрузкаДанныхСлужебный.InfobaseData(), ТекущийОбъектМетаданных.ПолноеИмя());
	
	ПотокЗаписи = Обработки.ВыгрузкаЗагрузкаДанныхПотокЗаписиДанныхИнформационнойБазы.Создать();
	ПотокЗаписи.ОткрытьФайл(ИмяФайла, ТекущийСериализатор);
	
	Если ОбщегоНазначенияБТС.ЭтоКонстанта(ТекущийОбъектМетаданных) Тогда
		
		ВыгрузитьКонстанту(ПотокЗаписи)
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоСсылочныеДанные(ТекущийОбъектМетаданных) Тогда
		
		ВыгрузитьСсылочныйОбъект(ПотокЗаписи);
		
	ИначеЕсли ОбщегоНазначенияБТС.ЭтоНаборЗаписей(ТекущийОбъектМетаданных) Тогда
		
		Если ОбщегоНазначенияБТС.ЭтоНезависимыйНаборЗаписей(ТекущийОбъектМетаданных) Тогда
			
			ВыгрузитьНезависимыйНаборЗаписей(ПотокЗаписи);
			
		Иначе
			
			ВыгрузитьНаборЗаписейПодчиненныйРегистратору(ПотокЗаписи);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неожиданный объект метаданных: %1'"),
			ТекущийОбъектМетаданных.ПолноеИмя());
		
	КонецЕсли;
	
	ПотокЗаписи.Закрыть();
	
	КоличествоОбъектов = ПотокЗаписи.КоличествоОбъектов();
	Если КоличествоОбъектов = 0 Тогда
		ТекущийКонтейнер.ИсключитьФайл(ИмяФайла);
	Иначе
		ТекущийКонтейнер.УстановитьКоличествоОбъектов(ИмяФайла, КоличествоОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Выгружает константу.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - выгружаемый объект метаданных.
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ПотокЗаписи - поток для записи. В него записывается объект.
//	Сериализатор - используемый сериализатор.
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ВыгрузитьКонстанту(ПотокЗаписи)
	
	МенеджерЗначения = Константы[ТекущийОбъектМетаданных.Имя].СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	ЗаписатьДанныеИнформационнойБазы(ПотокЗаписи, МенеджерЗначения);
	
КонецПроцедуры

// Выгружает ссылочный объект.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - выгружаемый объект метаданных.
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ПотокЗаписи - поток для записи. В него записывается объект.
//	Сериализатор - используемый сериализатор.
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ВыгрузитьСсылочныйОбъект(ПотокЗаписи)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийОбъектМетаданных.ПолноеИмя());
	
	Выборка = МенеджерОбъекта.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаписатьДанныеИнформационнойБазы(ПотокЗаписи, Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает независимый набор записей, с помощью курсорного (постраничного) запроса.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - выгружаемый объект метаданных.
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ПотокЗаписи - поток для записи. В него записывается объект.
//	Сериализатор - используемый сериализатор.
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ВыгрузитьНезависимыйНаборЗаписей(ПотокЗаписи)
	
	Состояние = Неопределено;
	Отбор = Новый Массив;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийОбъектМетаданных.ПолноеИмя());
	
	Пока Истина Цикл
		
		МассивТаблиц = ТехнологияСервисаСлужебныйЗапросы.ПолучитьПорциюДанныхНезависимогоНабораЗаписей(
			ТекущийОбъектМетаданных, Отбор, 10000, Ложь, Состояние);
		
		Если МассивТаблиц.Количество() <> 0 Тогда
			
			НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
			
			Для Каждого Таблица Из МассивТаблиц Цикл
				
				Для Каждого Строка Из Таблица Цикл
					
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Строка);
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаписатьДанныеИнформационнойБазы(ПотокЗаписи, НаборЗаписей);
			
			Продолжить;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает набор записей, подчиненный регистратору.
//
// Параметры:
//	ОбъектМетаданных - ОбъектМетаданных - выгружаемый объект метаданных.
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ПотокЗаписи - поток для записи. В него записывается объект.
//	Сериализатор - используемый сериализатор.
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ВыгрузитьНаборЗаписейПодчиненныйРегистратору(ПотокЗаписи)
	
	Если ОбщегоНазначенияБТС.ЭтоНаборЗаписейПерерасчета(ТекущийОбъектМетаданных) Тогда
		
		ИмяПоляРегистратора = "ОбъектПерерасчета";
		
		Подстроки = СтрРазделить(ТекущийОбъектМетаданных.ПолноеИмя(), ".");
		ИмяТаблицы = Подстроки[0] + "." + Подстроки[1] + "." + Подстроки[3];
		
	Иначе
		
		ИмяПоляРегистратора = "Регистратор";
		ИмяТаблицы = ТекущийОбъектМетаданных.ПолноеИмя();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_XMLВыгрузка_Таблица." + ИмяПоляРегистратора + " КАК Регистратор
	|ИЗ
	|	" + ИмяТаблицы + " КАК _XMLВыгрузка_Таблица";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекущийОбъектМетаданных.ПолноеИмя());
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = МенеджерОбъекта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор[ИмяПоляРегистратора].Установить(Выборка.Регистратор);
		
		НаборЗаписей.Прочитать();
		
		ЗаписатьДанныеИнформационнойБазы(ПотокЗаписи, НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает объект в XML.
//
// Параметры:
//	Контейнер - ОбработкаОбъект.ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера - менеджер
//		контейнера, используемый в процессе выгрузи данных. Подробнее см. комментарий
//		к программному интерфейсу обработки ВыгрузкаЗагрузкаДанныхМенеджерКонтейнера.
//	ПотокЗаписи - поток для записи. В него записывается объект.
//	Сериализатор - используемый сериализатор.
//	Объект - записываемый объект.
//	Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗаписатьДанныеИнформационнойБазы(ПотокЗаписи, Данные)
	
	Отказ = Ложь;
	Артефакты = Новый Массив();
	ТекущиеОбработчики.ПередВыгрузкойОбъекта(ТекущийКонтейнер, ЭтотОбъект, ТекущийСериализатор, Данные, Артефакты, Отказ);
	
	Если Не Отказ Тогда
		ПотокЗаписи.ЗаписатьОбъектДанныхИнформационнойБазы(Данные, Артефакты);
	КонецЕсли;
	
	ТекущиеОбработчики.ПослеВыгрузкиОбъекта(ТекущийКонтейнер, ЭтотОбъект, ТекущийСериализатор, Данные, Артефакты);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
