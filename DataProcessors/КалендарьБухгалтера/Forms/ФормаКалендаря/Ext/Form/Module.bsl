
#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Периодичность 			  = Параметры.Периодичность;
	ДатаНачалаПериодаОтчета   = Параметры.ДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета    = Параметры.ДатаКонцаПериодаОтчета;
	Орг 					  = Параметры.Организация;
	КодИФНС 				  = Параметры.КодИФНС;
	
	Если НЕ Периодичность Тогда
		ПравыйМес = Месяц(ДатаКонцаПериодаОтчета);
		Если (ПравыйМес = 3) Или (ПравыйМес = 6) Или (ПравыйМес = 9) Тогда
			ДатаНач = НачалоКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			ДатаКон = КонецКвартала(ДатаНач);
		ИначеЕсли ПравыйМес = 12 Тогда
			ДатаНач = НачалоГода(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			ДатаКон = КонецКвартала(ДатаНач);
		Иначе
			ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			ДатаКон = КонецМесяца(ДатаНач);
		КонецЕсли;
	Иначе
		// Если произвольный период.
		Если Год(ДатаНачалаПериодаОтчета) <> Год(ДатаКонцаПериодаОтчета) Тогда
			ДатаНач = НачалоГода(ДатаКонцаПериодаОтчета);
			ДатаКон = ДатаКонцаПериодаОтчета;
		Иначе
			ДатаНач = ДатаНачалаПериодаОтчета;
			ДатаКон = ДатаКонцаПериодаОтчета;
		КонецЕсли;
	КонецЕсли;

	Попытка
		Если Орг.Количество() = 1 Тогда
			ОргРез = Орг.Получить(0).Значение;
		Иначе
			ОргРез = Неопределено;
		КонецЕсли;
	Исключение
		ОргРез = ?(НЕ ЗначениеЗаполнено(Орг), Неопределено, Орг);
	КонецПопытки;

	мОрганизацияИзЦУО = Орг;
	Если (ТипЗнч(мОрганизацияИзЦУО) = Тип("СписокЗначений")) И (мОрганизацияИзЦУО.Количество() > 0) Тогда
		ДляОрганизации = мОрганизацияИзЦУО.Получить(0).Значение
	Иначе
		ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			ДляОрганизации = ОргПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		ОргПоУмолчанию = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации").ОрганизацияПоУмолчанию();
		
		Организация = ОргПоУмолчанию;
		
	КонецЕсли;

	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Элементы.ДляОрганизации.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

	Если НЕ ЗначениеЗаполнено(ДляОрганизации) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Необходимо выбрать организацию, для составления календаря.'");

		Сообщение.Сообщить()
		
	КонецЕсли;
	
	
	Макет = Обработки[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 11)].ПолучитьМакет("ДанныеКалендаря");

	КалендарнаяНеделя = Макет.ПолучитьОбласть("КалендарнаяНеделя|Неделя");
	ОбластьКалендарьСтрока = Макет.ПолучитьОбласть("КалендарьСтрока|Неделя");
	
	СтруктураОформленияКалендаря = Новый Структура;

	РабочаяДатаКалендарь = ТекущаяДатаСеанса();

	ПолеТабличногоДокументаНеделя.ФиксацияСверху = КалендарнаяНеделя.ВысотаТаблицы;

	ЦветСубботы            = Новый Цвет(153, 51,   0); // Темно-красный
	ЦветВоскресенья        = Новый Цвет(255,  0,   0); // Красный
	ЦветПраздничногоДня    = Новый Цвет(255,  0, 255); // Фиолетовый
	
	Строка100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	// Определим картинки
	КартинкаПлатеж = БиблиотекаКартинок.УплатаНалога;
	КартинкаСдачаОтчета = БиблиотекаКартинок.СдачаРегОтчета;
	КартинкаСнятьОповещение = БиблиотекаКартинок.СнятьНапоминание;
	КартинкаОповестить = БиблиотекаКартинок.НапоминаниеРО;
	КартинкаПерейтиКДате = БиблиотекаКартинок.Календарь;
	КартинкаПустая = Новый Картинка();
	
	СоздатьТаблицуСроковДействияОтчетности();
	
	Если (ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря").Количество() = 0) Тогда
		
		ДатаКалендаряНаФорме = ДатаНач;

		СоответствиеКолонокНеделя = Новый Структура();
		СоответствиеКолонокНеделя.Вставить("_1", 1.13);
		СоответствиеКолонокНеделя.Вставить("_2", 6.4);
		СоответствиеКолонокНеделя.Вставить("_3", 15);
		СоответствиеКолонокНеделя.Вставить("_4", 15);
		СоответствиеКолонокНеделя.Вставить("_5", 15);
		СоответствиеКолонокНеделя.Вставить("_6", 15);
		СоответствиеКолонокНеделя.Вставить("_7", 15);
		СоответствиеКолонокНеделя.Вставить("_8", 10); // Суббота
		СоответствиеКолонокНеделя.Вставить("_9", 12); // Воскресенье

		ИмяСтраницыКалендаря = "День";
		ОтображаласьИнформацияПоДням = Истина;
		ОтображаласьИнформацияпоНеделям = Ложь;

		СформироватьТаблицуКалендара(Год(ДатаНач));
		// Создадим и заполнить первоначально таблицы для хранения дат для ДНЯ и для НЕДЕЛИ.
		НовЗап = ВыделенныеДатыВКалендареДень.Добавить();
		НовЗап.Дата = ДатаКалендаряНаФорме;
		Для Инд = 1 По 7 Цикл
			НовСтр = ВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;

		ЗаполнитьСписокПериодов();
		СформироватьТаблицуПраздничныхИВыходныхДней(Год(ДатаНач));

	Иначе
		
		СоответствиеКолонокНеделя 			  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "СоответствиеКолонокНеделя");
		ИмяСтраницыКалендаря 				  = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ИмяСтраницыКалендаря");
		ВыделенныеДатыВКалендареДень.Загрузить(ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ВыделенныеДатыВКалендареДень"));
		ВыделенныеДатыВКалендареНеделя.Загрузить(ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ВыделенныеДатыВКалендареНеделя"));	
		
		Год     = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ГодКалендаря");
		ДатаНач = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ДатаОтображенияНач");										  
		ДатаКон = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ДатаОтображенияКон");
		
		ЗаполнитьСписокПериодов();
		ПолеВыбораСобытияЗаПериод = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ПолеВыбораСобытияЗаПериод");
		
		МесяцИзСписка = ПолеВыбораСобытияЗаПериод;	
		Если (МесяцИзСписка = 3) Или (МесяцИзСписка = 6) Или (МесяцИзСписка = 9) Или (МесяцИзСписка = 12) Тогда
			ДатаНач = НачалоКвартала(Дата(Год, МесяцИзСписка, 1));
			ДатаКон = КонецКвартала(ДатаНач);
		Иначе
			ДатаНач = НачалоМесяца(Дата(Год, МесяцИзСписка, 1));
			ДатаКон = КонецМесяца(ДатаНач);
		КонецЕсли;
			
		СформироватьТаблицуКалендара(Год);

		СформироватьТаблицуПраздничныхИВыходныхДней(Год);

		Если ИмяСтраницыКалендаря = "День" Тогда
			// Обновим календарь, чтобы перерисовать дни.
			ДатаКалендаряНаФорме = ВыделенныеДатыВКалендареДень[0].Дата;
			ОтображаласьИнформацияПоДням = Истина;
			ОтображаласьИнформацияпоНеделям = Ложь;
		ИначеЕсли ИмяСтраницыКалендаря = "Неделя" Тогда
			ОтображаласьИнформацияПоДням = Ложь;
			ОтображаласьИнформацияпоНеделям = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Год = Год(ДатаНач);
	ГодИзменен = Ложь;

    УстановитьИнтервалКалендаря();

	УстановитьЗакладку(ИмяСтраницыКалендаря);
	
	ПеречислениеПериодичностьМесяц   = Перечисления.Периодичность.Месяц;
	ПеречислениеПериодичностьКвартал = Перечисления.Периодичность.Квартал;

КонецПроцедуры

&НаСервере
Процедура СоздатьТаблицуСроковДействияОтчетности()
	
	МакетаТабл = Макет;
	ОбластьМакета = МакетаТабл.Область("СрокиОтчетности");
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0));

	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

	ТаблицаСроковОтчетность = Новый ТаблицаЗначений;
	ТаблицаСроковОтчетность.Колонки.Добавить("ИсточникОтчета", ОписаниеТиповСтрока);
	ТаблицаСроковОтчетность.Колонки.Добавить("Форма", ОписаниеТиповСтрока);
	ТаблицаСроковОтчетность.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата);
	ТаблицаСроковОтчетность.Колонки.Добавить("ДатаКонецДействия",ОписаниеТиповДата);
	ТаблицаСроковОтчетность.Колонки.Добавить("НазваниеОтчетнойФормы", ОписаниеТиповСтрока);

	Для Ном = ОбластьМакета.Верх По ОбластьМакета.Низ Цикл
		НовСтр = ТаблицаСроковОтчетность.Добавить();
		НовСтр.ИсточникОтчета = МакетаТабл.Область(Ном, 1).Текст;
		НовСтр.Форма = МакетаТабл.Область(Ном, 2).Текст;
		ДатаС = МакетаТабл.Область(Ном, 3).Текст;
		НовСтр.ДатаНачалоДействия = Дата(Прав(ДатаС, 4) + Сред(ДатаС, 4, 2) + Лев(ДатаС, 2));
		ДатаПо = МакетаТабл.Область(Ном, 4).Текст;
		НовСтр.ДатаКонецДействия = ?(ПустаяСтрока(ДатаПо), РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")), Дата(Прав(ДатаПо, 4) + Сред(ДатаПо, 4, 2) + Лев(ДатаПо, 2)));
		НовСтр.НазваниеОтчетнойФормы = МакетаТабл.Область(Ном, 5).Текст;
	КонецЦикла;  
	
	АдресТаблицыСроков = ПоместитьВоВременноеХранилище(ТаблицаСроковОтчетность, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПериодов()
	Элементы.ПолеВыбораСобытияЗаПериод.СписокВыбора.Очистить();
	Для НомМесяц = 1 По 12 Цикл
		МесяцРасш = Дата(Год(ДатаНач), НомМесяц, 1);
		Если НомМесяц = 3 Тогда
			Период = "I кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 6 Тогда
			Период = "II кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 9 Тогда
			Период = "III кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 12 Тогда
			Период = "IV кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		Иначе
			Период = Формат(МесяцРасш, "ДФ=ММММ") + " " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		КонецЕсли;
		Элементы.ПолеВыбораСобытияЗаПериод.СписокВыбора.Добавить(НомМесяц, Период);
	КонецЦикла;

	ПолеВыбораСобытияЗаПериод = Месяц(ДатаКон);

КонецПроцедуры

&НаСервере
Процедура УстановитьИнтервалКалендаря()
	Элементы.КалендарьСобытий.НачалоПериодаОтображения = ДатаНач;
	Элементы.КалендарьСобытий.КонецПериодаОтображения  = ДатаКон;
КонецПроцедуры

// Процедура меняет текущую страницу панели формы.
//
// Параметры
//  ИмяЗакладки - Строка, имя новой страницы
//
// Возвращаемое значение
//  НЕТ
&НаСервере
Процедура УстановитьЗакладку(ИмяЗакладки)

	Если ИмяЗакладки = "Неделя" Тогда
		ОтображаласьИнформацияпоНеделям = Истина;
		Элементы.КалендарьСобытий.РежимВыделения = РежимВыделенияДаты.Одиночный;
		// Проверим, если переключили квартал и ранее выбранная неделя уже не входит в рамки оторажения календаря.
		Если ВыделенныеДатыВКалендареНеделя.Количество() > 0 Тогда
			// В случае, если интервал календаря не подходит под ранее выбранную неделю, то создадим новую неделю в таблице недель.
			ВыделенныеДатыВКалендареНеделя.Очистить();
			НачНед = НачалоНедели(ВыделенныеДатыВКалендареДень[0].Дата);
			Для Инд = 1 По 7 Цикл
				НовСтр = ВыделенныеДатыВКалендареНеделя.Добавить();
				НовСтр.Дата = НачНед + 86400 * (Инд - 1);
			КонецЦикла;
		КонецЕсли;
		ОтобразитьЗаписиКНедели();
	ИначеЕсли ИмяЗакладки = "День" Тогда
		ОтображаласьИнформацияПоДням = Истина;
		Если (ВыделенныеДатыВКалендареДень[0].Дата >= Элементы.КалендарьСобытий.НачалоПериодаОтображения)
		   И (ВыделенныеДатыВКалендареДень[0].Дата <= Элементы.КалендарьСобытий.КонецПериодаОтображения) Тогда
			ДатаКалендаряНаФорме = ВыделенныеДатыВКалендареДень[0].Дата;
		Иначе
			ВыделенныеДатыВКалендареДень.Очистить();
			НовСтр = ВыделенныеДатыВКалендареДень.Добавить();
			НовСтр.Дата = Элементы.КалендарьСобытий.НачалоПериодаОтображения;
			ДатаКалендаряНаФорме = НовСтр.Дата;
		КонецЕсли;
		ОтобразитьЗаписиКДате();
	КонецЕсли;

	Элементы.ПанельФормы.ТекущаяСтраница = Элементы.ПанельФормы.ПодчиненныеЭлементы[ИмяЗакладки];
	
	СформироватьЗаголовокФормы(ЭтаФорма, ДатаКалендаряНаФорме);
	
	СохранитьДанныеНаСервере();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокФормы(Форма, НаДату)
	Если НаДату = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		Форма.Заголовок = "Календарь бухгалтера";
	Иначе
		ТекСтраница = Форма.Элементы.ПанельФормы.ТекущаяСтраница.Имя;
		Если ТекСтраница = "День" Тогда
			Форма.Заголовок = "Календарь бухгалтера - события на " + формат(НаДату, "ДФ=дд.ММ.гггг") + " г., для организации " + """" + Форма.ДляОрганизации + """";
		ИначеЕсли ТекСтраница = "Неделя" Тогда
			Форма.ДатаНач = Форма.ВыделенныеДатыВКалендареНеделя[0].Дата;
			Форма.ДатаКон = Форма.ВыделенныеДатыВКалендареНеделя[6].Дата;
			Форма.Заголовок = "Календарь бухгалтера - события с " + формат(Форма.ДатаНач, "ДФ=дд.ММ.гггг") + " г. по " + формат(Форма.ДатаКон, "ДФ=дд.ММ.гггг") + " г., для организации " + """" + Форма.ДляОрганизации + """";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗаписиКНедели()
	
	ТаблицаПраздничныхДней = ПолучитьИзВременногоХранилища(АдресТаблицыПраздников);

	ПолеТабличногоДокументаНеделя.Очистить();
	КалендарнаяНеделя.Области.ОбластьЗаголовокНеделя.Расшифровка = Новый Структура("Статус", "РазмерЗаголовка");
	КалендарнаяНеделя.Области.ОбластьЗаголовокНеделя2.Расшифровка = Новый Структура("Статус", "РазмерЗаголовка");
	КалендарнаяНеделя.Области.ОбластьЗаголовокНеделяДень.Расшифровка = Новый Структура("Статус", "ПерейтиНаДень");

	Для Инд = 1 По 7 Цикл
		ПарДата = ВыделенныеДатыВКалендареНеделя[Инд - 1].Дата;
		КалендарнаяНеделя.Параметры["Дата" + Инд] = ПарДата;
		КалендарнаяНеделя.Параметры["День" + Инд] = ОпределитьДеньНедели(ДеньНедели(ПарДата));
		Если (НЕ ПроизводственныйКалендарьЗаполнен) И ((Инд = 6) Или (Инд = 7)) Тогда
			КалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона =  Новый Цвет(255, 0, 0);
		ИначеЕсли (НЕ ПроизводственныйКалендарьЗаполнен) И (НЕ ((Инд = 6) Или (Инд = 7))) Тогда
			КалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона = Новый Цвет(234, 229, 216);
		КонецЕсли;  

		Если ПроизводственныйКалендарьЗаполнен Тогда
			Если ТаблицаПраздничныхДней.НайтиСтроки(Новый Структура("Дата", ПарДата)).Количество() > 0 Тогда
				КалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона =  Новый Цвет(255, 0, 0);
			Иначе
				КалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона = Новый Цвет(234, 229, 216);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ПолеТабличногоДокументаНеделя.Вывести(КалендарнаяНеделя);
	ТаблицаСобытийНедели = ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя();
	ТаблицаСобытийНедели.Сортировать("Срок, Статус");
	ТаблицаСобытийНедели.Колонки.Добавить("Всег", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1)));
	ТаблицаСобытийНедели.Колонки.Добавить("НомерСтрокиВывода", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2)));
	НомерСтрокиВывода = 0;
	Дат = Неопределено;
	ОбщСчетчик = 0;
	Для каждого Зап Из ТаблицаСобытийНедели Цикл
		Зап.Всег = 1;
		ОбщСчетчик = ОбщСчетчик + 1;

		Если ОбщСчетчик = 1 Тогда
			НомерСтрокиВывода = НомерСтрокиВывода + 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
			Дат = Зап.Срок;
			Продолжить;
		КонецЕсли;

		Если Зап.Срок = Дат Тогда
			НомерСтрокиВывода = НомерСтрокиВывода + 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
		Иначе
			НомерСтрокиВывода = 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
			Дат = Зап.Срок;
		КонецЕсли;

	КонецЦикла;

	ТаблицаСобытийНедели2 = ТаблицаСобытийНедели.Скопировать();
	ТаблицаСобытийНедели2.Свернуть("НомерСтрокиВывода");
	ВсегоСтрок = ТаблицаСобытийНедели2.Количество();
	
	НомерПП = 0;

	ВыделитьСтроку = Истина;
	Для Инд1 = 1 По ВсегоСтрок Цикл
		НомерПП = Инд1;
		// Выберем строки, которые должны выводится под номером НомерПП
		Строки = ТаблицаСобытийНедели.НайтиСтроки(Новый Структура("НомерСтрокиВывода", НомерПП));
		// Выведем их.
		ОбластьКалендарьСтрока.Параметры.НомерПП = НомерПП;

		// Очистим остальные параметры.
		Для Инд = 1 По 7 Цикл
			ОбластьКалендарьСтрока.Параметры["СобытиеДата" + Строка(Инд)] = "";

			// Очистим картинки
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_1"].Картинка = КартинкаПустая;
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_2"].Картинка = КартинкаПустая;

			Если ВыделитьСтроку Тогда
				ЦветФонаСтроки = Новый Цвет(248, 249, 255);
			Иначе
				ЦветФонаСтроки = Новый Цвет(255, 255, 255);
			КонецЕсли;

			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_1"].ЦветФона = ЦветФонаСтроки;
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_2"].ЦветФона = ЦветФонаСтроки;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + Строка(Инд)].Расшифровка = Неопределено;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + Строка(Инд)].Примечание.Текст = "";

			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Инд + "_1"].Расшифровка = Неопределено;
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Инд + "_2"].Расшифровка = Неопределено;

		КонецЦикла;

		Для каждого СтрокаДанных Из Строки Цикл
			НомерДняВНеделиЧ = ДеньНедели(СтрокаДанных.Срок);
			НомерДняВНедели = Строка(НомерДняВНеделиЧ);
			НазваниеОтчетаИлиНалога = СтрокаДанных.НазваниеОтчетаИлиНалога;
			Если (СтрокаДанных.Статус = "1") Или (СтрокаДанных.Статус = "3") Тогда
			// Если действие Отчет или напоминание на отчет, тогда выведем в скобках кол-во сохраненных отчетов.
				ДокументыОтчета = РегламентированнаяОтчетностьВызовСервера.ДокументыСУчетомКритериевОтбораКалендарь(СтрокаДанных.ИсточникОтчета, СтрокаДанных.ЗаПериодС, СтрокаДанных.ЗаПериодПо, ДляОрганизации, "", СтрокаДанных.Периодичность);
				Если ДокументыОтчета <> 0 Тогда
					НазваниеОтчетаИлиНалога = "(" + ДокументыОтчета + ") " + НазваниеОтчетаИлиНалога;
				КонецЕсли;
			КонецЕсли;

			ОбластьКалендарьСтрока.Параметры["СобытиеДата" + НомерДняВНедели] = НазваниеОтчетаИлиНалога;

			СтруктураСтроки = Новый Структура();
			Сч = 0;
			Для каждого Кол Из ТаблицаСобытийНедели.Колонки Цикл
				СтруктураСтроки.Вставить(Кол.Имя, СтрокаДанных[Сч]);
				Сч = Сч + 1;
			КонецЦикла;
			СтруктураСтроки.Вставить("НомерСтрокиВТабличномПоле", Инд1);
			СтруктураСтроки.Вставить("НомерДня", НомерДняВНеделиЧ);

			Если ОповещенияПоДанномуСобытияЕсть(СтруктураСтроки, СтрокаДанных.Статус = "2") Тогда
				ИмяОбласти2 = "НеделяРисДата" + НомерДняВНедели + "_2";
				ОбластьКалендарьСтрока.Рисунки[ИмяОбласти2].Картинка = КартинкаОповестить;
				СтруктураСтроки.Вставить("Оповестить", Истина);
			Иначе
				СтруктураСтроки.Вставить("Оповестить", Ложь);
			КонецЕсли;
			
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Расшифровка = СтруктураСтроки;
			
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Примечание.Текст = СтрокаДанных.Кто;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Примечание.Ширина = 130;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Примечание.Высота = 30;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Примечание.АвтоРазмер = Ложь;
			ОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Примечание.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

			Если СтрокаДанных.Статус = "1" Тогда
				// Сдача отчета
				СтатусЗаписи = КартинкаСдачаОтчета;
			ИначеЕсли СтрокаДанных.Статус = "2" Тогда
				СтатусЗаписи = КартинкаПлатеж;
			КонецЕсли;
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_1"].Картинка = СтатусЗаписи;

			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_1"].Расшифровка = СтруктураСтроки;
			ОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_2"].Расшифровка = СтруктураСтроки;

		КонецЦикла;

		УстановитьЦветаОбластей(ОбластьКалендарьСтрока, ВыделитьСтроку, "СтрочкаЦветаНеделя");
		Для Нед = 1 По 7 Цикл
			ИмяОбласти1 = "НеделяРисДата" + Нед + "_1";
			ИмяОбласти2 = "НеделяРисДата" + Нед + "_2";
			ОбластьКалендарьСтрока.Рисунки[ИмяОбласти1].Имя = "Rowin1_" + Строка(Инд1) + "C" + Нед;
			ОбластьКалендарьСтрока.Рисунки[ИмяОбласти2].Имя = "Rowin2_" + Строка(Инд1) + "C" + Нед;
		КонецЦикла;

		ПолеТабличногоДокументаНеделя.Вывести(ОбластьКалендарьСтрока);

		Для Нед = 1 По 7 Цикл
			ИмяОбласти1 = "НеделяРисДата" + Нед + "_1";
			ИмяОбласти2 = "НеделяРисДата" + Нед + "_2";
			ОбластьКалендарьСтрока.Рисунки["Rowin1_" + Строка(Инд1) + "C" + Нед].Имя = ИмяОбласти1;
			ОбластьКалендарьСтрока.Рисунки["Rowin2_" + Строка(Инд1) + "C" + Нед].Имя = ИмяОбласти2;
		КонецЦикла;

	КонецЦикла;

	УстановитьШиринуКолонок(ПолеТабличногоДокументаНеделя);

	ДатаКалендаряНаФорме = ПарДата;
	
	СформироватьЗаголовокФормы(ЭтаФорма, ДатаКалендаряНаФорме);
	
	ОформлениеКалендаря("Неделя");
	
	СохранитьДанныеНаСервере();

КонецПроцедуры

&НаСервере
Функция ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, РежимУплаты = Ложь, ВозвратитьТаблицу = Ложь)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());

	Запрос.УстановитьПараметр("ЗаПериодС", ДанныеСтроки.ЗаПериодС);
	Запрос.УстановитьПараметр("ЗаПериодПо", ДанныеСтроки.ЗаПериодПо);
	Запрос.УстановитьПараметр("Орг", ДляОрганизации);
	Запрос.УстановитьПараметр("НазваниеОтчетаИлиНалога", ДанныеСтроки.НазваниеОтчетаИлиНалога);
	Запрос.УстановитьПараметр("Периодичность", ДанныеСтроки.Периодичность);

	Если РежимУплаты Тогда
		Запрос.УстановитьПараметр("СрокУплаты", ДанныеСтроки.Срок);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаПериодС, ДатаПоказа
		| Из РегистрСведений.СобытияКалендаряБухгалтера
		| ГДЕ
		| Пользователь = &Пользователь
		| И ПоследняяДатаДействия = &СрокУплаты
		| И ЗаПериодС = &ЗаПериодС
		| И ЗаПериодПо = &ЗаПериодПо
		| И Организация = &Орг
		| И ТипСообщения = ЗНАЧЕНИЕ(Перечисление.СообщенияДляРегОтчетов.УплатаНалога)
		| И ИсточникОтчета = &НазваниеОтчетаИлиНалога
		| И Периодичность = &Периодичность";
	Иначе
		Запрос.УстановитьПараметр("ПоследняяДатаДействия", ДанныеСтроки.Срок);
		Запрос.УстановитьПараметр("ИсточникОтчета", ДанныеСтроки.ИсточникОтчета);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаПериодС, ДатаПоказа
		| Из РегистрСведений.СобытияКалендаряБухгалтера
		| ГДЕ
		| Пользователь = &Пользователь
		| И ПоследняяДатаДействия = &ПоследняяДатаДействия
		| И ИсточникОтчета = &ИсточникОтчета
		| И ЗаПериодС = &ЗаПериодС
		| И ЗаПериодПо = &ЗаПериодПо        
		| И Организация = &Орг
		| И ТипСообщения = ЗНАЧЕНИЕ(Перечисление.СообщенияДляРегОтчетов.СдачаОтчета)
		| И Периодичность = &Периодичность";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДляОрганизации) Тогда
		Запрос.Текст = Запрос.Текст +" " + "И Организация = &Орг";
	КонецЕсли;

	Если ВозвратитьТаблицу Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().Количество() > 0;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ОпределитьДеньНедели(НомерДняНедели)
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя()
	
	НакопительнаяТаблицаПредставленияОтчетов = ПолучитьИзВременногоХранилища(АдресТаблицыОтчетов);
	НакопительнаяТаблицаСроковУплат = ПолучитьИзВременногоХранилища(АдресТаблицыУплат);

	// Отберем все, кроме напоминаний.
	Строки = НакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("Статус", Ложь));

	ДатаНач = ВыделенныеДатыВКалендареНеделя[0].Дата;
	ДатаКон = ВыделенныеДатыВКалендареНеделя[6].Дата;
	
	ТаблОбъед = ПолучитьТаблицуОбъединений();

	Для каждого Стр Из Строки Цикл
		Если (Стр.ПоследняяДатаПредставленияОтчета >= ДатаНач) И (Стр.ПоследняяДатаПредставленияОтчета <= ДатаКон) Тогда
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = Стр.ПоследняяДатаПредставленияОтчета;
			НовСтр.Срок = Стр.ПоследняяДатаПредставленияОтчета;
			НовСтр.Статус = ?(Стр.Статус, "3", "1");
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НазваниеОтчетнойФормы;
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.КтоСдаетОтчет;
			НовСтр.НарастающийИтог = Стр.ФормаЗаполняетсяНарастающимИтогом;

			НовСтр.ФормаОтчета = Стр.ФормаОтчета;
			НовСтр.ДатаПредставленияОтчета = Стр.ДатаПредставленияОтчета;
			НовСтр.ИсточникОтчета = Стр.Объект;
			
			Если (НовСтр.Периодичность = "Квартальная") И (НовСтр.НарастающийИтог) Тогда
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			ИначеЕсли (НовСтр.Периодичность = "Месячная") И (НовСтр.НарастающийИтог) Тогда
				Если Месяц(НовСтр.ЗаПериодПо) = 1 Тогда
					СтрПериодОтчета = Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				Иначе
					СтрПериодОтчета = "Январь - " + Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				КонецЕсли;
				СтроковоеПредставлениеПериода = СтрПериодОтчета;
			Иначе
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			КонецЕсли;
			
			СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
			ПериодичностьЗаПериод = НовСтр.Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;
			
			НовСтр.Периодичность = ПериодичностьЗаПериод;
			
		КонецЕсли;
	КонецЦикла;

	ТаблУплат = НакопительнаяТаблицаСроковУплат.Скопировать();
	ТаблУплат.Очистить();

	// Сформируем таблицу уплат налогов за выбранные нады (неделя).
	Для каждого Дат Из ВыделенныеДатыВКалендареНеделя Цикл
		Строки = НакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", Дат.Дата));
		ЗагрузитьВТаблицуЗначений(Строки, ТаблУплат);
	КонецЦикла;

	// Объеденим данные с таблицей представления отчетности.
	Для каждого Стр Из ТаблУплат Цикл
		НовСтр = ТаблОбъед.Добавить();
		НовСтр.ДатаЗап = Стр.СрокУплаты;
		НовСтр.Срок = Стр.СрокУплаты;
		НовСтр.Статус = "2";
		НовСтр.Периодичность = Стр.Периодичность;
		НовСтр.НазваниеОтчетаИлиНалога = Стр.НалогПолноеНазв;
		НовСтр.ЗаПериодС = Стр.ЗаПериодС;
		НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
		НовСтр.Кто = Стр.Кто;
		НовСтр.НарастающийИтог = Стр.НарастающийИтог;
		
		Если (НовСтр.Периодичность = "Квартальная") И (НовСтр.НарастающийИтог) Тогда
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
		ИначеЕсли (НовСтр.Периодичность = "Месячная") И (НовСтр.НарастающийИтог) Тогда
			Если Месяц(НовСтр.ЗаПериодПо) = 1 Тогда
				СтрПериодОтчета = Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтрПериодОтчета = "Январь - " + Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
			СтроковоеПредставлениеПериода = СтрПериодОтчета;
		Иначе
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
		КонецЕсли;
		
		СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
		
		НовСтр.Периодичность = СтроковоеПредставлениеПериода;

	КонецЦикла;

	Возврат ТаблОбъед;

КонецФункции

&НаСервере
Функция ПолучитьТаблицуОбъединений()
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТипДата = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Строка1000 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
	мСтрока1 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1));


	ТаблОбъед = Новый ТаблицаЗначений;
	// Колонки применяемые и при сдачи отчетов и при уплате налогов.
	// Значения колонки статус:
	//    1 - сдача отчета
	//    2 - уплата налога
	//    3 - напоминание о сдаче отчета

	ТаблОбъед.Колонки.Добавить("ДатаЗап", ТипДата);
	ТаблОбъед.Колонки.Добавить("Срок", ТипДата);
	ТаблОбъед.Колонки.Добавить("Статус", мСтрока1);
	ТаблОбъед.Колонки.Добавить("Периодичность", Строка100);
	ТаблОбъед.Колонки.Добавить("НазваниеОтчетаИлиНалога", Строка1000);
	ТаблОбъед.Колонки.Добавить("ЗаПериодС", ТипДата);
	ТаблОбъед.Колонки.Добавить("ЗаПериодПо", ТипДата);
	ТаблОбъед.Колонки.Добавить("Кто", Строка1000);
	ТаблОбъед.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);

	// Колонки применяемые только при сдаче отчетов.
	ТаблОбъед.Колонки.Добавить("ФормаОтчета", Строка100);
	ТаблОбъед.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата);
	ТаблОбъед.Колонки.Добавить("ИсточникОтчета", Строка100);
	Возврат ТаблОбъед;

КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
&НаСервере
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаОбластей(ВыводимаяОбласть, ВыделитьСтроку, НазваниеОбласти)
	Если ВыделитьСтроку Тогда
		ВыводимаяОбласть.Области[НазваниеОбласти].ЦветФона = Новый Цвет(244, 249, 255);
	Иначе
		ВыводимаяОбласть.Области[НазваниеОбласти].ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	ВыделитьСтроку = НЕ ВыделитьСтроку;
КонецПроцедуры

&НаСервере
Процедура УстановитьШиринуКолонок(ТаблПоле)

	СоответствиеЛиста = СоответствиеКолонокНеделя;

	Для каждого Колонка Из СоответствиеЛиста Цикл
		Координата = "C" + СтрЗаменить(Колонка.Ключ, "_", "");

		Если ТаблПоле.Область(Координата).ШиринаКолонки <> 0 Тогда
			ТаблПоле.Область(Координата).ШиринаКолонки = СоответствиеЛиста[Колонка.Ключ];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьЗаписиКДате()
	
	ДатыФильтр = ВыделенныеДатыВКалендареДень;
	ДатыФильтрС = ДатыФильтр;
	Если ДатыФильтрС.Количество() = 1 Тогда
		ИтогДт = ДатыФильтрС[0].Дата;
	Иначе
		ИтогДт = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	КонецЕсли;

	РазместитьСведения(ДатыФильтрС);
	СформироватьЗаголовокФормы(ЭтаФорма, ИтогДт);
	ОформлениеКалендаря("День");
	
	СохранитьДанныеНаСервере();

КонецПроцедуры

&НаСервере
Процедура РазместитьСведения(НаДаты)

	ТаблОбъедОбщ = ПолучитьТаблицуОбъединений();
	
	Для Каждого НаДатуКалендаря Из НаДаты Цикл
		Если ТипЗнч(НаДаты) = Тип("Структура") Тогда
			НаДату = НаДатуКалендаря.Значение;
		Иначе
			НаДату = НаДатуКалендаря.Дата;
		КонецЕсли;
		ТаблОтчетности = ПолучитьТаблицуПредставленияОтчетности(НаДату);
		ТаблУплат = ПолучитьТаблицуСроковУплат(НаДату);
		
		ТаблОбъед = ПолучитьТаблицуОбъединений();
		Для каждого Стр Из ТаблОтчетности Цикл
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = НаДату;
			НовСтр.Срок = ?(Стр.Статус, Стр.ДатаПредставленияОтчета, Стр.ПоследняяДатаПредставленияОтчета);
			НовСтр.Статус = ?(Стр.Статус, "3", "1");
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НазваниеОтчетнойФормы; // Название отчета.
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.КтоСдаетОтчет;
			НовСтр.НарастающийИтог = Стр.ФормаЗаполняетсяНарастающимИтогом;

			НовСтр.ФормаОтчета = Стр.ФормаОтчета;
			НовСтр.ДатаПредставленияОтчета = Стр.ДатаПредставленияОтчета;
			НовСтр.ИсточникОтчета = Стр.Объект;
			
			Если (НовСтр.Периодичность = "Квартальная") И (НовСтр.НарастающийИтог) Тогда
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			ИначеЕсли (НовСтр.Периодичность = "Месячная") И (НовСтр.НарастающийИтог) Тогда
				Если Месяц(НовСтр.ЗаПериодПо) = 1 Тогда
					СтрПериодОтчета = Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				Иначе
					СтрПериодОтчета = "Январь - " + Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				КонецЕсли;
				СтроковоеПредставлениеПериода = СтрПериодОтчета;
			Иначе
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			КонецЕсли;
			
			СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
			ПериодичностьЗаПериод = НовСтр.Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;
			
			// Для отчетов и напоминаний к ним установим кол-во уже имеющихся отчетов в ИБ.
			НовСтр.Периодичность = ПериодичностьЗаПериод;
			
			ДокументыОтчета = РегламентированнаяОтчетностьВызовСервера.ДокументыСУчетомКритериевОтбораКалендарь(НовСтр.ИсточникОтчета, НовСтр.ЗаПериодС,НовСтр.ЗаПериодПо, ДляОрганизации, "", НовСтр.Периодичность);
			Если ДокументыОтчета <> 0 Тогда
				НовСтр.НазваниеОтчетаИлиНалога = "(" + ДокументыОтчета + ") " + НовСтр.НазваниеОтчетаИлиНалога;
			КонецЕсли;
			
		КонецЦикла;

		Для каждого Стр Из ТаблУплат Цикл
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = НаДату;
			НовСтр.Срок = Стр.СрокУплаты;
			НовСтр.Статус = "2";
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НалогПолноеНазв;
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.Кто;
			НовСтр.НарастающийИтог = Стр.НарастающийИтог;
			
			Если (НовСтр.Периодичность = "Квартальная") И (НовСтр.НарастающийИтог) Тогда
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			ИначеЕсли (НовСтр.Периодичность = "Месячная") И (НовСтр.НарастающийИтог) Тогда
				Если Месяц(НовСтр.ЗаПериодПо) = 1 Тогда
					СтрПериодОтчета = Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				Иначе
					СтрПериодОтчета = "Январь - " + Формат(НовСтр.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
				КонецЕсли;
				СтроковоеПредставлениеПериода = СтрПериодОтчета;
			Иначе
				СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(НовСтр.ЗаПериодС), КонецДня(НовСтр.ЗаПериодПо), "ФП=Истина");
			КонецЕсли;
			
			СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
			
			НовСтр.Периодичность = СтроковоеПредставлениеПериода;

		КонецЦикла;
		ЗагрузитьВТаблицуЗначений(ТаблОбъед, ТаблОбъедОбщ);
	КонецЦикла;

	// Выводим.
	ТаблОбъедОбщ.Сортировать("Срок, Статус, ДатаПредставленияОтчета, НазваниеОтчетаИлиНалога, Периодичность");
	ТаблицаСобытийКалендаря.Загрузить(ТаблОбъедОбщ);
	
	// Вывод картинки статуса к отчету или платежу
	Для Каждого СобытиеКалендаря Из ТаблицаСобытийКалендаря Цикл
		
		// Определим статус записи.
		Если СобытиеКалендаря.Статус = "1" Тогда
			// Сдача отчета
			СобытиеКалендаря.ИндексКартинки = 0;
		ИначеЕсли СобытиеКалендаря.Статус = "2" Тогда
			СобытиеКалендаря.ИндексКартинки = 1;
		ИначеЕсли СобытиеКалендаря.Статус = "3" Тогда
			СобытиеКалендаря.ИндексКартинки = 2;
		КонецЕсли;
				
		Если ОповещенияПоДанномуСобытияЕсть(СобытиеКалендаря, СобытиеКалендаря.Статус = "2") Тогда
			СобытиеКалендаря.КартинкаОповещение = КартинкаОповестить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуПредставленияОтчетности(НаДату)
	
	НакопительнаяТаблицаПредставленияОтчетов = ПолучитьИзВременногоХранилища(АдресТаблицыОтчетов);
	
	// Получим структуру таблицы
	Табл = НакопительнаяТаблицаПредставленияОтчетов.Скопировать();
	Табл.Очистить();

	СоздатьНапоминания(НаДату);

	Строки = НакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("ПоследняяДатаПредставленияОтчета", НаДату));
	ЗагрузитьВТаблицуЗначений(Строки, Табл);
	Возврат Табл;

КонецФункции

&НаСервере
Процедура СоздатьНапоминания(НаДату)
	
	НакопительнаяТаблицаПредставленияОтчетов = ПолучитьИзВременногоХранилища(АдресТаблицыОтчетов);

	Если НакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("Статус", Истина)).Количество() > 0 Тогда

		// Удалим напоминания, которые были сформированы ранее.
		КолвоЭлементовКоллекции = НакопительнаяТаблицаПредставленияОтчетов.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
			ЭлементКоллекции = НакопительнаяТаблицаПредставленияОтчетов[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.Статус Тогда
				НакопительнаяТаблицаПредставленияОтчетов.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Отберем все записи правее выбранной даты.
	РезультатОтбора = НакопительнаяТаблицаПредставленияОтчетов.Скопировать();
	РезультатОтбора.Очистить();
	Для каждого Зап Из НакопительнаяТаблицаПредставленияОтчетов Цикл
		ДатаСдачиОтчета = Зап.ПоследняяДатаПредставленияОтчета;
		Если ДатаСдачиОтчета <= НаДату Тогда
			// Записи, у которых прошел срок сдачи пропустим.
			Продолжить;
		КонецЕсли;

		Если Зап.ЗаПериодПо >= НаДату Тогда
			// Если, период за который сдается отчет, еще не прошел, тогда в напоминания запись не включаем.
			Продолжить;
		КонецЕсли;

		// Добавим подходящую запись в таблицу отбора.
		НовСтр = РезультатОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Зап);
	КонецЦикла;

	РезультатОтбора.Сортировать("ПоследняяДатаПредставленияОтчета");

	// В таблице РезультатОтбора - хранится таблица с данными по срокам представления отчетности, которые
	// наступят в будущем. Например, срок сдачи 20.02, НаДату = 18.02, запись попадает.

	СтруктураПоиска = Новый Структура();
	Для каждого Стр Из РезультатОтбора Цикл

		// Перед вставкой напоминаний, осуществим поиск по таблице, на предмет, что более близкое напоминание по дату
		// уже заведено, в этом случае, больше напоминаний вставлять не требуется.
		СтруктураПоиска.Вставить("КтоСдаетОтчет", Стр.КтоСдаетОтчет);
		СтруктураПоиска.Вставить("НазваниеОтчетнойФормы", Стр.НазваниеОтчетнойФормы);
		СтруктураПоиска.Вставить("Объект", Стр.Объект);
		СтруктураПоиска.Вставить("Периодичность", Стр.Периодичность);
		СтруктураПоиска.Вставить("ФормаЗаполняетсяНарастающимИтогом", Стр.ФормаЗаполняетсяНарастающимИтогом);
		СтруктураПоиска.Вставить("ФормаОтчета", Стр.ФормаОтчета);
		СтруктураПоиска.Вставить("Статус", Истина); // Только Напоминания.

		Если НакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ПроставитьНапоминания(НакопительнаяТаблицаПредставленияОтчетов
		                    , Стр
		                    , НаДату);
	КонецЦикла;

	АдресТаблицыОтчетов = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаПредставленияОтчетов, УникальныйИдентификатор);

КонецПроцедуры

// Процедура добавляет записи в таблицу, с признаком Напоминания = Истина. За каждый день.
//
&НаСервере
Процедура ПроставитьНапоминания(ТаблицаДанных, ЗаполненнаяСтрокаДанных, НаДату)

	НовСтр = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, ЗаполненнаяСтрокаДанных);
	НовСтр.Статус = Истина;
	НовСтр.ПоследняяДатаПредставленияОтчета = НаДату; // Дата напоминания.

КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСроковУплат(НаДату)
	
	НакопительнаяТаблицаСроковУплат = ПолучитьИзВременногоХранилища(АдресТаблицыУплат);
	
	// Получим структуру таблицы
	Табл = НакопительнаяТаблицаСроковУплат.Скопировать();
	Табл.Очистить();

	Строки = НакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", НаДату));
	ЗагрузитьВТаблицуЗначений(Строки, Табл);

	Табл.Сортировать("СрокУплаты");
	Возврат Табл;

КонецФункции

&НаСервере
Процедура СформироватьТаблицуКалендара(ТребуемыйГод)
	
	Строка1000 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
	Строка100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ТипДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	НакопительнаяТаблицаПредставленияОтчетов = Новый ТаблицаЗначений;
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("Объект", Строка100);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ПоследняяДатаПредставленияОтчета", ТипДата,,12);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("Периодичность", Строка100);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ФормаОтчета", Строка100);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("НазваниеОтчетнойФормы", Строка1000);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("КтоСдаетОтчет", Строка1000);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ФормаЗаполняетсяНарастающимИтогом", ОписаниеТиповБулево);
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("Статус", ОписаниеТиповБулево); // Может быть 1 - "Сдача отчета", 2 - "Напоминание" 3 - ОтчетГотов
	НакопительнаяТаблицаПредставленияОтчетов.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата); // Поле даты. Срок представления отчета, для строки напоминания.
	
	НакопительнаяТаблицаСроковУплат = Новый ТаблицаЗначений;
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("НалогПолноеНазв", Строка1000); // Полное название отчета из области Ключ НалогКратко.
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("СрокУплаты", ТипДата);
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("Периодичность", Строка100);
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("Кто", Строка1000);
	НакопительнаяТаблицаСроковУплат.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);

	// Получим основную таблицу событий календаря
	ТаблицаСобытий = ПолучитьТаблицуИзНастроек("События", "НазваниеСобытия, Наименование, Объект, Комментарий");

	СпрРегОтчетыПустаяСсылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка();

	// Собираем настройку для каждого события.
	Для каждого Событие Из ТаблицаСобытий Цикл
		ОбъектСобытие = Событие.Объект;

		Если ОбъектСобытие <> "Отчета нет" Тогда
			// Проверим, если отчет в справочнике рег. отчетов скрыт, тогда такой отчет не обрабатываем, считается, что организация
			// его представлять не должна.
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ОбъектСобытие);
			
			СкрытыеРегламентированныеОтчеты = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
			СкрытыеРегламентированныеОтчеты.РегламентированныйОтчет = НайденныйЭлемент.Ссылка;
			СкрытыеРегламентированныеОтчеты.Прочитать();
			                                            			
			Если НайденныйЭлемент = СпрРегОтчетыПустаяСсылка
			 Или СкрытыеРегламентированныеОтчеты.Выбран() Тогда
				Продолжить;
			КонецЕсли;

			НастройкаКСобытию = ПолучитьТаблицуИзНастроек(ОбъектСобытие, "Форма, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 1000);

			// Для всех форм построим план сдачи отчета с датами, с учетом действий форм.
			ТаблСдача = ПостроитьГрафикСдачи(ОбъектСобытие, НастройкаКСобытию, ТребуемыйГод);
			Если ТаблСдача = Неопределено Тогда
				НакопительнаяТаблицаПредставленияОтчетов.Очистить();
				НакопительнаяТаблицаСроковУплат.Очистить();
				АдресТаблицыОтчетов = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаПредставленияОтчетов, УникальныйИдентификатор);
				АдресТаблицыУплат = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаСроковУплат, УникальныйИдентификатор);
				Возврат;
			КонецЕсли;
			
			// Сгрузим в общую таблицу.
			ЗагрузитьВТаблицуЗначений(ТаблСдача, НакопительнаяТаблицаПредставленияОтчетов);
		КонецЕсли;

		// Уплата налогов.

		Если Событие.Комментарий = "Уплаты нет" Тогда
			// Для региональных налогов, уплата устанавливается на региональном уровне, в каждом субъекте свои сроки уплаты платежей.
			// В этом случае, обрабатывать сроки уплат не будем.
			Продолжить;
		КонецЕсли;

		// Считываем секцию НазваниеСобытия, "Прибыль".
		НастройкаКСобытию = ПолучитьТаблицуИзНастроек(Событие.НазваниеСобытия, "НазваниеНалога, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 1000);
		// Сроки уплат по налогам.
		ТаблУплата = ПостроитьГрафикУплат(НастройкаКСобытию, ТребуемыйГод);
		Если ТаблУплата = Неопределено Тогда
			НакопительнаяТаблицаПредставленияОтчетов.Очистить();
			НакопительнаяТаблицаСроковУплат.Очистить();
			АдресТаблицыОтчетов = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаПредставленияОтчетов, УникальныйИдентификатор);
			АдресТаблицыУплат = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаСроковУплат, УникальныйИдентификатор);
			Возврат;
		КонецЕсли;

		// Сгрузим в общую таблицу.
		ЗагрузитьВТаблицуЗначений(ТаблУплата, НакопительнаяТаблицаСроковУплат);

	КонецЦикла;
	
	АдресТаблицыОтчетов = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаПредставленияОтчетов, УникальныйИдентификатор);
	АдресТаблицыУплат = ПоместитьВоВременноеХранилище(НакопительнаяТаблицаСроковУплат, УникальныйИдентификатор);
	
КонецПроцедуры

// Получает данные из макета Календарь в таблицу. Все колонки - тип строка100.
//
// Параметры:
//  НазваниеОбласти - название области в макете.
//  КолонкиСтр      - строка через запятую, название колонок в результурующей таблице.
//
// Возвращаемое значение:
//  Таблица значений из макета Календаря с заданной областью.
//
&НаСервере
Функция ПолучитьТаблицуИзНастроек(НазваниеОбласти, КолонкиСтр, РазмерСтрок = 100)

	ОбластьМакет = Макет.Области.Найти(НазваниеОбласти);
	ТаблРезультат = Новый ТаблицаЗначений;
	Колонки = Новый Структура(КолонкиСтр);
	Если РазмерСтрок = 100 Тогда
		Строка100 = Строка100;
	Иначе
		Строка100 = Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(РазмерСтрок));
	КонецЕсли;

	Для Каждого Зап Из Колонки Цикл
		ТаблРезультат.Колонки.Добавить(Зап.Ключ, Строка100);
	КонецЦикла;

	Для Ном = ОбластьМакет.Верх По ОбластьМакет.Низ Цикл

		НовСтр = ТаблРезультат.Добавить();
		НомерКолонкиВМакете = 0;
		Для Каждого Зап Из ТаблРезультат.Колонки Цикл
			НомерКолонкиВМакете = НомерКолонкиВМакете + 1;
			Сведение = Макет.Область(Ном, НомерКолонкиВМакете).Текст;
			Если (НомерКолонкиВМакете = 1) И (ПустаяСтрока(Сведение)) Тогда
				// Не считываем пустую строку в области, если она есть по первой колонке.
				ТаблРезультат.Удалить(НовСтр);
				Прервать;
			КонецЕсли;
			НовСтр[Зап.Имя] = Сведение;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблРезультат;

КонецФункции

&НаСервере
Функция ПостроитьГрафикСдачи(Объект, ТаблицаНастройкиКОбъекту, Знач ТребуемыйГод)
	
	Строка1000 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
	Строка100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ТипДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	ТаблицаГрафикСдачи = Новый ТаблицаЗначений;
	ТаблицаГрафикСдачи.Колонки.Добавить("Объект", Строка100);
	ТаблицаГрафикСдачи.Колонки.Добавить("ПоследняяДатаПредставленияОтчета", ТипДата,,12);
	ТаблицаГрафикСдачи.Колонки.Добавить("Периодичность", Строка100);
	ТаблицаГрафикСдачи.Колонки.Добавить("ФормаОтчета", Строка100);
	ТаблицаГрафикСдачи.Колонки.Добавить("НазваниеОтчетнойФормы", Строка1000);
	ТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	ТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
	ТаблицаГрафикСдачи.Колонки.Добавить("КтоСдаетОтчет", Строка1000);
	ТаблицаГрафикСдачи.Колонки.Добавить("ФормаЗаполняетсяНарастающимИтогом", ОписаниеТиповБулево);
	ТаблицаГрафикСдачи.Колонки.Добавить("Статус", ОписаниеТиповБулево); // Может быть 1 - "Сдача отчета", 2 - "Напоминание" 3 - ОтчетГотов
	ТаблицаГрафикСдачи.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата); // Поле даты. Срок представления отчета, для строки напоминания.

	ТаблицаГрафикСдачи.Очистить();

	// Для каждой формы, которая описана в макете
	Для каждого Настр Из ТаблицаНастройкиКОбъекту Цикл

		ФормаЗаполняетсяНарастающимИтогом = Настр.НарастающийИтог = "Истина";
		НазваниеФормыНастройка = Настр.Форма;

		СрокУплатыЕжемесячно = Настр.Ежемесячно;
		СрокУплатыЕжемесячноКто = Настр.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Настр.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Настр.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Настр.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Настр.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Настр.ЗаГодТекст;

		// ТипСдачиФормы - 1 - ежемесячн. 2 - ежеквартально, 3- год
		Для ТипСдачиФормы = 1 По 3 Цикл
			Если (ТипСдачиФормы = 1) И (ПустаяСтрока(СрокУплатыЕжемесячно)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 2) И (ПустаяСтрока(СрокУплатыЕжеквартально)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 3) И (ПустаяСтрока(Настр.ЗаГод)) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипСдачиФормы = 1 Тогда
				// Форма сдается ежемесячно.
				ПериодичностьНастройка = "Месячная";
				СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				АкцизнаяСхема = Ложь;

				Если (СтрНайти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
				 Или (СтрНайти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
				 Или (СтрНайти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

					МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
					СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, СтрНайти(СрокУплатыЕжемесячно, " ") + 1);
					АкцизнаяСхема = Истина;

				КонецЕсли;

				Для Инд = СтруктураНачИКонцаДейтсвийПериода.Начало По СтруктураНачИКонцаДейтсвийПериода.Конец Цикл

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;
					
					СдаетсяВТекущемОтчетномПериоде = Ложь;
					// Обработаем возможность сокращения ПДСМ - последний день следующего месяца.
					Если СрокУплатыЕжемесячно = "ПДСМ" Тогда
						// За январь - 28 февраля
						// за февраль - 31 марта и т.д.
						//     
						// за декабрь - 31 января
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, Инд, 1));
					ИначеЕсли АкцизнаяСхема Тогда
						// Специальный режим сроков уплат. Применяется в акцизных декларациях.
						// Платеж делится на два срока, первый - до 20-го числа след. месяца после отчетного, второй - до 15-го через месяц.
						МесАкц = Инд + МесяцПрибавления;
						Если МесАкц >= 13 Тогда
							МесАкц = 1;
						КонецЕсли;
						СрокСдачи = Дата(ТребуемыйГод, МесАкц, СрокУплатыЕжемесячно);
					ИначеЕсли СтрНайти(СрокУплатыЕжемесячно, "ДОСОПП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания предыдущего отчетного периода
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжемесячно, 8));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = НачалоМесяца(Дата(ТребуемыйГод, Инд, 1)) + (86400 * (КолвоПрибавляемыхДней - 1));
						СдаетсяВТекущемОтчетномПериоде = Истина;
					Иначе
						СрокСдачи = КонецДня(Дата(ТребуемыйГод, Инд, СрокУплатыЕжемесячно));
					КонецЕсли;
					
					НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДату(СрокСдачи);
					Если НовСтр.ПоследняяДатаПредставленияОтчета = '0001-01-01' Тогда
						Возврат Неопределено;
					КонецЕсли;

					Если (АкцизнаяСхема) И (Инд = 12) Тогда
							// январь. Изменим период, за который должен составится отчет.
						СрокСдачиС = Дата(ТребуемыйГод - 1, 12 - МесяцПрибавления, 1);
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					ИначеЕсли СдаетсяВТекущемОтчетномПериоде Тогда
						СрокСдачиС = Дата(ТребуемыйГод, Инд, 1);
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					Иначе
						СрокСдачиС = ДобавитьМесяц(Дата(ТребуемыйГод, Инд, 1), -1);
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						// Если форма сдается нарастающим итогом, то передвигаем дату С на начало года.
						СрокСдачиС = НачалоГода(СрокСдачиС);
					КонецЕсли;

					НовСтр.ЗаПериодС = СрокСдачиС;
					НовСтр.ЗаПериодПо = СрокСдачиПо;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжемесячноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 2 Тогда
				// Обход для декларации по НДС с 2008 г. сдают все налогоплательщики квартально.
				Если (Объект = "РегламентированныйОтчетНДС") И (Настр.Форма = "ФормаОтчета2007Кв1") И (ТребуемыйГод >= 2008) Тогда
					СрокУплатыЕжеквартальноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
				КонецЕсли;

				ПериодичностьНастройка = "Квартальная";
				СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				Для Квартал = СтруктураНачИКонцаДейтсвийПериода.Начало По СтруктураНачИКонцаДейтсвийПериода.Конец Цикл
					Если Квартал = 4 Тогда
						// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
						Продолжить;
					КонецЕсли;

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;

					Если СтрНайти(СрокУплатыЕжеквартально, "ДОСОП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания соответствующего отчетного периода
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 7));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли СтрНайти(СрокУплатыЕжеквартально, "ДОПМСОП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания первого месяца следующего за отчетным периодом
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 9));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецМесяца(КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + 1) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
					ИначеЕсли СтрНайти(СрокУплатыЕжеквартально, "ДОСОПП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания предыдущего отчетного периода
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 8));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = НачалоКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + (86400 * (КолвоПрибавляемыхДней - 1));
					ИначеЕсли СтрНайти(СрокУплатыЕжеквартально, "ДОПМСОПП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания первого месяца следующего за предыдущим отчетным периодом
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 10));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецМесяца(НачалоКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1))) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли СтрНайти(СрокУплатыЕжеквартально, "ДОП2МСОПП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания второго месяца, следующего за предыдущим отчетным периодом
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 11));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецМесяца(ДобавитьМесяц(НачалоКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)), 1)) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли СтрНайти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда
						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДату(СрокСдачи);
						Если СрокСдачи = '0001-01-01' Тогда
							Возврат Неопределено;
						КонецЕсли;
						НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;
						// Повторим все параметры таблицы, т.к. прервем цикл.
						НовСтр.Периодичность = "Полугодие";
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
						НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;
						Прервать; // Прервем цикл. Только ПОЛУГОДИЕ.

					Иначе
						СрокСдачи = Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально);
					КонецЕсли;

					СрокСдачи = ПолучитьСледующуюРабочуюДату(СрокСдачи);
					Если СрокСдачи = '0001-01-01' Тогда
						Возврат Неопределено;
					КонецЕсли;
					НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 3 Тогда
				ПериодичностьНастройка = "Годовая";

				// Обход для декларации по НДС с 2008 г. сдают все налогоплательщики квартально.
				Если (Объект = "РегламентированныйОтчетНДС") И (Настр.Форма = "ФормаОтчета2007Кв1") И (ТребуемыйГод >= 2008) Тогда
					СрокУплатыЕжемесячноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
				КонецЕсли;

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если СтрНайти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						// Бухгалтерская отчетность. Годовая отчетность - в течении 90 дней по окончании года.
						// Выясним, для прошлого года, действует ли данный отчет?
						СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка);
						Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
							// Если форма за прошлый год не действует, то пропустим ее.
							Продолжить;
						КонецЕсли;
					КонецЕсли;

				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.

					СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
					Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
						// Если форма уже не действует, тогда пропускаем.
						// В случае, если конкретная форма уже закончила действовать в ГГГГ году, тогда проверим на прошлый год, но запись по действию
						// нужно сформировать для текущего года.
						// Например, для отчета, который в 2007 г. больше не действует, но действовал в 2006 г., сдача годового отчета за 2006 год
						// должна осуществляться в январе 2007 г.
						СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка, Истина);
						Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Годовая.
				НовСтр = ТаблицаГрафикСдачи.Добавить();
				НовСтр.Объект = Объект;
				// Если форма нарастающим итогом, то периодичность Годовая, иначе периодичность установим в Квартальная.
				// Проверка на любой квартальной декларации не нарастающим итогом.
				НовСтр.Периодичность = ?(ФормаЗаполняетсяНарастающимИтогом, ПериодичностьНастройка, "Квартальная");
				НовСтр.ФормаОтчета = НазваниеФормыНастройка;
				НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если СтрНайти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						ДниПлюс = Число(СтрЗаменить(СрокУплатыГодДень, "ДОСОП+", ""));
						// Прибавим к последней дате прошлого года нужно кол-во дней. Итоговая дата, будет событием в Требуемом году.
						// Отчет за прошлый год. Применимо для бухаглтерских форм.
						СрокСдачи = КонецГода(Дата(ТребуемыйГод - 1, 1, 1)) + ДниПлюс * 86400;
					КонецЕсли;
				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.
					СрокСдачи = Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень);
				КонецЕсли;
				НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДату(СрокСдачи);
				Если НовСтр.ПоследняяДатаПредставленияОтчета = '0001-01-01' Тогда
					Возврат Неопределено;
				КонецЕсли;

				// ЗаПериод Определим, за какой период отчетность.
				Если ФормаЗаполняетсяНарастающимИтогом Тогда
					НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
				Иначе
					// Если не нарастающий итог, тогда этот отчет за IV квартал.
					НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод - 1, 12, 1));
				КонецЕсли;

				НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
				НовСтр.КтоСдаетОтчет = СрокУплатыГодТекст;
				НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

				// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
				НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаГрафикСдачи;

КонецФункции

&НаСервере
Функция ПолучитьСледующуюРабочуюДату(СрокСдачи)
	
	МассивСроков = Новый Массив;
	МассивСроков.Добавить(СрокСдачи);
	
	Запрос = Новый Запрос();
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари";
	Запрос.Текст = ТекстЗапроса;
	График = Запрос.Выполнить().Выгрузить();
	
	Если СрокСдачи = КонецГода(СрокСдачи) Или СрокСдачи = НачалоДня(КонецГода(СрокСдачи)) Тогда
				
		СрокСдачи = НачалоДня(СрокСдачи);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СрокСдачи", СрокСдачи);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня,
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь,
		|	ПроизводственныеКалендари.Ссылка
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = ПроизводственныеКалендари.Ссылка
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &СрокСдачи";
		Запрос.Текст = ТекстЗапроса;
		ДатаКонцаГода = Запрос.Выполнить().Выгрузить();
		
		Если ДатаКонцаГода.Количество() > 0 Тогда
			
			Если ДатаКонцаГода[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
			 ИЛИ ДатаКонцаГода[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				Возврат СрокСдачи;
			Иначе
				ПредыдущаяРабочаяДата = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График[0].Ссылка, МассивСроков, Истина, Ложь);
				Возврат ПредыдущаяРабочаяДата.Получить(СрокСдачи);
			КонецЕсли;
			
		Иначе
						
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							  НСтр("ru = 'Невозможно определить ближайшую рабочую дату для даты %1, возможно, календарь не заполнен.'"), 
						 	  Формат(СрокСдачи, "ДЛФ=D"));
			Сообщение.Сообщить();
			Возврат Неопределено;

		КонецЕсли;
		
	Иначе
		
		СледующаяРабочаяДата = КалендарныеГрафики.ДатыБлижайшихРабочихДней(График[0].Ссылка, МассивСроков, , Ложь);
		Если СледующаяРабочаяДата <> Неопределено Тогда
			
			Возврат СледующаяРабочаяДата.Получить(НачалоДня(СрокСдачи));
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							  НСтр("ru = 'Невозможно определить ближайшую рабочую дату для даты %1, возможно, календарь не заполнен.'"), 
							  Формат(СрокСдачи, "ДЛФ=D"));
			Сообщение.Сообщить();
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПостроитьГрафикУплат(НастройкаУплатПоНалогу, Знач ТребуемыйГод)
	
	Строка1000 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
	Строка100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ТипДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	ТаблицаСроковУплат = Новый ТаблицаЗначений;
	ТаблицаСроковУплат.Колонки.Добавить("НалогПолноеНазв", Строка1000); // Полное название отчета из области Ключ НалогКратко.
	ТаблицаСроковУплат.Колонки.Добавить("СрокУплаты", ТипДата);
	ТаблицаСроковУплат.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	ТаблицаСроковУплат.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
	ТаблицаСроковУплат.Колонки.Добавить("Периодичность", Строка100);
	ТаблицаСроковУплат.Колонки.Добавить("Кто", Строка1000);
	ТаблицаСроковУплат.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);

	ТаблицаСроковУплат.Очистить();

	Для каждого Зап Из НастройкаУплатПоНалогу Цикл
		НазваниеНалога = Зап.НазваниеНалога;
		Годы = Зап.Годы;
		ФормаЗаполняетсяНарастающимИтогом = (Зап.НарастающийИтог = "Истина");

		НДСОтчетПропуск = Ложь;
		Если (НазваниеНалога = "Налог на добавленную стоимость") Или (НазваниеНалога = "НДС по ставке 0%") Тогда
			НДСОтчетПропуск = Истина;
		КонецЕсли;

		Разделитель = СтрНайти(Годы, "-");
		Если Разделитель > 0 Тогда
			// Означает, что для настройка для нескольких лет. Интервал оформляется через -. Например 2005-2006, или 2005-0
			
			ГодНачало = Число(Сред(Годы, 1, Разделитель - 1));
			ГодКонец = Число(Сред(Годы, Разделитель + 1));
		Иначе
			ГодНачало = Число(Годы);
			ГодКонец = ГодНачало;
		КонецЕсли;
		Если ГодКонец = 0 Тогда
			ГодКонец = 2099;
		КонецЕсли;
		// Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст");
		СрокУплатыЕжемесячно = Зап.Ежемесячно;
		СрокУплатыЕжемесячноКто = Зап.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Зап.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Зап.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Зап.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Зап.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Зап.ЗаГодТекст;

		Если (НДСОтчетПропуск) И (ТребуемыйГод >= 2008) Тогда
			СрокУплатыЕжеквартальноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
		КонецЕсли;
		
		// Генерируем сроки уплат по налогу.
		// Для ежемесячного налога.
		Если НЕ ПустаяСтрока(СрокУплатыЕжемесячно) Тогда
			АкцизнаяСхема = Ложь;

			Если (СтрНайти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
			 Или (СтрНайти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
			 Или (СтрНайти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

				МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
				СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, СтрНайти(СрокУплатыЕжемесячно, " ") + 1);
				АкцизнаяСхема = Истина;

			КонецЕсли;

			Для Мес = 1 По 12 Цикл

				Если (НДСОтчетПропуск) И (ТребуемыйГод >= 2008) Тогда
					// Для НДС, только в январе 2008 г., за декабрь 2007 г., далее ежемесячно НДС отменен.
					Если Мес > 1 Тогда
						Продолжить;
					Иначе
						СрокУплатыЕжемесячноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
					КонецЕсли;
				КонецЕсли;

				НовСтр = ТаблицаСроковУплат.Добавить();

				НовСтр.НалогПолноеНазв = НазваниеНалога;

				ДатаУплаты = Дата(ТребуемыйГод, Мес, СрокУплатыЕжемесячно);
				Если АкцизнаяСхема Тогда
					ПериодВозникновенияОбязательств = Год(ДобавитьМесяц(ДатаУплаты, -1 * МесяцПрибавления));
				Иначе
					ПериодВозникновенияОбязательств = Год(ДобавитьМесяц(ДатаУплаты, -1));
				КонецЕсли;
				
				ПопадаетВПериодДействия = ((ПериодВозникновенияОбязательств >= ГодНачало) И (ПериодВозникновенияОбязательств <= ГодКонец));
				Если ПопадаетВПериодДействия Тогда
					НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДату(ДатаУплаты);
				КонецЕсли;
				
				Если АкцизнаяСхема Тогда
					НовСтр.ЗаПериодС = НачалоМесяца((ДобавитьМесяц(ДатаУплаты, -1 * (МесяцПрибавления + 1))));
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				Иначе
					НовСтр.ЗаПериодС = ДобавитьМесяц(Дата(ТребуемыйГод, Мес, 1), -1);
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				КонецЕсли;

				НовСтр.Периодичность = "Месячная";
				НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
				НовСтр.Кто = СрокУплатыЕжемесячноКто;

			КонецЦикла;
		КонецЕсли;

		ОбработатьСтрокуОписания = ((ТребуемыйГод >= ГодНачало) И (ТребуемыйГод <= ГодКонец));
		
		Если ОбработатьСтрокуОписания И НЕ ПустаяСтрока(СрокУплатыЕжеквартально) Тогда
			Для Квартал = 1 По 4 Цикл
				НовСтр = ТаблицаСроковУплат.Добавить();
				НовСтр.НалогПолноеНазв = НазваниеНалога;

				Если Квартал = 4 Тогда
					ТаблицаСроковУплат.Удалить(НовСтр);
					// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
					Продолжить;

				ИначеЕсли Квартал < 4 Тогда

					Если СтрНайти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда

						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДату(СрокСдачи);
						Если СрокСдачи = '0001-01-01' Тогда
							Возврат Неопределено;
						КонецЕсли;
						НовСтр.СрокУплаты = СрокСдачи;
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.Периодичность = "Квартальная";
						НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.Кто = СрокУплатыЕжеквартальноКто;
						Прервать;

					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДату(СрокСдачи);
						Если НовСтр.СрокУплаты = '0001-01-01' Тогда
							Возврат Неопределено;
						КонецЕсли;
					Иначе
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДату(Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально));
						Если НовСтр.СрокУплаты = '0001-01-01' Тогда
							Возврат Неопределено;
						КонецЕсли;

					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.Периодичность = "Квартальная";
					НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
					НовСтр.Кто = СрокУплатыЕжеквартальноКто;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если  ОбработатьСтрокуОписания И НЕ ПустаяСтрока(Зап.ЗаГод) Тогда

			// Срок уплаты текущего года.
			НовСтр = ТаблицаСроковУплат.Добавить();
			НовСтр.НалогПолноеНазв = НазваниеНалога;
			НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДату(Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень));
			Если НовСтр.СрокУплаты = '0001-01-01' Тогда
				Возврат Неопределено;
			КонецЕсли;

			НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
			НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
			НовСтр.Периодичность = "Квартальная"; // формы с нарастающим итогом и только, которые могут сдаваться за год, всегда квартальные.
			НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
			НовСтр.Кто = СрокУплатыГодТекст;

		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаСроковУплат;

КонецФункции

// Функция осуществляет разбор текстовой строки и возвращает номер месяца и число.
//
// Параметры:
//  СведенияИЗНастройкиМакет - строка, из настройки, описывающая число и месяц уплаты или срока сдачи... формат 28.03
//
// Возвращаемое значение:
//  Структура, число - месяц и номер квартала.
//
&НаСервере
Функция ПолучитьНомерМесяцаИЧислоПоФормату(СведенияИзНастройкиМакет)

	Если СтрНайти(СведенияИзНастройкиМакет, ".") > 0 Тогда
		// Указан месяц и число сдачи
		СведенияИзНастройкиЧисло = Число(Сред(СведенияИзНастройкиМакет, 1, СтрНайти(СведенияИзНастройкиМакет, ".") - 1));
		СведенияИзНастройкиМес = Число(Сред(СведенияИзНастройкиМакет, СтрНайти(СведенияИзНастройкиМакет, ".") + 1));
	Иначе
		СведенияИзНастройкиЧисло = СведенияИзНастройкиМакет;
		СведенияИзНастройкиМес = Неопределено;
	КонецЕсли;

	Возврат Новый Структура("ЧислоДень, Месяц", СведенияИзНастройкиЧисло, СведенияИзНастройкиМес);

КонецФункции

// Функция возвращает начальный номер квартала или месяца требуемого года, в котором действует форма (НазваниеФормы)
//
// Параметры:
//  Объект         - строка, название регламентированного отчета.
//  НазваниеФормы  - название формы в объекте рег. отчета.
//  ТребуемыйГод   - год
//  Периодичность  - может принимать значение: Квартал, Месяц.
//  ГодДействияОбход - Ложь по умолчанию, только для годовых деклараций. Если Истина, тогда
//                 год действия декларации и требуемый год при совпадении не возвдаращает Неопределено.
//                 Если Ложь, тогда при равенстве ТребуемогоГода и Года действия отчета возвращается неопределено
//
// Возвращаемое значение:
//  Структура, ключи: Начало, Конец. Квартал или месяц, в зависимости от периодичности.
//  В случае, если форма в указанный год вообще не действует, тогда возвращаем Неопределено.
//  В случае, если Периодичность = "Годовая" и форма в этот год действует, тогда возвращается пустая структура.
//
&НаСервере
Функция ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормы, ТребуемыйГод, Периодичность, ГодДействияОбход = Ложь)
	
	ТаблицаСроковОтчетность = ПолучитьИзВременногоХранилища(АдресТаблицыСроков);

	НайденныеСтроки = ТаблицаСроковОтчетность.НайтиСтроки(Новый Структура("ИсточникОтчета, Форма", Объект, НазваниеФормы));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	НайденнаяСтрока = НайденныеСтроки[0];
	НазваниеОтчетнойФормы = НайденнаяСтрока.НазваниеОтчетнойФормы;

	ДатаНачалоДействия = НайденнаяСтрока.ДатаНачалоДействия;
	ДатаКонецДействия = НайденнаяСтрока.ДатаКонецДействия;

	Если ДатаКонецДействия = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		ДатаКонецДействия = '20990101';
	КонецЕсли;
	ГодДатаНачалоДействия = Год(ДатаНачалоДействия);
	ГодДатаКонецДействия = Год(ДатаКонецДействия);

	// Действует ли этот отчет в требуемый год? Определим условия.
	// Если год даты начала больше требуемого года
	// или если срок окончания действия меньше требуемого года
	Если (ГодДатаНачалоДействия > ТребуемыйГод)
	 Или (ГодДатаКонецДействия < ТребуемыйГод) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Периодичность = "Годовая" Тогда
		// Требуемый год - это год когда должно произойти действие. Если форма только начала действовать с данного года, то годовой отчет
		// под эту форму не подпадает, кроме случаев, когда правая граница укладывается в требуемый год.
		Если ГодДатаНачалоДействия = ТребуемыйГод Тогда
			// 4-ФСС
			Если НЕ ГодДействияОбход Тогда
				// Например. Требуемый год действий - 2006 г. форма годовая по транспорту действует с 01.01.2006, значит в феврале 2006 г. данную
				// форму сдать нельзя, ее можно сдать только в феврале 2007 года.
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;

		// Если функция запускается в спец. режиме для года с уже уменьшенным на 1 годом, тогда анализируем, не закончилась ли в этом году действие формы.
		Если ГодДействияОбход Тогда
			// Определим, что в случае, если форма заканчивает действовать в середине года, например, расчет платы за загр. окр. среды Осн. форма.
			// действует до 30.06.2007, тогда в этом случае, при составлении календаря за 2008 г. за январь месяц, за 2007 г. не должно появляться
			// строки с предложением заполнить годовую декларацию по итогам года.
			Если ГодДатаКонецДействия = ТребуемыйГод Тогда
				// Определим, закончила ли действовать форма в середине года.
				Если Месяц(ДатаКонецДействия) <> 12 Тогда
					// Форма перестала быть актуальной в середине года, поэтому за год, этот отчет формировать не требуется.
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Для декларации с периодичностью Годовая возврати пустую стркуктуру, главное определили, что она подходидит по указанный год.
		Возврат Новый Структура("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);
	КонецЕсли;

	// В случае, если форма начала действовать не в требуемом году, тогда Начало всегда 1 (первый месяц и первый квартал)
	Если ГодДатаНачалоДействия < ТребуемыйГод Тогда
		Начало = 1;
	ИначеЕсли ГодДатаНачалоДействия = ТребуемыйГод Тогда
		//Если форма начала действовать в требуемый год
		Если Периодичность = "Месячная" Тогда
			// Определим номер месяца, с которого действует форма в требуемом году.
			Начало = Месяц(ДатаНачалоДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			// Определим номер квартала, с которого действует форма.
			Начало = ПолучитьКварталРО(ДатаНачалоДействия);
		КонецЕсли;
	КонецЕсли;

	Если ГодДатаКонецДействия > ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = 12;
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = 4;
		КонецЕсли;
	ИначеЕсли ГодДатаКонецДействия = ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = Месяц(ДатаКонецДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = ПолучитьКварталРО(ДатаКонецДействия);
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Начало", Начало);
	Результат.Вставить("Конец", Конец);
	Результат.Вставить("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);

	// Обход для формы НДС, с 2008 г. сдается только по квартально.
	Если (Объект = "РегламентированныйОтчетНДС") И (ТребуемыйГод >= 2008) И (Периодичность = "Месячная") Тогда
		// Можно отчитаться только в январе, за декабрь 2007 г.
		Результат.Вставить("Конец", 1);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получает номер квартала
//
// Параметры:
// ЗаданнаяДата - дата или номер месяца.
//
// Возврат - номер квартала
//
&НаСервере
Функция ПолучитьКварталРО(ЗаданнаяДата) Экспорт
	Если ТипЗнч(ЗаданнаяДата) = Тип("Дата") Тогда
		Возврат Месяц(КонецКвартала(ЗаданнаяДата)) / 3;
	ИначеЕсли ТипЗнч(ЗаданнаяДата) = Тип("Число") Тогда
		Возврат Цел((ЗаданнаяДата - 1) / 3) + 1;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СформироватьТаблицуПраздничныхИВыходныхДней(ТребуемыйГод)

	ТаблицаПраздничныхДней = СформироватьТаблицуПраздниковРеглКалендаря(ТребуемыйГод);
	Если ТаблицаПраздничныхДней.Количество() = 0 Тогда
		ПроизводственныйКалендарьЗаполнен = Ложь;
	Иначе
		ПроизводственныйКалендарьЗаполнен = Истина;
	КонецЕсли;
	АдресТаблицыПраздников = ПоместитьВоВременноеХранилище(ТаблицаПраздничныхДней, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуПраздниковРеглКалендаря(ТребуемыйГод)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Год", ТребуемыйГод);
	Запрос.Текст = 
    "ВЫБРАТЬ
	 |	ДанныеПроизводственногоКалендаря.Дата,
	 |	ДанныеПроизводственногоКалендаря.ВидДня
	 |ИЗ
	 |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	 |ГДЕ
	 |	ДанныеПроизводственногоКалендаря.Год = &Год
	 |	И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	 |	ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	 |	ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье))";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеНаСервере()
	
	Если ОтображаласьИнформацияпоНеделям Тогда
		Для Инд = 1 По 9 Цикл
			Координата = "C" + Инд;
			Ширина = ПолеТабличногоДокументаНеделя.Область(Координата).ШиринаКолонки;
			СоответствиеКолонокНеделя.Вставить("_" + Инд, ?(Инд = 1, 1.13, Ширина));
		КонецЦикла;
	КонецЕсли;
		
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "СоответствиеКолонокНеделя", СоответствиеКолонокНеделя);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ИмяСтраницыКалендаря", Элементы.ПанельФормы.ТекущаяСтраница.Имя);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ВыделенныеДатыВКалендареДень", РеквизитФормыВЗначение("ВыделенныеДатыВКалендареДень", Тип("ТаблицаЗначений")));
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ВыделенныеДатыВКалендареНеделя", РеквизитФормыВЗначение("ВыделенныеДатыВКалендареНеделя", Тип("ТаблицаЗначений")));	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ГодКалендаря", Год);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ПолеВыбораСобытияЗаПериод", ПолеВыбораСобытияЗаПериод);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ДатаОтображенияНач", ДатаНач);										  
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.КалендарьБухгалтера.Форма.ФормаКалендаря", "ДатаОтображенияКон", ДатаКон);										  
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьЗакладку(ТекущаяСтраница.Имя);
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
		
КонецПроцедуры 

&НаКлиенте
Процедура ГодПриИзменении(Элемент)
	
	ПриИзмененииГода();
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГода()
	
	ГодИзменен = Истина;
	
	Если Год(ДатаНач) <> Год(ДатаКон) Тогда
		ДатаНач = Дата(Год - 1, Месяц(ДатаНач), День(ДатаНач));
		ДатаКон = Дата(Год, Месяц(ДатаКон), День(ДатаКон));
	Иначе
		ДатаНач = Дата(Год, Месяц(ДатаНач), День(ДатаНач));
		ДатаКон = Дата(Год, Месяц(ДатаКон), День(ДатаКон));
	КонецЕсли;
	
	МесяцИзСписка = ПолеВыбораСобытияЗаПериод;
	
	Если (МесяцИзСписка = 3) Или (МесяцИзСписка = 6) Или (МесяцИзСписка = 9) Или (МесяцИзСписка = 12) Тогда
		Если Год(ДатаНач) <> Год(ДатаКон) Тогда
			ДатаНач = НачалоКвартала(Дата(Год(ДатаКон), МесяцИзСписка, 1));
		Иначе
			ДатаНач = НачалоКвартала(Дата(Год(ДатаНач), МесяцИзСписка, 1))	
		КонецЕсли;
		ДатаКон = КонецКвартала(ДатаНач);
	Иначе
		Если Год(ДатаНач) <> Год(ДатаКон) Тогда
			ДатаНач = НачалоМесяца(Дата(Год(ДатаКон), МесяцИзСписка, 1));
		Иначе
			ДатаНач = НачалоМесяца(Дата(Год(ДатаНач), МесяцИзСписка, 1));
		КонецЕсли;
		ДатаКон = КонецМесяца(ДатаНач);
	КонецЕсли;

	ЗаполнитьСписокПериодов();
	УстановитьИнтервалКалендаря();
	СформироватьТаблицуКалендара(Год(ДатаНач));
	СформироватьТаблицуПраздничныхИВыходныхДней(Год(ДатаНач));

	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "Неделя" Тогда

		НачДата = ВыделенныеДатыВКалендареНеделя[0].Дата;
		КонДата = ВыделенныеДатыВКалендареНеделя[6].Дата;
		
		Если Год(НачДата) <> Год(КонДата) Тогда
			НачДата = Дата(Год - 1, Месяц(НачДата), День(НачДата));
		Иначе
			НачДата = Дата(Год, Месяц(НачДата), День(НачДата));
		КонецЕсли;
		
		ВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = ВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(НачДата) + 86400 * (Инд - 1);
		КонецЦикла;

		ДатаКалендаряНаФорме = НовСтр.Дата;
		ОтобразитьЗаписиКНедели();

	ИначеЕсли ТекСтраница = "День" Тогда

		ВыделенныеДатыВКалендареДень.Очистить();
		НовЗап = ВыделенныеДатыВКалендареДень.Добавить();
		ДатаКалендаряНаФорме = ДатаНач;
		НовЗап.Дата = ДатаКалендаряНаФорме;
		ОтобразитьЗаписиКДате();

	КонецЕсли;

	СформироватьЗаголовокФормы(ЭтаФорма, ДатаКалендаряНаФорме);
	
	СохранитьДанныеНаСервере();
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПолеВыбораСобытияЗаПериодПриИзменении(Элемент)
	
	ПриИзмененииПериодаВГоду();
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();

КонецПроцедуры

&НаСервере       
Процедура ПриИзмененииПериодаВГоду(АктивнаяДатаКалендаря = Неопределено)
	
	МесяцИзСписка = ПолеВыбораСобытияЗаПериод;
	
	Если (МесяцИзСписка = 3) Или (МесяцИзСписка = 6) Или (МесяцИзСписка = 9) Или (МесяцИзСписка = 12) Тогда
		Если Год(ДатаНач) <> Год И ГодИзменен Тогда
			ДатаНач = НачалоГода(Дата(Год, МесяцИзСписка, 1));
		ИначеЕсли Год(ДатаНач) <> Год Тогда
			ДатаНач = НачалоКвартала(Дата(Год, МесяцИзСписка, 1));
		Иначе
			ДатаНач = НачалоКвартала(Дата(Год(ДатаНач), МесяцИзСписка, 1));
		КонецЕсли;
		ДатаКон = КонецКвартала(ДатаНач);
	Иначе
		Если Год(ДатаНач) <> Год И ГодИзменен Тогда
			ДатаНач = НачалоГода(Дата(Год, МесяцИзСписка, 1));
		ИначеЕсли Год(ДатаНач) <> Год Тогда
			ДатаНач = НачалоМесяца(Дата(Год, МесяцИзСписка, 1));
		Иначе
			ДатаНач = НачалоМесяца(Дата(Год(ДатаНач), МесяцИзСписка, 1));
		КонецЕсли;
		ДатаКон = КонецМесяца(ДатаНач);
	КонецЕсли;

	Если АктивнаяДатаКалендаря = Неопределено Тогда
		ДатаКалендаряНаФорме = ДатаНач;
	Иначе
		ДатаКалендаряНаФорме = АктивнаяДатаКалендаря;
	КонецЕсли;
	
	УстановитьИнтервалКалендаря();

	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;

	Если ТекСтраница = "Неделя" Тогда

		ВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = ВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;

		ДатаКалендаряНаФорме = НовСтр.Дата;
		ОтобразитьЗаписиКНедели();

	ИначеЕсли ТекСтраница = "День" Тогда

		ВыделенныеДатыВКалендареДень.Очистить();
		НовЗап = ВыделенныеДатыВКалендареДень.Добавить();
		НовЗап.Дата = ДатаКалендаряНаФорме;

		ОтобразитьЗаписиКДате();

	КонецЕсли;

	СформироватьЗаголовокФормы(ЭтаФорма, ДатаНач);
	
	СохранитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте   
Процедура КалендарьСобытийПриИзменении(Элемент)
	
	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "Неделя" Тогда

		ВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = ВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;
		ДатаКалендаряНаФорме = НовСтр.Дата;
		ОтобразитьЗаписиКНедели();
	ИначеЕсли ТекСтраница = "День" Тогда

		ВыделенныеДатыВКалендареДень.Очистить();
		Для каждого Дат Из Элемент.ВыделенныеДаты Цикл
			НовЗап = ВыделенныеДатыВКалендареДень.Добавить();
			НовЗап.Дата = Дат;
		КонецЦикла;

		ОтобразитьЗаписиКДате();
	КонецЕсли;
	
	СформироватьЗаголовокФормы(ЭтаФорма, ДатаКалендаряНаФорме);
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
	
КонецПроцедуры        

&НаКлиенте
Процедура КалендарьСобытийПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
	Для Каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
		ТекДата = "Д" + Формат(Строка_ОформленияДаты.Дата, "ДФ = ддММгггг");
		Если СтруктураОформленияКалендаря.Свойство(ТекДата) Тогда 
			ОформлениеДаты = СтруктураОформленияКалендаря[ТекДата]; 
			Строка_ОформленияДаты.ЦветТекста  = ОформлениеДаты.ЦветТекста;
			Строка_ОформленияДаты.ЦветФона    = ОформлениеДаты.ЦветФона;
			Строка_ОформленияДаты.Шрифт       = ОформлениеДаты.Шрифт;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформлениеКалендаря(ТекСтраница)
	
	НакопительнаяТаблицаПредставленияОтчетов = ПолучитьИзВременногоХранилища(АдресТаблицыОтчетов);
	НакопительнаяТаблицаСроковУплат = ПолучитьИзВременногоХранилища(АдресТаблицыУплат);
	ТаблицаПраздничныхДней = ПолучитьИзВременногоХранилища(АдресТаблицыПраздников);
	
	МесяцИзСписка = ПолеВыбораСобытияЗаПериод;	
	Если (МесяцИзСписка = 3) Или (МесяцИзСписка = 6) Или (МесяцИзСписка = 9) Или (МесяцИзСписка = 12) Тогда
		Если Год(ДатаНач) <> Год И ГодИзменен Тогда
			НачалоПериода = НачалоГода(Дата(Год, МесяцИзСписка, 1));
			ГодИзменен = Ложь;
		ИначеЕсли Год(ДатаНач) <> Год Тогда
			НачалоПериода = НачалоКвартала(Дата(Год, МесяцИзСписка, 1));
		Иначе
			НачалоПериода = НачалоКвартала(Дата(Год(ДатаНач), МесяцИзСписка, 1));
		КонецЕсли;
		КонецПериода = КонецКвартала(НачалоПериода);
	Иначе
		Если Год(ДатаНач) <> Год И ГодИзменен Тогда
			НачалоПериода = НачалоГода(Дата(Год, МесяцИзСписка, 1));
			ГодИзменен = Ложь;
		ИначеЕсли Год(ДатаНач) <> Год Тогда
			НачалоПериода = НачалоМесяца(Дата(Год, МесяцИзСписка, 1));
		Иначе
			НачалоПериода = НачалоМесяца(Дата(Год(ДатаНач), МесяцИзСписка, 1));
		КонецЕсли;
		КонецПериода = КонецМесяца(НачалоПериода);
	КонецЕсли;
	
	СтруктураОформленияКалендаря.Очистить();
	
	ТекДата = НачалоПериода;
	Пока ТекДата <= КонецПериода Цикл

		ДеньНеделиДата = ДеньНедели(ТекДата);
		СтруктураПоискаСдачаОтчетов = Новый Структура;
		СтруктураПоискаСдачаОтчетов.Вставить("ПоследняяДатаПредставленияОтчета", ТекДата);
		СтруктураПоискаСдачаОтчетов.Вставить("Статус", Ложь);
		СтрокаТаблицыРегистра = НакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(СтруктураПоискаСдачаОтчетов);
		СтрокаТаблицыСрокУпл = НакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", ТекДата));
		Если ПроизводственныйКалендарьЗаполнен Тогда
			СтрокаТаблицыПраздников = ТаблицаПраздничныхДней.НайтиСтроки(Новый Структура("Дата", ТекДата));
		КонецЕсли;

		ЦветФона = Новый Цвет(255, 255, 255);
		ЦветТекста = Новый Цвет(0, 0, 0);
		Шрифт = Новый Шрифт(,,Ложь);
		
		Если (СтрокаТаблицыРегистра.Количество() <> 0) Или (СтрокаТаблицыСрокУпл.Количество() <> 0) Тогда
			Шрифт = Новый Шрифт(,,Истина);
		КонецЕсли;

		Если НЕ ПроизводственныйКалендарьЗаполнен Тогда
			// Если календарь не заполнен, то смотрим на дни недели, если 6 и 7, то признаем день выходным.
			Если ДеньНеделиДата = 6 Тогда
				ЦветТекста = ЦветСубботы;
			ИначеЕсли ДеньНеделиДата = 7 Тогда
				ЦветТекста = ЦветВоскресенья;
			КонецЕсли;
		КонецЕсли;

		Если ПроизводственныйКалендарьЗаполнен Тогда
			Если СтрокаТаблицыПраздников.Количество() <> 0 Тогда
				Если СтрокаТаблицыПраздников[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					ЦветТекста = ЦветСубботы;
				ИначеЕсли СтрокаТаблицыПраздников[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					ЦветТекста = ЦветВоскресенья;
				ИначеЕсли СтрокаТаблицыПраздников[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					ЦветТекста = ЦветПраздничногоДня;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;

		Если ТекСтраница = "День" Тогда
			Если ВыделенныеДатыВКалендареДень.НайтиСтроки(Новый Структура("Дата", ТекДата)).Количество() <> 0 Тогда
				ЦветФона = Новый Цвет(83, 106, 194);
				ЦветТекста = Новый Цвет(255, 255, 255);
			КонецЕсли;
		ИначеЕсли ТекСтраница = "Неделя" Тогда
			Если ВыделенныеДатыВКалендареНеделя.НайтиСтроки(Новый Структура("Дата", ТекДата)).Количество() <> 0 Тогда
				ЦветФона = Новый Цвет(0, 0, 128);
				ЦветТекста = Новый Цвет(255, 255, 255);
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеДаты = Новый Структура();
		ОформлениеДаты.Вставить("ЦветТекста", ЦветТекста);
		ОформлениеДаты.Вставить("ЦветФона", ЦветФона);
		ОформлениеДаты.Вставить("Шрифт", Шрифт);
		СтрокаДата = "Д" + Формат(ТекДата, "ДФ = ддММгггг");
		СтруктураОформленияКалендаря.Вставить(СтрокаДата, ОформлениеДаты);

		ТекДата = ТекДата + 86400;

	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСобытийКалендаряВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НазваниеКолонки = Поле.Имя;
	
	ТекущиеДанные = Новый Структура;
	ТекущиеДанные.Вставить("ЗаПериодС", Элемент.ТекущиеДанные.ЗаПериодС);
	ТекущиеДанные.Вставить("ЗаПериодПо", Элемент.ТекущиеДанные.ЗаПериодПо);
	ТекущиеДанные.Вставить("НазваниеОтчетаИлиНалога", Элемент.ТекущиеДанные.НазваниеОтчетаИлиНалога);
	ТекущиеДанные.Вставить("Периодичность", Элемент.ТекущиеДанные.Периодичность);
	ТекущиеДанные.Вставить("Срок", Элемент.ТекущиеДанные.Срок);
	ТекущиеДанные.Вставить("ИсточникОтчета", Элемент.ТекущиеДанные.ИсточникОтчета);
	ТекущиеДанные.Вставить("Кто", Элемент.ТекущиеДанные.Кто);
	ТекущиеДанные.Вставить("НарастающийИтог", Элемент.ТекущиеДанные.НарастающийИтог);
	ТекущиеДанные.Вставить("ФормаОтчета", Элемент.ТекущиеДанные.ФормаОтчета);
		
	Если НазваниеКолонки = "КартинкаОповещение" Тогда
		РежимПлатежа = Элемент.ТекущиеДанные.Статус = "2";
		
		ОповещенияПоДанномуСобытиюЕсть = ОповещенияПоДанномуСобытияЕсть(ТекущиеДанные, РежимПлатежа);
		Если ОповещенияПоДанномуСобытиюЕсть Тогда
			УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Ложь, РежимПлатежа, Неопределено);
		Иначе
			УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Истина, РежимПлатежа, Неопределено);
		КонецЕсли;
	ИначеЕсли (НазваниеКолонки = "Срок") И (Элемент.ТекущиеДанные.Срок <> ДатаКалендаряНаФорме) Тогда
		ПерейтиКДатеКалендаря(Элемент.ТекущиеДанные);
	Иначе
		СписокДействий = Новый СписокЗначений;
		Статус = Элемент.ТекущиеДанные.Статус;
		РежимПлатежа = Статус = "2";
		Если Статус = "2" Тогда
			СписокДействий.Добавить(1, "Открыть платежное поручение",, КартинкаПлатеж);
		ИначеЕсли (Статус = "1") Или (Статус = "3") Тогда
			СписокДействий.Добавить(1, "Открыть отчет",, КартинкаСдачаОтчета);
		КонецЕсли;

		Если НЕ ОповещенияПоДанномуСобытияЕсть(ТекущиеДанные, РежимПлатежа) Тогда
			СписокДействий.Добавить(2, "Напомнить о событии",,КартинкаОповестить);
		Иначе
			СписокДействий.Добавить(3, "Отменить напоминание",, КартинкаСнятьОповещение);
		КонецЕсли;

		// Если дата текущая, то пункт меню "Перейти к дате" не формируем.
		Если Элемент.ТекущиеДанные.Срок <> ДатаКалендаряНаФорме Тогда
			СписокДействий.Добавить(4, "Перейти к дате " + Формат(Элемент.ТекущиеДанные.Срок, "ДФ=дд.ММ.гггг"),, КартинкаПерейтиКДате); // Перейти к дате календаря
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("РежимПлатежа", РежимПлатежа);
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);

		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаСобытияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДействий);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаСобытияЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Если СписокЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	РежимПлатежа = ДополнительныеПараметры.РежимПлатежа;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент.Значение = 2 Тогда
		УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Истина, РежимПлатежа, Неопределено);
	ИначеЕсли СписокЭлемент.Значение = 3 Тогда
		УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Ложь, РежимПлатежа, Неопределено);
	ИначеЕсли СписокЭлемент.Значение = 1 Тогда
		ОткрытьПлатПоручениеИлиОтчет(Элемент.ТекущиеДанные, Элемент.ТекущиеДанные.Статус);
	ИначеЕсли СписокЭлемент.Значение = 4 Тогда
		ПерейтиКДатеКалендаря(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУдалитьДействиеВТаблДок(Расшифровка, Установить, РежимПлатежа, НомерСтрокиВТабличномПоле, ЭтоВызовИзРежимаНедели = Ложь)
	
	ДобавитьУдалитьЗаписьВРегистрОповещения(Расшифровка, Установить, РежимПлатежа);
	Если ЭтоВызовИзРежимаНедели Тогда
		
		ОтобразитьЗаписиКНедели();
		Если Установить Тогда
			Элементы.НапомнитьОСобытииНеделя.Доступность = Ложь;
			Элементы.ОтменитьНапоминаниеНеделя.Доступность = Истина;
		Иначе
			Элементы.НапомнитьОСобытииНеделя.Доступность = Истина;
			Элементы.ОтменитьНапоминаниеНеделя.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Для Каждого СобытиеКалендаря Из ТаблицаСобытийКалендаря Цикл
			Если ОповещенияПоДанномуСобытияЕсть(СобытиеКалендаря, СобытиеКалендаря.Статус = "2") Тогда
				СобытиеКалендаря.КартинкаОповещение = КартинкаОповестить;
			Иначе
				СобытиеКалендаря.КартинкаОповещение = КартинкаПустая;
			КонецЕсли;
		КонецЦикла;
		
		Если Установить Тогда
			Элементы.НапомнитьОСобытииДень.Доступность = Ложь;
			Элементы.ОтменитьНапоминаниеДень.Доступность = Истина;
		Иначе
			Элементы.НапомнитьОСобытииДень.Доступность = Истина;
			Элементы.ОтменитьНапоминаниеДень.Доступность = Ложь;
		КонецЕсли;

	КонецЕсли;
	
	СохранитьДанныеНаСервере();
			
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьЗаписьВРегистрОповещения(ДанныеСтроки, ДобавитьСобытие, РежимУплаты = Ложь)

	НовЗап = РегистрыСведений.СобытияКалендаряБухгалтера.СоздатьМенеджерЗаписи();

	НовЗап.Пользователь = Пользователи.ТекущийПользователь();
	НовЗап.Периодичность = ДанныеСтроки.Периодичность;
	НовЗап.ЗаПериодС = ДанныеСтроки.ЗаПериодС;
	НовЗап.ЗаПериодПо = ДанныеСтроки.ЗаПериодПо;
	НовЗап.Организация = ДляОрганизации;
	НовЗап.Налогоплательщик = ДанныеСтроки.Кто;
	НовЗап.НарастающийИтог = ДанныеСтроки.НарастающийИтог;
	НовЗап.ПоследняяДатаДействия = ДанныеСтроки.Срок;
	
	Если РежимУплаты Тогда
		НовЗап.ИсточникОтчета = ДанныеСтроки.НазваниеОтчетаИлиНалога; // Полное название налога
		НовЗап.ТипСообщения = Перечисления.СообщенияДляРегОтчетов.УплатаНалога;
		НовЗап.ФормаОтчета = "";
		НовЗап.Название = "";
	Иначе
		НовЗап.ИсточникОтчета = ДанныеСтроки.ИсточникОтчета;
		НовЗап.ТипСообщения = Перечисления.СообщенияДляРегОтчетов.СдачаОтчета;
		НовЗап.ФормаОтчета = ДанныеСтроки.ФормаОтчета;
		НовЗап.Название = ДанныеСтроки.НазваниеОтчетаИлиНалога; // Название отчета
	КонецЕсли;

	Если ДобавитьСобытие Тогда
		НовЗап.Записать();
	Иначе
		// В случае, если запись уже была ранее показана пользователю, тогда
		// измерение ДатаПоказа будет заполнено и удаление не происходит, поэтому
		// получим ДатаПоказа.
		Табл = ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, РежимУплаты, Истина);
		Если Табл.Количество() > 0 Тогда
			НовЗап.ДатаПоказа = Табл[0].ДатаПоказа;
			НовЗап.Удалить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура открывает платежное поручение или отчет
//
// Параметры:
//  Расшифровка   - структура строки данных.
//  Статус        - 2 - открыть платежное поручение; 1 или 3 - отчеты
//
&НаКлиенте
Процедура ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус)
	
	Если Статус = "2" Тогда
						
		ОткрытьФорму(РегламентированнаяОтчетностьКлиентПереопределяемый.ИмяФормыДляУплатыНалога());
				
		Возврат;
		
	КонецЕсли;

	Если (Статус = "1") Или (Статус = "3") Тогда

		Если СтрНайти(Расшифровка.Периодичность, "Месячная") Тогда
			Периодичность = ПеречислениеПериодичностьМесяц;
			мПериодичностьКалендарь = "Месячная";
		ИначеЕсли СтрНайти(Расшифровка.Периодичность, "Квартальная") Тогда
			Периодичность = ПеречислениеПериодичностьКвартал;
			мПериодичностьКалендарь = "Квартальная";
		Иначе
			Периодичность = Неопределено;
		КонецЕсли; 

		ДатаНачалаДня    = НачалоДня(Расшифровка.ЗаПериодС);
		ДатаОкончанияДня = КонецДня(Расшифровка.ЗаПериодПо);

		ИсточникОтчета = Расшифровка.ИсточникОтчета;
		ДокументыОтчета = РегламентированнаяОтчетностьВызовСервера.ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНачалаДня, ДатаОкончанияДня, ДляОрганизации, "", Расшифровка.Периодичность);

		Если ДокументыОтчета <> 0 Тогда
			мВыбраннаяФормаКалендаря = ИсточникОтчета;
			мДатаКонцаПериодаОтчетаКалендарь = ДатаОкончанияДня;
			Организация = Новый СписокЗначений;
			Организация.Добавить(ДляОрганизации);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИсточникОтчета", мВыбраннаяФормаКалендаря);
			ПараметрыФормы.Вставить("Периодичность", Периодичность);
			ПараметрыФормы.Вставить("ДатаКонцаПериодаОтчета", ДатаОкончанияДня);
			ПараметрыФормы.Вставить("Организация", Организация);
			ПараметрыФормы.Вставить("КодИФНС", КодИФНС);
			ПараметрыФормы.Вставить("ДатаНачалаПериодаОтчета", ДатаНачалаДня);
			ПараметрыФормы.Вставить("ОтборКодИФНС", Ложь);
			ПараметрыФормы.Вставить("ОтборПериод", Истина);
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчетаКалендарь", мДатаКонцаПериодаОтчетаКалендарь);
			ПараметрыФормы.Вставить("мПериодичностьКалендарь", мПериодичностьКалендарь);
			
			ФормаВыбораОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОтчета", ПараметрыФормы, ЭтаФорма);
			РезультатВыбора = Неопределено;
			ДополнительныеПараметры = Новый Структура("ДатаНачалаДня, ДатаОкончанияДня, ИсточникОтчета", ДатаНачалаДня, ДатаОкончанияДня, ИсточникОтчета);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПлатПоручениеИлиОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВыбораОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбораОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбораОтчета.Открыть();
		Иначе
			РегламентированнаяОтчетностьКлиент.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНачалаДня, ДатаОкончанияДня, Периодичность, ДляОрганизации);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатПоручениеИлиОтчетЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ДатаНачалаДня = ДополнительныеПараметры.ДатаНачалаДня;
	ДатаОкончанияДня = ДополнительныеПараметры.ДатаОкончанияДня;
	ИсточникОтчета = ДополнительныеПараметры.ИсточникОтчета;
	
	мВыбраннаяФормаКалендаря = Неопределено;
	мПериодичностьКалендарь = Неопределено;
	мДатаКонцаПериодаОтчетаКалендарь = Неопределено;
	
	Если РезультатВыбора = Истина Тогда // Создаем новый отчет
		РегламентированнаяОтчетностьКлиент.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНачалаДня, ДатаОкончанияДня, Периодичность, ДляОрганизации);
	ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
		ПоказатьЗначение(,РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Процедура осуществляет переход к дате календаря. Переход возможен из контекстного меню или из табличного поля, при двойном щелчке мышкой
// по дате.
//
// Параметров нет.
//
&НаКлиенте
Процедура ПерейтиКДатеКалендаря(ВыбраннаяСтрока)
	ДатаОбласть = ВыбраннаяСтрока.Срок;
	// Если дата строки не равна дате календаря, то перейдем на указанную дату.
	Если ДатаОбласть <> ДатаКалендаряНаФорме Тогда
		
		// Проверим на период, который установлен на календаре, в случае, если выбранная новая дата относится к не показываемому периоду.

		ВыделенныеДатыВКалендареДень.Очистить();
		НовСтр = ВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;

		НачалоПериодаОтображения = Элементы.КалендарьСобытий.НачалоПериодаОтображения;
		КонецПериодаОтображения = Элементы.КалендарьСобытий.КонецПериодаОтображения;
		// Выбранная дата не лежит в диапозоне календаря.
		Если НЕ ((ДатаОбласть >= НачалоПериодаОтображения) И (ДатаОбласть <= КонецПериодаОтображения)) Тогда
			// Определим, что выбрано сейчас, КВАРТАЛ или Месяц.
			ВыбранКвартал = Истина;
			МесяцПерехода = Месяц(ДатаОбласть);
			Если (Месяц(КонецПериодаОтображения) = Месяц(НачалоПериодаОтображения))
			 И (МесяцПерехода <> 3 И МесяцПерехода <> 6 И МесяцПерехода <> 9 И МесяцПерехода <> 12) Тогда
				ВыбранКвартал = Ложь;
			КонецЕсли;
			// Установим новый интервал календаря.
			НовыйИнтервалКалендаряС = ?(ВыбранКвартал, НачалоКвартала(ДатаОбласть), НачалоМесяца(ДатаОбласть));
			НовыйИнтервалКалендаряПо = ?(ВыбранКвартал, КонецКвартала(ДатаОбласть), КонецМесяца(ДатаОбласть));

			ПолеВыбораСобытияЗаПериод = Месяц(НовыйИнтервалКалендаряПо);
			ПриИзмененииПериодаВГоду(ДатаОбласть);
		КонецЕсли;

		УстановитьЗакладку("День");
		Элементы.КалендарьСобытий.Обновить();
		Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПолеТабличногоДокументаНеделяОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Статус = Расшифровка.Статус;

	РежимПлатежа = Статус = "2";

	// Если выбраны конкретные ячейки строки.
	ТекОбласть = Элемент.ТекущаяОбласть;
	ИмяТекОбласти = Элемент.ТекущаяОбласть.Имя;
	Если Сред(ИмяТекОбласти, 6, 1) = "1" Тогда
		// Первая картинка по счету с лев.
		ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус);
		ПолеТабличногоДокументаНеделя.ТекущаяОбласть = ТекОбласть;
		Возврат;
	ИначеЕсли Сред(ИмяТекОбласти, 6, 1) = "2" Тогда
		УбратьСобытие = Ложь;
		// Втарая картинка по счету с лев.
		Если ОповещенияПоДанномуСобытияЕсть(Расшифровка, РежимПлатежа) Тогда
			УбратьСобытие = Истина;
		КонецЕсли;
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, НЕ УбратьСобытие, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
		ПолеТабличногоДокументаНеделя.ТекущаяОбласть = ТекОбласть;
		Возврат;
	КонецЕсли;

	Если Статус = "РазмерЗаголовка" Тогда

		// По данному статусу вызывается форма ввода заголов.
		Если Элемент.ТекущаяОбласть.Имя = "ОбластьЗаголовокНеделя2" Тогда
			ТекКолонка = ПолеТабличногоДокументаНеделя.Область("C2");
		Иначе
			НомерКолонки = Сред(Элемент.ТекущаяОбласть.Имя, 4, 1);
			ТекКолонка = ПолеТабличногоДокументаНеделя.Область("C" + НомерКолонки);
		КонецЕсли;
		ШиринаКолонки = ТекКолонка.ШиринаКолонки;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НомерКолонки", НомерКолонки);
		ДополнительныеПараметры.Вставить("ТекКолонка", ТекКолонка);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("ШиринаКолонки", ШиринаКолонки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиЧислоРазмерЗаголовкаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводЧисла(ОписаниеОповещения, ШиринаКолонки, "Введите ширину колонки", 5, 2);
		Возврат;

	ИначеЕсли Статус = "ПерейтиНаДень" Тогда
		ВыделенныеДатыВКалендареДень.Очистить();
		ДатаОбл = Элемент.ТекущаяОбласть.Текст;
		ДатаОбласть = Дата(Сред(ДатаОбл, 7, 4) + Сред(ДатаОбл, 4, 2) + Сред(ДатаОбл, 1, 2));
		НовСтр = ВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;
		
		Если Год = Год(ДатаОбласть) Тогда
			НачалоПериодаОтображения = Элементы.КалендарьСобытий.НачалоПериодаОтображения;
			КонецПериодаОтображения = Элементы.КалендарьСобытий.КонецПериодаОтображения;
			// Выбранная дата не лежит в диапозоне календаря.
			Если НЕ ((ДатаОбласть >= НачалоПериодаОтображения) И (ДатаОбласть <= КонецПериодаОтображения)) Тогда
				// Определим, что выбрано сейчас, КВАРТАЛ или Месяц.
				ВыбранКвартал = Истина;
				МесяцПерехода = Месяц(ДатаОбласть);
				Если (Месяц(КонецПериодаОтображения) = Месяц(НачалоПериодаОтображения))
					И (МесяцПерехода <> 3 И МесяцПерехода <> 6 И МесяцПерехода <> 9 И МесяцПерехода <> 12) Тогда
					ВыбранКвартал = Ложь;
				КонецЕсли;
				// Установим новый интервал календаря.
				НовыйИнтервалКалендаряС = ?(ВыбранКвартал, НачалоКвартала(ДатаОбласть), НачалоМесяца(ДатаОбласть));
				НовыйИнтервалКалендаряПо = ?(ВыбранКвартал, КонецКвартала(ДатаОбласть), КонецМесяца(ДатаОбласть));
				
				ПолеВыбораСобытияЗаПериод = Месяц(НовыйИнтервалКалендаряПо);
				ПриИзмененииПериодаВГоду(ДатаОбласть);
			КонецЕсли;
		КонецЕсли;

		УстановитьЗакладку("День");
		Элементы.КалендарьСобытий.Обновить();
		Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
		Возврат;
	КонецЕсли;

	СписокДействий = Новый СписокЗначений;
	Если Статус = "2" Тогда
		СписокДействий.Добавить(1, "Открыть платежное поручение",, КартинкаПлатеж);
	ИначеЕсли Статус = "1" Тогда
		СписокДействий.Добавить(1, "Открыть отчет",, КартинкаСдачаОтчета);
	КонецЕсли;

	// Получим номе строки в табличном поле, для снятия или установки принака события.
	НомерСтрокиВТабличномПоле = Расшифровка.НомерСтрокиВТабличномПоле;

	Если НЕ ОповещенияПоДанномуСобытияЕсть(Расшифровка, РежимПлатежа) Тогда
		СписокДействий.Добавить(2, "Напомнить о событии",,КартинкаОповестить);
	Иначе
		СписокДействий.Добавить(3, "Отменить напоминание",, КартинкаСнятьОповещение);
	КонецЕсли;

	НомДень = Расшифровка.НомерДня;
	СписокДействий.Добавить(4, "Перейти к дате " + Формат(ВыделенныеДатыВКалендареНеделя[НомДень - 1].Дата, "ДФ=дд.ММ.гггг"),, КартинкаПерейтиКДате); // Перейти к дате календаря

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомДень", НомДень);
	ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
	ДополнительныеПараметры.Вставить("РежимПлатежа", РежимПлатежа);
	ДополнительныеПараметры.Вставить("Статус", Статус);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаНеделяОбработкаРасшифровкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаНеделяОбработкаРасшифровкиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Если СписокЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомДень = ДополнительныеПараметры.НомДень;
	Расшифровка = ДополнительныеПараметры.Расшифровка;
	РежимПлатежа = ДополнительныеПараметры.РежимПлатежа;
	Статус = ДополнительныеПараметры.Статус;
	
	Если СписокЭлемент.Значение = 2 Тогда
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Истина, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
	ИначеЕсли СписокЭлемент.Значение = 3 Тогда
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Ложь, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
	ИначеЕсли СписокЭлемент.Значение = 1 Тогда
		ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус);
	ИначеЕсли СписокЭлемент.Значение = 4 Тогда
		
		ВыделенныеДатыВКалендареДень.Очистить();
		ДатаОбласть = ВыделенныеДатыВКалендареНеделя[НомДень - 1].Дата;
		
		НовСтр = ВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;
		
		Если Год = Год(ДатаОбласть) Тогда
			НачалоПериодаОтображения = Элементы.КалендарьСобытий.НачалоПериодаОтображения;
			КонецПериодаОтображения = Элементы.КалендарьСобытий.КонецПериодаОтображения;
			// Выбранная дата не лежит в диапозоне календаря.
			Если НЕ ((ДатаОбласть >= НачалоПериодаОтображения) И (ДатаОбласть <= КонецПериодаОтображения)) Тогда
				// Определим, что выбрано сейчас, КВАРТАЛ или Месяц.
				ВыбранКвартал = Истина;
				МесяцПерехода = Месяц(ДатаОбласть);
				Если (Месяц(КонецПериодаОтображения) = Месяц(НачалоПериодаОтображения))
					И (МесяцПерехода <> 3 И МесяцПерехода <> 6 И МесяцПерехода <> 9 И МесяцПерехода <> 12) Тогда
					ВыбранКвартал = Ложь;
				КонецЕсли;
				// Установим новый интервал календаря.
				НовыйИнтервалКалендаряС = ?(ВыбранКвартал, НачалоКвартала(ДатаОбласть), НачалоМесяца(ДатаОбласть));
				НовыйИнтервалКалендаряПо = ?(ВыбранКвартал, КонецКвартала(ДатаОбласть), КонецМесяца(ДатаОбласть));
				
				ПолеВыбораСобытияЗаПериод = Месяц(НовыйИнтервалКалендаряПо);
				ПриИзмененииПериодаВГоду(ДатаОбласть);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьЗакладку("День");
		Элементы.КалендарьСобытий.Обновить();
		Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЧислоРазмерЗаголовкаЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	НомерКолонки = ДополнительныеПараметры.НомерКолонки;
	ТекКолонка = ДополнительныеПараметры.ТекКолонка;
	Элемент = ДополнительныеПараметры.Элемент;
	ШиринаКолонки = ?(Число = Неопределено, ДополнительныеПараметры.ШиринаКолонки, Число);
	
	Если (Число <> Неопределено) Тогда
		ТекКолонка.ШиринаКолонки = ШиринаКолонки;
		Элемент.ТекущаяОбласть.ШиринаКолонки = ШиринаКолонки;
		Если Элемент.ТекущаяОбласть.Имя = "ОбластьЗаголовокНеделя2" Тогда
			СоответствиеКолонокНеделя["_2"] = ШиринаКолонки;
		Иначе
			СоответствиеКолонокНеделя["_" + НомерКолонки] = ШиринаКолонки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляОрганизацииПриИзменении(Элемент)
	
	ОтобразитьЗаписиКДате();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	Элементы.КалендарьСобытий.Обновить();
	Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;
	// Инициализируем данные регламентированного календаря.
	СформироватьТаблицуКалендара(Год(ДатаНач));
	// Обновим данные из регламентированного производственного календаря.
	СформироватьТаблицуПраздничныхИВыходныхДней(Год(ДатаНач));
	Если ТекСтраница = "День" Тогда
		ОтобразитьЗаписиКДате();
	ИначеЕсли ТекСтраница = "Неделя" Тогда
		ОтобразитьЗаписиКНедели();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "День" Тогда
		ТаблДок = ПодготовитьДанныеДляПросмотраИлиПечати();
	ИначеЕсли ТекСтраница = "Неделя" Тогда
		ТаблДок = ПолеТабличногоДокументаНеделя;
		ТаблДок.ОтображатьЗаголовки = Ложь;
		ТаблДок.ОтображатьСетку     = Ложь;
		ТаблДок.ЧерноБелыйПросмотр  = Ложь;
		ТаблДок.ЧерноБелаяПечать    = Ложь;
		ТаблДок.Автомасштаб         = Истина;
		ТаблДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;

	ТаблДок.Напечатать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	ТекСтраница = Элементы.ПанельФормы.ТекущаяСтраница.Имя;
	
	Если ТекСтраница = "День" Тогда
		
		ТаблДок = ПодготовитьДанныеДляПросмотраИлиПечати();
		
	ИначеЕсли ТекСтраница = "Неделя" Тогда
		
		ТаблДок = ВывестиБланкНедели(ПолеТабличногоДокументаНеделя);
		
	КонецЕсли;

	ТаблДок.Показать(Заголовок);

КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляПросмотраИлиПечати()
	ТаблДанных = Новый ТабличныйДокумент;
	ТаблДанных.АвтоМасштаб = Истина;
	ТаблДанных.ОтображатьЗаголовки = Ложь;
	ТаблДанных.ОтображатьСетку = Ложь;
	ТаблДанных.ЧерноБелыйПросмотр  = Ложь;
	ТаблДанных.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы|ЗаголовокДанных");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы|ЗаголовокДанных");

	ТаблДанных.Вывести(ОбластьЗаголовокТаблицы);
	Для каждого ДанныеСтроки Из ТаблицаСобытийКалендаря Цикл
		Если ДанныеСтроки.Статус = "3" Тогда
			Статус = "Напоминание о сдаче отчета";
		ИначеЕсли ДанныеСтроки.Статус = "2" Тогда
			Статус = "Уплата налога";
		ИначеЕсли ДанныеСтроки.Статус = "1" Тогда
			Статус = "Сдача отчета";
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.Статус = Статус;
		ОбластьСтрокаТаблицы.Параметры.Срок = ДанныеСтроки.Срок;
		ОбластьСтрокаТаблицы.Параметры.ПериодичностьЗаПериод = ДанныеСтроки.Периодичность;
		ОбластьСтрокаТаблицы.Параметры.НазваниеОтчетаИлиНалога = ДанныеСтроки.НазваниеОтчетаИлиНалога;
		ОбластьСтрокаТаблицы.Параметры.Кто = ДанныеСтроки.Кто;

		ТаблДанных.Вывести(ОбластьСтрокаТаблицы);

	КонецЦикла;
	Возврат ТаблДанных;

КонецФункции

&НаСервере
Функция ВывестиБланкНедели(ТаблДок)
	
    БланкНедели = Новый ТабличныйДокумент;
	БланкНедели.Вывести(ТаблДок.ПолучитьОбласть(1, , ТаблДок.ВысотаТаблицы, ));
		
	БланкНедели.ОтображатьЗаголовки = Ложь;
	БланкНедели.ОтображатьСетку     = Ложь;
	БланкНедели.ЧерноБелыйПросмотр  = Ложь;
	БланкНедели.ЧерноБелаяПечать    = Ложь;
	БланкНедели.Автомасштаб         = Истина;
	БланкНедели.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
	Возврат БланкНедели;
	
КонецФункции

&НаКлиенте
Процедура НапомнитьОСобытии(Команда)
	
	Если Элементы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда

		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ЗаПериодС", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодС);
		ТекущиеДанные.Вставить("ЗаПериодПо", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодПо);
		ТекущиеДанные.Вставить("НазваниеОтчетаИлиНалога", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НазваниеОтчетаИлиНалога);
		ТекущиеДанные.Вставить("Периодичность", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Периодичность);
		ТекущиеДанные.Вставить("Срок", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Срок);
		ТекущиеДанные.Вставить("ИсточникОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ИсточникОтчета);
		ТекущиеДанные.Вставить("Кто", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Кто);
		ТекущиеДанные.Вставить("НарастающийИтог", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НарастающийИтог);
		ТекущиеДанные.Вставить("ФормаОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ФормаОтчета);
		
		РежимПлатежа = Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Статус = "2";
		
		УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Истина, РежимПлатежа, Неопределено);
		
	ИначеЕсли Элементы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		
		ТекОбласть = ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
		Расшифровка = ПолеТабличногоДокументаНеделя.ТекущаяОбласть.Расшифровка;
		РежимПлатежа = Расшифровка.Статус = "2";
			
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Истина, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
			
		ПолеТабличногоДокументаНеделя.ТекущаяОбласть = ТекОбласть;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНапоминание(Команда)
	
	Если Элементы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда

		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ЗаПериодС", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодС);
		ТекущиеДанные.Вставить("ЗаПериодПо", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодПо);
		ТекущиеДанные.Вставить("НазваниеОтчетаИлиНалога", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НазваниеОтчетаИлиНалога);
		ТекущиеДанные.Вставить("Периодичность", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Периодичность);
		ТекущиеДанные.Вставить("Срок", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Срок);
		ТекущиеДанные.Вставить("ИсточникОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ИсточникОтчета);
		ТекущиеДанные.Вставить("Кто", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Кто);
		ТекущиеДанные.Вставить("НарастающийИтог", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НарастающийИтог);
		ТекущиеДанные.Вставить("ФормаОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ФормаОтчета);
		
		РежимПлатежа = Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Статус = "2";
		
		УстановитьУдалитьДействиеВТаблДок(ТекущиеДанные, Ложь, РежимПлатежа, Неопределено);
		
	ИначеЕсли Элементы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		
		ТекОбласть = ПолеТабличногоДокументаНеделя.ТекущаяОбласть;
		Расшифровка = ПолеТабличногоДокументаНеделя.ТекущаяОбласть.Расшифровка;
		РежимПлатежа = Расшифровка.Статус = "2";
			
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Ложь, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
			
		ПолеТабличногоДокументаНеделя.ТекущаяОбласть = ТекОбласть;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДате(Команда)
	
	Если Элементы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда
	
		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ЗаПериодС", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодС);
		ТекущиеДанные.Вставить("ЗаПериодПо", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодПо);
		ТекущиеДанные.Вставить("НазваниеОтчетаИлиНалога", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НазваниеОтчетаИлиНалога);
		ТекущиеДанные.Вставить("Периодичность", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Периодичность);
		ТекущиеДанные.Вставить("Срок", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Срок);
		ТекущиеДанные.Вставить("ИсточникОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ИсточникОтчета);
		ТекущиеДанные.Вставить("Кто", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Кто);
		ТекущиеДанные.Вставить("НарастающийИтог", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НарастающийИтог);
		ТекущиеДанные.Вставить("ФормаОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ФормаОтчета);

		ПерейтиКДатеКалендаря(ТекущиеДанные);
		
	ИначеЕсли Элементы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		
		Расшифровка = ПолеТабличногоДокументаНеделя.ТекущаяОбласть.Расшифровка;
		
		НомДень = Расшифровка.НомерДня;
		
		ВыделенныеДатыВКалендареДень.Очистить();
		ДатаОбласть = ВыделенныеДатыВКалендареНеделя[НомДень - 1].Дата;
		
		НовСтр = ВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;
		
		Если Год = Год(ДатаОбласть) Тогда
			НачалоПериодаОтображения = Элементы.КалендарьСобытий.НачалоПериодаОтображения;
			КонецПериодаОтображения = Элементы.КалендарьСобытий.КонецПериодаОтображения;
			// Выбранная дата не лежит в диапозоне календаря.
			Если НЕ ((ДатаОбласть >= НачалоПериодаОтображения) И (ДатаОбласть <= КонецПериодаОтображения)) Тогда
				// Определим, что выбрано сейчас, КВАРТАЛ или Месяц.
				ВыбранКвартал = Истина;
				МесяцПерехода = Месяц(ДатаОбласть);
				Если (Месяц(КонецПериодаОтображения) = Месяц(НачалоПериодаОтображения))
					И (МесяцПерехода <> 3 И МесяцПерехода <> 6 И МесяцПерехода <> 9 И МесяцПерехода <> 12) Тогда
					ВыбранКвартал = Ложь;
				КонецЕсли;
				// Установим новый интервал календаря.
				НовыйИнтервалКалендаряС = ?(ВыбранКвартал, НачалоКвартала(ДатаОбласть), НачалоМесяца(ДатаОбласть));
				НовыйИнтервалКалендаряПо = ?(ВыбранКвартал, КонецКвартала(ДатаОбласть), КонецМесяца(ДатаОбласть));
				
				ПолеВыбораСобытияЗаПериод = Месяц(НовыйИнтервалКалендаряПо);
				ПриИзмененииПериодаВГоду(ДатаОбласть);
			КонецЕсли;
		КонецЕсли;
		
		УстановитьЗакладку("День");
		Элементы.КалендарьСобытий.Обновить();
		Элементы.КалендарьСобытий.ВыделенныеДаты.Очистить();
		Возврат;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.ПанельФормы.ТекущаяСтраница.Имя = "День" Тогда
	
		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ЗаПериодС", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодС);
		ТекущиеДанные.Вставить("ЗаПериодПо", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ЗаПериодПо);
		ТекущиеДанные.Вставить("НазваниеОтчетаИлиНалога", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НазваниеОтчетаИлиНалога);
		ТекущиеДанные.Вставить("Периодичность", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Периодичность);
		ТекущиеДанные.Вставить("Срок", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Срок);
		ТекущиеДанные.Вставить("ИсточникОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ИсточникОтчета);
		ТекущиеДанные.Вставить("Кто", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Кто);
		ТекущиеДанные.Вставить("НарастающийИтог", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.НарастающийИтог);
		ТекущиеДанные.Вставить("ФормаОтчета", Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.ФормаОтчета);

		ОткрытьПлатПоручениеИлиОтчет(ТекущиеДанные, Элементы.ТаблицаСобытийКалендаря.ТекущиеДанные.Статус);
		
	ИначеЕсли Элементы.ПанельФормы.ТекущаяСтраница.Имя = "Неделя" Тогда
		
		Расшифровка = ПолеТабличногоДокументаНеделя.ТекущаяОбласть.Расшифровка;
		Статус = Расшифровка.Статус;

		ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСобытийКалендаряПриАктивизацииСтроки(Элемент)
	
	Если ТаблицаСобытийКалендаря.Количество() > 0
	   И НЕ Элемент.ТекущиеДанные = Неопределено Тогда		
		Если Элемент.ТекущиеДанные.КартинкаОповещение = КартинкаПустая Тогда
			Элементы.НапомнитьОСобытииДень.Доступность = Истина;
			Элементы.ОтменитьНапоминаниеДень.Доступность = Ложь;
		ИначеЕсли Элемент.ТекущиеДанные.КартинкаОповещение = КартинкаОповестить Тогда
			Элементы.НапомнитьОСобытииДень.Доступность = Ложь;
			Элементы.ОтменитьНапоминаниеДень.Доступность = Истина;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.Срок <> ДатаКалендаряНаФорме Тогда
			Элементы.ПерейтиКДатеДень.Доступность = Истина;
		Иначе
			Элементы.ПерейтиКДатеДень.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.НапомнитьОСобытииДень.Доступность = Ложь;
		Элементы.ОтменитьНапоминаниеДень.Доступность = Ложь;
		Элементы.ПерейтиКДатеДень.Доступность = Ложь;
		Элементы.ОткрытьДень.Доступность = Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаНеделяПриАктивизацииОбласти(Элемент)
	
	Расшифровка = ПолеТабличногоДокументаНеделя.ТекущаяОбласть.Расшифровка;
	
	Если Расшифровка <> Неопределено Тогда
		
		Статус = Расшифровка.Статус;
		Если Статус <> "РазмерЗаголовка" И Статус <> "ПерейтиНаДень" Тогда
			Если Расшифровка.Оповестить Тогда
				Элементы.НапомнитьОСобытииНеделя.Доступность = Ложь;
				Элементы.ОтменитьНапоминаниеНеделя.Доступность = Истина;
			Иначе
				Элементы.НапомнитьОСобытииНеделя.Доступность = Истина;
				Элементы.ОтменитьНапоминаниеНеделя.Доступность = Ложь;
			КонецЕсли;
			Элементы.ПерейтиКДатеНеделя.Доступность = Истина;
			Элементы.ОткрытьНеделя.Доступность = Истина;
		Иначе
			Элементы.НапомнитьОСобытииНеделя.Доступность = Ложь;
			Элементы.ОтменитьНапоминаниеНеделя.Доступность = Ложь;
			Элементы.ПерейтиКДатеНеделя.Доступность = Ложь;
			Элементы.ОткрытьНеделя.Доступность = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.НапомнитьОСобытииНеделя.Доступность = Ложь;
		Элементы.ОтменитьНапоминаниеНеделя.Доступность = Ложь;
		Элементы.ПерейтиКДатеНеделя.Доступность = Ложь;
		Элементы.ОткрытьНеделя.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СохранитьДанныеНаСервере();
	
КонецПроцедуры

#КонецОбласти