
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьБюджетирование = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование");
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ВнеоборотныеАктивы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Дебиторы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ДенежныеСредства") 
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Запасы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПроцентыПоКредитам")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеВнеоборотныеАктивы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.СебестоимостьПродаж") Тогда
			Объект.Вид = ВидСчета.Активный;
		КонецЕсли;
		
		Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.АмортизацияВнеоборотныхАктивов")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ДолгосрочныеОбязательства")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Доходы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Капитал") 
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Кредиторы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КредитыИЗаймы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.РезервныйИДобавочныйКапитал")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ТорговаяНаценка") Тогда
			Объект.Вид = ВидСчета.Пассивный;
		КонецЕсли;
		
		Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НалогНаПрибыль")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НераспределеннаяПрибыль")
		 ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрибылиУбытки") Тогда
			Объект.Вид = ВидСчета.АктивноПассивный;
		КонецЕсли;
		
	КонецЕсли;
	
	// Прочие расчеты.
	Для каждого Тип Из Метаданные.ПланыВидовХарактеристик.АналитикаДоходовИРасходов.Тип.Типы() Цикл
		
		Ссылка = Новый(Тип);
		ИмяТипа = Ссылка.Метаданные().ПолноеИмя();
		ИмяТипа = СтрЗаменить(ИмяТипа, "Справочник", "СправочникСсылка");
		ИмяТипа = СтрЗаменить(ИмяТипа, "Документ", "ДокументСсылка");
		Представление = Ссылка.Метаданные().Представление();
		
		СписокВыбораАналитикиДоходовИРасходов.Добавить(ИмяТипа, Представление);
		
	КонецЦикла;
	
	СписокВыбораАналитикиДоходовИРасходов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	Если ЗначениеЗаполнено(Объект.АналитикаДоходовИРасходов) Тогда
		ЗначениеСпискаВыбора = СписокВыбораАналитикиДоходовИРасходов.НайтиПоЗначению(Объект.АналитикаДоходовИРасходов);
		Если ЗначениеСпискаВыбора <> Неопределено Тогда
			ТипАналитики = ЗначениеСпискаВыбора.Представление;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не найден тип аналитики учета доходов и расходов!";
			Сообщение.Поле = "АналитикаДоходовИРасходов";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказИзменитьАналитикуПрочихДоходовИРасходов(Объект.Ссылка) Тогда
		Элементы.ГруппаАналитикаУчетаПрочихДоходовИРасходов.Подсказка = НСтр("ru = 'В базе есть движения по этому счету! Изменение аналитики не рекомендуется!'");
	КонецЕсли;
	// Конец Прочие расчеты.
	
	ТипСчета = Объект.ТипСчета;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПланСчетовУправленческий", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события ПриИзменении поля ввода СпособРаспределения.
//
&НаКлиенте
Процедура СпособРаспределенияПриИзменении(Элемент)
	
	Если Объект.СпособРаспределения <> ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ПрямыеЗатраты") Тогда
		Объект.СчетаУчета.Очистить();
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры // СпособРаспределенияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода ТипСчета.
//
&НаКлиенте
Процедура ТипСчетаПриИзменении(Элемент)
	
	Если ТипСчета = Объект.ТипСчета Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СчетаУчета.Очистить();
	
	УправлениеФормой();
	
	Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство") Тогда
		Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.НеРаспределять");
	ИначеЕсли Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КосвенныеЗатраты") Тогда
		Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ОбъемВыпуска");
	ИначеЕсли Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы")
		  ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Доходы")
		  ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		  ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы") Тогда
		Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ОбъемПродаж");
	Иначе
		Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.НеРаспределять");
	КонецЕсли;
	
	ТипСчета = Объект.ТипСчета;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды Фильтр.
//
&НаКлиенте
Процедура Фильтр(Команда)
	
	АдресСчетаУчетаВХранилище = ПоместитьСчетаУчетаВХранилище();
	
	ПараметрыФормы = Новый Структура(
		"АдресСчетаУчетаВХранилище",
		АдресСчетаУчетаВХранилище
	);
	
	Оповещение = Новый ОписаниеОповещения("ФильтрЗавершение",ЭтаФорма,АдресСчетаУчетаВХранилище);
	ОткрытьФорму("ПланСчетов.Управленческий.Форма.ФормаФильтра", ПараметрыФормы,,,,,Оповещение);
	
КонецПроцедуры // Фильтр()

&НаКлиенте
Процедура ФильтрЗавершение(Результат,АдресСчетаУчетаВХранилище) Экспорт
	
	Если Результат = КодВозвратаДиалога.OK Тогда
		ПолучитьСчетаУчетаИзХранилища(АдресСчетаУчетаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция помещает табличную часть СчетаУчета во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьСчетаУчетаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.СчетаУчета.Выгрузить(,
			"СчетУчета"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

// Функция получает табличную часть СчетаУчета из временного хранилища.
//
&НаСервере
Процедура ПолучитьСчетаУчетаИзХранилища(АдресСчетаУчетаВХранилище)
	
	ТаблицаСчетаУчета = ПолучитьИзВременногоХранилища(АдресСчетаУчетаВХранилище);
	Объект.СчетаУчета.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаСчетаУчета Цикл
		Строка = Объект.СчетаУчета.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

&НаКлиенте
Процедура УправлениеФормой()
	
	// Прочие расчеты
	Элементы.АналитикаДоходовИРасходов.Видимость = Ложь;
	// Конец Прочие расчеты
	
	Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КосвенныеЗатраты") Тогда
		Элементы.СчетЗакрытия.Видимость = Истина;
		Элементы.СпособРаспределения.Видимость = Истина;
		Элементы.СпособРаспределения.СписокВыбора.Очистить();
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ОбъемВыпуска"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ПрямыеЗатраты"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.НеРаспределять"));
		Элементы.СчетЗакрытия.Подсказка = ?(
			ИспользоватьБюджетирование,
			НСтр("ru='Счет автоматического закрытия при закрытии месяца и бюджетировании'"),
			НСтр("ru='Счет автоматического закрытия при закрытии месяца'")
		);
		Элементы.СпособРаспределения.Подсказка = НСтр(
			"ru='Способ автоматического распределения на себестоимость выпущенной продукции при закрытии месяца'"
		);
	ИначеЕсли Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство") Тогда
		Элементы.СчетЗакрытия.Видимость = Истина;
		Элементы.СпособРаспределения.Видимость = Истина;
		Элементы.СпособРаспределения.СписокВыбора.Очистить();
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ОбъемВыпуска"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ПрямыеЗатраты"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.НеРаспределять"));
		Элементы.СчетЗакрытия.Подсказка = ?(
			ИспользоватьБюджетирование,
			НСтр("ru='Счет автоматического закрытия при закрытии месяца и бюджетировании'"),
			НСтр("ru='Счет автоматического закрытия при закрытии месяца'")
		);
		Элементы.СпособРаспределения.Подсказка = НСтр(
			"ru='Способ автоматического распределения на себестоимость выпущенной продукции при закрытии месяца для нематериальных затрат'"
		);
	ИначеЕсли (ТипСчета <>  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		   ИЛИ ТипСчета <>  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы")
		   ИЛИ ТипСчета <>  ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы")
		   ИЛИ ТипСчета <>  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПроцентыПоКредитам")
		   ИЛИ ТипСчета <>  ПредопределенноеЗначение("Перечисление.ТипыСчетов.Доходы"))
			И (Объект.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
		   ИЛИ Объект.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы")
		   ИЛИ Объект.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы")
		   ИЛИ Объект.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПроцентыПоКредитам")
		   ИЛИ Объект.ТипСчета =  ПредопределенноеЗначение("Перечисление.ТипыСчетов.Доходы")) Тогда
		Элементы.СчетЗакрытия.Видимость = Ложь;
		Элементы.СпособРаспределения.Видимость = Истина;
		Элементы.СпособРаспределения.СписокВыбора.Очистить();
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ОбъемПродаж"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ВыручкаОтПродаж"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.СебестоимостьПродаж"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ВаловаяПрибыль"));
		Элементы.СпособРаспределения.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.НеРаспределять"), "Прямое распределение");
		Элементы.СпособРаспределения.Подсказка = ?(
			ИспользоватьБюджетирование,
			НСтр("ru='Способ автоматического распределения на финансовый результат при закрытии месяца и бюджетировании'"),
			НСтр("ru='Способ автоматического распределения на финансовый результат при закрытии месяца'")
		);
		
		// Прочие расчеты
		Если Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеДоходы")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеРасходы")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.КосвенныеЗатраты")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НезавершенноеПроизводство")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.Расходы")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПроцентыПоКредитам")
			ИЛИ Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.НераспределеннаяПрибыль") Тогда
			Элементы.АналитикаДоходовИРасходов.Видимость = Истина;
		Иначе
			Элементы.АналитикаДоходовИРасходов.Видимость = Ложь;
		КонецЕсли;
		// Конец Прочие расчеты
		
	// Прочие расчеты
	ИначеЕсли Объект.ТипСчета = ПредопределенноеЗначение("Перечисление.ТипыСчетов.ПрочиеОборотныеАктивы") Тогда
		
		Элементы.АналитикаДоходовИРасходов.Видимость = Истина;
		Элементы.СпособРаспределения.Видимость = Ложь;
		Элементы.СчетЗакрытия.Видимость = Ложь;
		
	// Конец Прочие расчеты
	Иначе
		Элементы.СпособРаспределения.Видимость = Ложь;
		Элементы.СчетЗакрытия.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Фильтр.Видимость = Объект.СпособРаспределения = ПредопределенноеЗначение("Перечисление.БазыРаспределенияРасходов.ПрямыеЗатраты");
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

#Область ПрочиеРасчеты

// Функция проверяет возможность изменения счета.
//
&НаСервере
Функция ОтказИзменитьАналитикуПрочихДоходовИРасходов(Ссылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыИРасходы.Период,
	|	ДоходыИРасходы.Регистратор,
	|	ДоходыИРасходы.НомерСтроки,
	|	ДоходыИРасходы.Активность,
	|	ДоходыИРасходы.Организация,
	|	ДоходыИРасходы.СтруктурнаяЕдиница,
	|	ДоходыИРасходы.НаправлениеДеятельности,
	|	ДоходыИРасходы.ЗаказПокупателя,
	|	ДоходыИРасходы.СчетУчета,
	|	ДоходыИРасходы.Аналитика,
	|	ДоходыИРасходы.СуммаДоходов,
	|	ДоходыИРасходы.СуммаРасходов,
	|	ДоходыИРасходы.СодержаниеПроводки
	|ИЗ
	|	РегистрНакопления.ДоходыИРасходы КАК ДоходыИРасходы
	|ГДЕ
	|	ДоходыИРасходы.СчетУчета = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ОтказИзменитьСчетУчетаРасчетовСПоставщиком()

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода АналитикаДоходовИРасходов.
//
&НаКлиенте
Процедура АналитикаДоходовИРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияВыбораТипАналитики = Новый ОписаниеОповещения("АналитикаДоходовИРасходовНачалоВыбораИзСпискаЗавершение", ЭтотОбъект);
	СписокВыбораАналитикиДоходовИРасходов.ПоказатьВыборЭлемента(ОписаниеОповещенияВыбораТипАналитики, "Выберите тип аналитики");
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода АналитикаДоходовИРасходов. 
// Завершающая часть после выбора типа в форме выбора элемента списка.
//
&НаКлиенте
Процедура АналитикаДоходовИРасходовНачалоВыбораИзСпискаЗавершение(ЗначениеВыбора, ПараметрыВыбора) Экспорт
	
	Если ЗначениеВыбора <> Неопределено Тогда
		ТипАналитики = ЗначениеВыбора.Представление;
		Объект.АналитикаДоходовИРасходов = ЗначениеВыбора.Значение;
	КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события Очистка поля ввода АналитикаДоходовИРасходов.
//
&НаКлиенте
Процедура АналитикаДоходовИРасходовОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.АналитикаДоходовИРасходов = Неопределено;
	
КонецПроцедуры

#КонецОбласти
