#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
  ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
  ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;

	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Установка исключительной блокировки текущего набора записей регистратора.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ВнеоборотныеАктивы.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Отбор.Регистратор.Значение);
	Блокировка.Заблокировать();
	
	Если НЕ СтруктураВременныеТаблицы.Свойство("ДвиженияВнеоборотныеАктивыИзменение") ИЛИ
		СтруктураВременныеТаблицы.Свойство("ДвиженияВнеоборотныеАктивыИзменение") И НЕ СтруктураВременныеТаблицы.ДвиженияВнеоборотныеАктивыИзменение Тогда
		
		// Если временная таблица "ДвиженияВнеоборотныеАктивыИзменение" не существует или не содержит записей
		// об изменении набора, значит набор записывается первый раз или для набора был выполнен контроль остатков.
		// Текущее состояние набора помещается во временную таблицу "ДвиженияВнеоборотныеАктивыПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно текущего.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнеоборотныеАктивы.НомерСтроки КАК НомерСтроки,
		|	ВнеоборотныеАктивы.Организация КАК Организация,
		|	ВнеоборотныеАктивы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
		|	ВЫБОР
		|		КОГДА ВнеоборотныеАктивы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВнеоборотныеАктивы.Стоимость
		|		ИНАЧЕ -ВнеоборотныеАктивы.Стоимость
		|	КОНЕЦ КАК СтоимостьПередЗаписью,
		|	ВЫБОР
		|		КОГДА ВнеоборотныеАктивы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВнеоборотныеАктивы.Амортизация
		|		ИНАЧЕ -ВнеоборотныеАктивы.Амортизация
		|	КОНЕЦ КАК АмортизацияПередЗаписью
		|ПОМЕСТИТЬ ДвиженияВнеоборотныеАктивыПередЗаписью
		|ИЗ
		|	РегистрНакопления.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы
		|ГДЕ
		|	ВнеоборотныеАктивы.Регистратор = &Регистратор
		|	И &Замещение");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		// Если временная таблица "ДвиженияВнеоборотныеАктивыИзменение" существует и содержит записи
		// об изменении набора, значит набор записывается не первый раз и для набора не был выполнен контроль остатков.
		// Текущее состояние набора и текущее состояние изменений помещаются во временную таблцу "ДвиженияВнеоборотныеАктивыПередЗаписью",
		// чтобы при записи получить изменение нового набора относительно первоначального.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияВнеоборотныеАктивыИзменение.НомерСтроки КАК НомерСтроки,
		|	ДвиженияВнеоборотныеАктивыИзменение.Организация КАК Организация,
		|	ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
		|	ДвиженияВнеоборотныеАктивыИзменение.СтоимостьПередЗаписью КАК СтоимостьПередЗаписью,
		|	ДвиженияВнеоборотныеАктивыИзменение.АмортизацияПередЗаписью КАК АмортизацияПередЗаписью
		|ПОМЕСТИТЬ ДвиженияВнеоборотныеАктивыПередЗаписью
		|ИЗ
		|	ДвиженияВнеоборотныеАктивыИзменение КАК ДвиженияВнеоборотныеАктивыИзменение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнеоборотныеАктивы.НомерСтроки,
		|	ВнеоборотныеАктивы.Организация,
		|	ВнеоборотныеАктивы.ВнеоборотныйАктив,
		|	ВЫБОР
		|		КОГДА ВнеоборотныеАктивы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВнеоборотныеАктивы.Стоимость
		|		ИНАЧЕ -ВнеоборотныеАктивы.Стоимость
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВнеоборотныеАктивы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА ВнеоборотныеАктивы.Амортизация
		|		ИНАЧЕ -ВнеоборотныеАктивы.Амортизация
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.ВнеоборотныеАктивы КАК ВнеоборотныеАктивы
		|ГДЕ
		|	ВнеоборотныеАктивы.Регистратор = &Регистратор
		|	И &Замещение");
		
		Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
		Запрос.УстановитьПараметр("Замещение", Замещение);
				
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Временная таблица "ДвиженияВнеоборотныеАктивыИзменение" уничтожается
	// Удаляется информация о ее существовании.
	Если СтруктураВременныеТаблицы.Свойство("ДвиженияВнеоборотныеАктивыИзменение") Тогда
		
		Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияВнеоборотныеАктивыИзменение");
		Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		СтруктураВременныеТаблицы.Удалить("ДвиженияВнеоборотныеАктивыИзменение");
	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
  ИЛИ НЕ ДополнительныеСвойства.Свойство("ДляПроведения")
  ИЛИ НЕ ДополнительныеСвойства.ДляПроведения.Свойство("СтруктураВременныеТаблицы") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу "ДвиженияВнеоборотныеАктивыИзменение".
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(ДвиженияВнеоборотныеАктивыИзменение.НомерСтроки) КАК НомерСтроки,
	|	ДвиженияВнеоборотныеАктивыИзменение.Организация КАК Организация,
	|	ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.СтоимостьПередЗаписью) КАК СтоимостьПередЗаписью,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.СтоимостьИзменение) КАК СтоимостьИзменение,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.СтоимостьПриЗаписи) КАК СтоимостьПриЗаписи,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.АмортизацияПередЗаписью) КАК АмортизацияПередЗаписью,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.АмортизацияИзменение) КАК АмортизацияИзменение,
	|	СУММА(ДвиженияВнеоборотныеАктивыИзменение.АмортизацияПриЗаписи) КАК АмортизацияПриЗаписи
	|ПОМЕСТИТЬ ДвиженияВнеоборотныеАктивыИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.НомерСтроки КАК НомерСтроки,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.Организация КАК Организация,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.СтоимостьПередЗаписью КАК СтоимостьПередЗаписью,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.СтоимостьПередЗаписью КАК СтоимостьИзменение,
	|		0 КАК СтоимостьПриЗаписи,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.АмортизацияПередЗаписью КАК АмортизацияПередЗаписью,
	|		ДвиженияВнеоборотныеАктивыПередЗаписью.АмортизацияПередЗаписью КАК АмортизацияИзменение,
	|		0 КАК АмортизацияПриЗаписи
	|	ИЗ
	|		ДвиженияВнеоборотныеАктивыПередЗаписью КАК ДвиженияВнеоборотныеАктивыПередЗаписью
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.НомерСтроки,
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.Организация,
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.ВнеоборотныйАктив,
	|		0,
	|		ВЫБОР
	|			КОГДА ДвиженияВнеоборотныеАктивыПриЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДвиженияВнеоборотныеАктивыПриЗаписи.Стоимость
	|			ИНАЧЕ ДвиженияВнеоборотныеАктивыПриЗаписи.Стоимость
	|		КОНЕЦ,
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.Стоимость,
	|		0,
	|		ВЫБОР
	|			КОГДА ДвиженияВнеоборотныеАктивыПриЗаписи.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДвиженияВнеоборотныеАктивыПриЗаписи.Амортизация
	|			ИНАЧЕ ДвиженияВнеоборотныеАктивыПриЗаписи.Амортизация
	|		КОНЕЦ,
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.Амортизация
	|	ИЗ
	|		РегистрНакопления.ВнеоборотныеАктивы КАК ДвиженияВнеоборотныеАктивыПриЗаписи
	|	ГДЕ
	|		ДвиженияВнеоборотныеАктивыПриЗаписи.Регистратор = &Регистратор) КАК ДвиженияВнеоборотныеАктивыИзменение
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияВнеоборотныеАктивыИзменение.Организация,
	|	ДвиженияВнеоборотныеАктивыИзменение.ВнеоборотныйАктив
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДвиженияВнеоборотныеАктивыИзменение.СтоимостьИзменение) <> 0
	|		ИЛИ СУММА(ДвиженияВнеоборотныеАктивыИзменение.АмортизацияИзменение) <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВнеоборотныйАктив");
	
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаИзРезультатаЗапроса.Следующий();
	
	// Новые изменения были помещены во временную таблицу "ДвиженияВнеоборотныеАктивыИзменение".
	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	СтруктураВременныеТаблицы.Вставить("ДвиженияВнеоборотныеАктивыИзменение", ВыборкаИзРезультатаЗапроса.Количество > 0);
	
	// Временная таблица "ДвиженияВнеоборотныеАктивыПередЗаписью" уничтожается
	Запрос = Новый Запрос("УНИЧТОЖИТЬ ДвиженияВнеоборотныеАктивыПередЗаписью");
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#КонецЕсли