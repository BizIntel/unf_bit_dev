#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает и записывает график оплаты заказа.
// Дата опалты указывается в "Периоде". При фактической оплате
// по заказу происходит закрытие графика по ФИФО.
//
Процедура РассчитатьГрафикОплатыЗаказов(ТаблицаСчетов)
	
	НаборЗаписей = РегистрыСведений.ГрафикОплатыЗаказов.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовНаОплату", ТаблицаСчетов.ВыгрузитьКолонку("СчетНаОплату"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйКалендарьОбороты.СчетНаОплату КАК СчетНаОплату,
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарьОбороты.СуммаОборот < 0
	|			ТОГДА -1 * ПлатежныйКалендарьОбороты.СуммаОборот
	|		ИНАЧЕ ПлатежныйКалендарьОбороты.СуммаОборот
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ПлатежныйКалендарьОбороты.СуммаОплатыОборот < 0
	|			ТОГДА -1 * ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|		ИНАЧЕ ПлатежныйКалендарьОбороты.СуммаОплатыОборот
	|	КОНЕЦ КАК СуммаОплатыОборот
	|ПОМЕСТИТЬ ВТ_Обороты
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(, , , СчетНаОплату В (&МассивСчетовНаОплату)) КАК ПлатежныйКалендарьОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ) КАК Период,
	|	Таблица.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ВЫБОР
	|			КОГДА Таблица.Сумма < 0
	|				ТОГДА -1 * Таблица.Сумма
	|			ИНАЧЕ Таблица.Сумма
	|		КОНЕЦ) КАК СуммаПлан
	|ПОМЕСТИТЬ ВТ_ПланДвижения
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату В(&МассивСчетовНаОплату)
	|	И Таблица.Сумма <> 0
	|	И Таблица.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
	|	Таблица.СчетНаОплату
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Таблица.Период КАК Период,
	|	ВТ_Таблица.СчетНаОплату КАК СчетНаОплату,
	|	ВТ_Таблица.СуммаПлан КАК СуммаПлан,
	|	ЕСТЬNULL(ВТ_Обороты.СуммаОплатыОборот, 0) КАК СуммаОплаты
	|ИЗ
	|	ВТ_ПланДвижения КАК ВТ_Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Обороты КАК ВТ_Обороты
	|		ПО ВТ_Таблица.СчетНаОплату = ВТ_Обороты.СчетНаОплату
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНаОплату,
	|	Период УБЫВ";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	Пока ЕстьЗаписиВВыборке Цикл
		
		ТекСчетНаОплату = Выборка.СчетНаОплату;
		
		НаборЗаписей.Отбор.СчетНаОплату.Установить(ТекСчетНаОплату);
		
		// Из таблицы удаляем отработанный счет на оплату.
		ТаблицаСчетов.Удалить(ТаблицаСчетов.Найти(ТекСчетНаОплату, "СчетНаОплату"));
		
		ВсегоСуммаОстаток = 0;
		Если Выборка.СуммаОплаты > 0 Тогда
			ВсегоСуммаОстаток = Выборка.СуммаОплаты;
		КонецЕсли;
		
		// Цикл по счету на оплату.
		СтруктураНаборЗаписей = Новый Структура;
		Пока ЕстьЗаписиВВыборке И Выборка.СчетНаОплату = ТекСчетНаОплату Цикл
			
			ТекСумма = Мин(Выборка.СуммаПлан, ВсегоСуммаОстаток);
			Если ТекСумма > 0 Тогда
				
				СтруктураНаборЗаписей.Вставить("Период", Выборка.Период);
				СтруктураНаборЗаписей.Вставить("СчетНаОплату", Выборка.СчетНаОплату);
				СтруктураНаборЗаписей.Вставить("Сумма", ТекСумма);
				
			КонецЕсли;
			
			ВсегоСуммаОстаток = ВсегоСуммаОстаток - ТекСумма;
			
			// Переход к следующей записи в выборке.
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
		КонецЦикла;
		
		// Запись и очистка набора.
		Если СтруктураНаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Период = СтруктураНаборЗаписей.Период;
			Запись.СчетНаОплату = СтруктураНаборЗаписей.СчетНаОплату;
			Запись.Сумма = СтруктураНаборЗаписей.Сумма;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьГрафикОплатыЗаказов()

// Процедура рассчитывает и записывает график оплаты заказа.
// Дата опалты указывается в "Периоде". При фактической оплате
// по заказу происходит закрытие графика по ФИФО.
//
Процедура РассчитатьПланируемыеПлатежи(ТаблицаСчетов)
	
	НаборЗаписей = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовНаОплату", ТаблицаСчетов.ВыгрузитьКолонку("СчетНаОплату"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныйКалендарь.Период КАК ПериодДень,
	|	ПлатежныйКалендарь.Валюта КАК Валюта,
	|	ПлатежныйКалендарь.СчетНаОплату.Контрагент КАК Контрагент,
	|	ПлатежныйКалендарь.Статья КАК Статья,
	|	ПлатежныйКалендарь.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ПлатежныйКалендарь.СчетНаОплату.СуммаДокумента КАК СуммаДокумента,
	|	ПлатежныйКалендарь.СуммаОборот КАК СуммаОборот,
	|	ПлатежныйКалендарь.СуммаОплатыОборот КАК СуммаОплатыОборот,
	|	ПлатежныйКалендарь.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ПлатежныйКалендарь.СчетНаОплату.Организация КАК Организация,
	|	ПлатежныйКалендарь.СчетНаОплату КАК СчетНаОплату,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПлатежныйКалендарь.СчетНаОплату) = ТИП(Документ.СчетНаОплату)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПлатежныйКалендарь.СчетНаОплату) = ТИП(Документ.ЗаказПокупателя)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПлатежныйКалендарь.СчетНаОплату) = ТИП(Документ.ПоступлениеДСПлан)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ПлатежныйКалендарь.СчетНаОплату) = ТИП(Документ.ПеремещениеДСПлан)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПоступление
	|ПОМЕСТИТЬ ПлатежныйКалендарьПоДокументуПоДням
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(, , День, СчетНаОплату В (&МассивСчетовНаОплату)) КАК ПлатежныйКалендарь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодДень,
	|	Организация,
	|	Валюта,
	|	СчетНаОплату,
	|	БанковскийСчетКасса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныйКалендарьПоДокументуПоДням.СчетНаОплату КАК СчетНаОплату,
	|	СУММА(ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ПлатежныйКалендарьПоДокументуПоДням.СуммаОплатыОборот) КАК СуммаОплатыОборот
	|ПОМЕСТИТЬ ПлатежныйКалендарьВсегоПоДокументу
	|ИЗ
	|	ПлатежныйКалендарьПоДокументуПоДням КАК ПлатежныйКалендарьПоДокументуПоДням
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныйКалендарьПоДокументуПоДням.СчетНаОплату
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНаОплату
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныйКалендарьПоДокументуПоДням.ПериодДень КАК Дата,
	|	ПлатежныйКалендарьПоДокументуПоДням.Валюта КАК Валюта,
	|	ПлатежныйКалендарьПоДокументуПоДням.Контрагент КАК Контрагент,
	|	ПлатежныйКалендарьПоДокументуПоДням.Статья КАК Статья,
	|	ПлатежныйКалендарьПоДокументуПоДням.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйКалендарьПоДокументуПоДням.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ВЫРАЗИТЬ(ПлатежныйКалендарьПоДокументуПоДням.СуммаДокумента КАК ЧИСЛО(15, 2)) КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление
	|				ТОГДА ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот
	|			ИНАЧЕ -ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаЗапланированоПоДокументуНаДату,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление
	|					ТОГДА ПлатежныйКалендарьПоДокументуПоДням.СуммаОплатыОборот
	|				ИНАЧЕ -ПлатежныйКалендарьПоДокументуПоДням.СуммаОплатыОборот
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаОплаченоПоДокументуНаДату,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление
	|					ТОГДА ЕСТЬNULL(ПлатежныйКалендарьВсегоПоДокументу.СуммаОплатыОборот, 0)
	|				ИНАЧЕ -ЕСТЬNULL(ПлатежныйКалендарьВсегоПоДокументу.СуммаОплатыОборот, 0)
	|			КОНЕЦ КАК ЧИСЛО(15, 2))) КАК СуммаОплаченоВсегоПоДокументу,
	|	ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление КАК ЭтоПоступление,
	|	ПлатежныйКалендарьПоДокументуПоДням.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ПлатежныйКалендарьПоДокументуПоДням.Организация КАК Организация
	|ИЗ
	|	ПлатежныйКалендарьПоДокументуПоДням КАК ПлатежныйКалендарьПоДокументуПоДням
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныйКалендарьВсегоПоДокументу КАК ПлатежныйКалендарьВсегоПоДокументу
	|		ПО ПлатежныйКалендарьПоДокументуПоДням.СчетНаОплату = ПлатежныйКалендарьВсегоПоДокументу.СчетНаОплату
	|ГДЕ
	|	ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлатежныйКалендарьПоДокументуПоДням.ПериодДень,
	|	ПлатежныйКалендарьПоДокументуПоДням.Валюта,
	|	ПлатежныйКалендарьПоДокументуПоДням.Контрагент,
	|	ПлатежныйКалендарьПоДокументуПоДням.Статья,
	|	ПлатежныйКалендарьПоДокументуПоДням.СчетНаОплату,
	|	ПлатежныйКалендарьПоДокументуПоДням.БанковскийСчетКасса,
	|	ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление,
	|	ПлатежныйКалендарьПоДокументуПоДням.ТипДенежныхСредств,
	|	ПлатежныйКалендарьПоДокументуПоДням.Организация,
	|	ВЫРАЗИТЬ(ПлатежныйКалендарьПоДокументуПоДням.СуммаДокумента КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ПлатежныйКалендарьПоДокументуПоДням.ЭтоПоступление
	|				ТОГДА ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот
	|			ИНАЧЕ -ПлатежныйКалендарьПоДокументуПоДням.СуммаОборот
	|		КОНЕЦ КАК ЧИСЛО(15, 2))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	СчетНаОплату";
	
	РезультатЗапроса = Запрос.Выполнить();
	ОбходПоСчетамНаОплату = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НаборЗаписей = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей();
	
	Пока ОбходПоСчетамНаОплату.Следующий() Цикл
		
		СуммаКРаспределению = ОбходПоСчетамНаОплату.СуммаОплаченоВсегоПоДокументу
							- ОбходПоСчетамНаОплату.СуммаОплаченоПоДокументуНаДату;
		
		ВыборкаДетальныеЗаписи = ОбходПоСчетамНаОплату.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
			НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Дата);
			НаборЗаписей.Отбор.СчетНаОплату.Установить(ВыборкаДетальныеЗаписи.СчетНаОплату);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Валюта = ВыборкаДетальныеЗаписи.Валюта;
			НоваяЗапись.СчетНаОплату = ВыборкаДетальныеЗаписи.СчетНаОплату;
			НоваяЗапись.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
			НоваяЗапись.Статья = ВыборкаДетальныеЗаписи.Статья;
			НоваяЗапись.БанковскийСчетКасса = ВыборкаДетальныеЗаписи.БанковскийСчетКасса;
			НоваяЗапись.ТипДенежныхСредств = ВыборкаДетальныеЗаписи.ТипДенежныхСредств;
			НоваяЗапись.Период = ВыборкаДетальныеЗаписи.Дата;
			НоваяЗапись.Организация = ВыборкаДетальныеЗаписи.Организация;
			НоваяЗапись.ЭтоПоступление = ВыборкаДетальныеЗаписи.ЭтоПоступление;
			НоваяЗапись.СуммаДокумента = ВыборкаДетальныеЗаписи.СуммаДокумента;
			
			СуммаКПоступлениюНаДату =
				ВыборкаДетальныеЗаписи.СуммаЗапланированоПоДокументуНаДату
			  - ВыборкаДетальныеЗаписи.СуммаОплаченоПоДокументуНаДату;
			  
			СуммаКПоступлениюНаДатуРаспределенная =
				СуммаКПоступлениюНаДату
			  - СуммаКРаспределению;
			
			Если СуммаКПоступлениюНаДатуРаспределенная < 0 Тогда
				СуммаКРаспределению = - СуммаКПоступлениюНаДатуРаспределенная;
				НоваяЗапись.СуммаПланОстаток = 0;
			Иначе
				СуммаКРаспределению = 0;
				НоваяЗапись.СуммаПланОстаток = СуммаКПоступлениюНаДатуРаспределенная;
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			НаборЗаписей.Очистить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьГрафикОплатыЗаказов()

// Процедура формирует таблицу счетов (заказов), которые были раньше в движениях
// и которые сейчас будут записаны.
//
Процедура СФормироватьТаблицуСчетовНаОплату()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПлатежныйКалендарь.СчетНаОплату КАК СчетНаОплату
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь КАК ТаблицаПлатежныйКалендарь
	|ГДЕ
	|	ТаблицаПлатежныйКалендарь.Регистратор = &Регистратор
	|	И ТаблицаПлатежныйКалендарь.СчетНаОплату <> НЕОПРЕДЕЛЕНО";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаНовыхСчетов = Выгрузить(, "СчетНаОплату");
	ТаблицаНовыхСчетов.Свернуть("СчетНаОплату");
	
	Для каждого Запись Из ТаблицаНовыхСчетов Цикл
		Если ЗначениеЗаполнено(Запись.СчетНаОплату)
		   И ТаблицаСчетов.Найти(Запись.СчетНаОплату, "СчетНаОплату") = Неопределено Тогда
			ТаблицаСчетов.Добавить().СчетНаОплату = Запись.СчетНаОплату;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ТаблицаСчетов", ТаблицаСчетов);
	
КонецПроцедуры // СФормироватьТаблицуСчетовНаОплату()

// Процедура устанавливает блокировку данных для расчета графика.
//
Процедура УстановитьБлокировкиДанныхДляРасчетаГрафика()
	
	Блокировка = Новый БлокировкаДанных;
	
	// Блокировка регистра для подсчета остатков по календарю.
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПлатежныйКалендарь");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетНаОплату", "СчетНаОплату");
	
	// Блокировка набора для записи.
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ГрафикОплатыЗаказов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетНаОплату", "СчетНаОплату");
	
	// Блокировка набора для записи.
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ГрафикПлатежей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаСчетов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СчетНаОплату", "СчетНаОплату");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры // УстановитьБлокировкиДанныхДляРасчетаГрафика()

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события ПередЗаписью набора записей.
//
Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СФормироватьТаблицуСчетовНаОплату();
	УстановитьБлокировкиДанныхДляРасчетаГрафика();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПриЗаписи набора записей.
//
Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСчетов = ДополнительныеСвойства.ТаблицаСчетов;
	
	Если ТаблицаСчетов.Количество() > 0 Тогда
		РассчитатьПланируемыеПлатежи(ТаблицаСчетов);
		РассчитатьГрафикОплатыЗаказов(ТаблицаСчетов);
	КонецЕсли;
	
	НаборЗаписейГрафикПлатежей = РегистрыСведений.ГрафикПлатежей.СоздатьНаборЗаписей();
	НаборЗаписейГрафикОплатыЗаказов = РегистрыСведений.ГрафикОплатыЗаказов.СоздатьНаборЗаписей();
	
	// По неотработанным заказам нужно очистить движения.
	ТаблицаСчетов.Добавить().СчетНаОплату = Неопределено;
	Если ТаблицаСчетов.Количество() > 0 Тогда
		Для каждого СтрокаТаб Из ТаблицаСчетов Цикл
			НаборЗаписейГрафикПлатежей.Отбор.СчетНаОплату.Установить(СтрокаТаб.СчетНаОплату);
			НаборЗаписейГрафикПлатежей.Записать(Истина);
			НаборЗаписейГрафикПлатежей.Очистить();
			НаборЗаписейГрафикОплатыЗаказов.Отбор.СчетНаОплату.Установить(СтрокаТаб.СчетНаОплату);
			НаборЗаписейГрафикОплатыЗаказов.Записать(Истина);
			НаборЗаписейГрафикОплатыЗаказов.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

#КонецОбласти

#КонецЕсли